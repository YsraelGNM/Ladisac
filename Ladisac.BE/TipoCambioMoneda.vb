'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Moneda))>
<KnownType(GetType(Usuarios))>
Partial Public Class TipoCambioMoneda
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared MON_ID_1 As string = "MON_ID_1"
				public shared MON_ID_0 As string = "MON_ID_0"
				public shared TCA_FECHA As string = "TCA_FECHA"
				public shared TCA_COMPRA As string = "TCA_COMPRA"
				public shared TCA_VENTA As string = "TCA_VENTA"
				public shared USU_ID As string = "USU_ID"
				public shared TCA_FEC_GRAB As string = "TCA_FEC_GRAB"
				public shared TCA_ESTADO As string = "TCA_ESTADO"
		    End Structure
	



    <DataMember()>
    Public Property MON_ID_1() As String
        Get
            Return _mON_ID_1
        End Get
        Set(ByVal value As String)
            If Not Equals(_mON_ID_1, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'MON_ID_1' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If Moneda1 IsNot Nothing AndAlso Not Equals(Moneda1.MON_ID, value) Then
                        Moneda1 = Nothing
                    End If
                End If
                _mON_ID_1 = value
                OnPropertyChanged("MON_ID_1")
            End If
        End Set
    End Property

    Private _mON_ID_1 As String

    <DataMember()>
    Public Property MON_ID_0() As String
        Get
            Return _mON_ID_0
        End Get
        Set(ByVal value As String)
            If Not Equals(_mON_ID_0, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'MON_ID_0' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If Moneda IsNot Nothing AndAlso Not Equals(Moneda.MON_ID, value) Then
                        Moneda = Nothing
                    End If
                End If
                _mON_ID_0 = value
                OnPropertyChanged("MON_ID_0")
            End If
        End Set
    End Property

    Private _mON_ID_0 As String

    <DataMember()>
    Public Property TCA_FECHA() As Date
        Get
            Return _tCA_FECHA
        End Get
        Set(ByVal value As Date)
            If Not Equals(_tCA_FECHA, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'TCA_FECHA' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _tCA_FECHA = value
                OnPropertyChanged("TCA_FECHA")
            End If
        End Set
    End Property

    Private _tCA_FECHA As Date

    <DataMember()>
    Public Property TCA_COMPRA() As Decimal
        Get
            Return _tCA_COMPRA
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_tCA_COMPRA, value) Then
                _tCA_COMPRA = value
                OnPropertyChanged("TCA_COMPRA")
            End If
        End Set
    End Property

    Private _tCA_COMPRA As Decimal

    <DataMember()>
    Public Property TCA_VENTA() As Decimal
        Get
            Return _tCA_VENTA
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_tCA_VENTA, value) Then
                _tCA_VENTA = value
                OnPropertyChanged("TCA_VENTA")
            End If
        End Set
    End Property

    Private _tCA_VENTA As Decimal

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property TCA_FEC_GRAB() As Date
        Get
            Return _tCA_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_tCA_FEC_GRAB, value) Then
                _tCA_FEC_GRAB = value
                OnPropertyChanged("TCA_FEC_GRAB")
            End If
        End Set
    End Property

    Private _tCA_FEC_GRAB As Date

    <DataMember()>
    Public Property TCA_ESTADO() As Boolean
        Get
            Return _tCA_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_tCA_ESTADO, value) Then
                _tCA_ESTADO = value
                OnPropertyChanged("TCA_ESTADO")
            End If
        End Set
    End Property

    Private _tCA_ESTADO As Boolean

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Moneda() As Moneda
        Get
            Return _moneda
        End Get
        Set(ByVal value As Moneda)
            If _moneda IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(MON_ID_0, value.MON_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As Moneda = _moneda
                _moneda = value
                FixupMoneda(previousValue)
                OnNavigationPropertyChanged("Moneda")
            End If
        End Set
    End Property

    Private _moneda As Moneda


    <DataMember()>
    Public Property Moneda1() As Moneda
        Get
            Return _moneda1
        End Get
        Set(ByVal value As Moneda)
            If _moneda1 IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(MON_ID_1, value.MON_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As Moneda = _moneda1
                _moneda1 = value
                FixupMoneda1(previousValue)
                OnNavigationPropertyChanged("Moneda1")
            End If
        End Set
    End Property

    Private _moneda1 As Moneda


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociación que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesará notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Moneda = Nothing
        Moneda1 = Nothing
        Usuarios = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupMoneda(ByVal previousValue As Moneda)
        ' Este es el extremo dependiente en una asociación que realiza eliminaciones en cascada.
        ' Actualizar la escucha de eventos del extremo principal para que se refiera al nuevo extremo dependiente.
        ' Esta es una relación unidireccional desde el extremo dependiente al extremo principal por lo que el extremo dependiente es
        ' responsable de administrar el controlador de eventos de eliminación en cascada. En el resto de los casos, será el extremo principal el que lo administrará.
        If previousValue IsNot Nothing Then
            RemoveHandler previousValue.ChangeTracker.ObjectStateChanging, AddressOf HandleCascadeDelete
        End If

        If Moneda IsNot Nothing Then
            AddHandler Moneda.ChangeTracker.ObjectStateChanging, AddressOf HandleCascadeDelete
        End If

        If IsDeserializing Then
            Return
        End If

        If Moneda IsNot Nothing Then
            MON_ID_0 = Moneda.MON_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Moneda") AndAlso
                ChangeTracker.OriginalValues("Moneda") Is Moneda Then
                ChangeTracker.OriginalValues.Remove("Moneda")
            Else
                ChangeTracker.RecordOriginalValue("Moneda", previousValue)
                ' Este es el extremo dependiente de una asociación de identificación, por lo que se debe eliminar cuando la relación se
                ' elimine. Si el estado actual es agregado, la relación se puede modificar sin eliminar el extremo dependiente.
                ' Esta es una relación unidireccional desde el extremo dependiente al extremo principal por lo que el extremo dependiente es
                ' responsable de administrar en cascada la eliminación. En el resto de los casos, será el extremo principal el que lo administre.
                If previousValue IsNot Nothing AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Me.MarkAsDeleted()
                End If
            End If
            If Moneda IsNot Nothing AndAlso Not Moneda.ChangeTracker.ChangeTrackingEnabled Then
                Moneda.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupMoneda1(ByVal previousValue As Moneda)
        ' Este es el extremo dependiente en una asociación que realiza eliminaciones en cascada.
        ' Actualizar la escucha de eventos del extremo principal para que se refiera al nuevo extremo dependiente.
        ' Esta es una relación unidireccional desde el extremo dependiente al extremo principal por lo que el extremo dependiente es
        ' responsable de administrar el controlador de eventos de eliminación en cascada. En el resto de los casos, será el extremo principal el que lo administrará.
        If previousValue IsNot Nothing Then
            RemoveHandler previousValue.ChangeTracker.ObjectStateChanging, AddressOf HandleCascadeDelete
        End If

        If Moneda1 IsNot Nothing Then
            AddHandler Moneda1.ChangeTracker.ObjectStateChanging, AddressOf HandleCascadeDelete
        End If

        If IsDeserializing Then
            Return
        End If

        If Moneda1 IsNot Nothing Then
            MON_ID_1 = Moneda1.MON_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Moneda1") AndAlso
                ChangeTracker.OriginalValues("Moneda1") Is Moneda1 Then
                ChangeTracker.OriginalValues.Remove("Moneda1")
            Else
                ChangeTracker.RecordOriginalValue("Moneda1", previousValue)
                ' Este es el extremo dependiente de una asociación de identificación, por lo que se debe eliminar cuando la relación se
                ' elimine. Si el estado actual es agregado, la relación se puede modificar sin eliminar el extremo dependiente.
                ' Esta es una relación unidireccional desde el extremo dependiente al extremo principal por lo que el extremo dependiente es
                ' responsable de administrar en cascada la eliminación. En el resto de los casos, será el extremo principal el que lo administre.
                If previousValue IsNot Nothing AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Me.MarkAsDeleted()
                End If
            End If
            If Moneda1 IsNot Nothing AndAlso Not Moneda1.ChangeTracker.ChangeTrackingEnabled Then
                Moneda1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
