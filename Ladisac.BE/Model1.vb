'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

' Clase auxiliar que captura gran parte del trabajo de seguimiento de cambios que se debe realizar
' para las entidades de seguimiento propio.
<DataContract(IsReference:=True)>
Public Class ObjectChangeTracker
#Region "Campos"

    Private _isDeserializing As Boolean
    Private _objectState As ObjectState = ObjectState.Added
    Private _originalValues As OriginalValuesDictionary
    Private _extendedProperties As ExtendedPropertiesDictionary
    Private _changeTrackingEnabled As Boolean
    Private _objectsAddedToCollections As New ObjectsAddedToCollectionProperties()
    Private _objectsRemovedFromCollections As New ObjectsRemovedFromCollectionProperties()

#End Region

#Region "Eventos"

    Public Event ObjectStateChanging As EventHandler(Of ObjectStateChangingEventArgs)

#End Region

    Protected Overridable Sub OnObjectStateChanging(ByVal newState As ObjectState)
        RaiseEvent ObjectStateChanging(Me, New ObjectStateChangingEventArgs With {.NewState = newState})
    End Sub

    <DataMember()>
    Public Property State() As ObjectState
        Get
            Return _objectState
        End Get
        Set(ByVal value As ObjectState)
            If _isDeserializing Or _changeTrackingEnabled Then
                OnObjectStateChanging(value)
                _objectState = value
            End If
        End Set
    End Property

    Public Property ChangeTrackingEnabled() As Boolean
        Get
            Return _changeTrackingEnabled
        End Get
        Set(ByVal value As Boolean)
            _changeTrackingEnabled = value
        End Set
    End Property


    ' Devuelve los objetos quitados a las propiedades con valor de la colección que han cambiado.
    <DataMember()>
    Public ReadOnly Property ObjectsRemovedFromCollectionProperties() As ObjectsRemovedFromCollectionProperties
        Get
            If _objectsRemovedFromCollections Is Nothing Then
                _objectsRemovedFromCollections = New ObjectsRemovedFromCollectionProperties()
            End If
            Return _objectsRemovedFromCollections
        End Get
    End Property

    ' Devuelve los valores originales de las propiedades que han cambiado.
    <DataMember()>
    Public ReadOnly Property OriginalValues() As OriginalValuesDictionary
        Get
            If _originalValues Is Nothing Then
                _originalValues = New OriginalValuesDictionary()
            End If
            Return _originalValues
        End Get
    End Property

    ' Devuelve los valores de propiedad extendidos.
    ' Se incluyen los valores de clave para las asociaciones independientes que se necesitan para el
    ' modelo de simultaneidad en Entity Framework
    <DataMember()>
    Public ReadOnly Property ExtendedProperties() As ExtendedPropertiesDictionary
        Get
            If _extendedProperties Is Nothing Then
                _extendedProperties = New ExtendedPropertiesDictionary()
            End If
            Return _extendedProperties
        End Get
    End Property

    ' Devuelve los objetos agregados a las propiedades con valor de la colección que han cambiado.
    <DataMember()>
    Public ReadOnly Property ObjectsAddedToCollectionProperties() As ObjectsAddedToCollectionProperties
        Get
            If _objectsAddedToCollections Is Nothing Then
                _objectsAddedToCollections = New ObjectsAddedToCollectionProperties()
            End If
            Return _objectsAddedToCollections
        End Get
    End Property

#Region "MethodsForChangeTrackingOnClient"

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        _isDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        _isDeserializing = False
    End Sub

    ' Restablece ObjectChangeTracker al estado Unchanged y
    ' borra los valores originales, así como el registro de cambios
    ' en las propiedades de la colección
    Public Sub AcceptChanges()
        OnObjectStateChanging(ObjectState.Unchanged)
        OriginalValues.Clear()
        ObjectsAddedToCollectionProperties.Clear()
        ObjectsRemovedFromCollectionProperties.Clear()
        ChangeTrackingEnabled = True
        _objectState = ObjectState.Unchanged
    End Sub

    ' Captura el valor original de una propiedad que está cambiando.
    Friend Sub RecordOriginalValue(ByVal propertyName As String, ByVal value As Object)
        If _changeTrackingEnabled AndAlso _objectState <> ObjectState.Added Then
            If Not Me.OriginalValues.ContainsKey(propertyName) Then
                OriginalValues(propertyName) = value
            End If
        End If
    End Sub

    ' Registra una adición a las propiedades con valore de la colección en las entidades SelfTracking.
    Friend Sub RecordAdditionToCollectionProperties(ByVal propertyName As String, ByVal value As Object)
        If _changeTrackingEnabled Then
            ' Agregar la entidad después de eliminarla, no se debe hacer nada aquí
            If Me.ObjectsRemovedFromCollectionProperties.ContainsKey(propertyName) AndAlso Me.ObjectsRemovedFromCollectionProperties(propertyName).Contains(value) Then
                Me.ObjectsRemovedFromCollectionProperties(propertyName).Remove(value)
                If Me.ObjectsRemovedFromCollectionProperties(propertyName).Count = 0 Then
                    Me.ObjectsRemovedFromCollectionProperties.Remove(propertyName)
                End If
                Exit Sub
            End If

            If Not Me.ObjectsAddedToCollectionProperties.ContainsKey(propertyName) Then
                ObjectsAddedToCollectionProperties(propertyName) = New ObjectList()
                ObjectsAddedToCollectionProperties(propertyName).Add(value)
            Else
                ObjectsAddedToCollectionProperties(propertyName).Add(value)
            End If
        End If
    End Sub

    ' Registra una eliminación a las propiedades con valor de la colección en las entidades SelfTracking.
    Friend Sub RecordRemovalFromCollectionProperties(ByVal propertyName As String, ByVal value As Object)
        If _changeTrackingEnabled Then
            ' Eliminar la entidad después de agregarla, no se debe hacer nada aquí
            If Me.ObjectsAddedToCollectionProperties.ContainsKey(propertyName) AndAlso Me.ObjectsAddedToCollectionProperties(propertyName).Contains(value) Then
                Me.ObjectsAddedToCollectionProperties(propertyName).Remove(value)
                If Me.ObjectsAddedToCollectionProperties(propertyName).Count = 0 Then
                    Me.ObjectsAddedToCollectionProperties.Remove(propertyName)
                End If
                Exit Sub
            End If

            If Not Me.ObjectsRemovedFromCollectionProperties.ContainsKey(propertyName) Then
                ObjectsRemovedFromCollectionProperties(propertyName) = New ObjectList()
                ObjectsRemovedFromCollectionProperties(propertyName).Add(value)
            Else
                If Not ObjectsRemovedFromCollectionProperties(propertyName).Contains(value) Then
                    ObjectsRemovedFromCollectionProperties(propertyName).Add(value)
                End If
            End If
        End If
    End Sub
#End Region
End Class

#Region "EnumForObjectState"
<Flags()>
Public Enum ObjectState
    Unchanged = &H1
    Added = &H2
    Modified = &H4
    Deleted = &H8
End Enum
#End Region

<CollectionDataContract(Name:="ObjectsAddedToCollectionProperties", ItemName:="AddedObjectsForProperty", KeyName:="CollectionPropertyName", ValueName:="AddedObjects")>
Public Class ObjectsAddedToCollectionProperties
    Inherits Dictionary(Of String, ObjectList)
End Class

<CollectionDataContract(Name:="ObjectsRemovedFromCollectionProperties", ItemName:="DeletedObjectsForProperty", KeyName:="CollectionPropertyName", ValueName:="DeletedObjects")>
Public Class ObjectsRemovedFromCollectionProperties
    Inherits Dictionary(Of String, ObjectList)
End Class

<CollectionDataContract(Name:="OriginalValuesDictionary", ItemName:="OriginalValueForProperty", KeyName:="ReferencePropertyName", ValueName:="OriginalValue")>
Public Class OriginalValuesDictionary
    Inherits Dictionary(Of String, Object)
End Class

<CollectionDataContract(Name:="ExtendedPropertiesDictionary", ItemName:="ExtendedProperties", KeyName:="Name", ValueName:="ExtendedProperty")>
Public Class ExtendedPropertiesDictionary
    Inherits Dictionary(Of String, Object)
End Class

<CollectionDataContract(ItemName:="ObjectValue")>
Public Class ObjectList
    Inherits List(Of Object)
End Class
' La interfaz se implementa mediante las entidades de seguimiento propio que generará EF.
' Habrá un adaptador que convierte esta interfaz en la que espera EF.
' El adaptador estará en el servidor.
Public Interface IObjectWithChangeTracker
    ' Tiene toda la información de seguimiento de cambios para el subgráfico de un determinado objeto.
    Property ChangeTracker() As ObjectChangeTracker
End Interface

Public Class ObjectStateChangingEventArgs
    Inherits EventArgs
    Private _NewState As ObjectState
    Public Property NewState() As ObjectState
        Get
            Return _NewState
        End Get
        Set(ByVal value As ObjectState)
            _NewState = value
        End Set
    End Property
End Class

Public Module ObjectWithChangeTrackerExtensions
    <Extension()>
    Public Function MarkAsDeleted(Of T As IObjectWithChangeTracker)(ByVal trackingItem As T) As T
        If trackingItem Is Nothing Then
            Throw New ArgumentNullException("trackingItem")
        End If

        trackingItem.ChangeTracker.ChangeTrackingEnabled = True
        trackingItem.ChangeTracker.State = ObjectState.Deleted
        Return trackingItem
    End Function

    <Extension()>
    Public Function MarkAsAdded(Of T As IObjectWithChangeTracker)(ByVal trackingItem As T) As T
        If trackingItem Is Nothing Then
            Throw New ArgumentNullException("trackingItem")
        End If

        trackingItem.ChangeTracker.ChangeTrackingEnabled = True
        trackingItem.ChangeTracker.State = ObjectState.Added
        Return trackingItem
    End Function

    <Extension()>
    Public Function MarkAsModified(Of T As IObjectWithChangeTracker)(ByVal trackingItem As T) As T
        If trackingItem Is Nothing Then
            Throw New ArgumentNullException("trackingItem")
        End If

        trackingItem.ChangeTracker.ChangeTrackingEnabled = True
        trackingItem.ChangeTracker.State = ObjectState.Modified
        Return trackingItem
    End Function

    <Extension()>
    Public Function MarkAsUnchanged(Of T As IObjectWithChangeTracker)(ByVal trackingItem As T) As T
        If trackingItem Is Nothing Then
            Throw New ArgumentNullException("trackingItem")
        End If

        trackingItem.ChangeTracker.ChangeTrackingEnabled = True
        trackingItem.ChangeTracker.State = ObjectState.Unchanged
        Return trackingItem
    End Function

    <Extension()>
    Public Sub StartTracking(ByVal trackingItem As IObjectWithChangeTracker)
        If trackingItem Is Nothing Then
            Throw New ArgumentNullException("trackingItem")
        End If

        trackingItem.ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    <Extension()>
    Public Sub StopTracking(ByVal trackingItem As IObjectWithChangeTracker)
        If trackingItem Is Nothing Then
            Throw New ArgumentNullException("trackingItem")
        End If

        trackingItem.ChangeTracker.ChangeTrackingEnabled = False
    End Sub

    <Extension()>
    Public Sub AcceptChanges(ByVal trackingItem As IObjectWithChangeTracker)
        If trackingItem Is Nothing Then
            Throw New ArgumentNullException("trackingItem")
        End If

        trackingItem.ChangeTracker.AcceptChanges()
    End Sub
End Module

' Un elemento System.Collections.ObjectModel.ObservableCollection que genera
' notificaciones de eliminación de elemento individuales al borrar e impide la adición de duplicados.
Public Class TrackableCollection(Of T)
    Inherits ObservableCollection(Of T)
    Protected Overrides Sub ClearItems()
        Dim items As New List(Of T)(Me)
        items.ForEach(Function(t) Remove(t))
    End Sub

    Protected Overloads Overrides Sub InsertItem(ByVal index As Integer, ByVal item As T)
        If Not Me.Contains(item) Then
            MyBase.InsertItem(index, item)
        End If
    End Sub
End Class

' Una interfaz que proporciona un evento que se activa cuando cambian las propiedades complejas.
' Los cambios pueden ser el reemplazo de una propiedad compleja por una nueva instancia de tipo complejo o
' un cambio en una propiedad escalar en una instancia de tipo complejo.
Public Interface INotifyComplexPropertyChanging
    Event ComplexPropertyChanging As EventHandler
End Interface
Public Module EqualityComparer
    ' Método auxiliar para determinar si dos matrices de bytes son el mismo valor incluso si son referencias de objeto diferentes
    Public Function BinaryEquals(ByVal binaryValue1 As Object, ByVal binaryValue2 As Object) As Boolean
        If Object.ReferenceEquals(binaryValue1, binaryValue2) Then
            Return True
        End If

        Dim array1 As Byte() = TryCast(binaryValue1, Byte())
        Dim array2 As Byte() = TryCast(binaryValue2, Byte())

        If array1 IsNot Nothing AndAlso array2 IsNot Nothing Then
            If array1.Length <> array2.Length Then
                Return False
            End If

            For i As Integer = 0 To array1.Length - 1
                If array1(i) <> array2(i) Then
                    Return False
                End If
            Next

            Return True
        End If

        Return False
    End Function
End Module
