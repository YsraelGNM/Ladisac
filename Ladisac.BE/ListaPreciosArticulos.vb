'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(DescuentoIncrementoTipoVentaPersonas))>
<KnownType(GetType(DetalleListaPrecios))>
<KnownType(GetType(Moneda))>
<KnownType(GetType(PuntoVenta))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(Personas))>
<KnownType(GetType(Documentos))>
<KnownType(GetType(ListaPreciosArticulos))>
<KnownType(GetType(SolicitudAjustePrecioDetalle))>
Partial Public Class ListaPreciosArticulos
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared LPR_ID As string = "LPR_ID"
				public shared LPR_DESCRIPCION As string = "LPR_DESCRIPCION"
				public shared LPR_PRINCIPAL As string = "LPR_PRINCIPAL"
				public shared MON_ID As string = "MON_ID"
				public shared USU_ID As string = "USU_ID"
				public shared LPR_FEC_GRAB As string = "LPR_FEC_GRAB"
				public shared LPR_ESTADO As string = "LPR_ESTADO"
				public shared LPR_CONTROL As string = "LPR_CONTROL"
				public shared PER_ID As string = "PER_ID"
				public shared LPR_ID_ADJ As string = "LPR_ID_ADJ"
		    End Structure
	



    <DataMember()>
    Public Property LPR_ID() As String
        Get
            Return _lPR_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_lPR_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'LPR_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _lPR_ID = value
                OnPropertyChanged("LPR_ID")
            End If
        End Set
    End Property

    Private _lPR_ID As String

    <DataMember()>
    Public Property LPR_DESCRIPCION() As String
        Get
            Return _lPR_DESCRIPCION
        End Get
        Set(ByVal value As String)
            If Not Equals(_lPR_DESCRIPCION, value) Then
                _lPR_DESCRIPCION = value
                OnPropertyChanged("LPR_DESCRIPCION")
            End If
        End Set
    End Property

    Private _lPR_DESCRIPCION As String

    <DataMember()>
    Public Property LPR_PRINCIPAL() As Boolean
        Get
            Return _lPR_PRINCIPAL
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_lPR_PRINCIPAL, value) Then
                _lPR_PRINCIPAL = value
                OnPropertyChanged("LPR_PRINCIPAL")
            End If
        End Set
    End Property

    Private _lPR_PRINCIPAL As Boolean

    <DataMember()>
    Public Property MON_ID() As String
        Get
            Return _mON_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_mON_ID, value) Then
                ChangeTracker.RecordOriginalValue("MON_ID", _mON_ID)
                If Not IsDeserializing Then
                    If Moneda IsNot Nothing AndAlso Not Equals(Moneda.MON_ID, value) Then
                        Moneda = Nothing
                    End If
                End If
                _mON_ID = value
                OnPropertyChanged("MON_ID")
            End If
        End Set
    End Property

    Private _mON_ID As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property LPR_FEC_GRAB() As Date
        Get
            Return _lPR_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_lPR_FEC_GRAB, value) Then
                _lPR_FEC_GRAB = value
                OnPropertyChanged("LPR_FEC_GRAB")
            End If
        End Set
    End Property

    Private _lPR_FEC_GRAB As Date

    <DataMember()>
    Public Property LPR_ESTADO() As Boolean
        Get
            Return _lPR_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_lPR_ESTADO, value) Then
                _lPR_ESTADO = value
                OnPropertyChanged("LPR_ESTADO")
            End If
        End Set
    End Property

    Private _lPR_ESTADO As Boolean

    <DataMember()>
    Public Property LPR_CONTROL() As Boolean
        Get
            Return _lPR_CONTROL
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_lPR_CONTROL, value) Then
                _lPR_CONTROL = value
                OnPropertyChanged("LPR_CONTROL")
            End If
        End Set
    End Property

    Private _lPR_CONTROL As Boolean

    <DataMember()>
    Public Property PER_ID() As String
        Get
            Return _pER_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID", _pER_ID)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID = value
                OnPropertyChanged("PER_ID")
            End If
        End Set
    End Property

    Private _pER_ID As String

    <DataMember()>
    Public Property LPR_ID_ADJ() As String
        Get
            Return _lPR_ID_ADJ
        End Get
        Set(ByVal value As String)
            If Not Equals(_lPR_ID_ADJ, value) Then
                ChangeTracker.RecordOriginalValue("LPR_ID_ADJ", _lPR_ID_ADJ)
                If Not IsDeserializing Then
                    If ListaPreciosArticulos2 IsNot Nothing AndAlso Not Equals(ListaPreciosArticulos2.LPR_ID, value) Then
                        ListaPreciosArticulos2 = Nothing
                    End If
                End If
                _lPR_ID_ADJ = value
                OnPropertyChanged("LPR_ID_ADJ")
            End If
        End Set
    End Property

    Private _lPR_ID_ADJ As String

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property DescuentoIncrementoTipoVentaPersonas() As TrackableCollection(Of DescuentoIncrementoTipoVentaPersonas)
        Get
            If _descuentoIncrementoTipoVentaPersonas Is Nothing Then
                _descuentoIncrementoTipoVentaPersonas = New TrackableCollection(Of DescuentoIncrementoTipoVentaPersonas)
                AddHandler _descuentoIncrementoTipoVentaPersonas.CollectionChanged, AddressOf FixupDescuentoIncrementoTipoVentaPersonas
            End If
            Return _descuentoIncrementoTipoVentaPersonas
        End Get
        Set(ByVal value As TrackableCollection(Of DescuentoIncrementoTipoVentaPersonas))
            If Not Object.ReferenceEquals(_descuentoIncrementoTipoVentaPersonas, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _descuentoIncrementoTipoVentaPersonas IsNot Nothing Then
                    RemoveHandler _descuentoIncrementoTipoVentaPersonas.CollectionChanged, AddressOf FixupDescuentoIncrementoTipoVentaPersonas
                End If
                _descuentoIncrementoTipoVentaPersonas = value
                If _descuentoIncrementoTipoVentaPersonas IsNot Nothing Then
                    AddHandler _descuentoIncrementoTipoVentaPersonas.CollectionChanged, AddressOf FixupDescuentoIncrementoTipoVentaPersonas
                End If
                OnNavigationPropertyChanged("DescuentoIncrementoTipoVentaPersonas")
            End If
        End Set
    End Property

    Private _descuentoIncrementoTipoVentaPersonas As TrackableCollection(Of DescuentoIncrementoTipoVentaPersonas)

    <DataMember()>
    Public Property DetalleListaPrecios() As TrackableCollection(Of DetalleListaPrecios)
        Get
            If _detalleListaPrecios Is Nothing Then
                _detalleListaPrecios = New TrackableCollection(Of DetalleListaPrecios)
                AddHandler _detalleListaPrecios.CollectionChanged, AddressOf FixupDetalleListaPrecios
            End If
            Return _detalleListaPrecios
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleListaPrecios))
            If Not Object.ReferenceEquals(_detalleListaPrecios, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleListaPrecios IsNot Nothing Then
                    RemoveHandler _detalleListaPrecios.CollectionChanged, AddressOf FixupDetalleListaPrecios
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminación en cascada para aquellas entidades de la colección actual.
                    For Each item As DetalleListaPrecios In _detalleListaPrecios
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detalleListaPrecios = value
                If _detalleListaPrecios IsNot Nothing Then
                    AddHandler _detalleListaPrecios.CollectionChanged, AddressOf FixupDetalleListaPrecios
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                    For Each item As DetalleListaPrecios In _detalleListaPrecios
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetalleListaPrecios")
            End If
        End Set
    End Property

    Private _detalleListaPrecios As TrackableCollection(Of DetalleListaPrecios)

    <DataMember()>
    Public Property Moneda() As Moneda
        Get
            Return _moneda
        End Get
        Set(ByVal value As Moneda)
            If _moneda IsNot value Then
                Dim previousValue As Moneda = _moneda
                _moneda = value
                FixupMoneda(previousValue)
                OnNavigationPropertyChanged("Moneda")
            End If
        End Set
    End Property

    Private _moneda As Moneda


    <DataMember()>
    Public Property PuntoVenta() As TrackableCollection(Of PuntoVenta)
        Get
            If _puntoVenta Is Nothing Then
                _puntoVenta = New TrackableCollection(Of PuntoVenta)
                AddHandler _puntoVenta.CollectionChanged, AddressOf FixupPuntoVenta
            End If
            Return _puntoVenta
        End Get
        Set(ByVal value As TrackableCollection(Of PuntoVenta))
            If Not Object.ReferenceEquals(_puntoVenta, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _puntoVenta IsNot Nothing Then
                    RemoveHandler _puntoVenta.CollectionChanged, AddressOf FixupPuntoVenta
                End If
                _puntoVenta = value
                If _puntoVenta IsNot Nothing Then
                    AddHandler _puntoVenta.CollectionChanged, AddressOf FixupPuntoVenta
                End If
                OnNavigationPropertyChanged("PuntoVenta")
            End If
        End Set
    End Property

    Private _puntoVenta As TrackableCollection(Of PuntoVenta)

    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property Documentos() As TrackableCollection(Of Documentos)
        Get
            If _documentos Is Nothing Then
                _documentos = New TrackableCollection(Of Documentos)
                AddHandler _documentos.CollectionChanged, AddressOf FixupDocumentos
            End If
            Return _documentos
        End Get
        Set(ByVal value As TrackableCollection(Of Documentos))
            If Not Object.ReferenceEquals(_documentos, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _documentos IsNot Nothing Then
                    RemoveHandler _documentos.CollectionChanged, AddressOf FixupDocumentos
                End If
                _documentos = value
                If _documentos IsNot Nothing Then
                    AddHandler _documentos.CollectionChanged, AddressOf FixupDocumentos
                End If
                OnNavigationPropertyChanged("Documentos")
            End If
        End Set
    End Property

    Private _documentos As TrackableCollection(Of Documentos)

    <DataMember()>
    Public Property ListaPreciosArticulos1() As TrackableCollection(Of ListaPreciosArticulos)
        Get
            If _listaPreciosArticulos1 Is Nothing Then
                _listaPreciosArticulos1 = New TrackableCollection(Of ListaPreciosArticulos)
                AddHandler _listaPreciosArticulos1.CollectionChanged, AddressOf FixupListaPreciosArticulos1
            End If
            Return _listaPreciosArticulos1
        End Get
        Set(ByVal value As TrackableCollection(Of ListaPreciosArticulos))
            If Not Object.ReferenceEquals(_listaPreciosArticulos1, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _listaPreciosArticulos1 IsNot Nothing Then
                    RemoveHandler _listaPreciosArticulos1.CollectionChanged, AddressOf FixupListaPreciosArticulos1
                End If
                _listaPreciosArticulos1 = value
                If _listaPreciosArticulos1 IsNot Nothing Then
                    AddHandler _listaPreciosArticulos1.CollectionChanged, AddressOf FixupListaPreciosArticulos1
                End If
                OnNavigationPropertyChanged("ListaPreciosArticulos1")
            End If
        End Set
    End Property

    Private _listaPreciosArticulos1 As TrackableCollection(Of ListaPreciosArticulos)

    <DataMember()>
    Public Property ListaPreciosArticulos2() As ListaPreciosArticulos
        Get
            Return _listaPreciosArticulos2
        End Get
        Set(ByVal value As ListaPreciosArticulos)
            If _listaPreciosArticulos2 IsNot value Then
                Dim previousValue As ListaPreciosArticulos = _listaPreciosArticulos2
                _listaPreciosArticulos2 = value
                FixupListaPreciosArticulos2(previousValue)
                OnNavigationPropertyChanged("ListaPreciosArticulos2")
            End If
        End Set
    End Property

    Private _listaPreciosArticulos2 As ListaPreciosArticulos


    <DataMember()>
    Public Property SolicitudAjustePrecioDetalle() As TrackableCollection(Of SolicitudAjustePrecioDetalle)
        Get
            If _solicitudAjustePrecioDetalle Is Nothing Then
                _solicitudAjustePrecioDetalle = New TrackableCollection(Of SolicitudAjustePrecioDetalle)
                AddHandler _solicitudAjustePrecioDetalle.CollectionChanged, AddressOf FixupSolicitudAjustePrecioDetalle
            End If
            Return _solicitudAjustePrecioDetalle
        End Get
        Set(ByVal value As TrackableCollection(Of SolicitudAjustePrecioDetalle))
            If Not Object.ReferenceEquals(_solicitudAjustePrecioDetalle, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _solicitudAjustePrecioDetalle IsNot Nothing Then
                    RemoveHandler _solicitudAjustePrecioDetalle.CollectionChanged, AddressOf FixupSolicitudAjustePrecioDetalle
                End If
                _solicitudAjustePrecioDetalle = value
                If _solicitudAjustePrecioDetalle IsNot Nothing Then
                    AddHandler _solicitudAjustePrecioDetalle.CollectionChanged, AddressOf FixupSolicitudAjustePrecioDetalle
                End If
                OnNavigationPropertyChanged("SolicitudAjustePrecioDetalle")
            End If
        End Set
    End Property

    Private _solicitudAjustePrecioDetalle As TrackableCollection(Of SolicitudAjustePrecioDetalle)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        DescuentoIncrementoTipoVentaPersonas.Clear()
        DetalleListaPrecios.Clear()
        Moneda = Nothing
        PuntoVenta.Clear()
        Usuarios = Nothing
        Personas = Nothing
        Documentos.Clear()
        ListaPreciosArticulos1.Clear()
        ListaPreciosArticulos2 = Nothing
        SolicitudAjustePrecioDetalle.Clear()
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupMoneda(ByVal previousValue As Moneda)
        If IsDeserializing Then
            Return
        End If

        If Moneda IsNot Nothing Then
            MON_ID = Moneda.MON_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Moneda") AndAlso
                ChangeTracker.OriginalValues("Moneda") Is Moneda Then
                ChangeTracker.OriginalValues.Remove("Moneda")
            Else
                ChangeTracker.RecordOriginalValue("Moneda", previousValue)
            End If
            If Moneda IsNot Nothing AndAlso Not Moneda.ChangeTracker.ChangeTrackingEnabled Then
                Moneda.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ListaPreciosArticulos.Contains(Me) Then
            previousValue.ListaPreciosArticulos.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.ListaPreciosArticulos.Contains(Me) Then
                Personas.ListaPreciosArticulos.Add(Me)
            End If

            PER_ID = Personas.PER_ID
        ElseIf Not skipKeys Then
            PER_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupListaPreciosArticulos2(ByVal previousValue As ListaPreciosArticulos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ListaPreciosArticulos1.Contains(Me) Then
            previousValue.ListaPreciosArticulos1.Remove(Me)
        End If

        If ListaPreciosArticulos2 IsNot Nothing Then
            If Not ListaPreciosArticulos2.ListaPreciosArticulos1.Contains(Me) Then
                ListaPreciosArticulos2.ListaPreciosArticulos1.Add(Me)
            End If

            LPR_ID_ADJ = ListaPreciosArticulos2.LPR_ID
        ElseIf Not skipKeys Then
            LPR_ID_ADJ = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("ListaPreciosArticulos2") AndAlso
                ChangeTracker.OriginalValues("ListaPreciosArticulos2") Is ListaPreciosArticulos2 Then
                ChangeTracker.OriginalValues.Remove("ListaPreciosArticulos2")
            Else
                ChangeTracker.RecordOriginalValue("ListaPreciosArticulos2", previousValue)
            End If
            If ListaPreciosArticulos2 IsNot Nothing AndAlso Not ListaPreciosArticulos2.ChangeTracker.ChangeTrackingEnabled Then
                ListaPreciosArticulos2.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDescuentoIncrementoTipoVentaPersonas(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DescuentoIncrementoTipoVentaPersonas In e.NewItems
                item.ListaPreciosArticulos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DescuentoIncrementoTipoVentaPersonas", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DescuentoIncrementoTipoVentaPersonas In e.OldItems
                If ReferenceEquals(item.ListaPreciosArticulos, Me) Then
                    item.ListaPreciosArticulos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DescuentoIncrementoTipoVentaPersonas", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupDetalleListaPrecios(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleListaPrecios In e.NewItems
                item.ListaPreciosArticulos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleListaPrecios", item)
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleListaPrecios In e.OldItems
                If ReferenceEquals(item.ListaPreciosArticulos, Me) Then
                    item.ListaPreciosArticulos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleListaPrecios", item)
                    ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                    ' permite que la relación se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupPuntoVenta(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PuntoVenta In e.NewItems
                item.ListaPreciosArticulos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PuntoVenta", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PuntoVenta In e.OldItems
                If ReferenceEquals(item.ListaPreciosArticulos, Me) Then
                    item.ListaPreciosArticulos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PuntoVenta", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupDocumentos(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As Documentos In e.NewItems
                item.ListaPreciosArticulos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("Documentos", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As Documentos In e.OldItems
                If ReferenceEquals(item.ListaPreciosArticulos, Me) Then
                    item.ListaPreciosArticulos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("Documentos", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupListaPreciosArticulos1(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As ListaPreciosArticulos In e.NewItems
                item.ListaPreciosArticulos2 = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("ListaPreciosArticulos1", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As ListaPreciosArticulos In e.OldItems
                If ReferenceEquals(item.ListaPreciosArticulos2, Me) Then
                    item.ListaPreciosArticulos2 = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("ListaPreciosArticulos1", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupSolicitudAjustePrecioDetalle(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As SolicitudAjustePrecioDetalle In e.NewItems
                item.ListaPreciosArticulos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("SolicitudAjustePrecioDetalle", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As SolicitudAjustePrecioDetalle In e.OldItems
                If ReferenceEquals(item.ListaPreciosArticulos, Me) Then
                    item.ListaPreciosArticulos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("SolicitudAjustePrecioDetalle", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
