'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Personas))>
<KnownType(GetType(TipoVenta))>
<KnownType(GetType(SolicitudCompraDetalle))>
Partial Public Class SolicitudCompra
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared SOC_ID As string = "SOC_ID"
				public shared PER_ID_SOLICITADO As string = "PER_ID_SOLICITADO"
				public shared SOC_FECHA As string = "SOC_FECHA"
				public shared SOC_NRO_COTIZACION As string = "SOC_NRO_COTIZACION"
				public shared TIV_ID_PAGO As string = "TIV_ID_PAGO"
				public shared MON_ID As string = "MON_ID"
				public shared SOC_FECHAENTREGA As string = "SOC_FECHAENTREGA"
				public shared SOC_ENTREGA As string = "SOC_ENTREGA"
				public shared SOC_OBSERVACIONES As string = "SOC_OBSERVACIONES"
				public shared USU_ID As string = "USU_ID"
				public shared SOC_FEC_GRAB As string = "SOC_FEC_GRAB"
				public shared SOC_ESTADO As string = "SOC_ESTADO"
		    End Structure
	



    <DataMember()>
    Public Property SOC_ID() As Integer
        Get
            Return _sOC_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_sOC_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'SOC_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _sOC_ID = value
                OnPropertyChanged("SOC_ID")
            End If
        End Set
    End Property

    Private _sOC_ID As Integer

    <DataMember()>
    Public Property PER_ID_SOLICITADO() As String
        Get
            Return _pER_ID_SOLICITADO
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_SOLICITADO, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_SOLICITADO", _pER_ID_SOLICITADO)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID_SOLICITADO = value
                OnPropertyChanged("PER_ID_SOLICITADO")
            End If
        End Set
    End Property

    Private _pER_ID_SOLICITADO As String

    <DataMember()>
    Public Property SOC_FECHA() As Nullable(Of Date)
        Get
            Return _sOC_FECHA
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_sOC_FECHA, value) Then
                _sOC_FECHA = value
                OnPropertyChanged("SOC_FECHA")
            End If
        End Set
    End Property

    Private _sOC_FECHA As Nullable(Of Date)

    <DataMember()>
    Public Property SOC_NRO_COTIZACION() As String
        Get
            Return _sOC_NRO_COTIZACION
        End Get
        Set(ByVal value As String)
            If Not Equals(_sOC_NRO_COTIZACION, value) Then
                _sOC_NRO_COTIZACION = value
                OnPropertyChanged("SOC_NRO_COTIZACION")
            End If
        End Set
    End Property

    Private _sOC_NRO_COTIZACION As String

    <DataMember()>
    Public Property TIV_ID_PAGO() As String
        Get
            Return _tIV_ID_PAGO
        End Get
        Set(ByVal value As String)
            If Not Equals(_tIV_ID_PAGO, value) Then
                ChangeTracker.RecordOriginalValue("TIV_ID_PAGO", _tIV_ID_PAGO)
                If Not IsDeserializing Then
                    If TipoVenta IsNot Nothing AndAlso Not Equals(TipoVenta.TIV_ID, value) Then
                        TipoVenta = Nothing
                    End If
                End If
                _tIV_ID_PAGO = value
                OnPropertyChanged("TIV_ID_PAGO")
            End If
        End Set
    End Property

    Private _tIV_ID_PAGO As String

    <DataMember()>
    Public Property MON_ID() As String
        Get
            Return _mON_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_mON_ID, value) Then
                _mON_ID = value
                OnPropertyChanged("MON_ID")
            End If
        End Set
    End Property

    Private _mON_ID As String

    <DataMember()>
    Public Property SOC_FECHAENTREGA() As Nullable(Of Date)
        Get
            Return _sOC_FECHAENTREGA
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_sOC_FECHAENTREGA, value) Then
                _sOC_FECHAENTREGA = value
                OnPropertyChanged("SOC_FECHAENTREGA")
            End If
        End Set
    End Property

    Private _sOC_FECHAENTREGA As Nullable(Of Date)

    <DataMember()>
    Public Property SOC_ENTREGA() As String
        Get
            Return _sOC_ENTREGA
        End Get
        Set(ByVal value As String)
            If Not Equals(_sOC_ENTREGA, value) Then
                _sOC_ENTREGA = value
                OnPropertyChanged("SOC_ENTREGA")
            End If
        End Set
    End Property

    Private _sOC_ENTREGA As String

    <DataMember()>
    Public Property SOC_OBSERVACIONES() As String
        Get
            Return _sOC_OBSERVACIONES
        End Get
        Set(ByVal value As String)
            If Not Equals(_sOC_OBSERVACIONES, value) Then
                _sOC_OBSERVACIONES = value
                OnPropertyChanged("SOC_OBSERVACIONES")
            End If
        End Set
    End Property

    Private _sOC_OBSERVACIONES As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property SOC_FEC_GRAB() As Nullable(Of Date)
        Get
            Return _sOC_FEC_GRAB
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_sOC_FEC_GRAB, value) Then
                _sOC_FEC_GRAB = value
                OnPropertyChanged("SOC_FEC_GRAB")
            End If
        End Set
    End Property

    Private _sOC_FEC_GRAB As Nullable(Of Date)

    <DataMember()>
    Public Property SOC_ESTADO() As Nullable(Of Boolean)
        Get
            Return _sOC_ESTADO
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_sOC_ESTADO, value) Then
                _sOC_ESTADO = value
                OnPropertyChanged("SOC_ESTADO")
            End If
        End Set
    End Property

    Private _sOC_ESTADO As Nullable(Of Boolean)

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property TipoVenta() As TipoVenta
        Get
            Return _tipoVenta
        End Get
        Set(ByVal value As TipoVenta)
            If _tipoVenta IsNot value Then
                Dim previousValue As TipoVenta = _tipoVenta
                _tipoVenta = value
                FixupTipoVenta(previousValue)
                OnNavigationPropertyChanged("TipoVenta")
            End If
        End Set
    End Property

    Private _tipoVenta As TipoVenta


    <DataMember()>
    Public Property SolicitudCompraDetalle() As TrackableCollection(Of SolicitudCompraDetalle)
        Get
            If _solicitudCompraDetalle Is Nothing Then
                _solicitudCompraDetalle = New TrackableCollection(Of SolicitudCompraDetalle)
                AddHandler _solicitudCompraDetalle.CollectionChanged, AddressOf FixupSolicitudCompraDetalle
            End If
            Return _solicitudCompraDetalle
        End Get
        Set(ByVal value As TrackableCollection(Of SolicitudCompraDetalle))
            If Not Object.ReferenceEquals(_solicitudCompraDetalle, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _solicitudCompraDetalle IsNot Nothing Then
                    RemoveHandler _solicitudCompraDetalle.CollectionChanged, AddressOf FixupSolicitudCompraDetalle
                End If
                _solicitudCompraDetalle = value
                If _solicitudCompraDetalle IsNot Nothing Then
                    AddHandler _solicitudCompraDetalle.CollectionChanged, AddressOf FixupSolicitudCompraDetalle
                End If
                OnNavigationPropertyChanged("SolicitudCompraDetalle")
            End If
        End Set
    End Property

    Private _solicitudCompraDetalle As TrackableCollection(Of SolicitudCompraDetalle)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Personas = Nothing
        TipoVenta = Nothing
        SolicitudCompraDetalle.Clear()
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Personas IsNot Nothing Then
            PER_ID_SOLICITADO = Personas.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_SOLICITADO = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoVenta(ByVal previousValue As TipoVenta, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.SolicitudCompra.Contains(Me) Then
            previousValue.SolicitudCompra.Remove(Me)
        End If

        If TipoVenta IsNot Nothing Then
            If Not TipoVenta.SolicitudCompra.Contains(Me) Then
                TipoVenta.SolicitudCompra.Add(Me)
            End If

            TIV_ID_PAGO = TipoVenta.TIV_ID
        ElseIf Not skipKeys Then
            TIV_ID_PAGO = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoVenta") AndAlso
                ChangeTracker.OriginalValues("TipoVenta") Is TipoVenta Then
                ChangeTracker.OriginalValues.Remove("TipoVenta")
            Else
                ChangeTracker.RecordOriginalValue("TipoVenta", previousValue)
            End If
            If TipoVenta IsNot Nothing AndAlso Not TipoVenta.ChangeTracker.ChangeTrackingEnabled Then
                TipoVenta.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupSolicitudCompraDetalle(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As SolicitudCompraDetalle In e.NewItems
                item.SolicitudCompra = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("SolicitudCompraDetalle", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As SolicitudCompraDetalle In e.OldItems
                If ReferenceEquals(item.SolicitudCompra, Me) Then
                    item.SolicitudCompra = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("SolicitudCompraDetalle", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
