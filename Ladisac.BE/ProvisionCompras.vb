'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(DetalleProvisionCompras))>
<KnownType(GetType(LibrosContables))>
<KnownType(GetType(OperacionDetraciones))>
<KnownType(GetType(CentroCostos))>
<KnownType(GetType(TipoVenta))>
<KnownType(GetType(DetalleTipoDocumentos))>
<KnownType(GetType(Moneda))>
<KnownType(GetType(TiposBienesServicios))>
<KnownType(GetType(RolOpeCtaCte))>
<KnownType(GetType(PuntoVenta))>
<KnownType(GetType(Periodo))>
<KnownType(GetType(ReferenciaProvisionCompras))>
<KnownType(GetType(Personas))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(DocuMovimiento))>
<KnownType(GetType(TiposReparables))>
<KnownType(GetType(OrdenServicio))>
<KnownType(GetType(RendicionGastos))>
Partial Public Class ProvisionCompras
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared prd_Periodo_id As string = "prd_Periodo_id"
				public shared prc_Voucher As string = "prc_Voucher"
				public shared lib_Id As string = "lib_Id"
				public shared dmo_Id As string = "dmo_Id"
				public shared prc_Serie As string = "prc_Serie"
				public shared prc_Numero As string = "prc_Numero"
				public shared cct_Id As string = "cct_Id"
				public shared prc_FechaVoucher As string = "prc_FechaVoucher"
				public shared prc_FechaVencimiento As string = "prc_FechaVencimiento"
				public shared prc_FechaDocumento As string = "prc_FechaDocumento"
				public shared prc_Glosa As string = "prc_Glosa"
				public shared mon_Id As string = "mon_Id"
				public shared prc_ImporteCIF As string = "prc_ImporteCIF"
				public shared prc_BaseImponible As string = "prc_BaseImponible"
				public shared prc_Total As string = "prc_Total"
				public shared prc_Igv As string = "prc_Igv"
				public shared prc_NoGravado As string = "prc_NoGravado"
				public shared prc_DescuentosObtenidos As string = "prc_DescuentosObtenidos"
				public shared prc_ImportePercepcion As string = "prc_ImportePercepcion"
				public shared opd_Oper_Detra_Id As string = "opd_Oper_Detra_Id"
				public shared tib_TipoBien_Id As string = "tib_TipoBien_Id"
				public shared tdo_Id As string = "tdo_Id"
				public shared dtd_Id As string = "dtd_Id"
				public shared prc_FechaSpot As string = "prc_FechaSpot"
				public shared prc_NumeroSpot As string = "prc_NumeroSpot"
				public shared prc_EsDetraccion As string = "prc_EsDetraccion"
				public shared pve_Id As string = "pve_Id"
				public shared prc_NumeroDocAduana As string = "prc_NumeroDocAduana"
				public shared prc_AplicarImporteInventarioDocRef As string = "prc_AplicarImporteInventarioDocRef"
				public shared prc_Advalorem As string = "prc_Advalorem"
				public shared per_Id As string = "per_Id"
				public shared prc_ImporteDocRef As string = "prc_ImporteDocRef"
				public shared prc_RetenerRenta4ta As string = "prc_RetenerRenta4ta"
				public shared TIV_ID As string = "TIV_ID"
				public shared CCO_ID As string = "CCO_ID"
				public shared Usu_Id As string = "Usu_Id"
				public shared prc_FecGrab As string = "prc_FecGrab"
				public shared cct_IdRef As string = "cct_IdRef"
				public shared tdo_IdRef As string = "tdo_IdRef"
				public shared dtd_IdRef As string = "dtd_IdRef"
				public shared prc_SerieRef As string = "prc_SerieRef"
				public shared prc_NumeroRef As string = "prc_NumeroRef"
				public shared prc_RetenerRenta3ra As string = "prc_RetenerRenta3ra"
				public shared prc_ImporteISC As string = "prc_ImporteISC"
				public shared prc_OtrosTributos As string = "prc_OtrosTributos"
				public shared per_idResponsable As string = "per_idResponsable"
				public shared rep_id As string = "rep_id"
				public shared prc_SerieSunat As string = "prc_SerieSunat"
				public shared prc_AnioDUA As string = "prc_AnioDUA"
				public shared OTR_ID As string = "OTR_ID"
				public shared CRD_ID As string = "CRD_ID"
				public shared RGA_ID As string = "RGA_ID"
				public shared OSE_ID As string = "OSE_ID"
		    End Structure
	



    <DataMember()>
    Public Property prd_Periodo_id() As String
        Get
            Return _prd_Periodo_id
        End Get
        Set(ByVal value As String)
            If Not Equals(_prd_Periodo_id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'prd_Periodo_id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If Periodo IsNot Nothing AndAlso Not Equals(Periodo.prd_Periodo_id, value) Then
                        Periodo = Nothing
                    End If
                End If
                _prd_Periodo_id = value
                OnPropertyChanged("prd_Periodo_id")
            End If
        End Set
    End Property

    Private _prd_Periodo_id As String

    <DataMember()>
    Public Property prc_Voucher() As String
        Get
            Return _prc_Voucher
        End Get
        Set(ByVal value As String)
            If Not Equals(_prc_Voucher, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'prc_Voucher' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _prc_Voucher = value
                OnPropertyChanged("prc_Voucher")
            End If
        End Set
    End Property

    Private _prc_Voucher As String

    <DataMember()>
    Public Property lib_Id() As String
        Get
            Return _lib_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_lib_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'lib_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If LibrosContables IsNot Nothing AndAlso Not Equals(LibrosContables.lib_Id, value) Then
                        LibrosContables = Nothing
                    End If
                End If
                _lib_Id = value
                OnPropertyChanged("lib_Id")
            End If
        End Set
    End Property

    Private _lib_Id As String

    <DataMember()>
    Public Property dmo_Id() As Nullable(Of Integer)
        Get
            Return _dmo_Id
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_dmo_Id, value) Then
                ChangeTracker.RecordOriginalValue("dmo_Id", _dmo_Id)
                If Not IsDeserializing Then
                    If DocuMovimiento IsNot Nothing AndAlso Not Equals(DocuMovimiento.DMO_ID, value) Then
                        DocuMovimiento = Nothing
                    End If
                End If
                _dmo_Id = value
                OnPropertyChanged("dmo_Id")
            End If
        End Set
    End Property

    Private _dmo_Id As Nullable(Of Integer)

    <DataMember()>
    Public Property prc_Serie() As String
        Get
            Return _prc_Serie
        End Get
        Set(ByVal value As String)
            If Not Equals(_prc_Serie, value) Then
                _prc_Serie = value
                OnPropertyChanged("prc_Serie")
            End If
        End Set
    End Property

    Private _prc_Serie As String

    <DataMember()>
    Public Property prc_Numero() As String
        Get
            Return _prc_Numero
        End Get
        Set(ByVal value As String)
            If Not Equals(_prc_Numero, value) Then
                _prc_Numero = value
                OnPropertyChanged("prc_Numero")
            End If
        End Set
    End Property

    Private _prc_Numero As String

    <DataMember()>
    Public Property cct_Id() As String
        Get
            Return _cct_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_cct_Id, value) Then
                ChangeTracker.RecordOriginalValue("cct_Id", _cct_Id)
                If Not IsDeserializing Then
                    If RolOpeCtaCte IsNot Nothing AndAlso Not Equals(RolOpeCtaCte.CCT_ID, value) Then
                        Dim previousValue As RolOpeCtaCte = _rolOpeCtaCte
                        _rolOpeCtaCte = Nothing
                        FixupRolOpeCtaCte(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("RolOpeCtaCte")
                    End If
                End If
                _cct_Id = value
                OnPropertyChanged("cct_Id")
            End If
        End Set
    End Property

    Private _cct_Id As String

    <DataMember()>
    Public Property prc_FechaVoucher() As Nullable(Of Date)
        Get
            Return _prc_FechaVoucher
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_prc_FechaVoucher, value) Then
                _prc_FechaVoucher = value
                OnPropertyChanged("prc_FechaVoucher")
            End If
        End Set
    End Property

    Private _prc_FechaVoucher As Nullable(Of Date)

    <DataMember()>
    Public Property prc_FechaVencimiento() As Nullable(Of Date)
        Get
            Return _prc_FechaVencimiento
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_prc_FechaVencimiento, value) Then
                _prc_FechaVencimiento = value
                OnPropertyChanged("prc_FechaVencimiento")
            End If
        End Set
    End Property

    Private _prc_FechaVencimiento As Nullable(Of Date)

    <DataMember()>
    Public Property prc_FechaDocumento() As Nullable(Of Date)
        Get
            Return _prc_FechaDocumento
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_prc_FechaDocumento, value) Then
                _prc_FechaDocumento = value
                OnPropertyChanged("prc_FechaDocumento")
            End If
        End Set
    End Property

    Private _prc_FechaDocumento As Nullable(Of Date)

    <DataMember()>
    Public Property prc_Glosa() As String
        Get
            Return _prc_Glosa
        End Get
        Set(ByVal value As String)
            If Not Equals(_prc_Glosa, value) Then
                _prc_Glosa = value
                OnPropertyChanged("prc_Glosa")
            End If
        End Set
    End Property

    Private _prc_Glosa As String

    <DataMember()>
    Public Property mon_Id() As String
        Get
            Return _mon_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_mon_Id, value) Then
                ChangeTracker.RecordOriginalValue("mon_Id", _mon_Id)
                If Not IsDeserializing Then
                    If Moneda IsNot Nothing AndAlso Not Equals(Moneda.MON_ID, value) Then
                        Moneda = Nothing
                    End If
                End If
                _mon_Id = value
                OnPropertyChanged("mon_Id")
            End If
        End Set
    End Property

    Private _mon_Id As String

    <DataMember()>
    Public Property prc_ImporteCIF() As Nullable(Of Decimal)
        Get
            Return _prc_ImporteCIF
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_prc_ImporteCIF, value) Then
                _prc_ImporteCIF = value
                OnPropertyChanged("prc_ImporteCIF")
            End If
        End Set
    End Property

    Private _prc_ImporteCIF As Nullable(Of Decimal)

    <DataMember()>
    Public Property prc_BaseImponible() As Nullable(Of Decimal)
        Get
            Return _prc_BaseImponible
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_prc_BaseImponible, value) Then
                _prc_BaseImponible = value
                OnPropertyChanged("prc_BaseImponible")
            End If
        End Set
    End Property

    Private _prc_BaseImponible As Nullable(Of Decimal)

    <DataMember()>
    Public Property prc_Total() As Nullable(Of Decimal)
        Get
            Return _prc_Total
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_prc_Total, value) Then
                _prc_Total = value
                OnPropertyChanged("prc_Total")
            End If
        End Set
    End Property

    Private _prc_Total As Nullable(Of Decimal)

    <DataMember()>
    Public Property prc_Igv() As Nullable(Of Decimal)
        Get
            Return _prc_Igv
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_prc_Igv, value) Then
                _prc_Igv = value
                OnPropertyChanged("prc_Igv")
            End If
        End Set
    End Property

    Private _prc_Igv As Nullable(Of Decimal)

    <DataMember()>
    Public Property prc_NoGravado() As Nullable(Of Decimal)
        Get
            Return _prc_NoGravado
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_prc_NoGravado, value) Then
                _prc_NoGravado = value
                OnPropertyChanged("prc_NoGravado")
            End If
        End Set
    End Property

    Private _prc_NoGravado As Nullable(Of Decimal)

    <DataMember()>
    Public Property prc_DescuentosObtenidos() As Nullable(Of Decimal)
        Get
            Return _prc_DescuentosObtenidos
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_prc_DescuentosObtenidos, value) Then
                _prc_DescuentosObtenidos = value
                OnPropertyChanged("prc_DescuentosObtenidos")
            End If
        End Set
    End Property

    Private _prc_DescuentosObtenidos As Nullable(Of Decimal)

    <DataMember()>
    Public Property prc_ImportePercepcion() As Nullable(Of Decimal)
        Get
            Return _prc_ImportePercepcion
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_prc_ImportePercepcion, value) Then
                _prc_ImportePercepcion = value
                OnPropertyChanged("prc_ImportePercepcion")
            End If
        End Set
    End Property

    Private _prc_ImportePercepcion As Nullable(Of Decimal)

    <DataMember()>
    Public Property opd_Oper_Detra_Id() As String
        Get
            Return _opd_Oper_Detra_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_opd_Oper_Detra_Id, value) Then
                ChangeTracker.RecordOriginalValue("opd_Oper_Detra_Id", _opd_Oper_Detra_Id)
                If Not IsDeserializing Then
                    If OperacionDetraciones IsNot Nothing AndAlso Not Equals(OperacionDetraciones.opd_Oper_Detra_Id, value) Then
                        OperacionDetraciones = Nothing
                    End If
                End If
                _opd_Oper_Detra_Id = value
                OnPropertyChanged("opd_Oper_Detra_Id")
            End If
        End Set
    End Property

    Private _opd_Oper_Detra_Id As String

    <DataMember()>
    Public Property tib_TipoBien_Id() As String
        Get
            Return _tib_TipoBien_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tib_TipoBien_Id, value) Then
                ChangeTracker.RecordOriginalValue("tib_TipoBien_Id", _tib_TipoBien_Id)
                If Not IsDeserializing Then
                    If TiposBienesServicios IsNot Nothing AndAlso Not Equals(TiposBienesServicios.tib_TipoBien_Id, value) Then
                        TiposBienesServicios = Nothing
                    End If
                End If
                _tib_TipoBien_Id = value
                OnPropertyChanged("tib_TipoBien_Id")
            End If
        End Set
    End Property

    Private _tib_TipoBien_Id As String

    <DataMember()>
    Public Property tdo_Id() As String
        Get
            Return _tdo_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tdo_Id, value) Then
                ChangeTracker.RecordOriginalValue("tdo_Id", _tdo_Id)
                If Not IsDeserializing Then
                    If RolOpeCtaCte IsNot Nothing AndAlso Not Equals(RolOpeCtaCte.TDO_ID, value) Then
                        Dim previousValue As RolOpeCtaCte = _rolOpeCtaCte
                        _rolOpeCtaCte = Nothing
                        FixupRolOpeCtaCte(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("RolOpeCtaCte")
                    End If
                End If
                _tdo_Id = value
                OnPropertyChanged("tdo_Id")
            End If
        End Set
    End Property

    Private _tdo_Id As String

    <DataMember()>
    Public Property dtd_Id() As String
        Get
            Return _dtd_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_dtd_Id, value) Then
                ChangeTracker.RecordOriginalValue("dtd_Id", _dtd_Id)
                If Not IsDeserializing Then
                    If RolOpeCtaCte IsNot Nothing AndAlso Not Equals(RolOpeCtaCte.DTD_ID, value) Then
                        Dim previousValue As RolOpeCtaCte = _rolOpeCtaCte
                        _rolOpeCtaCte = Nothing
                        FixupRolOpeCtaCte(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("RolOpeCtaCte")
                    End If
                End If
                _dtd_Id = value
                OnPropertyChanged("dtd_Id")
            End If
        End Set
    End Property

    Private _dtd_Id As String

    <DataMember()>
    Public Property prc_FechaSpot() As Nullable(Of Date)
        Get
            Return _prc_FechaSpot
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_prc_FechaSpot, value) Then
                _prc_FechaSpot = value
                OnPropertyChanged("prc_FechaSpot")
            End If
        End Set
    End Property

    Private _prc_FechaSpot As Nullable(Of Date)

    <DataMember()>
    Public Property prc_NumeroSpot() As String
        Get
            Return _prc_NumeroSpot
        End Get
        Set(ByVal value As String)
            If Not Equals(_prc_NumeroSpot, value) Then
                _prc_NumeroSpot = value
                OnPropertyChanged("prc_NumeroSpot")
            End If
        End Set
    End Property

    Private _prc_NumeroSpot As String

    <DataMember()>
    Public Property prc_EsDetraccion() As Nullable(Of Boolean)
        Get
            Return _prc_EsDetraccion
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_prc_EsDetraccion, value) Then
                _prc_EsDetraccion = value
                OnPropertyChanged("prc_EsDetraccion")
            End If
        End Set
    End Property

    Private _prc_EsDetraccion As Nullable(Of Boolean)

    <DataMember()>
    Public Property pve_Id() As String
        Get
            Return _pve_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_pve_Id, value) Then
                ChangeTracker.RecordOriginalValue("pve_Id", _pve_Id)
                If Not IsDeserializing Then
                    If PuntoVenta IsNot Nothing AndAlso Not Equals(PuntoVenta.PVE_ID, value) Then
                        PuntoVenta = Nothing
                    End If
                End If
                _pve_Id = value
                OnPropertyChanged("pve_Id")
            End If
        End Set
    End Property

    Private _pve_Id As String

    <DataMember()>
    Public Property prc_NumeroDocAduana() As String
        Get
            Return _prc_NumeroDocAduana
        End Get
        Set(ByVal value As String)
            If Not Equals(_prc_NumeroDocAduana, value) Then
                _prc_NumeroDocAduana = value
                OnPropertyChanged("prc_NumeroDocAduana")
            End If
        End Set
    End Property

    Private _prc_NumeroDocAduana As String

    <DataMember()>
    Public Property prc_AplicarImporteInventarioDocRef() As Nullable(Of Boolean)
        Get
            Return _prc_AplicarImporteInventarioDocRef
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_prc_AplicarImporteInventarioDocRef, value) Then
                _prc_AplicarImporteInventarioDocRef = value
                OnPropertyChanged("prc_AplicarImporteInventarioDocRef")
            End If
        End Set
    End Property

    Private _prc_AplicarImporteInventarioDocRef As Nullable(Of Boolean)

    <DataMember()>
    Public Property prc_Advalorem() As Nullable(Of Decimal)
        Get
            Return _prc_Advalorem
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_prc_Advalorem, value) Then
                _prc_Advalorem = value
                OnPropertyChanged("prc_Advalorem")
            End If
        End Set
    End Property

    Private _prc_Advalorem As Nullable(Of Decimal)

    <DataMember()>
    Public Property per_Id() As String
        Get
            Return _per_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_per_Id, value) Then
                ChangeTracker.RecordOriginalValue("per_Id", _per_Id)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _per_Id = value
                OnPropertyChanged("per_Id")
            End If
        End Set
    End Property

    Private _per_Id As String

    <DataMember()>
    Public Property prc_ImporteDocRef() As Nullable(Of Decimal)
        Get
            Return _prc_ImporteDocRef
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_prc_ImporteDocRef, value) Then
                _prc_ImporteDocRef = value
                OnPropertyChanged("prc_ImporteDocRef")
            End If
        End Set
    End Property

    Private _prc_ImporteDocRef As Nullable(Of Decimal)

    <DataMember()>
    Public Property prc_RetenerRenta4ta() As Nullable(Of Boolean)
        Get
            Return _prc_RetenerRenta4ta
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_prc_RetenerRenta4ta, value) Then
                _prc_RetenerRenta4ta = value
                OnPropertyChanged("prc_RetenerRenta4ta")
            End If
        End Set
    End Property

    Private _prc_RetenerRenta4ta As Nullable(Of Boolean)

    <DataMember()>
    Public Property TIV_ID() As String
        Get
            Return _tIV_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_tIV_ID, value) Then
                ChangeTracker.RecordOriginalValue("TIV_ID", _tIV_ID)
                If Not IsDeserializing Then
                    If TipoVenta IsNot Nothing AndAlso Not Equals(TipoVenta.TIV_ID, value) Then
                        TipoVenta = Nothing
                    End If
                End If
                _tIV_ID = value
                OnPropertyChanged("TIV_ID")
            End If
        End Set
    End Property

    Private _tIV_ID As String

    <DataMember()>
    Public Property CCO_ID() As String
        Get
            Return _cCO_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCO_ID, value) Then
                ChangeTracker.RecordOriginalValue("CCO_ID", _cCO_ID)
                If Not IsDeserializing Then
                    If CentroCostos IsNot Nothing AndAlso Not Equals(CentroCostos.CCO_ID, value) Then
                        CentroCostos = Nothing
                    End If
                End If
                _cCO_ID = value
                OnPropertyChanged("CCO_ID")
            End If
        End Set
    End Property

    Private _cCO_ID As String

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                ChangeTracker.RecordOriginalValue("Usu_Id", _usu_Id)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property prc_FecGrab() As Nullable(Of Date)
        Get
            Return _prc_FecGrab
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_prc_FecGrab, value) Then
                _prc_FecGrab = value
                OnPropertyChanged("prc_FecGrab")
            End If
        End Set
    End Property

    Private _prc_FecGrab As Nullable(Of Date)

    <DataMember()>
    Public Property cct_IdRef() As String
        Get
            Return _cct_IdRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_cct_IdRef, value) Then
                _cct_IdRef = value
                OnPropertyChanged("cct_IdRef")
            End If
        End Set
    End Property

    Private _cct_IdRef As String

    <DataMember()>
    Public Property tdo_IdRef() As String
        Get
            Return _tdo_IdRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_tdo_IdRef, value) Then
                _tdo_IdRef = value
                OnPropertyChanged("tdo_IdRef")
            End If
        End Set
    End Property

    Private _tdo_IdRef As String

    <DataMember()>
    Public Property dtd_IdRef() As String
        Get
            Return _dtd_IdRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_dtd_IdRef, value) Then
                ChangeTracker.RecordOriginalValue("dtd_IdRef", _dtd_IdRef)
                If Not IsDeserializing Then
                    If DetalleTipoDocumentos IsNot Nothing AndAlso Not Equals(DetalleTipoDocumentos.DTD_ID, value) Then
                        DetalleTipoDocumentos = Nothing
                    End If
                End If
                _dtd_IdRef = value
                OnPropertyChanged("dtd_IdRef")
            End If
        End Set
    End Property

    Private _dtd_IdRef As String

    <DataMember()>
    Public Property prc_SerieRef() As String
        Get
            Return _prc_SerieRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_prc_SerieRef, value) Then
                _prc_SerieRef = value
                OnPropertyChanged("prc_SerieRef")
            End If
        End Set
    End Property

    Private _prc_SerieRef As String

    <DataMember()>
    Public Property prc_NumeroRef() As String
        Get
            Return _prc_NumeroRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_prc_NumeroRef, value) Then
                _prc_NumeroRef = value
                OnPropertyChanged("prc_NumeroRef")
            End If
        End Set
    End Property

    Private _prc_NumeroRef As String

    <DataMember()>
    Public Property prc_RetenerRenta3ra() As Nullable(Of Boolean)
        Get
            Return _prc_RetenerRenta3ra
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_prc_RetenerRenta3ra, value) Then
                _prc_RetenerRenta3ra = value
                OnPropertyChanged("prc_RetenerRenta3ra")
            End If
        End Set
    End Property

    Private _prc_RetenerRenta3ra As Nullable(Of Boolean)

    <DataMember()>
    Public Property prc_ImporteISC() As Nullable(Of Decimal)
        Get
            Return _prc_ImporteISC
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_prc_ImporteISC, value) Then
                _prc_ImporteISC = value
                OnPropertyChanged("prc_ImporteISC")
            End If
        End Set
    End Property

    Private _prc_ImporteISC As Nullable(Of Decimal)

    <DataMember()>
    Public Property prc_OtrosTributos() As Nullable(Of Decimal)
        Get
            Return _prc_OtrosTributos
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_prc_OtrosTributos, value) Then
                _prc_OtrosTributos = value
                OnPropertyChanged("prc_OtrosTributos")
            End If
        End Set
    End Property

    Private _prc_OtrosTributos As Nullable(Of Decimal)

    <DataMember()>
    Public Property per_idResponsable() As String
        Get
            Return _per_idResponsable
        End Get
        Set(ByVal value As String)
            If Not Equals(_per_idResponsable, value) Then
                ChangeTracker.RecordOriginalValue("per_idResponsable", _per_idResponsable)
                If Not IsDeserializing Then
                    If Personas1 IsNot Nothing AndAlso Not Equals(Personas1.PER_ID, value) Then
                        Personas1 = Nothing
                    End If
                End If
                _per_idResponsable = value
                OnPropertyChanged("per_idResponsable")
            End If
        End Set
    End Property

    Private _per_idResponsable As String

    <DataMember()>
    Public Property rep_id() As String
        Get
            Return _rep_id
        End Get
        Set(ByVal value As String)
            If Not Equals(_rep_id, value) Then
                ChangeTracker.RecordOriginalValue("rep_id", _rep_id)
                If Not IsDeserializing Then
                    If TiposReparables IsNot Nothing AndAlso Not Equals(TiposReparables.rep_id, value) Then
                        TiposReparables = Nothing
                    End If
                End If
                _rep_id = value
                OnPropertyChanged("rep_id")
            End If
        End Set
    End Property

    Private _rep_id As String

    <DataMember()>
    Public Property prc_SerieSunat() As String
        Get
            Return _prc_SerieSunat
        End Get
        Set(ByVal value As String)
            If Not Equals(_prc_SerieSunat, value) Then
                _prc_SerieSunat = value
                OnPropertyChanged("prc_SerieSunat")
            End If
        End Set
    End Property

    Private _prc_SerieSunat As String

    <DataMember()>
    Public Property prc_AnioDUA() As String
        Get
            Return _prc_AnioDUA
        End Get
        Set(ByVal value As String)
            If Not Equals(_prc_AnioDUA, value) Then
                _prc_AnioDUA = value
                OnPropertyChanged("prc_AnioDUA")
            End If
        End Set
    End Property

    Private _prc_AnioDUA As String

    <DataMember()>
    Public Property OTR_ID() As Nullable(Of Integer)
        Get
            Return _oTR_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_oTR_ID, value) Then
                _oTR_ID = value
                OnPropertyChanged("OTR_ID")
            End If
        End Set
    End Property

    Private _oTR_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property CRD_ID() As Nullable(Of Integer)
        Get
            Return _cRD_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_cRD_ID, value) Then
                _cRD_ID = value
                OnPropertyChanged("CRD_ID")
            End If
        End Set
    End Property

    Private _cRD_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property RGA_ID() As Nullable(Of Integer)
        Get
            Return _rGA_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_rGA_ID, value) Then
                ChangeTracker.RecordOriginalValue("RGA_ID", _rGA_ID)
                If Not IsDeserializing Then
                    If RendicionGastos IsNot Nothing AndAlso Not Equals(RendicionGastos.RGA_ID, value) Then
                        RendicionGastos = Nothing
                    End If
                End If
                _rGA_ID = value
                OnPropertyChanged("RGA_ID")
            End If
        End Set
    End Property

    Private _rGA_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property OSE_ID() As Nullable(Of Integer)
        Get
            Return _oSE_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_oSE_ID, value) Then
                ChangeTracker.RecordOriginalValue("OSE_ID", _oSE_ID)
                If Not IsDeserializing Then
                    If OrdenServicio IsNot Nothing AndAlso Not Equals(OrdenServicio.OSE_ID, value) Then
                        OrdenServicio = Nothing
                    End If
                End If
                _oSE_ID = value
                OnPropertyChanged("OSE_ID")
            End If
        End Set
    End Property

    Private _oSE_ID As Nullable(Of Integer)

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property DetalleProvisionCompras() As TrackableCollection(Of DetalleProvisionCompras)
        Get
            If _detalleProvisionCompras Is Nothing Then
                _detalleProvisionCompras = New TrackableCollection(Of DetalleProvisionCompras)
                AddHandler _detalleProvisionCompras.CollectionChanged, AddressOf FixupDetalleProvisionCompras
            End If
            Return _detalleProvisionCompras
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleProvisionCompras))
            If Not Object.ReferenceEquals(_detalleProvisionCompras, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleProvisionCompras IsNot Nothing Then
                    RemoveHandler _detalleProvisionCompras.CollectionChanged, AddressOf FixupDetalleProvisionCompras
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As DetalleProvisionCompras In _detalleProvisionCompras
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detalleProvisionCompras = value
                If _detalleProvisionCompras IsNot Nothing Then
                    AddHandler _detalleProvisionCompras.CollectionChanged, AddressOf FixupDetalleProvisionCompras
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As DetalleProvisionCompras In _detalleProvisionCompras
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetalleProvisionCompras")
            End If
        End Set
    End Property

    Private _detalleProvisionCompras As TrackableCollection(Of DetalleProvisionCompras)

    <DataMember()>
    Public Property LibrosContables() As LibrosContables
        Get
            Return _librosContables
        End Get
        Set(ByVal value As LibrosContables)
            If _librosContables IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(lib_Id, value.lib_Id) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As LibrosContables = _librosContables
                _librosContables = value
                FixupLibrosContables(previousValue)
                OnNavigationPropertyChanged("LibrosContables")
            End If
        End Set
    End Property

    Private _librosContables As LibrosContables


    <DataMember()>
    Public Property OperacionDetraciones() As OperacionDetraciones
        Get
            Return _operacionDetraciones
        End Get
        Set(ByVal value As OperacionDetraciones)
            If _operacionDetraciones IsNot value Then
                Dim previousValue As OperacionDetraciones = _operacionDetraciones
                _operacionDetraciones = value
                FixupOperacionDetraciones(previousValue)
                OnNavigationPropertyChanged("OperacionDetraciones")
            End If
        End Set
    End Property

    Private _operacionDetraciones As OperacionDetraciones


    <DataMember()>
    Public Property CentroCostos() As CentroCostos
        Get
            Return _centroCostos
        End Get
        Set(ByVal value As CentroCostos)
            If _centroCostos IsNot value Then
                Dim previousValue As CentroCostos = _centroCostos
                _centroCostos = value
                FixupCentroCostos(previousValue)
                OnNavigationPropertyChanged("CentroCostos")
            End If
        End Set
    End Property

    Private _centroCostos As CentroCostos


    <DataMember()>
    Public Property TipoVenta() As TipoVenta
        Get
            Return _tipoVenta
        End Get
        Set(ByVal value As TipoVenta)
            If _tipoVenta IsNot value Then
                Dim previousValue As TipoVenta = _tipoVenta
                _tipoVenta = value
                FixupTipoVenta(previousValue)
                OnNavigationPropertyChanged("TipoVenta")
            End If
        End Set
    End Property

    Private _tipoVenta As TipoVenta


    <DataMember()>
    Public Property DetalleTipoDocumentos() As DetalleTipoDocumentos
        Get
            Return _detalleTipoDocumentos
        End Get
        Set(ByVal value As DetalleTipoDocumentos)
            If _detalleTipoDocumentos IsNot value Then
                Dim previousValue As DetalleTipoDocumentos = _detalleTipoDocumentos
                _detalleTipoDocumentos = value
                FixupDetalleTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("DetalleTipoDocumentos")
            End If
        End Set
    End Property

    Private _detalleTipoDocumentos As DetalleTipoDocumentos


    <DataMember()>
    Public Property Moneda() As Moneda
        Get
            Return _moneda
        End Get
        Set(ByVal value As Moneda)
            If _moneda IsNot value Then
                Dim previousValue As Moneda = _moneda
                _moneda = value
                FixupMoneda(previousValue)
                OnNavigationPropertyChanged("Moneda")
            End If
        End Set
    End Property

    Private _moneda As Moneda


    <DataMember()>
    Public Property TiposBienesServicios() As TiposBienesServicios
        Get
            Return _tiposBienesServicios
        End Get
        Set(ByVal value As TiposBienesServicios)
            If _tiposBienesServicios IsNot value Then
                Dim previousValue As TiposBienesServicios = _tiposBienesServicios
                _tiposBienesServicios = value
                FixupTiposBienesServicios(previousValue)
                OnNavigationPropertyChanged("TiposBienesServicios")
            End If
        End Set
    End Property

    Private _tiposBienesServicios As TiposBienesServicios


    <DataMember()>
    Public Property RolOpeCtaCte() As RolOpeCtaCte
        Get
            Return _rolOpeCtaCte
        End Get
        Set(ByVal value As RolOpeCtaCte)
            If _rolOpeCtaCte IsNot value Then
                Dim previousValue As RolOpeCtaCte = _rolOpeCtaCte
                _rolOpeCtaCte = value
                FixupRolOpeCtaCte(previousValue)
                OnNavigationPropertyChanged("RolOpeCtaCte")
            End If
        End Set
    End Property

    Private _rolOpeCtaCte As RolOpeCtaCte


    <DataMember()>
    Public Property PuntoVenta() As PuntoVenta
        Get
            Return _puntoVenta
        End Get
        Set(ByVal value As PuntoVenta)
            If _puntoVenta IsNot value Then
                Dim previousValue As PuntoVenta = _puntoVenta
                _puntoVenta = value
                FixupPuntoVenta(previousValue)
                OnNavigationPropertyChanged("PuntoVenta")
            End If
        End Set
    End Property

    Private _puntoVenta As PuntoVenta


    <DataMember()>
    Public Property Periodo() As Periodo
        Get
            Return _periodo
        End Get
        Set(ByVal value As Periodo)
            If _periodo IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(prd_Periodo_id, value.prd_Periodo_id) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As Periodo = _periodo
                _periodo = value
                FixupPeriodo(previousValue)
                OnNavigationPropertyChanged("Periodo")
            End If
        End Set
    End Property

    Private _periodo As Periodo


    <DataMember()>
    Public Property ReferenciaProvisionCompras() As TrackableCollection(Of ReferenciaProvisionCompras)
        Get
            If _referenciaProvisionCompras Is Nothing Then
                _referenciaProvisionCompras = New TrackableCollection(Of ReferenciaProvisionCompras)
                AddHandler _referenciaProvisionCompras.CollectionChanged, AddressOf FixupReferenciaProvisionCompras
            End If
            Return _referenciaProvisionCompras
        End Get
        Set(ByVal value As TrackableCollection(Of ReferenciaProvisionCompras))
            If Not Object.ReferenceEquals(_referenciaProvisionCompras, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _referenciaProvisionCompras IsNot Nothing Then
                    RemoveHandler _referenciaProvisionCompras.CollectionChanged, AddressOf FixupReferenciaProvisionCompras
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As ReferenciaProvisionCompras In _referenciaProvisionCompras
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _referenciaProvisionCompras = value
                If _referenciaProvisionCompras IsNot Nothing Then
                    AddHandler _referenciaProvisionCompras.CollectionChanged, AddressOf FixupReferenciaProvisionCompras
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As ReferenciaProvisionCompras In _referenciaProvisionCompras
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("ReferenciaProvisionCompras")
            End If
        End Set
    End Property

    Private _referenciaProvisionCompras As TrackableCollection(Of ReferenciaProvisionCompras)

    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property DocuMovimiento() As DocuMovimiento
        Get
            Return _docuMovimiento
        End Get
        Set(ByVal value As DocuMovimiento)
            If _docuMovimiento IsNot value Then
                Dim previousValue As DocuMovimiento = _docuMovimiento
                _docuMovimiento = value
                FixupDocuMovimiento(previousValue)
                OnNavigationPropertyChanged("DocuMovimiento")
            End If
        End Set
    End Property

    Private _docuMovimiento As DocuMovimiento


    <DataMember()>
    Public Property Personas1() As Personas
        Get
            Return _personas1
        End Get
        Set(ByVal value As Personas)
            If _personas1 IsNot value Then
                Dim previousValue As Personas = _personas1
                _personas1 = value
                FixupPersonas1(previousValue)
                OnNavigationPropertyChanged("Personas1")
            End If
        End Set
    End Property

    Private _personas1 As Personas


    <DataMember()>
    Public Property TiposReparables() As TiposReparables
        Get
            Return _tiposReparables
        End Get
        Set(ByVal value As TiposReparables)
            If _tiposReparables IsNot value Then
                Dim previousValue As TiposReparables = _tiposReparables
                _tiposReparables = value
                FixupTiposReparables(previousValue)
                OnNavigationPropertyChanged("TiposReparables")
            End If
        End Set
    End Property

    Private _tiposReparables As TiposReparables


    <DataMember()>
    Public Property OrdenServicio() As OrdenServicio
        Get
            Return _ordenServicio
        End Get
        Set(ByVal value As OrdenServicio)
            If _ordenServicio IsNot value Then
                Dim previousValue As OrdenServicio = _ordenServicio
                _ordenServicio = value
                FixupOrdenServicio(previousValue)
                OnNavigationPropertyChanged("OrdenServicio")
            End If
        End Set
    End Property

    Private _ordenServicio As OrdenServicio


    <DataMember()>
    Public Property RendicionGastos() As RendicionGastos
        Get
            Return _rendicionGastos
        End Get
        Set(ByVal value As RendicionGastos)
            If _rendicionGastos IsNot value Then
                Dim previousValue As RendicionGastos = _rendicionGastos
                _rendicionGastos = value
                FixupRendicionGastos(previousValue)
                OnNavigationPropertyChanged("RendicionGastos")
            End If
        End Set
    End Property

    Private _rendicionGastos As RendicionGastos


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociaci칩n que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesar치 notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        DetalleProvisionCompras.Clear()
        LibrosContables = Nothing
        OperacionDetraciones = Nothing
        CentroCostos = Nothing
        TipoVenta = Nothing
        DetalleTipoDocumentos = Nothing
        Moneda = Nothing
        TiposBienesServicios = Nothing
        RolOpeCtaCte = Nothing
        PuntoVenta = Nothing
        Periodo = Nothing
        ReferenciaProvisionCompras.Clear()
        Personas = Nothing
        Usuarios = Nothing
        DocuMovimiento = Nothing
        Personas1 = Nothing
        TiposReparables = Nothing
        OrdenServicio = Nothing
        RendicionGastos = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupLibrosContables(ByVal previousValue As LibrosContables)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ProvisionCompras.Contains(Me) Then
            previousValue.ProvisionCompras.Remove(Me)
        End If

        If LibrosContables IsNot Nothing Then
            If Not LibrosContables.ProvisionCompras.Contains(Me) Then
                LibrosContables.ProvisionCompras.Add(Me)
            End If

            lib_Id = LibrosContables.lib_Id
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("LibrosContables") AndAlso
                ChangeTracker.OriginalValues("LibrosContables") Is LibrosContables Then
                ChangeTracker.OriginalValues.Remove("LibrosContables")
            Else
                ChangeTracker.RecordOriginalValue("LibrosContables", previousValue)
            End If
            If LibrosContables IsNot Nothing AndAlso Not LibrosContables.ChangeTracker.ChangeTrackingEnabled Then
                LibrosContables.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupOperacionDetraciones(ByVal previousValue As OperacionDetraciones, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ProvisionCompras.Contains(Me) Then
            previousValue.ProvisionCompras.Remove(Me)
        End If

        If OperacionDetraciones IsNot Nothing Then
            If Not OperacionDetraciones.ProvisionCompras.Contains(Me) Then
                OperacionDetraciones.ProvisionCompras.Add(Me)
            End If

            opd_Oper_Detra_Id = OperacionDetraciones.opd_Oper_Detra_Id
        ElseIf Not skipKeys Then
            opd_Oper_Detra_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("OperacionDetraciones") AndAlso
                ChangeTracker.OriginalValues("OperacionDetraciones") Is OperacionDetraciones Then
                ChangeTracker.OriginalValues.Remove("OperacionDetraciones")
            Else
                ChangeTracker.RecordOriginalValue("OperacionDetraciones", previousValue)
            End If
            If OperacionDetraciones IsNot Nothing AndAlso Not OperacionDetraciones.ChangeTracker.ChangeTrackingEnabled Then
                OperacionDetraciones.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCentroCostos(ByVal previousValue As CentroCostos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ProvisionCompras.Contains(Me) Then
            previousValue.ProvisionCompras.Remove(Me)
        End If

        If CentroCostos IsNot Nothing Then
            If Not CentroCostos.ProvisionCompras.Contains(Me) Then
                CentroCostos.ProvisionCompras.Add(Me)
            End If

            CCO_ID = CentroCostos.CCO_ID
        ElseIf Not skipKeys Then
            CCO_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CentroCostos") AndAlso
                ChangeTracker.OriginalValues("CentroCostos") Is CentroCostos Then
                ChangeTracker.OriginalValues.Remove("CentroCostos")
            Else
                ChangeTracker.RecordOriginalValue("CentroCostos", previousValue)
            End If
            If CentroCostos IsNot Nothing AndAlso Not CentroCostos.ChangeTracker.ChangeTrackingEnabled Then
                CentroCostos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoVenta(ByVal previousValue As TipoVenta)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ProvisionCompras.Contains(Me) Then
            previousValue.ProvisionCompras.Remove(Me)
        End If

        If TipoVenta IsNot Nothing Then
            If Not TipoVenta.ProvisionCompras.Contains(Me) Then
                TipoVenta.ProvisionCompras.Add(Me)
            End If

            TIV_ID = TipoVenta.TIV_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoVenta") AndAlso
                ChangeTracker.OriginalValues("TipoVenta") Is TipoVenta Then
                ChangeTracker.OriginalValues.Remove("TipoVenta")
            Else
                ChangeTracker.RecordOriginalValue("TipoVenta", previousValue)
            End If
            If TipoVenta IsNot Nothing AndAlso Not TipoVenta.ChangeTracker.ChangeTrackingEnabled Then
                TipoVenta.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleTipoDocumentos(ByVal previousValue As DetalleTipoDocumentos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ProvisionCompras.Contains(Me) Then
            previousValue.ProvisionCompras.Remove(Me)
        End If

        If DetalleTipoDocumentos IsNot Nothing Then
            If Not DetalleTipoDocumentos.ProvisionCompras.Contains(Me) Then
                DetalleTipoDocumentos.ProvisionCompras.Add(Me)
            End If

            dtd_IdRef = DetalleTipoDocumentos.DTD_ID
        ElseIf Not skipKeys Then
            dtd_IdRef = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("DetalleTipoDocumentos") Is DetalleTipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("DetalleTipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTipoDocumentos", previousValue)
            End If
            If DetalleTipoDocumentos IsNot Nothing AndAlso Not DetalleTipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupMoneda(ByVal previousValue As Moneda, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ProvisionCompras.Contains(Me) Then
            previousValue.ProvisionCompras.Remove(Me)
        End If

        If Moneda IsNot Nothing Then
            If Not Moneda.ProvisionCompras.Contains(Me) Then
                Moneda.ProvisionCompras.Add(Me)
            End If

            mon_Id = Moneda.MON_ID
        ElseIf Not skipKeys Then
            mon_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Moneda") AndAlso
                ChangeTracker.OriginalValues("Moneda") Is Moneda Then
                ChangeTracker.OriginalValues.Remove("Moneda")
            Else
                ChangeTracker.RecordOriginalValue("Moneda", previousValue)
            End If
            If Moneda IsNot Nothing AndAlso Not Moneda.ChangeTracker.ChangeTrackingEnabled Then
                Moneda.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTiposBienesServicios(ByVal previousValue As TiposBienesServicios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ProvisionCompras.Contains(Me) Then
            previousValue.ProvisionCompras.Remove(Me)
        End If

        If TiposBienesServicios IsNot Nothing Then
            If Not TiposBienesServicios.ProvisionCompras.Contains(Me) Then
                TiposBienesServicios.ProvisionCompras.Add(Me)
            End If

            tib_TipoBien_Id = TiposBienesServicios.tib_TipoBien_Id
        ElseIf Not skipKeys Then
            tib_TipoBien_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TiposBienesServicios") AndAlso
                ChangeTracker.OriginalValues("TiposBienesServicios") Is TiposBienesServicios Then
                ChangeTracker.OriginalValues.Remove("TiposBienesServicios")
            Else
                ChangeTracker.RecordOriginalValue("TiposBienesServicios", previousValue)
            End If
            If TiposBienesServicios IsNot Nothing AndAlso Not TiposBienesServicios.ChangeTracker.ChangeTrackingEnabled Then
                TiposBienesServicios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupRolOpeCtaCte(ByVal previousValue As RolOpeCtaCte, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ProvisionCompras.Contains(Me) Then
            previousValue.ProvisionCompras.Remove(Me)
        End If

        If RolOpeCtaCte IsNot Nothing Then
            If Not RolOpeCtaCte.ProvisionCompras.Contains(Me) Then
                RolOpeCtaCte.ProvisionCompras.Add(Me)
            End If

            cct_Id = RolOpeCtaCte.CCT_ID
            tdo_Id = RolOpeCtaCte.TDO_ID
            dtd_Id = RolOpeCtaCte.DTD_ID
        ElseIf Not skipKeys Then
            cct_Id = Nothing
            tdo_Id = Nothing
            dtd_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("RolOpeCtaCte") AndAlso
                ChangeTracker.OriginalValues("RolOpeCtaCte") Is RolOpeCtaCte Then
                ChangeTracker.OriginalValues.Remove("RolOpeCtaCte")
            Else
                ChangeTracker.RecordOriginalValue("RolOpeCtaCte", previousValue)
            End If
            If RolOpeCtaCte IsNot Nothing AndAlso Not RolOpeCtaCte.ChangeTracker.ChangeTrackingEnabled Then
                RolOpeCtaCte.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPuntoVenta(ByVal previousValue As PuntoVenta, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ProvisionCompras.Contains(Me) Then
            previousValue.ProvisionCompras.Remove(Me)
        End If

        If PuntoVenta IsNot Nothing Then
            If Not PuntoVenta.ProvisionCompras.Contains(Me) Then
                PuntoVenta.ProvisionCompras.Add(Me)
            End If

            pve_Id = PuntoVenta.PVE_ID
        ElseIf Not skipKeys Then
            pve_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("PuntoVenta") AndAlso
                ChangeTracker.OriginalValues("PuntoVenta") Is PuntoVenta Then
                ChangeTracker.OriginalValues.Remove("PuntoVenta")
            Else
                ChangeTracker.RecordOriginalValue("PuntoVenta", previousValue)
            End If
            If PuntoVenta IsNot Nothing AndAlso Not PuntoVenta.ChangeTracker.ChangeTrackingEnabled Then
                PuntoVenta.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPeriodo(ByVal previousValue As Periodo)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ProvisionCompras.Contains(Me) Then
            previousValue.ProvisionCompras.Remove(Me)
        End If

        If Periodo IsNot Nothing Then
            If Not Periodo.ProvisionCompras.Contains(Me) Then
                Periodo.ProvisionCompras.Add(Me)
            End If

            prd_Periodo_id = Periodo.prd_Periodo_id
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Periodo") AndAlso
                ChangeTracker.OriginalValues("Periodo") Is Periodo Then
                ChangeTracker.OriginalValues.Remove("Periodo")
            Else
                ChangeTracker.RecordOriginalValue("Periodo", previousValue)
            End If
            If Periodo IsNot Nothing AndAlso Not Periodo.ChangeTracker.ChangeTrackingEnabled Then
                Periodo.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ProvisionCompras.Contains(Me) Then
            previousValue.ProvisionCompras.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.ProvisionCompras.Contains(Me) Then
                Personas.ProvisionCompras.Add(Me)
            End If

            per_Id = Personas.PER_ID
        ElseIf Not skipKeys Then
            per_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ProvisionCompras.Contains(Me) Then
            previousValue.ProvisionCompras.Remove(Me)
        End If

        If Usuarios IsNot Nothing Then
            If Not Usuarios.ProvisionCompras.Contains(Me) Then
                Usuarios.ProvisionCompras.Add(Me)
            End If

            Usu_Id = Usuarios.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDocuMovimiento(ByVal previousValue As DocuMovimiento, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If DocuMovimiento IsNot Nothing Then
            dmo_Id = DocuMovimiento.DMO_ID
        ElseIf Not skipKeys Then
            dmo_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DocuMovimiento") AndAlso
                ChangeTracker.OriginalValues("DocuMovimiento") Is DocuMovimiento Then
                ChangeTracker.OriginalValues.Remove("DocuMovimiento")
            Else
                ChangeTracker.RecordOriginalValue("DocuMovimiento", previousValue)
            End If
            If DocuMovimiento IsNot Nothing AndAlso Not DocuMovimiento.ChangeTracker.ChangeTrackingEnabled Then
                DocuMovimiento.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas1(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ProvisionCompras_1.Contains(Me) Then
            previousValue.ProvisionCompras_1.Remove(Me)
        End If

        If Personas1 IsNot Nothing Then
            If Not Personas1.ProvisionCompras_1.Contains(Me) Then
                Personas1.ProvisionCompras_1.Add(Me)
            End If

            per_idResponsable = Personas1.PER_ID
        ElseIf Not skipKeys Then
            per_idResponsable = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas1") AndAlso
                ChangeTracker.OriginalValues("Personas1") Is Personas1 Then
                ChangeTracker.OriginalValues.Remove("Personas1")
            Else
                ChangeTracker.RecordOriginalValue("Personas1", previousValue)
            End If
            If Personas1 IsNot Nothing AndAlso Not Personas1.ChangeTracker.ChangeTrackingEnabled Then
                Personas1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTiposReparables(ByVal previousValue As TiposReparables, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If TiposReparables IsNot Nothing Then
            rep_id = TiposReparables.rep_id
        ElseIf Not skipKeys Then
            rep_id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TiposReparables") AndAlso
                ChangeTracker.OriginalValues("TiposReparables") Is TiposReparables Then
                ChangeTracker.OriginalValues.Remove("TiposReparables")
            Else
                ChangeTracker.RecordOriginalValue("TiposReparables", previousValue)
            End If
            If TiposReparables IsNot Nothing AndAlso Not TiposReparables.ChangeTracker.ChangeTrackingEnabled Then
                TiposReparables.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupOrdenServicio(ByVal previousValue As OrdenServicio, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ProvisionCompras.Contains(Me) Then
            previousValue.ProvisionCompras.Remove(Me)
        End If

        If OrdenServicio IsNot Nothing Then
            If Not OrdenServicio.ProvisionCompras.Contains(Me) Then
                OrdenServicio.ProvisionCompras.Add(Me)
            End If

            OSE_ID = OrdenServicio.OSE_ID
        ElseIf Not skipKeys Then
            OSE_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("OrdenServicio") AndAlso
                ChangeTracker.OriginalValues("OrdenServicio") Is OrdenServicio Then
                ChangeTracker.OriginalValues.Remove("OrdenServicio")
            Else
                ChangeTracker.RecordOriginalValue("OrdenServicio", previousValue)
            End If
            If OrdenServicio IsNot Nothing AndAlso Not OrdenServicio.ChangeTracker.ChangeTrackingEnabled Then
                OrdenServicio.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupRendicionGastos(ByVal previousValue As RendicionGastos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ProvisionCompras.Contains(Me) Then
            previousValue.ProvisionCompras.Remove(Me)
        End If

        If RendicionGastos IsNot Nothing Then
            If Not RendicionGastos.ProvisionCompras.Contains(Me) Then
                RendicionGastos.ProvisionCompras.Add(Me)
            End If

            RGA_ID = RendicionGastos.RGA_ID
        ElseIf Not skipKeys Then
            RGA_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("RendicionGastos") AndAlso
                ChangeTracker.OriginalValues("RendicionGastos") Is RendicionGastos Then
                ChangeTracker.OriginalValues.Remove("RendicionGastos")
            Else
                ChangeTracker.RecordOriginalValue("RendicionGastos", previousValue)
            End If
            If RendicionGastos IsNot Nothing AndAlso Not RendicionGastos.ChangeTracker.ChangeTrackingEnabled Then
                RendicionGastos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleProvisionCompras(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleProvisionCompras In e.NewItems
                item.prc_Voucher = prc_Voucher
                item.lib_Id = lib_Id
                item.prd_Periodo_id = prd_Periodo_id
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleProvisionCompras", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleProvisionCompras In e.OldItems
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleProvisionCompras", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupReferenciaProvisionCompras(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As ReferenciaProvisionCompras In e.NewItems
                item.prc_Voucher = prc_Voucher
                item.lib_Id = lib_Id
                item.prd_Periodo_id = prd_Periodo_id
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("ReferenciaProvisionCompras", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As ReferenciaProvisionCompras In e.OldItems
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("ReferenciaProvisionCompras", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

#End Region
End Class
