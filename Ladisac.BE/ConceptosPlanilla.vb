'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(TiposTrabajador))>
<KnownType(GetType(TiposPlanillas))>
<KnownType(GetType(Periodisidad))>
<KnownType(GetType(Planillas))>
<KnownType(GetType(TiposTareos))>
<KnownType(GetType(DetalleConceptosPlanillas))>
Partial Public Class ConceptosPlanilla
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared tit_TipoTrab_Id As string = "tit_TipoTrab_Id"
				public shared tip_TipoPlan_Id As string = "tip_TipoPlan_Id"
				public shared ItemConceptoPlanilla As string = "ItemConceptoPlanilla"
				public shared pec_Periodisidad_Id As string = "pec_Periodisidad_Id"
				public shared tio_TiposTareo_Id As string = "tio_TiposTareo_Id"
				public shared cop_EsPDT As string = "cop_EsPDT"
				public shared cop_EsActivo As string = "cop_EsActivo"
				public shared cop_Descripcion As string = "cop_Descripcion"
				public shared Usu_Id As string = "Usu_Id"
				public shared cop_FecGrab As string = "cop_FecGrab"
		    End Structure
	



    <DataMember()>
    Public Property tit_TipoTrab_Id() As String
        Get
            Return _tit_TipoTrab_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tit_TipoTrab_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'tit_TipoTrab_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If TiposTrabajador IsNot Nothing AndAlso Not Equals(TiposTrabajador.tit_TipoTrab_Id, value) Then
                        TiposTrabajador = Nothing
                    End If
                End If
                _tit_TipoTrab_Id = value
                OnPropertyChanged("tit_TipoTrab_Id")
            End If
        End Set
    End Property

    Private _tit_TipoTrab_Id As String

    <DataMember()>
    Public Property tip_TipoPlan_Id() As String
        Get
            Return _tip_TipoPlan_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tip_TipoPlan_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'tip_TipoPlan_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If TiposPlanillas IsNot Nothing AndAlso Not Equals(TiposPlanillas.tip_TipoPlan_Id, value) Then
                        TiposPlanillas = Nothing
                    End If
                End If
                _tip_TipoPlan_Id = value
                OnPropertyChanged("tip_TipoPlan_Id")
            End If
        End Set
    End Property

    Private _tip_TipoPlan_Id As String

    <DataMember()>
    Public Property ItemConceptoPlanilla() As String
        Get
            Return _itemConceptoPlanilla
        End Get
        Set(ByVal value As String)
            If Not Equals(_itemConceptoPlanilla, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'ItemConceptoPlanilla' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _itemConceptoPlanilla = value
                OnPropertyChanged("ItemConceptoPlanilla")
            End If
        End Set
    End Property

    Private _itemConceptoPlanilla As String

    <DataMember()>
    Public Property pec_Periodisidad_Id() As String
        Get
            Return _pec_Periodisidad_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_pec_Periodisidad_Id, value) Then
                ChangeTracker.RecordOriginalValue("pec_Periodisidad_Id", _pec_Periodisidad_Id)
                If Not IsDeserializing Then
                    If Periodisidad IsNot Nothing AndAlso Not Equals(Periodisidad.pec_Periodisidad_Id, value) Then
                        Periodisidad = Nothing
                    End If
                End If
                _pec_Periodisidad_Id = value
                OnPropertyChanged("pec_Periodisidad_Id")
            End If
        End Set
    End Property

    Private _pec_Periodisidad_Id As String

    <DataMember()>
    Public Property tio_TiposTareo_Id() As String
        Get
            Return _tio_TiposTareo_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tio_TiposTareo_Id, value) Then
                ChangeTracker.RecordOriginalValue("tio_TiposTareo_Id", _tio_TiposTareo_Id)
                If Not IsDeserializing Then
                    If TiposTareos IsNot Nothing AndAlso Not Equals(TiposTareos.tio_TiposTareo_Id, value) Then
                        TiposTareos = Nothing
                    End If
                End If
                _tio_TiposTareo_Id = value
                OnPropertyChanged("tio_TiposTareo_Id")
            End If
        End Set
    End Property

    Private _tio_TiposTareo_Id As String

    <DataMember()>
    Public Property cop_EsPDT() As Boolean
        Get
            Return _cop_EsPDT
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_cop_EsPDT, value) Then
                _cop_EsPDT = value
                OnPropertyChanged("cop_EsPDT")
            End If
        End Set
    End Property

    Private _cop_EsPDT As Boolean

    <DataMember()>
    Public Property cop_EsActivo() As Boolean
        Get
            Return _cop_EsActivo
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_cop_EsActivo, value) Then
                _cop_EsActivo = value
                OnPropertyChanged("cop_EsActivo")
            End If
        End Set
    End Property

    Private _cop_EsActivo As Boolean

    <DataMember()>
    Public Property cop_Descripcion() As String
        Get
            Return _cop_Descripcion
        End Get
        Set(ByVal value As String)
            If Not Equals(_cop_Descripcion, value) Then
                _cop_Descripcion = value
                OnPropertyChanged("cop_Descripcion")
            End If
        End Set
    End Property

    Private _cop_Descripcion As String

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                ChangeTracker.RecordOriginalValue("Usu_Id", _usu_Id)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property cop_FecGrab() As Date
        Get
            Return _cop_FecGrab
        End Get
        Set(ByVal value As Date)
            If Not Equals(_cop_FecGrab, value) Then
                _cop_FecGrab = value
                OnPropertyChanged("cop_FecGrab")
            End If
        End Set
    End Property

    Private _cop_FecGrab As Date

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property TiposTrabajador() As TiposTrabajador
        Get
            Return _tiposTrabajador
        End Get
        Set(ByVal value As TiposTrabajador)
            If _tiposTrabajador IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(tit_TipoTrab_Id, value.tit_TipoTrab_Id) Then
                        Throw New InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As TiposTrabajador = _tiposTrabajador
                _tiposTrabajador = value
                FixupTiposTrabajador(previousValue)
                OnNavigationPropertyChanged("TiposTrabajador")
            End If
        End Set
    End Property

    Private _tiposTrabajador As TiposTrabajador


    <DataMember()>
    Public Property TiposPlanillas() As TiposPlanillas
        Get
            Return _tiposPlanillas
        End Get
        Set(ByVal value As TiposPlanillas)
            If _tiposPlanillas IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(tip_TipoPlan_Id, value.tip_TipoPlan_Id) Then
                        Throw New InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As TiposPlanillas = _tiposPlanillas
                _tiposPlanillas = value
                FixupTiposPlanillas(previousValue)
                OnNavigationPropertyChanged("TiposPlanillas")
            End If
        End Set
    End Property

    Private _tiposPlanillas As TiposPlanillas


    <DataMember()>
    Public Property Periodisidad() As Periodisidad
        Get
            Return _periodisidad
        End Get
        Set(ByVal value As Periodisidad)
            If _periodisidad IsNot value Then
                Dim previousValue As Periodisidad = _periodisidad
                _periodisidad = value
                FixupPeriodisidad(previousValue)
                OnNavigationPropertyChanged("Periodisidad")
            End If
        End Set
    End Property

    Private _periodisidad As Periodisidad


    <DataMember()>
    Public Property Planillas() As TrackableCollection(Of Planillas)
        Get
            If _planillas Is Nothing Then
                _planillas = New TrackableCollection(Of Planillas)
                AddHandler _planillas.CollectionChanged, AddressOf FixupPlanillas
            End If
            Return _planillas
        End Get
        Set(ByVal value As TrackableCollection(Of Planillas))
            If Not Object.ReferenceEquals(_planillas, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _planillas IsNot Nothing Then
                    RemoveHandler _planillas.CollectionChanged, AddressOf FixupPlanillas
                End If
                _planillas = value
                If _planillas IsNot Nothing Then
                    AddHandler _planillas.CollectionChanged, AddressOf FixupPlanillas
                End If
                OnNavigationPropertyChanged("Planillas")
            End If
        End Set
    End Property

    Private _planillas As TrackableCollection(Of Planillas)

    <DataMember()>
    Public Property TiposTareos() As TiposTareos
        Get
            Return _tiposTareos
        End Get
        Set(ByVal value As TiposTareos)
            If _tiposTareos IsNot value Then
                Dim previousValue As TiposTareos = _tiposTareos
                _tiposTareos = value
                FixupTiposTareos(previousValue)
                OnNavigationPropertyChanged("TiposTareos")
            End If
        End Set
    End Property

    Private _tiposTareos As TiposTareos


    <DataMember()>
    Public Property DetalleConceptosPlanillas() As TrackableCollection(Of DetalleConceptosPlanillas)
        Get
            If _detalleConceptosPlanillas Is Nothing Then
                _detalleConceptosPlanillas = New TrackableCollection(Of DetalleConceptosPlanillas)
                AddHandler _detalleConceptosPlanillas.CollectionChanged, AddressOf FixupDetalleConceptosPlanillas
            End If
            Return _detalleConceptosPlanillas
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleConceptosPlanillas))
            If Not Object.ReferenceEquals(_detalleConceptosPlanillas, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleConceptosPlanillas IsNot Nothing Then
                    RemoveHandler _detalleConceptosPlanillas.CollectionChanged, AddressOf FixupDetalleConceptosPlanillas
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminación en cascada para aquellas entidades de la colección actual.
                    For Each item As DetalleConceptosPlanillas In _detalleConceptosPlanillas
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detalleConceptosPlanillas = value
                If _detalleConceptosPlanillas IsNot Nothing Then
                    AddHandler _detalleConceptosPlanillas.CollectionChanged, AddressOf FixupDetalleConceptosPlanillas
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                    For Each item As DetalleConceptosPlanillas In _detalleConceptosPlanillas
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetalleConceptosPlanillas")
            End If
        End Set
    End Property

    Private _detalleConceptosPlanillas As TrackableCollection(Of DetalleConceptosPlanillas)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociación que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesará notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Usuarios = Nothing
        TiposTrabajador = Nothing
        TiposPlanillas = Nothing
        Periodisidad = Nothing
        Planillas.Clear()
        TiposTareos = Nothing
        DetalleConceptosPlanillas.Clear()
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            Usu_Id = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTiposTrabajador(ByVal previousValue As TiposTrabajador)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ConceptosPlanilla.Contains(Me) Then
            previousValue.ConceptosPlanilla.Remove(Me)
        End If

        If TiposTrabajador IsNot Nothing Then
            If Not TiposTrabajador.ConceptosPlanilla.Contains(Me) Then
                TiposTrabajador.ConceptosPlanilla.Add(Me)
            End If

            tit_TipoTrab_Id = TiposTrabajador.tit_TipoTrab_Id
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TiposTrabajador") AndAlso
                ChangeTracker.OriginalValues("TiposTrabajador") Is TiposTrabajador Then
                ChangeTracker.OriginalValues.Remove("TiposTrabajador")
            Else
                ChangeTracker.RecordOriginalValue("TiposTrabajador", previousValue)
            End If
            If TiposTrabajador IsNot Nothing AndAlso Not TiposTrabajador.ChangeTracker.ChangeTrackingEnabled Then
                TiposTrabajador.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTiposPlanillas(ByVal previousValue As TiposPlanillas)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ConceptosPlanilla.Contains(Me) Then
            previousValue.ConceptosPlanilla.Remove(Me)
        End If

        If TiposPlanillas IsNot Nothing Then
            If Not TiposPlanillas.ConceptosPlanilla.Contains(Me) Then
                TiposPlanillas.ConceptosPlanilla.Add(Me)
            End If

            tip_TipoPlan_Id = TiposPlanillas.tip_TipoPlan_Id
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TiposPlanillas") AndAlso
                ChangeTracker.OriginalValues("TiposPlanillas") Is TiposPlanillas Then
                ChangeTracker.OriginalValues.Remove("TiposPlanillas")
            Else
                ChangeTracker.RecordOriginalValue("TiposPlanillas", previousValue)
            End If
            If TiposPlanillas IsNot Nothing AndAlso Not TiposPlanillas.ChangeTracker.ChangeTrackingEnabled Then
                TiposPlanillas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPeriodisidad(ByVal previousValue As Periodisidad)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ConceptosPlanilla.Contains(Me) Then
            previousValue.ConceptosPlanilla.Remove(Me)
        End If

        If Periodisidad IsNot Nothing Then
            If Not Periodisidad.ConceptosPlanilla.Contains(Me) Then
                Periodisidad.ConceptosPlanilla.Add(Me)
            End If

            pec_Periodisidad_Id = Periodisidad.pec_Periodisidad_Id
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Periodisidad") AndAlso
                ChangeTracker.OriginalValues("Periodisidad") Is Periodisidad Then
                ChangeTracker.OriginalValues.Remove("Periodisidad")
            Else
                ChangeTracker.RecordOriginalValue("Periodisidad", previousValue)
            End If
            If Periodisidad IsNot Nothing AndAlso Not Periodisidad.ChangeTracker.ChangeTrackingEnabled Then
                Periodisidad.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTiposTareos(ByVal previousValue As TiposTareos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ConceptosPlanilla.Contains(Me) Then
            previousValue.ConceptosPlanilla.Remove(Me)
        End If

        If TiposTareos IsNot Nothing Then
            If Not TiposTareos.ConceptosPlanilla.Contains(Me) Then
                TiposTareos.ConceptosPlanilla.Add(Me)
            End If

            tio_TiposTareo_Id = TiposTareos.tio_TiposTareo_Id
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TiposTareos") AndAlso
                ChangeTracker.OriginalValues("TiposTareos") Is TiposTareos Then
                ChangeTracker.OriginalValues.Remove("TiposTareos")
            Else
                ChangeTracker.RecordOriginalValue("TiposTareos", previousValue)
            End If
            If TiposTareos IsNot Nothing AndAlso Not TiposTareos.ChangeTracker.ChangeTrackingEnabled Then
                TiposTareos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPlanillas(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As Planillas In e.NewItems
                item.ConceptosPlanilla = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("Planillas", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As Planillas In e.OldItems
                If ReferenceEquals(item.ConceptosPlanilla, Me) Then
                    item.ConceptosPlanilla = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("Planillas", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupDetalleConceptosPlanillas(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleConceptosPlanillas In e.NewItems
                item.tit_TipoTrab_Id = tit_TipoTrab_Id
                item.tip_TipoPlan_Id = tip_TipoPlan_Id
                item.ItemConceptoPlanilla = ItemConceptoPlanilla
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleConceptosPlanillas", item)
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleConceptosPlanillas In e.OldItems
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleConceptosPlanillas", item)
                    ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                    ' permite que la relación se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

#End Region
End Class
