'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(Personas))>
Partial Public Class DetalleReparoTrabajador
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared ret_Numero As string = "ret_Numero"
				public shared dret_Item As string = "dret_Item"
				public shared per_Id As string = "per_Id"
				public shared dret_AplicaDia As string = "dret_AplicaDia"
				public shared dret_AplicaDoble As string = "dret_AplicaDoble"
				public shared dret_fecha As string = "dret_fecha"
				public shared dret_HoraProd As string = "dret_HoraProd"
				public shared dret_HoraPll As string = "dret_HoraPll"
				public shared dret_Observaciones1 As string = "dret_Observaciones1"
				public shared dret_Observaciones2 As string = "dret_Observaciones2"
				public shared Usu_Id As string = "Usu_Id"
				public shared dret_FecGrab As string = "dret_FecGrab"
		    End Structure
	



    <DataMember()>
    Public Property ret_Numero() As String
        Get
            Return _ret_Numero
        End Get
        Set(ByVal value As String)
            If Not Equals(_ret_Numero, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'ret_Numero' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _ret_Numero = value
                OnPropertyChanged("ret_Numero")
            End If
        End Set
    End Property

    Private _ret_Numero As String

    <DataMember()>
    Public Property dret_Item() As String
        Get
            Return _dret_Item
        End Get
        Set(ByVal value As String)
            If Not Equals(_dret_Item, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'dret_Item' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _dret_Item = value
                OnPropertyChanged("dret_Item")
            End If
        End Set
    End Property

    Private _dret_Item As String

    <DataMember()>
    Public Property per_Id() As String
        Get
            Return _per_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_per_Id, value) Then
                ChangeTracker.RecordOriginalValue("per_Id", _per_Id)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _per_Id = value
                OnPropertyChanged("per_Id")
            End If
        End Set
    End Property

    Private _per_Id As String

    <DataMember()>
    Public Property dret_AplicaDia() As Boolean
        Get
            Return _dret_AplicaDia
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_dret_AplicaDia, value) Then
                _dret_AplicaDia = value
                OnPropertyChanged("dret_AplicaDia")
            End If
        End Set
    End Property

    Private _dret_AplicaDia As Boolean

    <DataMember()>
    Public Property dret_AplicaDoble() As Nullable(Of Boolean)
        Get
            Return _dret_AplicaDoble
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_dret_AplicaDoble, value) Then
                _dret_AplicaDoble = value
                OnPropertyChanged("dret_AplicaDoble")
            End If
        End Set
    End Property

    Private _dret_AplicaDoble As Nullable(Of Boolean)

    <DataMember()>
    Public Property dret_fecha() As Date
        Get
            Return _dret_fecha
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dret_fecha, value) Then
                _dret_fecha = value
                OnPropertyChanged("dret_fecha")
            End If
        End Set
    End Property

    Private _dret_fecha As Date

    <DataMember()>
    Public Property dret_HoraProd() As Nullable(Of Decimal)
        Get
            Return _dret_HoraProd
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dret_HoraProd, value) Then
                _dret_HoraProd = value
                OnPropertyChanged("dret_HoraProd")
            End If
        End Set
    End Property

    Private _dret_HoraProd As Nullable(Of Decimal)

    <DataMember()>
    Public Property dret_HoraPll() As Nullable(Of Decimal)
        Get
            Return _dret_HoraPll
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dret_HoraPll, value) Then
                _dret_HoraPll = value
                OnPropertyChanged("dret_HoraPll")
            End If
        End Set
    End Property

    Private _dret_HoraPll As Nullable(Of Decimal)

    <DataMember()>
    Public Property dret_Observaciones1() As String
        Get
            Return _dret_Observaciones1
        End Get
        Set(ByVal value As String)
            If Not Equals(_dret_Observaciones1, value) Then
                _dret_Observaciones1 = value
                OnPropertyChanged("dret_Observaciones1")
            End If
        End Set
    End Property

    Private _dret_Observaciones1 As String

    <DataMember()>
    Public Property dret_Observaciones2() As String
        Get
            Return _dret_Observaciones2
        End Get
        Set(ByVal value As String)
            If Not Equals(_dret_Observaciones2, value) Then
                _dret_Observaciones2 = value
                OnPropertyChanged("dret_Observaciones2")
            End If
        End Set
    End Property

    Private _dret_Observaciones2 As String

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                ChangeTracker.RecordOriginalValue("Usu_Id", _usu_Id)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property dret_FecGrab() As Date
        Get
            Return _dret_FecGrab
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dret_FecGrab, value) Then
                _dret_FecGrab = value
                OnPropertyChanged("dret_FecGrab")
            End If
        End Set
    End Property

    Private _dret_FecGrab As Date

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociación que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesará notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Usuarios = Nothing
        Personas = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            Usu_Id = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleReparoTrabajador.Contains(Me) Then
            previousValue.DetalleReparoTrabajador.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.DetalleReparoTrabajador.Contains(Me) Then
                Personas.DetalleReparoTrabajador.Add(Me)
            End If

            per_Id = Personas.PER_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
