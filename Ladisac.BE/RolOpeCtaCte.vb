'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(DetalleLeasing))>
<KnownType(GetType(Leasing))>
<KnownType(GetType(CtaCte))>
<KnownType(GetType(CuentasContables))>
<KnownType(GetType(DetalleTipoDocumentos))>
<KnownType(GetType(DetalleConceptosPlanillas))>
<KnownType(GetType(PrestamosTrabajador))>
<KnownType(GetType(TipoDocumentos))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(TesoreriaPlanillas))>
<KnownType(GetType(ProvisionCompras))>
Partial Public Class RolOpeCtaCte
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared CCT_ID As string = "CCT_ID"
				public shared TDO_ID As string = "TDO_ID"
				public shared DTD_ID As string = "DTD_ID"
				public shared ROC_TIPO As string = "ROC_TIPO"
				public shared ROC_MODULO As string = "ROC_MODULO"
				public shared cuc_IdMN As string = "cuc_IdMN"
				public shared cuc_IdME As string = "cuc_IdME"
				public shared roc_EsContable As string = "roc_EsContable"
				public shared USU_ID As string = "USU_ID"
				public shared ROC_FEC_GRAB As string = "ROC_FEC_GRAB"
				public shared ROC_ESTADO As string = "ROC_ESTADO"
		    End Structure
	



    <DataMember()>
    Public Property CCT_ID() As String
        Get
            Return _cCT_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCT_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'CCT_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If CtaCte IsNot Nothing AndAlso Not Equals(CtaCte.CCT_ID, value) Then
                        CtaCte = Nothing
                    End If
                End If
                _cCT_ID = value
                OnPropertyChanged("CCT_ID")
            End If
        End Set
    End Property

    Private _cCT_ID As String

    <DataMember()>
    Public Property TDO_ID() As String
        Get
            Return _tDO_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'TDO_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If TipoDocumentos IsNot Nothing AndAlso Not Equals(TipoDocumentos.TDO_ID, value) Then
                        TipoDocumentos = Nothing
                    End If
                End If
                _tDO_ID = value
                OnPropertyChanged("TDO_ID")
            End If
        End Set
    End Property

    Private _tDO_ID As String

    <DataMember()>
    Public Property DTD_ID() As String
        Get
            Return _dTD_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DTD_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If DetalleTipoDocumentos IsNot Nothing AndAlso Not Equals(DetalleTipoDocumentos.DTD_ID, value) Then
                        DetalleTipoDocumentos = Nothing
                    End If
                End If
                _dTD_ID = value
                OnPropertyChanged("DTD_ID")
            End If
        End Set
    End Property

    Private _dTD_ID As String

    <DataMember()>
    Public Property ROC_TIPO() As Short
        Get
            Return _rOC_TIPO
        End Get
        Set(ByVal value As Short)
            If Not Equals(_rOC_TIPO, value) Then
                _rOC_TIPO = value
                OnPropertyChanged("ROC_TIPO")
            End If
        End Set
    End Property

    Private _rOC_TIPO As Short

    <DataMember()>
    Public Property ROC_MODULO() As Short
        Get
            Return _rOC_MODULO
        End Get
        Set(ByVal value As Short)
            If Not Equals(_rOC_MODULO, value) Then
                _rOC_MODULO = value
                OnPropertyChanged("ROC_MODULO")
            End If
        End Set
    End Property

    Private _rOC_MODULO As Short

    <DataMember()>
    Public Property cuc_IdMN() As String
        Get
            Return _cuc_IdMN
        End Get
        Set(ByVal value As String)
            If Not Equals(_cuc_IdMN, value) Then
                ChangeTracker.RecordOriginalValue("cuc_IdMN", _cuc_IdMN)
                If Not IsDeserializing Then
                    If CuentasContables IsNot Nothing AndAlso Not Equals(CuentasContables.CUC_ID, value) Then
                        CuentasContables = Nothing
                    End If
                End If
                _cuc_IdMN = value
                OnPropertyChanged("cuc_IdMN")
            End If
        End Set
    End Property

    Private _cuc_IdMN As String

    <DataMember()>
    Public Property cuc_IdME() As String
        Get
            Return _cuc_IdME
        End Get
        Set(ByVal value As String)
            If Not Equals(_cuc_IdME, value) Then
                ChangeTracker.RecordOriginalValue("cuc_IdME", _cuc_IdME)
                If Not IsDeserializing Then
                    If CuentasContables1 IsNot Nothing AndAlso Not Equals(CuentasContables1.CUC_ID, value) Then
                        CuentasContables1 = Nothing
                    End If
                End If
                _cuc_IdME = value
                OnPropertyChanged("cuc_IdME")
            End If
        End Set
    End Property

    Private _cuc_IdME As String

    <DataMember()>
    Public Property roc_EsContable() As Nullable(Of Boolean)
        Get
            Return _roc_EsContable
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_roc_EsContable, value) Then
                _roc_EsContable = value
                OnPropertyChanged("roc_EsContable")
            End If
        End Set
    End Property

    Private _roc_EsContable As Nullable(Of Boolean)

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property ROC_FEC_GRAB() As Date
        Get
            Return _rOC_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_rOC_FEC_GRAB, value) Then
                _rOC_FEC_GRAB = value
                OnPropertyChanged("ROC_FEC_GRAB")
            End If
        End Set
    End Property

    Private _rOC_FEC_GRAB As Date

    <DataMember()>
    Public Property ROC_ESTADO() As Boolean
        Get
            Return _rOC_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_rOC_ESTADO, value) Then
                _rOC_ESTADO = value
                OnPropertyChanged("ROC_ESTADO")
            End If
        End Set
    End Property

    Private _rOC_ESTADO As Boolean

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property DetalleLeasing() As TrackableCollection(Of DetalleLeasing)
        Get
            If _detalleLeasing Is Nothing Then
                _detalleLeasing = New TrackableCollection(Of DetalleLeasing)
                AddHandler _detalleLeasing.CollectionChanged, AddressOf FixupDetalleLeasing
            End If
            Return _detalleLeasing
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleLeasing))
            If Not Object.ReferenceEquals(_detalleLeasing, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleLeasing IsNot Nothing Then
                    RemoveHandler _detalleLeasing.CollectionChanged, AddressOf FixupDetalleLeasing
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminación en cascada para aquellas entidades de la colección actual.
                    For Each item As DetalleLeasing In _detalleLeasing
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detalleLeasing = value
                If _detalleLeasing IsNot Nothing Then
                    AddHandler _detalleLeasing.CollectionChanged, AddressOf FixupDetalleLeasing
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                    For Each item As DetalleLeasing In _detalleLeasing
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetalleLeasing")
            End If
        End Set
    End Property

    Private _detalleLeasing As TrackableCollection(Of DetalleLeasing)

    <DataMember()>
    Public Property Leasing() As TrackableCollection(Of Leasing)
        Get
            If _leasing Is Nothing Then
                _leasing = New TrackableCollection(Of Leasing)
                AddHandler _leasing.CollectionChanged, AddressOf FixupLeasing
            End If
            Return _leasing
        End Get
        Set(ByVal value As TrackableCollection(Of Leasing))
            If Not Object.ReferenceEquals(_leasing, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _leasing IsNot Nothing Then
                    RemoveHandler _leasing.CollectionChanged, AddressOf FixupLeasing
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminación en cascada para aquellas entidades de la colección actual.
                    For Each item As Leasing In _leasing
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _leasing = value
                If _leasing IsNot Nothing Then
                    AddHandler _leasing.CollectionChanged, AddressOf FixupLeasing
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                    For Each item As Leasing In _leasing
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("Leasing")
            End If
        End Set
    End Property

    Private _leasing As TrackableCollection(Of Leasing)

    <DataMember()>
    Public Property CtaCte() As CtaCte
        Get
            Return _ctaCte
        End Get
        Set(ByVal value As CtaCte)
            If _ctaCte IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(CCT_ID, value.CCT_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As CtaCte = _ctaCte
                _ctaCte = value
                FixupCtaCte(previousValue)
                OnNavigationPropertyChanged("CtaCte")
            End If
        End Set
    End Property

    Private _ctaCte As CtaCte


    <DataMember()>
    Public Property CuentasContables() As CuentasContables
        Get
            Return _cuentasContables
        End Get
        Set(ByVal value As CuentasContables)
            If _cuentasContables IsNot value Then
                Dim previousValue As CuentasContables = _cuentasContables
                _cuentasContables = value
                FixupCuentasContables(previousValue)
                OnNavigationPropertyChanged("CuentasContables")
            End If
        End Set
    End Property

    Private _cuentasContables As CuentasContables


    <DataMember()>
    Public Property CuentasContables1() As CuentasContables
        Get
            Return _cuentasContables1
        End Get
        Set(ByVal value As CuentasContables)
            If _cuentasContables1 IsNot value Then
                Dim previousValue As CuentasContables = _cuentasContables1
                _cuentasContables1 = value
                FixupCuentasContables1(previousValue)
                OnNavigationPropertyChanged("CuentasContables1")
            End If
        End Set
    End Property

    Private _cuentasContables1 As CuentasContables


    <DataMember()>
    Public Property DetalleTipoDocumentos() As DetalleTipoDocumentos
        Get
            Return _detalleTipoDocumentos
        End Get
        Set(ByVal value As DetalleTipoDocumentos)
            If _detalleTipoDocumentos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(DTD_ID, value.DTD_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As DetalleTipoDocumentos = _detalleTipoDocumentos
                _detalleTipoDocumentos = value
                FixupDetalleTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("DetalleTipoDocumentos")
            End If
        End Set
    End Property

    Private _detalleTipoDocumentos As DetalleTipoDocumentos


    <DataMember()>
    Public Property DetalleConceptosPlanillas() As TrackableCollection(Of DetalleConceptosPlanillas)
        Get
            If _detalleConceptosPlanillas Is Nothing Then
                _detalleConceptosPlanillas = New TrackableCollection(Of DetalleConceptosPlanillas)
                AddHandler _detalleConceptosPlanillas.CollectionChanged, AddressOf FixupDetalleConceptosPlanillas
            End If
            Return _detalleConceptosPlanillas
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleConceptosPlanillas))
            If Not Object.ReferenceEquals(_detalleConceptosPlanillas, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleConceptosPlanillas IsNot Nothing Then
                    RemoveHandler _detalleConceptosPlanillas.CollectionChanged, AddressOf FixupDetalleConceptosPlanillas
                End If
                _detalleConceptosPlanillas = value
                If _detalleConceptosPlanillas IsNot Nothing Then
                    AddHandler _detalleConceptosPlanillas.CollectionChanged, AddressOf FixupDetalleConceptosPlanillas
                End If
                OnNavigationPropertyChanged("DetalleConceptosPlanillas")
            End If
        End Set
    End Property

    Private _detalleConceptosPlanillas As TrackableCollection(Of DetalleConceptosPlanillas)

    <DataMember()>
    Public Property PrestamosTrabajador() As TrackableCollection(Of PrestamosTrabajador)
        Get
            If _prestamosTrabajador Is Nothing Then
                _prestamosTrabajador = New TrackableCollection(Of PrestamosTrabajador)
                AddHandler _prestamosTrabajador.CollectionChanged, AddressOf FixupPrestamosTrabajador
            End If
            Return _prestamosTrabajador
        End Get
        Set(ByVal value As TrackableCollection(Of PrestamosTrabajador))
            If Not Object.ReferenceEquals(_prestamosTrabajador, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _prestamosTrabajador IsNot Nothing Then
                    RemoveHandler _prestamosTrabajador.CollectionChanged, AddressOf FixupPrestamosTrabajador
                End If
                _prestamosTrabajador = value
                If _prestamosTrabajador IsNot Nothing Then
                    AddHandler _prestamosTrabajador.CollectionChanged, AddressOf FixupPrestamosTrabajador
                End If
                OnNavigationPropertyChanged("PrestamosTrabajador")
            End If
        End Set
    End Property

    Private _prestamosTrabajador As TrackableCollection(Of PrestamosTrabajador)

    <DataMember()>
    Public Property TipoDocumentos() As TipoDocumentos
        Get
            Return _tipoDocumentos
        End Get
        Set(ByVal value As TipoDocumentos)
            If _tipoDocumentos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(TDO_ID, value.TDO_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As TipoDocumentos = _tipoDocumentos
                _tipoDocumentos = value
                FixupTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("TipoDocumentos")
            End If
        End Set
    End Property

    Private _tipoDocumentos As TipoDocumentos


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property TesoreriaPlanillas() As TrackableCollection(Of TesoreriaPlanillas)
        Get
            If _tesoreriaPlanillas Is Nothing Then
                _tesoreriaPlanillas = New TrackableCollection(Of TesoreriaPlanillas)
                AddHandler _tesoreriaPlanillas.CollectionChanged, AddressOf FixupTesoreriaPlanillas
            End If
            Return _tesoreriaPlanillas
        End Get
        Set(ByVal value As TrackableCollection(Of TesoreriaPlanillas))
            If Not Object.ReferenceEquals(_tesoreriaPlanillas, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _tesoreriaPlanillas IsNot Nothing Then
                    RemoveHandler _tesoreriaPlanillas.CollectionChanged, AddressOf FixupTesoreriaPlanillas
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminación en cascada para aquellas entidades de la colección actual.
                    For Each item As TesoreriaPlanillas In _tesoreriaPlanillas
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _tesoreriaPlanillas = value
                If _tesoreriaPlanillas IsNot Nothing Then
                    AddHandler _tesoreriaPlanillas.CollectionChanged, AddressOf FixupTesoreriaPlanillas
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                    For Each item As TesoreriaPlanillas In _tesoreriaPlanillas
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("TesoreriaPlanillas")
            End If
        End Set
    End Property

    Private _tesoreriaPlanillas As TrackableCollection(Of TesoreriaPlanillas)

    <DataMember()>
    Public Property TesoreriaPlanillas1() As TrackableCollection(Of TesoreriaPlanillas)
        Get
            If _tesoreriaPlanillas1 Is Nothing Then
                _tesoreriaPlanillas1 = New TrackableCollection(Of TesoreriaPlanillas)
                AddHandler _tesoreriaPlanillas1.CollectionChanged, AddressOf FixupTesoreriaPlanillas1
            End If
            Return _tesoreriaPlanillas1
        End Get
        Set(ByVal value As TrackableCollection(Of TesoreriaPlanillas))
            If Not Object.ReferenceEquals(_tesoreriaPlanillas1, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _tesoreriaPlanillas1 IsNot Nothing Then
                    RemoveHandler _tesoreriaPlanillas1.CollectionChanged, AddressOf FixupTesoreriaPlanillas1
                End If
                _tesoreriaPlanillas1 = value
                If _tesoreriaPlanillas1 IsNot Nothing Then
                    AddHandler _tesoreriaPlanillas1.CollectionChanged, AddressOf FixupTesoreriaPlanillas1
                End If
                OnNavigationPropertyChanged("TesoreriaPlanillas1")
            End If
        End Set
    End Property

    Private _tesoreriaPlanillas1 As TrackableCollection(Of TesoreriaPlanillas)

    <DataMember()>
    Public Property ProvisionCompras() As TrackableCollection(Of ProvisionCompras)
        Get
            If _provisionCompras Is Nothing Then
                _provisionCompras = New TrackableCollection(Of ProvisionCompras)
                AddHandler _provisionCompras.CollectionChanged, AddressOf FixupProvisionCompras
            End If
            Return _provisionCompras
        End Get
        Set(ByVal value As TrackableCollection(Of ProvisionCompras))
            If Not Object.ReferenceEquals(_provisionCompras, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _provisionCompras IsNot Nothing Then
                    RemoveHandler _provisionCompras.CollectionChanged, AddressOf FixupProvisionCompras
                End If
                _provisionCompras = value
                If _provisionCompras IsNot Nothing Then
                    AddHandler _provisionCompras.CollectionChanged, AddressOf FixupProvisionCompras
                End If
                OnNavigationPropertyChanged("ProvisionCompras")
            End If
        End Set
    End Property

    Private _provisionCompras As TrackableCollection(Of ProvisionCompras)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociación que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesará notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        DetalleLeasing.Clear()
        Leasing.Clear()
        CtaCte = Nothing
        CuentasContables = Nothing
        CuentasContables1 = Nothing
        DetalleTipoDocumentos = Nothing
        DetalleConceptosPlanillas.Clear()
        PrestamosTrabajador.Clear()
        TipoDocumentos = Nothing
        Usuarios = Nothing
        TesoreriaPlanillas.Clear()
        TesoreriaPlanillas1.Clear()
        ProvisionCompras.Clear()
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupCtaCte(ByVal previousValue As CtaCte)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.RolOpeCtaCte.Contains(Me) Then
            previousValue.RolOpeCtaCte.Remove(Me)
        End If

        If CtaCte IsNot Nothing Then
            If Not CtaCte.RolOpeCtaCte.Contains(Me) Then
                CtaCte.RolOpeCtaCte.Add(Me)
            End If

            CCT_ID = CtaCte.CCT_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CtaCte") AndAlso
                ChangeTracker.OriginalValues("CtaCte") Is CtaCte Then
                ChangeTracker.OriginalValues.Remove("CtaCte")
            Else
                ChangeTracker.RecordOriginalValue("CtaCte", previousValue)
            End If
            If CtaCte IsNot Nothing AndAlso Not CtaCte.ChangeTracker.ChangeTrackingEnabled Then
                CtaCte.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCuentasContables(ByVal previousValue As CuentasContables, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.RolOpeCtaCte.Contains(Me) Then
            previousValue.RolOpeCtaCte.Remove(Me)
        End If

        If CuentasContables IsNot Nothing Then
            If Not CuentasContables.RolOpeCtaCte.Contains(Me) Then
                CuentasContables.RolOpeCtaCte.Add(Me)
            End If

            cuc_IdMN = CuentasContables.CUC_ID
        ElseIf Not skipKeys Then
            cuc_IdMN = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CuentasContables") AndAlso
                ChangeTracker.OriginalValues("CuentasContables") Is CuentasContables Then
                ChangeTracker.OriginalValues.Remove("CuentasContables")
            Else
                ChangeTracker.RecordOriginalValue("CuentasContables", previousValue)
            End If
            If CuentasContables IsNot Nothing AndAlso Not CuentasContables.ChangeTracker.ChangeTrackingEnabled Then
                CuentasContables.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCuentasContables1(ByVal previousValue As CuentasContables, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.RolOpeCtaCte1.Contains(Me) Then
            previousValue.RolOpeCtaCte1.Remove(Me)
        End If

        If CuentasContables1 IsNot Nothing Then
            If Not CuentasContables1.RolOpeCtaCte1.Contains(Me) Then
                CuentasContables1.RolOpeCtaCte1.Add(Me)
            End If

            cuc_IdME = CuentasContables1.CUC_ID
        ElseIf Not skipKeys Then
            cuc_IdME = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CuentasContables1") AndAlso
                ChangeTracker.OriginalValues("CuentasContables1") Is CuentasContables1 Then
                ChangeTracker.OriginalValues.Remove("CuentasContables1")
            Else
                ChangeTracker.RecordOriginalValue("CuentasContables1", previousValue)
            End If
            If CuentasContables1 IsNot Nothing AndAlso Not CuentasContables1.ChangeTracker.ChangeTrackingEnabled Then
                CuentasContables1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleTipoDocumentos(ByVal previousValue As DetalleTipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.RolOpeCtaCte.Contains(Me) Then
            previousValue.RolOpeCtaCte.Remove(Me)
        End If

        If DetalleTipoDocumentos IsNot Nothing Then
            If Not DetalleTipoDocumentos.RolOpeCtaCte.Contains(Me) Then
                DetalleTipoDocumentos.RolOpeCtaCte.Add(Me)
            End If

            DTD_ID = DetalleTipoDocumentos.DTD_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("DetalleTipoDocumentos") Is DetalleTipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("DetalleTipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTipoDocumentos", previousValue)
            End If
            If DetalleTipoDocumentos IsNot Nothing AndAlso Not DetalleTipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoDocumentos(ByVal previousValue As TipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.RolOpeCtaCte.Contains(Me) Then
            previousValue.RolOpeCtaCte.Remove(Me)
        End If

        If TipoDocumentos IsNot Nothing Then
            If Not TipoDocumentos.RolOpeCtaCte.Contains(Me) Then
                TipoDocumentos.RolOpeCtaCte.Add(Me)
            End If

            TDO_ID = TipoDocumentos.TDO_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("TipoDocumentos") Is TipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("TipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("TipoDocumentos", previousValue)
            End If
            If TipoDocumentos IsNot Nothing AndAlso Not TipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                TipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.RolOpeCtaCte.Contains(Me) Then
            previousValue.RolOpeCtaCte.Remove(Me)
        End If

        If Usuarios IsNot Nothing Then
            If Not Usuarios.RolOpeCtaCte.Contains(Me) Then
                Usuarios.RolOpeCtaCte.Add(Me)
            End If

            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleLeasing(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleLeasing In e.NewItems
                item.RolOpeCtaCte = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleLeasing", item)
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleLeasing In e.OldItems
                If ReferenceEquals(item.RolOpeCtaCte, Me) Then
                    item.RolOpeCtaCte = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleLeasing", item)
                    ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                    ' permite que la relación se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupLeasing(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As Leasing In e.NewItems
                item.RolOpeCtaCte = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("Leasing", item)
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As Leasing In e.OldItems
                If ReferenceEquals(item.RolOpeCtaCte, Me) Then
                    item.RolOpeCtaCte = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("Leasing", item)
                    ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                    ' permite que la relación se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupDetalleConceptosPlanillas(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleConceptosPlanillas In e.NewItems
                item.RolOpeCtaCte = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleConceptosPlanillas", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleConceptosPlanillas In e.OldItems
                If ReferenceEquals(item.RolOpeCtaCte, Me) Then
                    item.RolOpeCtaCte = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleConceptosPlanillas", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupPrestamosTrabajador(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PrestamosTrabajador In e.NewItems
                item.RolOpeCtaCte = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PrestamosTrabajador", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PrestamosTrabajador In e.OldItems
                If ReferenceEquals(item.RolOpeCtaCte, Me) Then
                    item.RolOpeCtaCte = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PrestamosTrabajador", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupTesoreriaPlanillas(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As TesoreriaPlanillas In e.NewItems
                item.RolOpeCtaCte = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("TesoreriaPlanillas", item)
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As TesoreriaPlanillas In e.OldItems
                If ReferenceEquals(item.RolOpeCtaCte, Me) Then
                    item.RolOpeCtaCte = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("TesoreriaPlanillas", item)
                    ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                    ' permite que la relación se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupTesoreriaPlanillas1(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As TesoreriaPlanillas In e.NewItems
                item.RolOpeCtaCte1 = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("TesoreriaPlanillas1", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As TesoreriaPlanillas In e.OldItems
                If ReferenceEquals(item.RolOpeCtaCte1, Me) Then
                    item.RolOpeCtaCte1 = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("TesoreriaPlanillas1", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupProvisionCompras(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As ProvisionCompras In e.NewItems
                item.RolOpeCtaCte = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("ProvisionCompras", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As ProvisionCompras In e.OldItems
                If ReferenceEquals(item.RolOpeCtaCte, Me) Then
                    item.RolOpeCtaCte = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("ProvisionCompras", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
