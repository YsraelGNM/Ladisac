'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(TipoEntidad))>
<KnownType(GetType(Especificacion))>
<KnownType(GetType(Imagen))>
<KnownType(GetType(UnidadesTransporte))>
<KnownType(GetType(RegistroEquipo))>
<KnownType(GetType(OrdenServicioDetalle))>
<KnownType(GetType(CargaDescargaTransporte))>
<KnownType(GetType(PlanCargaDescargaHorno))>
Partial Public Class Entidad
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared ENO_ID As string = "ENO_ID"
				public shared TEN_ID As string = "TEN_ID"
				public shared ENO_DESCRIPCION As string = "ENO_DESCRIPCION"
				public shared ENO_ID_PADRE As string = "ENO_ID_PADRE"
				public shared ENO_HORAS As string = "ENO_HORAS"
				public shared ENO_TN As string = "ENO_TN"
				public shared ENO_DIA As string = "ENO_DIA"
				public shared ENO_USO As string = "ENO_USO"
				public shared USU_ID As string = "USU_ID"
				public shared ENO_FEC_GRAB As string = "ENO_FEC_GRAB"
				public shared ENO_ESTADO As string = "ENO_ESTADO"
				public shared UNT_ID As string = "UNT_ID"
				public shared ENO_KILOMETROS As string = "ENO_KILOMETROS"
				public shared ENO_RUTA As string = "ENO_RUTA"
				public shared ENO_CODIGO As string = "ENO_CODIGO"
				public shared CentroCosto As string = "CentroCosto"
		    End Structure
	



    <DataMember()>
    Public Property ENO_ID() As Integer
        Get
            Return _eNO_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_eNO_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'ENO_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _eNO_ID = value
                OnPropertyChanged("ENO_ID")
            End If
        End Set
    End Property

    Private _eNO_ID As Integer

    <DataMember()>
    Public Property TEN_ID() As Nullable(Of Integer)
        Get
            Return _tEN_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_tEN_ID, value) Then
                ChangeTracker.RecordOriginalValue("TEN_ID", _tEN_ID)
                If Not IsDeserializing Then
                    If TipoEntidad IsNot Nothing AndAlso Not Equals(TipoEntidad.TEN_ID, value) Then
                        TipoEntidad = Nothing
                    End If
                End If
                _tEN_ID = value
                OnPropertyChanged("TEN_ID")
            End If
        End Set
    End Property

    Private _tEN_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property ENO_DESCRIPCION() As String
        Get
            Return _eNO_DESCRIPCION
        End Get
        Set(ByVal value As String)
            If Not Equals(_eNO_DESCRIPCION, value) Then
                _eNO_DESCRIPCION = value
                OnPropertyChanged("ENO_DESCRIPCION")
            End If
        End Set
    End Property

    Private _eNO_DESCRIPCION As String

    <DataMember()>
    Public Property ENO_ID_PADRE() As Nullable(Of Integer)
        Get
            Return _eNO_ID_PADRE
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_eNO_ID_PADRE, value) Then
                _eNO_ID_PADRE = value
                OnPropertyChanged("ENO_ID_PADRE")
            End If
        End Set
    End Property

    Private _eNO_ID_PADRE As Nullable(Of Integer)

    <DataMember()>
    Public Property ENO_HORAS() As Nullable(Of Decimal)
        Get
            Return _eNO_HORAS
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_eNO_HORAS, value) Then
                _eNO_HORAS = value
                OnPropertyChanged("ENO_HORAS")
            End If
        End Set
    End Property

    Private _eNO_HORAS As Nullable(Of Decimal)

    <DataMember()>
    Public Property ENO_TN() As Nullable(Of Decimal)
        Get
            Return _eNO_TN
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_eNO_TN, value) Then
                _eNO_TN = value
                OnPropertyChanged("ENO_TN")
            End If
        End Set
    End Property

    Private _eNO_TN As Nullable(Of Decimal)

    <DataMember()>
    Public Property ENO_DIA() As Nullable(Of Decimal)
        Get
            Return _eNO_DIA
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_eNO_DIA, value) Then
                _eNO_DIA = value
                OnPropertyChanged("ENO_DIA")
            End If
        End Set
    End Property

    Private _eNO_DIA As Nullable(Of Decimal)

    <DataMember()>
    Public Property ENO_USO() As Nullable(Of Decimal)
        Get
            Return _eNO_USO
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_eNO_USO, value) Then
                _eNO_USO = value
                OnPropertyChanged("ENO_USO")
            End If
        End Set
    End Property

    Private _eNO_USO As Nullable(Of Decimal)

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property ENO_FEC_GRAB() As Nullable(Of Date)
        Get
            Return _eNO_FEC_GRAB
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_eNO_FEC_GRAB, value) Then
                _eNO_FEC_GRAB = value
                OnPropertyChanged("ENO_FEC_GRAB")
            End If
        End Set
    End Property

    Private _eNO_FEC_GRAB As Nullable(Of Date)

    <DataMember()>
    Public Property ENO_ESTADO() As Nullable(Of Boolean)
        Get
            Return _eNO_ESTADO
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_eNO_ESTADO, value) Then
                _eNO_ESTADO = value
                OnPropertyChanged("ENO_ESTADO")
            End If
        End Set
    End Property

    Private _eNO_ESTADO As Nullable(Of Boolean)

    <DataMember()>
    Public Property UNT_ID() As String
        Get
            Return _uNT_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uNT_ID, value) Then
                ChangeTracker.RecordOriginalValue("UNT_ID", _uNT_ID)
                If Not IsDeserializing Then
                    If UnidadesTransporte IsNot Nothing AndAlso Not Equals(UnidadesTransporte.UNT_ID, value) Then
                        UnidadesTransporte = Nothing
                    End If
                End If
                _uNT_ID = value
                OnPropertyChanged("UNT_ID")
            End If
        End Set
    End Property

    Private _uNT_ID As String

    <DataMember()>
    Public Property ENO_KILOMETROS() As Nullable(Of Decimal)
        Get
            Return _eNO_KILOMETROS
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_eNO_KILOMETROS, value) Then
                _eNO_KILOMETROS = value
                OnPropertyChanged("ENO_KILOMETROS")
            End If
        End Set
    End Property

    Private _eNO_KILOMETROS As Nullable(Of Decimal)

    <DataMember()>
    Public Property ENO_RUTA() As String
        Get
            Return _eNO_RUTA
        End Get
        Set(ByVal value As String)
            If Not Equals(_eNO_RUTA, value) Then
                _eNO_RUTA = value
                OnPropertyChanged("ENO_RUTA")
            End If
        End Set
    End Property

    Private _eNO_RUTA As String

    <DataMember()>
    Public Property ENO_CODIGO() As String
        Get
            Return _eNO_CODIGO
        End Get
        Set(ByVal value As String)
            If Not Equals(_eNO_CODIGO, value) Then
                _eNO_CODIGO = value
                OnPropertyChanged("ENO_CODIGO")
            End If
        End Set
    End Property

    Private _eNO_CODIGO As String

    <DataMember()>
    Public Property CentroCosto() As String
        Get
            Return _centroCosto
        End Get
        Set(ByVal value As String)
            If Not Equals(_centroCosto, value) Then
                _centroCosto = value
                OnPropertyChanged("CentroCosto")
            End If
        End Set
    End Property

    Private _centroCosto As String

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property TipoEntidad() As TipoEntidad
        Get
            Return _tipoEntidad
        End Get
        Set(ByVal value As TipoEntidad)
            If _tipoEntidad IsNot value Then
                Dim previousValue As TipoEntidad = _tipoEntidad
                _tipoEntidad = value
                FixupTipoEntidad(previousValue)
                OnNavigationPropertyChanged("TipoEntidad")
            End If
        End Set
    End Property

    Private _tipoEntidad As TipoEntidad


    <DataMember()>
    Public Property Especificacion() As TrackableCollection(Of Especificacion)
        Get
            If _especificacion Is Nothing Then
                _especificacion = New TrackableCollection(Of Especificacion)
                AddHandler _especificacion.CollectionChanged, AddressOf FixupEspecificacion
            End If
            Return _especificacion
        End Get
        Set(ByVal value As TrackableCollection(Of Especificacion))
            If Not Object.ReferenceEquals(_especificacion, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _especificacion IsNot Nothing Then
                    RemoveHandler _especificacion.CollectionChanged, AddressOf FixupEspecificacion
                End If
                _especificacion = value
                If _especificacion IsNot Nothing Then
                    AddHandler _especificacion.CollectionChanged, AddressOf FixupEspecificacion
                End If
                OnNavigationPropertyChanged("Especificacion")
            End If
        End Set
    End Property

    Private _especificacion As TrackableCollection(Of Especificacion)

    <DataMember()>
    Public Property Imagen() As TrackableCollection(Of Imagen)
        Get
            If _imagen Is Nothing Then
                _imagen = New TrackableCollection(Of Imagen)
                AddHandler _imagen.CollectionChanged, AddressOf FixupImagen
            End If
            Return _imagen
        End Get
        Set(ByVal value As TrackableCollection(Of Imagen))
            If Not Object.ReferenceEquals(_imagen, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _imagen IsNot Nothing Then
                    RemoveHandler _imagen.CollectionChanged, AddressOf FixupImagen
                End If
                _imagen = value
                If _imagen IsNot Nothing Then
                    AddHandler _imagen.CollectionChanged, AddressOf FixupImagen
                End If
                OnNavigationPropertyChanged("Imagen")
            End If
        End Set
    End Property

    Private _imagen As TrackableCollection(Of Imagen)

    <DataMember()>
    Public Property UnidadesTransporte() As UnidadesTransporte
        Get
            Return _unidadesTransporte
        End Get
        Set(ByVal value As UnidadesTransporte)
            If _unidadesTransporte IsNot value Then
                Dim previousValue As UnidadesTransporte = _unidadesTransporte
                _unidadesTransporte = value
                FixupUnidadesTransporte(previousValue)
                OnNavigationPropertyChanged("UnidadesTransporte")
            End If
        End Set
    End Property

    Private _unidadesTransporte As UnidadesTransporte


    <DataMember()>
    Public Property RegistroEquipo() As TrackableCollection(Of RegistroEquipo)
        Get
            If _registroEquipo Is Nothing Then
                _registroEquipo = New TrackableCollection(Of RegistroEquipo)
                AddHandler _registroEquipo.CollectionChanged, AddressOf FixupRegistroEquipo
            End If
            Return _registroEquipo
        End Get
        Set(ByVal value As TrackableCollection(Of RegistroEquipo))
            If Not Object.ReferenceEquals(_registroEquipo, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _registroEquipo IsNot Nothing Then
                    RemoveHandler _registroEquipo.CollectionChanged, AddressOf FixupRegistroEquipo
                End If
                _registroEquipo = value
                If _registroEquipo IsNot Nothing Then
                    AddHandler _registroEquipo.CollectionChanged, AddressOf FixupRegistroEquipo
                End If
                OnNavigationPropertyChanged("RegistroEquipo")
            End If
        End Set
    End Property

    Private _registroEquipo As TrackableCollection(Of RegistroEquipo)

    <DataMember()>
    Public Property OrdenServicioDetalle() As TrackableCollection(Of OrdenServicioDetalle)
        Get
            If _ordenServicioDetalle Is Nothing Then
                _ordenServicioDetalle = New TrackableCollection(Of OrdenServicioDetalle)
                AddHandler _ordenServicioDetalle.CollectionChanged, AddressOf FixupOrdenServicioDetalle
            End If
            Return _ordenServicioDetalle
        End Get
        Set(ByVal value As TrackableCollection(Of OrdenServicioDetalle))
            If Not Object.ReferenceEquals(_ordenServicioDetalle, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _ordenServicioDetalle IsNot Nothing Then
                    RemoveHandler _ordenServicioDetalle.CollectionChanged, AddressOf FixupOrdenServicioDetalle
                End If
                _ordenServicioDetalle = value
                If _ordenServicioDetalle IsNot Nothing Then
                    AddHandler _ordenServicioDetalle.CollectionChanged, AddressOf FixupOrdenServicioDetalle
                End If
                OnNavigationPropertyChanged("OrdenServicioDetalle")
            End If
        End Set
    End Property

    Private _ordenServicioDetalle As TrackableCollection(Of OrdenServicioDetalle)

    <DataMember()>
    Public Property CargaDescargaTransporte() As TrackableCollection(Of CargaDescargaTransporte)
        Get
            If _cargaDescargaTransporte Is Nothing Then
                _cargaDescargaTransporte = New TrackableCollection(Of CargaDescargaTransporte)
                AddHandler _cargaDescargaTransporte.CollectionChanged, AddressOf FixupCargaDescargaTransporte
            End If
            Return _cargaDescargaTransporte
        End Get
        Set(ByVal value As TrackableCollection(Of CargaDescargaTransporte))
            If Not Object.ReferenceEquals(_cargaDescargaTransporte, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _cargaDescargaTransporte IsNot Nothing Then
                    RemoveHandler _cargaDescargaTransporte.CollectionChanged, AddressOf FixupCargaDescargaTransporte
                End If
                _cargaDescargaTransporte = value
                If _cargaDescargaTransporte IsNot Nothing Then
                    AddHandler _cargaDescargaTransporte.CollectionChanged, AddressOf FixupCargaDescargaTransporte
                End If
                OnNavigationPropertyChanged("CargaDescargaTransporte")
            End If
        End Set
    End Property

    Private _cargaDescargaTransporte As TrackableCollection(Of CargaDescargaTransporte)

    <DataMember()>
    Public Property PlanCargaDescargaHorno() As TrackableCollection(Of PlanCargaDescargaHorno)
        Get
            If _planCargaDescargaHorno Is Nothing Then
                _planCargaDescargaHorno = New TrackableCollection(Of PlanCargaDescargaHorno)
                AddHandler _planCargaDescargaHorno.CollectionChanged, AddressOf FixupPlanCargaDescargaHorno
            End If
            Return _planCargaDescargaHorno
        End Get
        Set(ByVal value As TrackableCollection(Of PlanCargaDescargaHorno))
            If Not Object.ReferenceEquals(_planCargaDescargaHorno, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _planCargaDescargaHorno IsNot Nothing Then
                    RemoveHandler _planCargaDescargaHorno.CollectionChanged, AddressOf FixupPlanCargaDescargaHorno
                End If
                _planCargaDescargaHorno = value
                If _planCargaDescargaHorno IsNot Nothing Then
                    AddHandler _planCargaDescargaHorno.CollectionChanged, AddressOf FixupPlanCargaDescargaHorno
                End If
                OnNavigationPropertyChanged("PlanCargaDescargaHorno")
            End If
        End Set
    End Property

    Private _planCargaDescargaHorno As TrackableCollection(Of PlanCargaDescargaHorno)

    <DataMember()>
    Public Property PlanCargaDescargaHorno1() As TrackableCollection(Of PlanCargaDescargaHorno)
        Get
            If _planCargaDescargaHorno1 Is Nothing Then
                _planCargaDescargaHorno1 = New TrackableCollection(Of PlanCargaDescargaHorno)
                AddHandler _planCargaDescargaHorno1.CollectionChanged, AddressOf FixupPlanCargaDescargaHorno1
            End If
            Return _planCargaDescargaHorno1
        End Get
        Set(ByVal value As TrackableCollection(Of PlanCargaDescargaHorno))
            If Not Object.ReferenceEquals(_planCargaDescargaHorno1, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _planCargaDescargaHorno1 IsNot Nothing Then
                    RemoveHandler _planCargaDescargaHorno1.CollectionChanged, AddressOf FixupPlanCargaDescargaHorno1
                End If
                _planCargaDescargaHorno1 = value
                If _planCargaDescargaHorno1 IsNot Nothing Then
                    AddHandler _planCargaDescargaHorno1.CollectionChanged, AddressOf FixupPlanCargaDescargaHorno1
                End If
                OnNavigationPropertyChanged("PlanCargaDescargaHorno1")
            End If
        End Set
    End Property

    Private _planCargaDescargaHorno1 As TrackableCollection(Of PlanCargaDescargaHorno)

    <DataMember()>
    Public Property PlanCargaDescargaHorno2() As TrackableCollection(Of PlanCargaDescargaHorno)
        Get
            If _planCargaDescargaHorno2 Is Nothing Then
                _planCargaDescargaHorno2 = New TrackableCollection(Of PlanCargaDescargaHorno)
                AddHandler _planCargaDescargaHorno2.CollectionChanged, AddressOf FixupPlanCargaDescargaHorno2
            End If
            Return _planCargaDescargaHorno2
        End Get
        Set(ByVal value As TrackableCollection(Of PlanCargaDescargaHorno))
            If Not Object.ReferenceEquals(_planCargaDescargaHorno2, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _planCargaDescargaHorno2 IsNot Nothing Then
                    RemoveHandler _planCargaDescargaHorno2.CollectionChanged, AddressOf FixupPlanCargaDescargaHorno2
                End If
                _planCargaDescargaHorno2 = value
                If _planCargaDescargaHorno2 IsNot Nothing Then
                    AddHandler _planCargaDescargaHorno2.CollectionChanged, AddressOf FixupPlanCargaDescargaHorno2
                End If
                OnNavigationPropertyChanged("PlanCargaDescargaHorno2")
            End If
        End Set
    End Property

    Private _planCargaDescargaHorno2 As TrackableCollection(Of PlanCargaDescargaHorno)

    <DataMember()>
    Public Property PlanCargaDescargaHorno3() As TrackableCollection(Of PlanCargaDescargaHorno)
        Get
            If _planCargaDescargaHorno3 Is Nothing Then
                _planCargaDescargaHorno3 = New TrackableCollection(Of PlanCargaDescargaHorno)
                AddHandler _planCargaDescargaHorno3.CollectionChanged, AddressOf FixupPlanCargaDescargaHorno3
            End If
            Return _planCargaDescargaHorno3
        End Get
        Set(ByVal value As TrackableCollection(Of PlanCargaDescargaHorno))
            If Not Object.ReferenceEquals(_planCargaDescargaHorno3, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _planCargaDescargaHorno3 IsNot Nothing Then
                    RemoveHandler _planCargaDescargaHorno3.CollectionChanged, AddressOf FixupPlanCargaDescargaHorno3
                End If
                _planCargaDescargaHorno3 = value
                If _planCargaDescargaHorno3 IsNot Nothing Then
                    AddHandler _planCargaDescargaHorno3.CollectionChanged, AddressOf FixupPlanCargaDescargaHorno3
                End If
                OnNavigationPropertyChanged("PlanCargaDescargaHorno3")
            End If
        End Set
    End Property

    Private _planCargaDescargaHorno3 As TrackableCollection(Of PlanCargaDescargaHorno)

    <DataMember()>
    Public Property PlanCargaDescargaHorno4() As TrackableCollection(Of PlanCargaDescargaHorno)
        Get
            If _planCargaDescargaHorno4 Is Nothing Then
                _planCargaDescargaHorno4 = New TrackableCollection(Of PlanCargaDescargaHorno)
                AddHandler _planCargaDescargaHorno4.CollectionChanged, AddressOf FixupPlanCargaDescargaHorno4
            End If
            Return _planCargaDescargaHorno4
        End Get
        Set(ByVal value As TrackableCollection(Of PlanCargaDescargaHorno))
            If Not Object.ReferenceEquals(_planCargaDescargaHorno4, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _planCargaDescargaHorno4 IsNot Nothing Then
                    RemoveHandler _planCargaDescargaHorno4.CollectionChanged, AddressOf FixupPlanCargaDescargaHorno4
                End If
                _planCargaDescargaHorno4 = value
                If _planCargaDescargaHorno4 IsNot Nothing Then
                    AddHandler _planCargaDescargaHorno4.CollectionChanged, AddressOf FixupPlanCargaDescargaHorno4
                End If
                OnNavigationPropertyChanged("PlanCargaDescargaHorno4")
            End If
        End Set
    End Property

    Private _planCargaDescargaHorno4 As TrackableCollection(Of PlanCargaDescargaHorno)

    <DataMember()>
    Public Property PlanCargaDescargaHorno5() As TrackableCollection(Of PlanCargaDescargaHorno)
        Get
            If _planCargaDescargaHorno5 Is Nothing Then
                _planCargaDescargaHorno5 = New TrackableCollection(Of PlanCargaDescargaHorno)
                AddHandler _planCargaDescargaHorno5.CollectionChanged, AddressOf FixupPlanCargaDescargaHorno5
            End If
            Return _planCargaDescargaHorno5
        End Get
        Set(ByVal value As TrackableCollection(Of PlanCargaDescargaHorno))
            If Not Object.ReferenceEquals(_planCargaDescargaHorno5, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _planCargaDescargaHorno5 IsNot Nothing Then
                    RemoveHandler _planCargaDescargaHorno5.CollectionChanged, AddressOf FixupPlanCargaDescargaHorno5
                End If
                _planCargaDescargaHorno5 = value
                If _planCargaDescargaHorno5 IsNot Nothing Then
                    AddHandler _planCargaDescargaHorno5.CollectionChanged, AddressOf FixupPlanCargaDescargaHorno5
                End If
                OnNavigationPropertyChanged("PlanCargaDescargaHorno5")
            End If
        End Set
    End Property

    Private _planCargaDescargaHorno5 As TrackableCollection(Of PlanCargaDescargaHorno)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        TipoEntidad = Nothing
        Especificacion.Clear()
        Imagen.Clear()
        UnidadesTransporte = Nothing
        RegistroEquipo.Clear()
        OrdenServicioDetalle.Clear()
        CargaDescargaTransporte.Clear()
        PlanCargaDescargaHorno.Clear()
        PlanCargaDescargaHorno1.Clear()
        PlanCargaDescargaHorno2.Clear()
        PlanCargaDescargaHorno3.Clear()
        PlanCargaDescargaHorno4.Clear()
        PlanCargaDescargaHorno5.Clear()
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupTipoEntidad(ByVal previousValue As TipoEntidad, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If TipoEntidad IsNot Nothing Then
            TEN_ID = TipoEntidad.TEN_ID
        ElseIf Not skipKeys Then
            TEN_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoEntidad") AndAlso
                ChangeTracker.OriginalValues("TipoEntidad") Is TipoEntidad Then
                ChangeTracker.OriginalValues.Remove("TipoEntidad")
            Else
                ChangeTracker.RecordOriginalValue("TipoEntidad", previousValue)
            End If
            If TipoEntidad IsNot Nothing AndAlso Not TipoEntidad.ChangeTracker.ChangeTrackingEnabled Then
                TipoEntidad.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUnidadesTransporte(ByVal previousValue As UnidadesTransporte, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If UnidadesTransporte IsNot Nothing Then
            UNT_ID = UnidadesTransporte.UNT_ID
        ElseIf Not skipKeys Then
            UNT_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("UnidadesTransporte") AndAlso
                ChangeTracker.OriginalValues("UnidadesTransporte") Is UnidadesTransporte Then
                ChangeTracker.OriginalValues.Remove("UnidadesTransporte")
            Else
                ChangeTracker.RecordOriginalValue("UnidadesTransporte", previousValue)
            End If
            If UnidadesTransporte IsNot Nothing AndAlso Not UnidadesTransporte.ChangeTracker.ChangeTrackingEnabled Then
                UnidadesTransporte.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupEspecificacion(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As Especificacion In e.NewItems
                item.ENO_ID = ENO_ID
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("Especificacion", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As Especificacion In e.OldItems
                item.ENO_ID = Nothing
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("Especificacion", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupImagen(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As Imagen In e.NewItems
                item.ENO_ID = ENO_ID
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("Imagen", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As Imagen In e.OldItems
                item.ENO_ID = Nothing
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("Imagen", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupRegistroEquipo(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As RegistroEquipo In e.NewItems
                item.Entidad = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("RegistroEquipo", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As RegistroEquipo In e.OldItems
                If ReferenceEquals(item.Entidad, Me) Then
                    item.Entidad = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("RegistroEquipo", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupOrdenServicioDetalle(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As OrdenServicioDetalle In e.NewItems
                item.Entidad = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("OrdenServicioDetalle", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As OrdenServicioDetalle In e.OldItems
                If ReferenceEquals(item.Entidad, Me) Then
                    item.Entidad = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("OrdenServicioDetalle", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupCargaDescargaTransporte(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As CargaDescargaTransporte In e.NewItems
                item.Entidad = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("CargaDescargaTransporte", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As CargaDescargaTransporte In e.OldItems
                If ReferenceEquals(item.Entidad, Me) Then
                    item.Entidad = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("CargaDescargaTransporte", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupPlanCargaDescargaHorno(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PlanCargaDescargaHorno In e.NewItems
                item.Entidad = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PlanCargaDescargaHorno", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PlanCargaDescargaHorno In e.OldItems
                If ReferenceEquals(item.Entidad, Me) Then
                    item.Entidad = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PlanCargaDescargaHorno", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupPlanCargaDescargaHorno1(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PlanCargaDescargaHorno In e.NewItems
                item.Entidad1 = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PlanCargaDescargaHorno1", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PlanCargaDescargaHorno In e.OldItems
                If ReferenceEquals(item.Entidad1, Me) Then
                    item.Entidad1 = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PlanCargaDescargaHorno1", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupPlanCargaDescargaHorno2(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PlanCargaDescargaHorno In e.NewItems
                item.Entidad2 = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PlanCargaDescargaHorno2", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PlanCargaDescargaHorno In e.OldItems
                If ReferenceEquals(item.Entidad2, Me) Then
                    item.Entidad2 = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PlanCargaDescargaHorno2", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupPlanCargaDescargaHorno3(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PlanCargaDescargaHorno In e.NewItems
                item.Entidad3 = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PlanCargaDescargaHorno3", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PlanCargaDescargaHorno In e.OldItems
                If ReferenceEquals(item.Entidad3, Me) Then
                    item.Entidad3 = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PlanCargaDescargaHorno3", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupPlanCargaDescargaHorno4(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PlanCargaDescargaHorno In e.NewItems
                item.Entidad4 = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PlanCargaDescargaHorno4", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PlanCargaDescargaHorno In e.OldItems
                If ReferenceEquals(item.Entidad4, Me) Then
                    item.Entidad4 = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PlanCargaDescargaHorno4", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupPlanCargaDescargaHorno5(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PlanCargaDescargaHorno In e.NewItems
                item.Entidad5 = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PlanCargaDescargaHorno5", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PlanCargaDescargaHorno In e.OldItems
                If ReferenceEquals(item.Entidad5, Me) Then
                    item.Entidad5 = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PlanCargaDescargaHorno5", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
