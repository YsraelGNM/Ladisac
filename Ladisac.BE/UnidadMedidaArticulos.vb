'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Usuarios))>
Partial Public Class UnidadMedidaArticulos
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared UM_ID As string = "UM_ID"
				public shared UM_DESCRIPCION As string = "UM_DESCRIPCION"
				public shared UM_TIPO As string = "UM_TIPO"
				public shared UM_CANT_ELEM As string = "UM_CANT_ELEM"
				public shared UM_SUB_DESCRIP As string = "UM_SUB_DESCRIP"
				public shared USU_ID As string = "USU_ID"
				public shared UM_FEC_GRAB As string = "UM_FEC_GRAB"
				public shared UM_ESTADO As string = "UM_ESTADO"
				public shared UM_SIMBOLO As string = "UM_SIMBOLO"
				public shared UM_SUNAT As string = "UM_SUNAT"
				public shared UnidadMedida As string = "UnidadMedida"
		    End Structure
	



    <DataMember()>
    Public Property UM_ID() As String
        Get
            Return _uM_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uM_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'UM_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _uM_ID = value
                OnPropertyChanged("UM_ID")
            End If
        End Set
    End Property

    Private _uM_ID As String

    <DataMember()>
    Public Property UM_DESCRIPCION() As String
        Get
            Return _uM_DESCRIPCION
        End Get
        Set(ByVal value As String)
            If Not Equals(_uM_DESCRIPCION, value) Then
                _uM_DESCRIPCION = value
                OnPropertyChanged("UM_DESCRIPCION")
            End If
        End Set
    End Property

    Private _uM_DESCRIPCION As String

    <DataMember()>
    Public Property UM_TIPO() As Short
        Get
            Return _uM_TIPO
        End Get
        Set(ByVal value As Short)
            If Not Equals(_uM_TIPO, value) Then
                _uM_TIPO = value
                OnPropertyChanged("UM_TIPO")
            End If
        End Set
    End Property

    Private _uM_TIPO As Short

    <DataMember()>
    Public Property UM_CANT_ELEM() As Integer
        Get
            Return _uM_CANT_ELEM
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_uM_CANT_ELEM, value) Then
                _uM_CANT_ELEM = value
                OnPropertyChanged("UM_CANT_ELEM")
            End If
        End Set
    End Property

    Private _uM_CANT_ELEM As Integer

    <DataMember()>
    Public Property UM_SUB_DESCRIP() As String
        Get
            Return _uM_SUB_DESCRIP
        End Get
        Set(ByVal value As String)
            If Not Equals(_uM_SUB_DESCRIP, value) Then
                _uM_SUB_DESCRIP = value
                OnPropertyChanged("UM_SUB_DESCRIP")
            End If
        End Set
    End Property

    Private _uM_SUB_DESCRIP As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property UM_FEC_GRAB() As Date
        Get
            Return _uM_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_uM_FEC_GRAB, value) Then
                _uM_FEC_GRAB = value
                OnPropertyChanged("UM_FEC_GRAB")
            End If
        End Set
    End Property

    Private _uM_FEC_GRAB As Date

    <DataMember()>
    Public Property UM_ESTADO() As Boolean
        Get
            Return _uM_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_uM_ESTADO, value) Then
                _uM_ESTADO = value
                OnPropertyChanged("UM_ESTADO")
            End If
        End Set
    End Property

    Private _uM_ESTADO As Boolean

    <DataMember()>
    Public Property UM_SIMBOLO() As String
        Get
            Return _uM_SIMBOLO
        End Get
        Set(ByVal value As String)
            If Not Equals(_uM_SIMBOLO, value) Then
                _uM_SIMBOLO = value
                OnPropertyChanged("UM_SIMBOLO")
            End If
        End Set
    End Property

    Private _uM_SIMBOLO As String

    <DataMember()>
    Public Property UM_SUNAT() As String
        Get
            Return _uM_SUNAT
        End Get
        Set(ByVal value As String)
            If Not Equals(_uM_SUNAT, value) Then
                _uM_SUNAT = value
                OnPropertyChanged("UM_SUNAT")
            End If
        End Set
    End Property

    Private _uM_SUNAT As String

    <DataMember()>
    Public Property UnidadMedida() As String
        Get
            Return _unidadMedida
        End Get
        Set(ByVal value As String)
            If Not Equals(_unidadMedida, value) Then
                _unidadMedida = value
                OnPropertyChanged("UnidadMedida")
            End If
        End Set
    End Property

    Private _unidadMedida As String

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Usuarios = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
