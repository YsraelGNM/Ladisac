'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(SolicitudAjustePrecio))>
<KnownType(GetType(Articulos))>
<KnownType(GetType(ListaPreciosArticulos))>
Partial Public Class SolicitudAjustePrecioDetalle
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared APD_ID As string = "APD_ID"
				public shared SAP_ID As string = "SAP_ID"
				public shared ART_ID As string = "ART_ID"
				public shared APD_PRECIO_NORMAL As string = "APD_PRECIO_NORMAL"
				public shared APD_PRECIO_APROBADO As string = "APD_PRECIO_APROBADO"
				public shared APD_OBSERVACION As string = "APD_OBSERVACION"
				public shared USU_ID_AUT As string = "USU_ID_AUT"
				public shared APD_FEC_AUT As string = "APD_FEC_AUT"
				public shared LPR_ID As string = "LPR_ID"
				public shared APD_FLAG As string = "APD_FLAG"
				public shared APD_TIPO_PRECIO As string = "APD_TIPO_PRECIO"
		    End Structure
	



    <DataMember()>
    Public Property APD_ID() As Integer
        Get
            Return _aPD_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_aPD_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'APD_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _aPD_ID = value
                OnPropertyChanged("APD_ID")
            End If
        End Set
    End Property

    Private _aPD_ID As Integer

    <DataMember()>
    Public Property SAP_ID() As Nullable(Of Integer)
        Get
            Return _sAP_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_sAP_ID, value) Then
                ChangeTracker.RecordOriginalValue("SAP_ID", _sAP_ID)
                If Not IsDeserializing Then
                    If SolicitudAjustePrecio IsNot Nothing AndAlso Not Equals(SolicitudAjustePrecio.SAP_ID, value) Then
                        SolicitudAjustePrecio = Nothing
                    End If
                End If
                _sAP_ID = value
                OnPropertyChanged("SAP_ID")
            End If
        End Set
    End Property

    Private _sAP_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property ART_ID() As String
        Get
            Return _aRT_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_aRT_ID, value) Then
                ChangeTracker.RecordOriginalValue("ART_ID", _aRT_ID)
                If Not IsDeserializing Then
                    If Articulos IsNot Nothing AndAlso Not Equals(Articulos.ART_ID, value) Then
                        Articulos = Nothing
                    End If
                End If
                _aRT_ID = value
                OnPropertyChanged("ART_ID")
            End If
        End Set
    End Property

    Private _aRT_ID As String

    <DataMember()>
    Public Property APD_PRECIO_NORMAL() As Nullable(Of Decimal)
        Get
            Return _aPD_PRECIO_NORMAL
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_aPD_PRECIO_NORMAL, value) Then
                _aPD_PRECIO_NORMAL = value
                OnPropertyChanged("APD_PRECIO_NORMAL")
            End If
        End Set
    End Property

    Private _aPD_PRECIO_NORMAL As Nullable(Of Decimal)

    <DataMember()>
    Public Property APD_PRECIO_APROBADO() As Nullable(Of Decimal)
        Get
            Return _aPD_PRECIO_APROBADO
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_aPD_PRECIO_APROBADO, value) Then
                _aPD_PRECIO_APROBADO = value
                OnPropertyChanged("APD_PRECIO_APROBADO")
            End If
        End Set
    End Property

    Private _aPD_PRECIO_APROBADO As Nullable(Of Decimal)

    <DataMember()>
    Public Property APD_OBSERVACION() As String
        Get
            Return _aPD_OBSERVACION
        End Get
        Set(ByVal value As String)
            If Not Equals(_aPD_OBSERVACION, value) Then
                _aPD_OBSERVACION = value
                OnPropertyChanged("APD_OBSERVACION")
            End If
        End Set
    End Property

    Private _aPD_OBSERVACION As String

    <DataMember()>
    Public Property USU_ID_AUT() As String
        Get
            Return _uSU_ID_AUT
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID_AUT, value) Then
                _uSU_ID_AUT = value
                OnPropertyChanged("USU_ID_AUT")
            End If
        End Set
    End Property

    Private _uSU_ID_AUT As String

    <DataMember()>
    Public Property APD_FEC_AUT() As Nullable(Of Date)
        Get
            Return _aPD_FEC_AUT
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_aPD_FEC_AUT, value) Then
                _aPD_FEC_AUT = value
                OnPropertyChanged("APD_FEC_AUT")
            End If
        End Set
    End Property

    Private _aPD_FEC_AUT As Nullable(Of Date)

    <DataMember()>
    Public Property LPR_ID() As String
        Get
            Return _lPR_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_lPR_ID, value) Then
                ChangeTracker.RecordOriginalValue("LPR_ID", _lPR_ID)
                If Not IsDeserializing Then
                    If ListaPreciosArticulos IsNot Nothing AndAlso Not Equals(ListaPreciosArticulos.LPR_ID, value) Then
                        ListaPreciosArticulos = Nothing
                    End If
                End If
                _lPR_ID = value
                OnPropertyChanged("LPR_ID")
            End If
        End Set
    End Property

    Private _lPR_ID As String

    <DataMember()>
    Public Property APD_FLAG() As Nullable(Of Integer)
        Get
            Return _aPD_FLAG
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_aPD_FLAG, value) Then
                _aPD_FLAG = value
                OnPropertyChanged("APD_FLAG")
            End If
        End Set
    End Property

    Private _aPD_FLAG As Nullable(Of Integer)

    <DataMember()>
    Public Property APD_TIPO_PRECIO() As String
        Get
            Return _aPD_TIPO_PRECIO
        End Get
        Set(ByVal value As String)
            If Not Equals(_aPD_TIPO_PRECIO, value) Then
                _aPD_TIPO_PRECIO = value
                OnPropertyChanged("APD_TIPO_PRECIO")
            End If
        End Set
    End Property

    Private _aPD_TIPO_PRECIO As String

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property SolicitudAjustePrecio() As SolicitudAjustePrecio
        Get
            Return _solicitudAjustePrecio
        End Get
        Set(ByVal value As SolicitudAjustePrecio)
            If _solicitudAjustePrecio IsNot value Then
                Dim previousValue As SolicitudAjustePrecio = _solicitudAjustePrecio
                _solicitudAjustePrecio = value
                FixupSolicitudAjustePrecio(previousValue)
                OnNavigationPropertyChanged("SolicitudAjustePrecio")
            End If
        End Set
    End Property

    Private _solicitudAjustePrecio As SolicitudAjustePrecio


    <DataMember()>
    Public Property Articulos() As Articulos
        Get
            Return _articulos
        End Get
        Set(ByVal value As Articulos)
            If _articulos IsNot value Then
                Dim previousValue As Articulos = _articulos
                _articulos = value
                FixupArticulos(previousValue)
                OnNavigationPropertyChanged("Articulos")
            End If
        End Set
    End Property

    Private _articulos As Articulos


    <DataMember()>
    Public Property ListaPreciosArticulos() As ListaPreciosArticulos
        Get
            Return _listaPreciosArticulos
        End Get
        Set(ByVal value As ListaPreciosArticulos)
            If _listaPreciosArticulos IsNot value Then
                Dim previousValue As ListaPreciosArticulos = _listaPreciosArticulos
                _listaPreciosArticulos = value
                FixupListaPreciosArticulos(previousValue)
                OnNavigationPropertyChanged("ListaPreciosArticulos")
            End If
        End Set
    End Property

    Private _listaPreciosArticulos As ListaPreciosArticulos


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        SolicitudAjustePrecio = Nothing
        Articulos = Nothing
        ListaPreciosArticulos = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupSolicitudAjustePrecio(ByVal previousValue As SolicitudAjustePrecio, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.SolicitudAjustePrecioDetalle.Contains(Me) Then
            previousValue.SolicitudAjustePrecioDetalle.Remove(Me)
        End If

        If SolicitudAjustePrecio IsNot Nothing Then
            If Not SolicitudAjustePrecio.SolicitudAjustePrecioDetalle.Contains(Me) Then
                SolicitudAjustePrecio.SolicitudAjustePrecioDetalle.Add(Me)
            End If

            SAP_ID = SolicitudAjustePrecio.SAP_ID
        ElseIf Not skipKeys Then
            SAP_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("SolicitudAjustePrecio") AndAlso
                ChangeTracker.OriginalValues("SolicitudAjustePrecio") Is SolicitudAjustePrecio Then
                ChangeTracker.OriginalValues.Remove("SolicitudAjustePrecio")
            Else
                ChangeTracker.RecordOriginalValue("SolicitudAjustePrecio", previousValue)
            End If
            If SolicitudAjustePrecio IsNot Nothing AndAlso Not SolicitudAjustePrecio.ChangeTracker.ChangeTrackingEnabled Then
                SolicitudAjustePrecio.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupArticulos(ByVal previousValue As Articulos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.SolicitudAjustePrecioDetalle.Contains(Me) Then
            previousValue.SolicitudAjustePrecioDetalle.Remove(Me)
        End If

        If Articulos IsNot Nothing Then
            If Not Articulos.SolicitudAjustePrecioDetalle.Contains(Me) Then
                Articulos.SolicitudAjustePrecioDetalle.Add(Me)
            End If

            ART_ID = Articulos.ART_ID
        ElseIf Not skipKeys Then
            ART_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Articulos") AndAlso
                ChangeTracker.OriginalValues("Articulos") Is Articulos Then
                ChangeTracker.OriginalValues.Remove("Articulos")
            Else
                ChangeTracker.RecordOriginalValue("Articulos", previousValue)
            End If
            If Articulos IsNot Nothing AndAlso Not Articulos.ChangeTracker.ChangeTrackingEnabled Then
                Articulos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupListaPreciosArticulos(ByVal previousValue As ListaPreciosArticulos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.SolicitudAjustePrecioDetalle.Contains(Me) Then
            previousValue.SolicitudAjustePrecioDetalle.Remove(Me)
        End If

        If ListaPreciosArticulos IsNot Nothing Then
            If Not ListaPreciosArticulos.SolicitudAjustePrecioDetalle.Contains(Me) Then
                ListaPreciosArticulos.SolicitudAjustePrecioDetalle.Add(Me)
            End If

            LPR_ID = ListaPreciosArticulos.LPR_ID
        ElseIf Not skipKeys Then
            LPR_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("ListaPreciosArticulos") AndAlso
                ChangeTracker.OriginalValues("ListaPreciosArticulos") Is ListaPreciosArticulos Then
                ChangeTracker.OriginalValues.Remove("ListaPreciosArticulos")
            Else
                ChangeTracker.RecordOriginalValue("ListaPreciosArticulos", previousValue)
            End If
            If ListaPreciosArticulos IsNot Nothing AndAlso Not ListaPreciosArticulos.ChangeTracker.ChangeTrackingEnabled Then
                ListaPreciosArticulos.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
