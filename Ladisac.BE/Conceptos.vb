'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(DetallePrestamosTrabajador))>
<KnownType(GetType(TiposConceptos))>
<KnownType(GetType(ConceptosTrabajador))>
<KnownType(GetType(DetalleConceptosPensionarios))>
<KnownType(GetType(DetalleTrabajadorJudicial))>
<KnownType(GetType(DetallePlanillas))>
<KnownType(GetType(TesoreriaPlanillas))>
<KnownType(GetType(ComedorPLL))>
<KnownType(GetType(DetalleConceptosPlanillas))>
Partial Public Class Conceptos
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared con_Conceptos_Id As string = "con_Conceptos_Id"
				public shared tic_TipoConcep_Id As string = "tic_TipoConcep_Id"
				public shared con_Concepto As string = "con_Concepto"
				public shared con_EsFijoTrabajador As string = "con_EsFijoTrabajador"
				public shared con_CodigoSunat As string = "con_CodigoSunat"
				public shared con_Escalculo As string = "con_Escalculo"
				public shared con_EsTareoHoras As string = "con_EsTareoHoras"
				public shared con_Descripcion As string = "con_Descripcion"
				public shared con_EsConceptoDscJudi As string = "con_EsConceptoDscJudi"
				public shared Usu_Id As string = "Usu_Id"
				public shared con_FecGrab As string = "con_FecGrab"
				public shared con_EsConceptoPrestamo As string = "con_EsConceptoPrestamo"
				public shared con_EsformulaAcumulado As string = "con_EsformulaAcumulado"
				public shared con_NivelDeCalculo As string = "con_NivelDeCalculo"
				public shared con_EsformulaAcumuladoSecundario As string = "con_EsformulaAcumuladoSecundario"
				public shared con_EsConceptoHOraExtra As string = "con_EsConceptoHOraExtra"
		    End Structure
	



    <DataMember()>
    Public Property con_Conceptos_Id() As String
        Get
            Return _con_Conceptos_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_con_Conceptos_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'con_Conceptos_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _con_Conceptos_Id = value
                OnPropertyChanged("con_Conceptos_Id")
            End If
        End Set
    End Property

    Private _con_Conceptos_Id As String

    <DataMember()>
    Public Property tic_TipoConcep_Id() As String
        Get
            Return _tic_TipoConcep_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tic_TipoConcep_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'tic_TipoConcep_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If TiposConceptos IsNot Nothing AndAlso Not Equals(TiposConceptos.tic_TipoConcep_Id, value) Then
                        TiposConceptos = Nothing
                    End If
                End If
                _tic_TipoConcep_Id = value
                OnPropertyChanged("tic_TipoConcep_Id")
            End If
        End Set
    End Property

    Private _tic_TipoConcep_Id As String

    <DataMember()>
    Public Property con_Concepto() As String
        Get
            Return _con_Concepto
        End Get
        Set(ByVal value As String)
            If Not Equals(_con_Concepto, value) Then
                _con_Concepto = value
                OnPropertyChanged("con_Concepto")
            End If
        End Set
    End Property

    Private _con_Concepto As String

    <DataMember()>
    Public Property con_EsFijoTrabajador() As Boolean
        Get
            Return _con_EsFijoTrabajador
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_con_EsFijoTrabajador, value) Then
                _con_EsFijoTrabajador = value
                OnPropertyChanged("con_EsFijoTrabajador")
            End If
        End Set
    End Property

    Private _con_EsFijoTrabajador As Boolean

    <DataMember()>
    Public Property con_CodigoSunat() As String
        Get
            Return _con_CodigoSunat
        End Get
        Set(ByVal value As String)
            If Not Equals(_con_CodigoSunat, value) Then
                _con_CodigoSunat = value
                OnPropertyChanged("con_CodigoSunat")
            End If
        End Set
    End Property

    Private _con_CodigoSunat As String

    <DataMember()>
    Public Property con_Escalculo() As Boolean
        Get
            Return _con_Escalculo
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_con_Escalculo, value) Then
                _con_Escalculo = value
                OnPropertyChanged("con_Escalculo")
            End If
        End Set
    End Property

    Private _con_Escalculo As Boolean

    <DataMember()>
    Public Property con_EsTareoHoras() As Boolean
        Get
            Return _con_EsTareoHoras
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_con_EsTareoHoras, value) Then
                _con_EsTareoHoras = value
                OnPropertyChanged("con_EsTareoHoras")
            End If
        End Set
    End Property

    Private _con_EsTareoHoras As Boolean

    <DataMember()>
    Public Property con_Descripcion() As String
        Get
            Return _con_Descripcion
        End Get
        Set(ByVal value As String)
            If Not Equals(_con_Descripcion, value) Then
                _con_Descripcion = value
                OnPropertyChanged("con_Descripcion")
            End If
        End Set
    End Property

    Private _con_Descripcion As String

    <DataMember()>
    Public Property con_EsConceptoDscJudi() As Boolean
        Get
            Return _con_EsConceptoDscJudi
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_con_EsConceptoDscJudi, value) Then
                _con_EsConceptoDscJudi = value
                OnPropertyChanged("con_EsConceptoDscJudi")
            End If
        End Set
    End Property

    Private _con_EsConceptoDscJudi As Boolean

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                ChangeTracker.RecordOriginalValue("Usu_Id", _usu_Id)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property con_FecGrab() As Date
        Get
            Return _con_FecGrab
        End Get
        Set(ByVal value As Date)
            If Not Equals(_con_FecGrab, value) Then
                _con_FecGrab = value
                OnPropertyChanged("con_FecGrab")
            End If
        End Set
    End Property

    Private _con_FecGrab As Date

    <DataMember()>
    Public Property con_EsConceptoPrestamo() As Nullable(Of Boolean)
        Get
            Return _con_EsConceptoPrestamo
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_con_EsConceptoPrestamo, value) Then
                _con_EsConceptoPrestamo = value
                OnPropertyChanged("con_EsConceptoPrestamo")
            End If
        End Set
    End Property

    Private _con_EsConceptoPrestamo As Nullable(Of Boolean)

    <DataMember()>
    Public Property con_EsformulaAcumulado() As Nullable(Of Boolean)
        Get
            Return _con_EsformulaAcumulado
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_con_EsformulaAcumulado, value) Then
                _con_EsformulaAcumulado = value
                OnPropertyChanged("con_EsformulaAcumulado")
            End If
        End Set
    End Property

    Private _con_EsformulaAcumulado As Nullable(Of Boolean)

    <DataMember()>
    Public Property con_NivelDeCalculo() As Nullable(Of Integer)
        Get
            Return _con_NivelDeCalculo
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_con_NivelDeCalculo, value) Then
                _con_NivelDeCalculo = value
                OnPropertyChanged("con_NivelDeCalculo")
            End If
        End Set
    End Property

    Private _con_NivelDeCalculo As Nullable(Of Integer)

    <DataMember()>
    Public Property con_EsformulaAcumuladoSecundario() As Nullable(Of Boolean)
        Get
            Return _con_EsformulaAcumuladoSecundario
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_con_EsformulaAcumuladoSecundario, value) Then
                _con_EsformulaAcumuladoSecundario = value
                OnPropertyChanged("con_EsformulaAcumuladoSecundario")
            End If
        End Set
    End Property

    Private _con_EsformulaAcumuladoSecundario As Nullable(Of Boolean)

    <DataMember()>
    Public Property con_EsConceptoHOraExtra() As Nullable(Of Boolean)
        Get
            Return _con_EsConceptoHOraExtra
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_con_EsConceptoHOraExtra, value) Then
                _con_EsConceptoHOraExtra = value
                OnPropertyChanged("con_EsConceptoHOraExtra")
            End If
        End Set
    End Property

    Private _con_EsConceptoHOraExtra As Nullable(Of Boolean)

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property DetallePrestamosTrabajador() As TrackableCollection(Of DetallePrestamosTrabajador)
        Get
            If _detallePrestamosTrabajador Is Nothing Then
                _detallePrestamosTrabajador = New TrackableCollection(Of DetallePrestamosTrabajador)
                AddHandler _detallePrestamosTrabajador.CollectionChanged, AddressOf FixupDetallePrestamosTrabajador
            End If
            Return _detallePrestamosTrabajador
        End Get
        Set(ByVal value As TrackableCollection(Of DetallePrestamosTrabajador))
            If Not Object.ReferenceEquals(_detallePrestamosTrabajador, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detallePrestamosTrabajador IsNot Nothing Then
                    RemoveHandler _detallePrestamosTrabajador.CollectionChanged, AddressOf FixupDetallePrestamosTrabajador
                End If
                _detallePrestamosTrabajador = value
                If _detallePrestamosTrabajador IsNot Nothing Then
                    AddHandler _detallePrestamosTrabajador.CollectionChanged, AddressOf FixupDetallePrestamosTrabajador
                End If
                OnNavigationPropertyChanged("DetallePrestamosTrabajador")
            End If
        End Set
    End Property

    Private _detallePrestamosTrabajador As TrackableCollection(Of DetallePrestamosTrabajador)

    <DataMember()>
    Public Property TiposConceptos() As TiposConceptos
        Get
            Return _tiposConceptos
        End Get
        Set(ByVal value As TiposConceptos)
            If _tiposConceptos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(tic_TipoConcep_Id, value.tic_TipoConcep_Id) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As TiposConceptos = _tiposConceptos
                _tiposConceptos = value
                FixupTiposConceptos(previousValue)
                OnNavigationPropertyChanged("TiposConceptos")
            End If
        End Set
    End Property

    Private _tiposConceptos As TiposConceptos


    <DataMember()>
    Public Property ConceptosTrabajador() As TrackableCollection(Of ConceptosTrabajador)
        Get
            If _conceptosTrabajador Is Nothing Then
                _conceptosTrabajador = New TrackableCollection(Of ConceptosTrabajador)
                AddHandler _conceptosTrabajador.CollectionChanged, AddressOf FixupConceptosTrabajador
            End If
            Return _conceptosTrabajador
        End Get
        Set(ByVal value As TrackableCollection(Of ConceptosTrabajador))
            If Not Object.ReferenceEquals(_conceptosTrabajador, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _conceptosTrabajador IsNot Nothing Then
                    RemoveHandler _conceptosTrabajador.CollectionChanged, AddressOf FixupConceptosTrabajador
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As ConceptosTrabajador In _conceptosTrabajador
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _conceptosTrabajador = value
                If _conceptosTrabajador IsNot Nothing Then
                    AddHandler _conceptosTrabajador.CollectionChanged, AddressOf FixupConceptosTrabajador
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As ConceptosTrabajador In _conceptosTrabajador
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("ConceptosTrabajador")
            End If
        End Set
    End Property

    Private _conceptosTrabajador As TrackableCollection(Of ConceptosTrabajador)

    <DataMember()>
    Public Property DetalleConceptosPensionarios() As TrackableCollection(Of DetalleConceptosPensionarios)
        Get
            If _detalleConceptosPensionarios Is Nothing Then
                _detalleConceptosPensionarios = New TrackableCollection(Of DetalleConceptosPensionarios)
                AddHandler _detalleConceptosPensionarios.CollectionChanged, AddressOf FixupDetalleConceptosPensionarios
            End If
            Return _detalleConceptosPensionarios
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleConceptosPensionarios))
            If Not Object.ReferenceEquals(_detalleConceptosPensionarios, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleConceptosPensionarios IsNot Nothing Then
                    RemoveHandler _detalleConceptosPensionarios.CollectionChanged, AddressOf FixupDetalleConceptosPensionarios
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As DetalleConceptosPensionarios In _detalleConceptosPensionarios
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detalleConceptosPensionarios = value
                If _detalleConceptosPensionarios IsNot Nothing Then
                    AddHandler _detalleConceptosPensionarios.CollectionChanged, AddressOf FixupDetalleConceptosPensionarios
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As DetalleConceptosPensionarios In _detalleConceptosPensionarios
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetalleConceptosPensionarios")
            End If
        End Set
    End Property

    Private _detalleConceptosPensionarios As TrackableCollection(Of DetalleConceptosPensionarios)

    <DataMember()>
    Public Property DetalleTrabajadorJudicial() As TrackableCollection(Of DetalleTrabajadorJudicial)
        Get
            If _detalleTrabajadorJudicial Is Nothing Then
                _detalleTrabajadorJudicial = New TrackableCollection(Of DetalleTrabajadorJudicial)
                AddHandler _detalleTrabajadorJudicial.CollectionChanged, AddressOf FixupDetalleTrabajadorJudicial
            End If
            Return _detalleTrabajadorJudicial
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleTrabajadorJudicial))
            If Not Object.ReferenceEquals(_detalleTrabajadorJudicial, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleTrabajadorJudicial IsNot Nothing Then
                    RemoveHandler _detalleTrabajadorJudicial.CollectionChanged, AddressOf FixupDetalleTrabajadorJudicial
                End If
                _detalleTrabajadorJudicial = value
                If _detalleTrabajadorJudicial IsNot Nothing Then
                    AddHandler _detalleTrabajadorJudicial.CollectionChanged, AddressOf FixupDetalleTrabajadorJudicial
                End If
                OnNavigationPropertyChanged("DetalleTrabajadorJudicial")
            End If
        End Set
    End Property

    Private _detalleTrabajadorJudicial As TrackableCollection(Of DetalleTrabajadorJudicial)

    <DataMember()>
    Public Property DetallePlanillas() As TrackableCollection(Of DetallePlanillas)
        Get
            If _detallePlanillas Is Nothing Then
                _detallePlanillas = New TrackableCollection(Of DetallePlanillas)
                AddHandler _detallePlanillas.CollectionChanged, AddressOf FixupDetallePlanillas
            End If
            Return _detallePlanillas
        End Get
        Set(ByVal value As TrackableCollection(Of DetallePlanillas))
            If Not Object.ReferenceEquals(_detallePlanillas, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detallePlanillas IsNot Nothing Then
                    RemoveHandler _detallePlanillas.CollectionChanged, AddressOf FixupDetallePlanillas
                End If
                _detallePlanillas = value
                If _detallePlanillas IsNot Nothing Then
                    AddHandler _detallePlanillas.CollectionChanged, AddressOf FixupDetallePlanillas
                End If
                OnNavigationPropertyChanged("DetallePlanillas")
            End If
        End Set
    End Property

    Private _detallePlanillas As TrackableCollection(Of DetallePlanillas)

    <DataMember()>
    Public Property TesoreriaPlanillas() As TrackableCollection(Of TesoreriaPlanillas)
        Get
            If _tesoreriaPlanillas Is Nothing Then
                _tesoreriaPlanillas = New TrackableCollection(Of TesoreriaPlanillas)
                AddHandler _tesoreriaPlanillas.CollectionChanged, AddressOf FixupTesoreriaPlanillas
            End If
            Return _tesoreriaPlanillas
        End Get
        Set(ByVal value As TrackableCollection(Of TesoreriaPlanillas))
            If Not Object.ReferenceEquals(_tesoreriaPlanillas, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _tesoreriaPlanillas IsNot Nothing Then
                    RemoveHandler _tesoreriaPlanillas.CollectionChanged, AddressOf FixupTesoreriaPlanillas
                End If
                _tesoreriaPlanillas = value
                If _tesoreriaPlanillas IsNot Nothing Then
                    AddHandler _tesoreriaPlanillas.CollectionChanged, AddressOf FixupTesoreriaPlanillas
                End If
                OnNavigationPropertyChanged("TesoreriaPlanillas")
            End If
        End Set
    End Property

    Private _tesoreriaPlanillas As TrackableCollection(Of TesoreriaPlanillas)

    <DataMember()>
    Public Property ComedorPLL() As TrackableCollection(Of ComedorPLL)
        Get
            If _comedorPLL Is Nothing Then
                _comedorPLL = New TrackableCollection(Of ComedorPLL)
                AddHandler _comedorPLL.CollectionChanged, AddressOf FixupComedorPLL
            End If
            Return _comedorPLL
        End Get
        Set(ByVal value As TrackableCollection(Of ComedorPLL))
            If Not Object.ReferenceEquals(_comedorPLL, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _comedorPLL IsNot Nothing Then
                    RemoveHandler _comedorPLL.CollectionChanged, AddressOf FixupComedorPLL
                End If
                _comedorPLL = value
                If _comedorPLL IsNot Nothing Then
                    AddHandler _comedorPLL.CollectionChanged, AddressOf FixupComedorPLL
                End If
                OnNavigationPropertyChanged("ComedorPLL")
            End If
        End Set
    End Property

    Private _comedorPLL As TrackableCollection(Of ComedorPLL)

    <DataMember()>
    Public Property DetalleConceptosPlanillas() As TrackableCollection(Of DetalleConceptosPlanillas)
        Get
            If _detalleConceptosPlanillas Is Nothing Then
                _detalleConceptosPlanillas = New TrackableCollection(Of DetalleConceptosPlanillas)
                AddHandler _detalleConceptosPlanillas.CollectionChanged, AddressOf FixupDetalleConceptosPlanillas
            End If
            Return _detalleConceptosPlanillas
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleConceptosPlanillas))
            If Not Object.ReferenceEquals(_detalleConceptosPlanillas, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleConceptosPlanillas IsNot Nothing Then
                    RemoveHandler _detalleConceptosPlanillas.CollectionChanged, AddressOf FixupDetalleConceptosPlanillas
                End If
                _detalleConceptosPlanillas = value
                If _detalleConceptosPlanillas IsNot Nothing Then
                    AddHandler _detalleConceptosPlanillas.CollectionChanged, AddressOf FixupDetalleConceptosPlanillas
                End If
                OnNavigationPropertyChanged("DetalleConceptosPlanillas")
            End If
        End Set
    End Property

    Private _detalleConceptosPlanillas As TrackableCollection(Of DetalleConceptosPlanillas)

    <DataMember()>
    Public Property DetalleConceptosPlanillas1() As TrackableCollection(Of DetalleConceptosPlanillas)
        Get
            If _detalleConceptosPlanillas1 Is Nothing Then
                _detalleConceptosPlanillas1 = New TrackableCollection(Of DetalleConceptosPlanillas)
                AddHandler _detalleConceptosPlanillas1.CollectionChanged, AddressOf FixupDetalleConceptosPlanillas1
            End If
            Return _detalleConceptosPlanillas1
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleConceptosPlanillas))
            If Not Object.ReferenceEquals(_detalleConceptosPlanillas1, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleConceptosPlanillas1 IsNot Nothing Then
                    RemoveHandler _detalleConceptosPlanillas1.CollectionChanged, AddressOf FixupDetalleConceptosPlanillas1
                End If
                _detalleConceptosPlanillas1 = value
                If _detalleConceptosPlanillas1 IsNot Nothing Then
                    AddHandler _detalleConceptosPlanillas1.CollectionChanged, AddressOf FixupDetalleConceptosPlanillas1
                End If
                OnNavigationPropertyChanged("DetalleConceptosPlanillas1")
            End If
        End Set
    End Property

    Private _detalleConceptosPlanillas1 As TrackableCollection(Of DetalleConceptosPlanillas)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociaci칩n que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesar치 notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Usuarios = Nothing
        DetallePrestamosTrabajador.Clear()
        TiposConceptos = Nothing
        ConceptosTrabajador.Clear()
        DetalleConceptosPensionarios.Clear()
        DetalleTrabajadorJudicial.Clear()
        DetallePlanillas.Clear()
        TesoreriaPlanillas.Clear()
        ComedorPLL.Clear()
        DetalleConceptosPlanillas.Clear()
        DetalleConceptosPlanillas1.Clear()
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            Usu_Id = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTiposConceptos(ByVal previousValue As TiposConceptos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Conceptos.Contains(Me) Then
            previousValue.Conceptos.Remove(Me)
        End If

        If TiposConceptos IsNot Nothing Then
            If Not TiposConceptos.Conceptos.Contains(Me) Then
                TiposConceptos.Conceptos.Add(Me)
            End If

            tic_TipoConcep_Id = TiposConceptos.tic_TipoConcep_Id
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TiposConceptos") AndAlso
                ChangeTracker.OriginalValues("TiposConceptos") Is TiposConceptos Then
                ChangeTracker.OriginalValues.Remove("TiposConceptos")
            Else
                ChangeTracker.RecordOriginalValue("TiposConceptos", previousValue)
            End If
            If TiposConceptos IsNot Nothing AndAlso Not TiposConceptos.ChangeTracker.ChangeTrackingEnabled Then
                TiposConceptos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetallePrestamosTrabajador(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetallePrestamosTrabajador In e.NewItems
                item.Conceptos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetallePrestamosTrabajador", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetallePrestamosTrabajador In e.OldItems
                If ReferenceEquals(item.Conceptos, Me) Then
                    item.Conceptos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetallePrestamosTrabajador", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupConceptosTrabajador(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As ConceptosTrabajador In e.NewItems
                item.Conceptos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("ConceptosTrabajador", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As ConceptosTrabajador In e.OldItems
                If ReferenceEquals(item.Conceptos, Me) Then
                    item.Conceptos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("ConceptosTrabajador", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupDetalleConceptosPensionarios(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleConceptosPensionarios In e.NewItems
                item.Conceptos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleConceptosPensionarios", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleConceptosPensionarios In e.OldItems
                If ReferenceEquals(item.Conceptos, Me) Then
                    item.Conceptos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleConceptosPensionarios", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupDetalleTrabajadorJudicial(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleTrabajadorJudicial In e.NewItems
                item.Conceptos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleTrabajadorJudicial", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleTrabajadorJudicial In e.OldItems
                If ReferenceEquals(item.Conceptos, Me) Then
                    item.Conceptos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleTrabajadorJudicial", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupDetallePlanillas(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetallePlanillas In e.NewItems
                item.Conceptos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetallePlanillas", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetallePlanillas In e.OldItems
                If ReferenceEquals(item.Conceptos, Me) Then
                    item.Conceptos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetallePlanillas", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupTesoreriaPlanillas(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As TesoreriaPlanillas In e.NewItems
                item.Conceptos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("TesoreriaPlanillas", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As TesoreriaPlanillas In e.OldItems
                If ReferenceEquals(item.Conceptos, Me) Then
                    item.Conceptos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("TesoreriaPlanillas", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupComedorPLL(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As ComedorPLL In e.NewItems
                item.Conceptos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("ComedorPLL", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As ComedorPLL In e.OldItems
                If ReferenceEquals(item.Conceptos, Me) Then
                    item.Conceptos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("ComedorPLL", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupDetalleConceptosPlanillas(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleConceptosPlanillas In e.NewItems
                item.Conceptos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleConceptosPlanillas", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleConceptosPlanillas In e.OldItems
                If ReferenceEquals(item.Conceptos, Me) Then
                    item.Conceptos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleConceptosPlanillas", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupDetalleConceptosPlanillas1(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleConceptosPlanillas In e.NewItems
                item.Conceptos1 = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleConceptosPlanillas1", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleConceptosPlanillas In e.OldItems
                If ReferenceEquals(item.Conceptos1, Me) Then
                    item.Conceptos1 = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleConceptosPlanillas1", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
