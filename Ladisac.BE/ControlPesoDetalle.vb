'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(ControlPeso))>
<KnownType(GetType(Personas))>
Partial Public Class ControlPesoDetalle
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared DPE_ID As string = "DPE_ID"
				public shared CPE_ID As string = "CPE_ID"
				public shared PER_ID_OPERADOR As string = "PER_ID_OPERADOR"
				public shared DPE_FECHA As string = "DPE_FECHA"
				public shared DPE_PESO As string = "DPE_PESO"
				public shared DPE_PESO_TIERRA As string = "DPE_PESO_TIERRA"
				public shared DPE_PORCENTAJE_HUMEDAD As string = "DPE_PORCENTAJE_HUMEDAD"
				public shared DPE_TIPO As string = "DPE_TIPO"
				public shared DPE_ALTO As string = "DPE_ALTO"
				public shared DPE_ANCHO As string = "DPE_ANCHO"
				public shared DPE_LARGO As string = "DPE_LARGO"
				public shared CAR_ID As string = "CAR_ID"
		    End Structure
	



    <DataMember()>
    Public Property DPE_ID() As Integer
        Get
            Return _dPE_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_dPE_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DPE_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _dPE_ID = value
                OnPropertyChanged("DPE_ID")
            End If
        End Set
    End Property

    Private _dPE_ID As Integer

    <DataMember()>
    Public Property CPE_ID() As Nullable(Of Integer)
        Get
            Return _cPE_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_cPE_ID, value) Then
                ChangeTracker.RecordOriginalValue("CPE_ID", _cPE_ID)
                If Not IsDeserializing Then
                    If ControlPeso IsNot Nothing AndAlso Not Equals(ControlPeso.CPE_ID, value) Then
                        ControlPeso = Nothing
                    End If
                End If
                _cPE_ID = value
                OnPropertyChanged("CPE_ID")
            End If
        End Set
    End Property

    Private _cPE_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property PER_ID_OPERADOR() As String
        Get
            Return _pER_ID_OPERADOR
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_OPERADOR, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_OPERADOR", _pER_ID_OPERADOR)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID_OPERADOR = value
                OnPropertyChanged("PER_ID_OPERADOR")
            End If
        End Set
    End Property

    Private _pER_ID_OPERADOR As String

    <DataMember()>
    Public Property DPE_FECHA() As Nullable(Of Date)
        Get
            Return _dPE_FECHA
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_dPE_FECHA, value) Then
                _dPE_FECHA = value
                OnPropertyChanged("DPE_FECHA")
            End If
        End Set
    End Property

    Private _dPE_FECHA As Nullable(Of Date)

    <DataMember()>
    Public Property DPE_PESO() As Nullable(Of Decimal)
        Get
            Return _dPE_PESO
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dPE_PESO, value) Then
                _dPE_PESO = value
                OnPropertyChanged("DPE_PESO")
            End If
        End Set
    End Property

    Private _dPE_PESO As Nullable(Of Decimal)

    <DataMember()>
    Public Property DPE_PESO_TIERRA() As Nullable(Of Decimal)
        Get
            Return _dPE_PESO_TIERRA
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dPE_PESO_TIERRA, value) Then
                _dPE_PESO_TIERRA = value
                OnPropertyChanged("DPE_PESO_TIERRA")
            End If
        End Set
    End Property

    Private _dPE_PESO_TIERRA As Nullable(Of Decimal)

    <DataMember()>
    Public Property DPE_PORCENTAJE_HUMEDAD() As Nullable(Of Decimal)
        Get
            Return _dPE_PORCENTAJE_HUMEDAD
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dPE_PORCENTAJE_HUMEDAD, value) Then
                _dPE_PORCENTAJE_HUMEDAD = value
                OnPropertyChanged("DPE_PORCENTAJE_HUMEDAD")
            End If
        End Set
    End Property

    Private _dPE_PORCENTAJE_HUMEDAD As Nullable(Of Decimal)

    <DataMember()>
    Public Property DPE_TIPO() As String
        Get
            Return _dPE_TIPO
        End Get
        Set(ByVal value As String)
            If Not Equals(_dPE_TIPO, value) Then
                _dPE_TIPO = value
                OnPropertyChanged("DPE_TIPO")
            End If
        End Set
    End Property

    Private _dPE_TIPO As String

    <DataMember()>
    Public Property DPE_ALTO() As Nullable(Of Decimal)
        Get
            Return _dPE_ALTO
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dPE_ALTO, value) Then
                _dPE_ALTO = value
                OnPropertyChanged("DPE_ALTO")
            End If
        End Set
    End Property

    Private _dPE_ALTO As Nullable(Of Decimal)

    <DataMember()>
    Public Property DPE_ANCHO() As Nullable(Of Decimal)
        Get
            Return _dPE_ANCHO
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dPE_ANCHO, value) Then
                _dPE_ANCHO = value
                OnPropertyChanged("DPE_ANCHO")
            End If
        End Set
    End Property

    Private _dPE_ANCHO As Nullable(Of Decimal)

    <DataMember()>
    Public Property DPE_LARGO() As Nullable(Of Decimal)
        Get
            Return _dPE_LARGO
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dPE_LARGO, value) Then
                _dPE_LARGO = value
                OnPropertyChanged("DPE_LARGO")
            End If
        End Set
    End Property

    Private _dPE_LARGO As Nullable(Of Decimal)

    <DataMember()>
    Public Property CAR_ID() As Nullable(Of Integer)
        Get
            Return _cAR_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_cAR_ID, value) Then
                _cAR_ID = value
                OnPropertyChanged("CAR_ID")
            End If
        End Set
    End Property

    Private _cAR_ID As Nullable(Of Integer)

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property ControlPeso() As ControlPeso
        Get
            Return _controlPeso
        End Get
        Set(ByVal value As ControlPeso)
            If _controlPeso IsNot value Then
                Dim previousValue As ControlPeso = _controlPeso
                _controlPeso = value
                FixupControlPeso(previousValue)
                OnNavigationPropertyChanged("ControlPeso")
            End If
        End Set
    End Property

    Private _controlPeso As ControlPeso


    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        ControlPeso = Nothing
        Personas = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupControlPeso(ByVal previousValue As ControlPeso, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ControlPesoDetalle.Contains(Me) Then
            previousValue.ControlPesoDetalle.Remove(Me)
        End If

        If ControlPeso IsNot Nothing Then
            If Not ControlPeso.ControlPesoDetalle.Contains(Me) Then
                ControlPeso.ControlPesoDetalle.Add(Me)
            End If

            CPE_ID = ControlPeso.CPE_ID
        ElseIf Not skipKeys Then
            CPE_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("ControlPeso") AndAlso
                ChangeTracker.OriginalValues("ControlPeso") Is ControlPeso Then
                ChangeTracker.OriginalValues.Remove("ControlPeso")
            Else
                ChangeTracker.RecordOriginalValue("ControlPeso", previousValue)
            End If
            If ControlPeso IsNot Nothing AndAlso Not ControlPeso.ChangeTracker.ChangeTrackingEnabled Then
                ControlPeso.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Personas IsNot Nothing Then
            PER_ID_OPERADOR = Personas.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_OPERADOR = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
