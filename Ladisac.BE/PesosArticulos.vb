'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Articulos))>
<KnownType(GetType(UnidadMedidaArticulos))>
<KnownType(GetType(Usuarios))>
Partial Public Class PesosArticulos
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared ART_ID As string = "ART_ID"
				public shared PAR_MES As string = "PAR_MES"
				public shared PAR_ANIO As string = "PAR_ANIO"
				public shared PAR_PESO_MAX As string = "PAR_PESO_MAX"
				public shared PAR_PESO_MIN As string = "PAR_PESO_MIN"
				public shared UM_ID As string = "UM_ID"
				public shared USU_ID As string = "USU_ID"
				public shared PAR_FEC_GRAB As string = "PAR_FEC_GRAB"
				public shared PAR_ESTADO As string = "PAR_ESTADO"
		    End Structure
	



    <DataMember()>
    Public Property ART_ID() As String
        Get
            Return _aRT_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_aRT_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'ART_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If Articulos IsNot Nothing AndAlso Not Equals(Articulos.ART_ID, value) Then
                        Articulos = Nothing
                    End If
                End If
                _aRT_ID = value
                OnPropertyChanged("ART_ID")
            End If
        End Set
    End Property

    Private _aRT_ID As String

    <DataMember()>
    Public Property PAR_MES() As Short
        Get
            Return _pAR_MES
        End Get
        Set(ByVal value As Short)
            If Not Equals(_pAR_MES, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'PAR_MES' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _pAR_MES = value
                OnPropertyChanged("PAR_MES")
            End If
        End Set
    End Property

    Private _pAR_MES As Short

    <DataMember()>
    Public Property PAR_ANIO() As Decimal
        Get
            Return _pAR_ANIO
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_pAR_ANIO, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'PAR_ANIO' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _pAR_ANIO = value
                OnPropertyChanged("PAR_ANIO")
            End If
        End Set
    End Property

    Private _pAR_ANIO As Decimal

    <DataMember()>
    Public Property PAR_PESO_MAX() As Decimal
        Get
            Return _pAR_PESO_MAX
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_pAR_PESO_MAX, value) Then
                _pAR_PESO_MAX = value
                OnPropertyChanged("PAR_PESO_MAX")
            End If
        End Set
    End Property

    Private _pAR_PESO_MAX As Decimal

    <DataMember()>
    Public Property PAR_PESO_MIN() As Decimal
        Get
            Return _pAR_PESO_MIN
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_pAR_PESO_MIN, value) Then
                _pAR_PESO_MIN = value
                OnPropertyChanged("PAR_PESO_MIN")
            End If
        End Set
    End Property

    Private _pAR_PESO_MIN As Decimal

    <DataMember()>
    Public Property UM_ID() As String
        Get
            Return _uM_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uM_ID, value) Then
                ChangeTracker.RecordOriginalValue("UM_ID", _uM_ID)
                If Not IsDeserializing Then
                    If UnidadMedidaArticulos IsNot Nothing AndAlso Not Equals(UnidadMedidaArticulos.UM_ID, value) Then
                        UnidadMedidaArticulos = Nothing
                    End If
                End If
                _uM_ID = value
                OnPropertyChanged("UM_ID")
            End If
        End Set
    End Property

    Private _uM_ID As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property PAR_FEC_GRAB() As Date
        Get
            Return _pAR_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_pAR_FEC_GRAB, value) Then
                _pAR_FEC_GRAB = value
                OnPropertyChanged("PAR_FEC_GRAB")
            End If
        End Set
    End Property

    Private _pAR_FEC_GRAB As Date

    <DataMember()>
    Public Property PAR_ESTADO() As Boolean
        Get
            Return _pAR_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_pAR_ESTADO, value) Then
                _pAR_ESTADO = value
                OnPropertyChanged("PAR_ESTADO")
            End If
        End Set
    End Property

    Private _pAR_ESTADO As Boolean

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Articulos() As Articulos
        Get
            Return _articulos
        End Get
        Set(ByVal value As Articulos)
            If _articulos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(ART_ID, value.ART_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As Articulos = _articulos
                _articulos = value
                FixupArticulos(previousValue)
                OnNavigationPropertyChanged("Articulos")
            End If
        End Set
    End Property

    Private _articulos As Articulos


    <DataMember()>
    Public Property UnidadMedidaArticulos() As UnidadMedidaArticulos
        Get
            Return _unidadMedidaArticulos
        End Get
        Set(ByVal value As UnidadMedidaArticulos)
            If _unidadMedidaArticulos IsNot value Then
                Dim previousValue As UnidadMedidaArticulos = _unidadMedidaArticulos
                _unidadMedidaArticulos = value
                FixupUnidadMedidaArticulos(previousValue)
                OnNavigationPropertyChanged("UnidadMedidaArticulos")
            End If
        End Set
    End Property

    Private _unidadMedidaArticulos As UnidadMedidaArticulos


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociación que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesará notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Articulos = Nothing
        UnidadMedidaArticulos = Nothing
        Usuarios = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupArticulos(ByVal previousValue As Articulos)
        ' Este es el extremo dependiente en una asociación que realiza eliminaciones en cascada.
        ' Actualizar la escucha de eventos del extremo principal para que se refiera al nuevo extremo dependiente.
        ' Esta es una relación unidireccional desde el extremo dependiente al extremo principal por lo que el extremo dependiente es
        ' responsable de administrar el controlador de eventos de eliminación en cascada. En el resto de los casos, será el extremo principal el que lo administrará.
        If previousValue IsNot Nothing Then
            RemoveHandler previousValue.ChangeTracker.ObjectStateChanging, AddressOf HandleCascadeDelete
        End If

        If Articulos IsNot Nothing Then
            AddHandler Articulos.ChangeTracker.ObjectStateChanging, AddressOf HandleCascadeDelete
        End If

        If IsDeserializing Then
            Return
        End If

        If Articulos IsNot Nothing Then
            ART_ID = Articulos.ART_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Articulos") AndAlso
                ChangeTracker.OriginalValues("Articulos") Is Articulos Then
                ChangeTracker.OriginalValues.Remove("Articulos")
            Else
                ChangeTracker.RecordOriginalValue("Articulos", previousValue)
                ' Este es el extremo dependiente de una asociación de identificación, por lo que se debe eliminar cuando la relación se
                ' elimine. Si el estado actual es agregado, la relación se puede modificar sin eliminar el extremo dependiente.
                ' Esta es una relación unidireccional desde el extremo dependiente al extremo principal por lo que el extremo dependiente es
                ' responsable de administrar en cascada la eliminación. En el resto de los casos, será el extremo principal el que lo administre.
                If previousValue IsNot Nothing AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Me.MarkAsDeleted()
                End If
            End If
            If Articulos IsNot Nothing AndAlso Not Articulos.ChangeTracker.ChangeTrackingEnabled Then
                Articulos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUnidadMedidaArticulos(ByVal previousValue As UnidadMedidaArticulos)
        If IsDeserializing Then
            Return
        End If

        If UnidadMedidaArticulos IsNot Nothing Then
            UM_ID = UnidadMedidaArticulos.UM_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("UnidadMedidaArticulos") AndAlso
                ChangeTracker.OriginalValues("UnidadMedidaArticulos") Is UnidadMedidaArticulos Then
                ChangeTracker.OriginalValues.Remove("UnidadMedidaArticulos")
            Else
                ChangeTracker.RecordOriginalValue("UnidadMedidaArticulos", previousValue)
            End If
            If UnidadMedidaArticulos IsNot Nothing AndAlso Not UnidadMedidaArticulos.ChangeTracker.ChangeTrackingEnabled Then
                UnidadMedidaArticulos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
