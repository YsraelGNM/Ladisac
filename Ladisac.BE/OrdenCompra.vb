'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(DocuMovimiento))>
<KnownType(GetType(DetalleTipoDocumentos))>
<KnownType(GetType(Personas))>
<KnownType(GetType(TipoVenta))>
<KnownType(GetType(OrdenCompraCuotas))>
<KnownType(GetType(OrdenCompraDetalle))>
<KnownType(GetType(RecepcionDocumento))>
Partial Public Class OrdenCompra
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared OCO_ID As string = "OCO_ID"
				public shared PER_ID_PROVEEDOR As string = "PER_ID_PROVEEDOR"
				public shared OCO_FECHA As string = "OCO_FECHA"
				public shared OCO_NRO_COTIZACION As string = "OCO_NRO_COTIZACION"
				public shared TIV_ID_PAGO As string = "TIV_ID_PAGO"
				public shared MON_ID As string = "MON_ID"
				public shared OCO_FECHAENTREGA As string = "OCO_FECHAENTREGA"
				public shared OCO_ENTREGA As string = "OCO_ENTREGA"
				public shared OCO_OBSERVACIONES As string = "OCO_OBSERVACIONES"
				public shared OCO_ANTICIPO As string = "OCO_ANTICIPO"
				public shared OCO_IMPORTANCIA As string = "OCO_IMPORTANCIA"
				public shared USU_ID As string = "USU_ID"
				public shared OCO_FEC_GRAB As string = "OCO_FEC_GRAB"
				public shared OCO_ESTADO As string = "OCO_ESTADO"
				public shared DTD_ID As string = "DTD_ID"
				public shared TDO_ID As string = "TDO_ID"
				public shared CCT_ID As string = "CCT_ID"
				public shared OCO_ADJUNTO As string = "OCO_ADJUNTO"
				public shared OCO_ADJUNTO_DESCRI As string = "OCO_ADJUNTO_DESCRI"
				public shared OCO_CERRADA As string = "OCO_CERRADA"
		    End Structure
	



    <DataMember()>
    Public Property OCO_ID() As Integer
        Get
            Return _oCO_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_oCO_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'OCO_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _oCO_ID = value
                OnPropertyChanged("OCO_ID")
            End If
        End Set
    End Property

    Private _oCO_ID As Integer

    <DataMember()>
    Public Property PER_ID_PROVEEDOR() As String
        Get
            Return _pER_ID_PROVEEDOR
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_PROVEEDOR, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_PROVEEDOR", _pER_ID_PROVEEDOR)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID_PROVEEDOR = value
                OnPropertyChanged("PER_ID_PROVEEDOR")
            End If
        End Set
    End Property

    Private _pER_ID_PROVEEDOR As String

    <DataMember()>
    Public Property OCO_FECHA() As Nullable(Of Date)
        Get
            Return _oCO_FECHA
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_oCO_FECHA, value) Then
                _oCO_FECHA = value
                OnPropertyChanged("OCO_FECHA")
            End If
        End Set
    End Property

    Private _oCO_FECHA As Nullable(Of Date)

    <DataMember()>
    Public Property OCO_NRO_COTIZACION() As String
        Get
            Return _oCO_NRO_COTIZACION
        End Get
        Set(ByVal value As String)
            If Not Equals(_oCO_NRO_COTIZACION, value) Then
                _oCO_NRO_COTIZACION = value
                OnPropertyChanged("OCO_NRO_COTIZACION")
            End If
        End Set
    End Property

    Private _oCO_NRO_COTIZACION As String

    <DataMember()>
    Public Property TIV_ID_PAGO() As String
        Get
            Return _tIV_ID_PAGO
        End Get
        Set(ByVal value As String)
            If Not Equals(_tIV_ID_PAGO, value) Then
                ChangeTracker.RecordOriginalValue("TIV_ID_PAGO", _tIV_ID_PAGO)
                If Not IsDeserializing Then
                    If TipoVenta IsNot Nothing AndAlso Not Equals(TipoVenta.TIV_ID, value) Then
                        TipoVenta = Nothing
                    End If
                End If
                _tIV_ID_PAGO = value
                OnPropertyChanged("TIV_ID_PAGO")
            End If
        End Set
    End Property

    Private _tIV_ID_PAGO As String

    <DataMember()>
    Public Property MON_ID() As String
        Get
            Return _mON_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_mON_ID, value) Then
                _mON_ID = value
                OnPropertyChanged("MON_ID")
            End If
        End Set
    End Property

    Private _mON_ID As String

    <DataMember()>
    Public Property OCO_FECHAENTREGA() As Nullable(Of Date)
        Get
            Return _oCO_FECHAENTREGA
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_oCO_FECHAENTREGA, value) Then
                _oCO_FECHAENTREGA = value
                OnPropertyChanged("OCO_FECHAENTREGA")
            End If
        End Set
    End Property

    Private _oCO_FECHAENTREGA As Nullable(Of Date)

    <DataMember()>
    Public Property OCO_ENTREGA() As String
        Get
            Return _oCO_ENTREGA
        End Get
        Set(ByVal value As String)
            If Not Equals(_oCO_ENTREGA, value) Then
                _oCO_ENTREGA = value
                OnPropertyChanged("OCO_ENTREGA")
            End If
        End Set
    End Property

    Private _oCO_ENTREGA As String

    <DataMember()>
    Public Property OCO_OBSERVACIONES() As String
        Get
            Return _oCO_OBSERVACIONES
        End Get
        Set(ByVal value As String)
            If Not Equals(_oCO_OBSERVACIONES, value) Then
                _oCO_OBSERVACIONES = value
                OnPropertyChanged("OCO_OBSERVACIONES")
            End If
        End Set
    End Property

    Private _oCO_OBSERVACIONES As String

    <DataMember()>
    Public Property OCO_ANTICIPO() As Nullable(Of Decimal)
        Get
            Return _oCO_ANTICIPO
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_oCO_ANTICIPO, value) Then
                _oCO_ANTICIPO = value
                OnPropertyChanged("OCO_ANTICIPO")
            End If
        End Set
    End Property

    Private _oCO_ANTICIPO As Nullable(Of Decimal)

    <DataMember()>
    Public Property OCO_IMPORTANCIA() As Nullable(Of Integer)
        Get
            Return _oCO_IMPORTANCIA
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_oCO_IMPORTANCIA, value) Then
                _oCO_IMPORTANCIA = value
                OnPropertyChanged("OCO_IMPORTANCIA")
            End If
        End Set
    End Property

    Private _oCO_IMPORTANCIA As Nullable(Of Integer)

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property OCO_FEC_GRAB() As Nullable(Of Date)
        Get
            Return _oCO_FEC_GRAB
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_oCO_FEC_GRAB, value) Then
                _oCO_FEC_GRAB = value
                OnPropertyChanged("OCO_FEC_GRAB")
            End If
        End Set
    End Property

    Private _oCO_FEC_GRAB As Nullable(Of Date)

    <DataMember()>
    Public Property OCO_ESTADO() As Nullable(Of Boolean)
        Get
            Return _oCO_ESTADO
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_oCO_ESTADO, value) Then
                _oCO_ESTADO = value
                OnPropertyChanged("OCO_ESTADO")
            End If
        End Set
    End Property

    Private _oCO_ESTADO As Nullable(Of Boolean)

    <DataMember()>
    Public Property DTD_ID() As String
        Get
            Return _dTD_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID, value) Then
                ChangeTracker.RecordOriginalValue("DTD_ID", _dTD_ID)
                If Not IsDeserializing Then
                    If DetalleTipoDocumentos IsNot Nothing AndAlso Not Equals(DetalleTipoDocumentos.DTD_ID, value) Then
                        DetalleTipoDocumentos = Nothing
                    End If
                End If
                _dTD_ID = value
                OnPropertyChanged("DTD_ID")
            End If
        End Set
    End Property

    Private _dTD_ID As String

    <DataMember()>
    Public Property TDO_ID() As String
        Get
            Return _tDO_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID, value) Then
                _tDO_ID = value
                OnPropertyChanged("TDO_ID")
            End If
        End Set
    End Property

    Private _tDO_ID As String

    <DataMember()>
    Public Property CCT_ID() As String
        Get
            Return _cCT_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCT_ID, value) Then
                _cCT_ID = value
                OnPropertyChanged("CCT_ID")
            End If
        End Set
    End Property

    Private _cCT_ID As String

    <DataMember()>
    Public Property OCO_ADJUNTO() As Byte()
        Get
            Return _oCO_ADJUNTO
        End Get
        Set(ByVal value As Byte())
            If _oCO_ADJUNTO IsNot value Then
                _oCO_ADJUNTO = value
                OnPropertyChanged("OCO_ADJUNTO")
            End If
        End Set
    End Property

    Private _oCO_ADJUNTO As Byte()

    <DataMember()>
    Public Property OCO_ADJUNTO_DESCRI() As String
        Get
            Return _oCO_ADJUNTO_DESCRI
        End Get
        Set(ByVal value As String)
            If Not Equals(_oCO_ADJUNTO_DESCRI, value) Then
                _oCO_ADJUNTO_DESCRI = value
                OnPropertyChanged("OCO_ADJUNTO_DESCRI")
            End If
        End Set
    End Property

    Private _oCO_ADJUNTO_DESCRI As String

    <DataMember()>
    Public Property OCO_CERRADA() As Integer
        Get
            Return _oCO_CERRADA
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_oCO_CERRADA, value) Then
                _oCO_CERRADA = value
                OnPropertyChanged("OCO_CERRADA")
            End If
        End Set
    End Property

    Private _oCO_CERRADA As Integer

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property DocuMovimiento() As TrackableCollection(Of DocuMovimiento)
        Get
            If _docuMovimiento Is Nothing Then
                _docuMovimiento = New TrackableCollection(Of DocuMovimiento)
                AddHandler _docuMovimiento.CollectionChanged, AddressOf FixupDocuMovimiento
            End If
            Return _docuMovimiento
        End Get
        Set(ByVal value As TrackableCollection(Of DocuMovimiento))
            If Not Object.ReferenceEquals(_docuMovimiento, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _docuMovimiento IsNot Nothing Then
                    RemoveHandler _docuMovimiento.CollectionChanged, AddressOf FixupDocuMovimiento
                End If
                _docuMovimiento = value
                If _docuMovimiento IsNot Nothing Then
                    AddHandler _docuMovimiento.CollectionChanged, AddressOf FixupDocuMovimiento
                End If
                OnNavigationPropertyChanged("DocuMovimiento")
            End If
        End Set
    End Property

    Private _docuMovimiento As TrackableCollection(Of DocuMovimiento)

    <DataMember()>
    Public Property DetalleTipoDocumentos() As DetalleTipoDocumentos
        Get
            Return _detalleTipoDocumentos
        End Get
        Set(ByVal value As DetalleTipoDocumentos)
            If _detalleTipoDocumentos IsNot value Then
                Dim previousValue As DetalleTipoDocumentos = _detalleTipoDocumentos
                _detalleTipoDocumentos = value
                FixupDetalleTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("DetalleTipoDocumentos")
            End If
        End Set
    End Property

    Private _detalleTipoDocumentos As DetalleTipoDocumentos


    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property TipoVenta() As TipoVenta
        Get
            Return _tipoVenta
        End Get
        Set(ByVal value As TipoVenta)
            If _tipoVenta IsNot value Then
                Dim previousValue As TipoVenta = _tipoVenta
                _tipoVenta = value
                FixupTipoVenta(previousValue)
                OnNavigationPropertyChanged("TipoVenta")
            End If
        End Set
    End Property

    Private _tipoVenta As TipoVenta


    <DataMember()>
    Public Property OrdenCompraCuotas() As TrackableCollection(Of OrdenCompraCuotas)
        Get
            If _ordenCompraCuotas Is Nothing Then
                _ordenCompraCuotas = New TrackableCollection(Of OrdenCompraCuotas)
                AddHandler _ordenCompraCuotas.CollectionChanged, AddressOf FixupOrdenCompraCuotas
            End If
            Return _ordenCompraCuotas
        End Get
        Set(ByVal value As TrackableCollection(Of OrdenCompraCuotas))
            If Not Object.ReferenceEquals(_ordenCompraCuotas, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _ordenCompraCuotas IsNot Nothing Then
                    RemoveHandler _ordenCompraCuotas.CollectionChanged, AddressOf FixupOrdenCompraCuotas
                End If
                _ordenCompraCuotas = value
                If _ordenCompraCuotas IsNot Nothing Then
                    AddHandler _ordenCompraCuotas.CollectionChanged, AddressOf FixupOrdenCompraCuotas
                End If
                OnNavigationPropertyChanged("OrdenCompraCuotas")
            End If
        End Set
    End Property

    Private _ordenCompraCuotas As TrackableCollection(Of OrdenCompraCuotas)

    <DataMember()>
    Public Property OrdenCompraDetalle() As TrackableCollection(Of OrdenCompraDetalle)
        Get
            If _ordenCompraDetalle Is Nothing Then
                _ordenCompraDetalle = New TrackableCollection(Of OrdenCompraDetalle)
                AddHandler _ordenCompraDetalle.CollectionChanged, AddressOf FixupOrdenCompraDetalle
            End If
            Return _ordenCompraDetalle
        End Get
        Set(ByVal value As TrackableCollection(Of OrdenCompraDetalle))
            If Not Object.ReferenceEquals(_ordenCompraDetalle, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _ordenCompraDetalle IsNot Nothing Then
                    RemoveHandler _ordenCompraDetalle.CollectionChanged, AddressOf FixupOrdenCompraDetalle
                End If
                _ordenCompraDetalle = value
                If _ordenCompraDetalle IsNot Nothing Then
                    AddHandler _ordenCompraDetalle.CollectionChanged, AddressOf FixupOrdenCompraDetalle
                End If
                OnNavigationPropertyChanged("OrdenCompraDetalle")
            End If
        End Set
    End Property

    Private _ordenCompraDetalle As TrackableCollection(Of OrdenCompraDetalle)

    <DataMember()>
    Public Property RecepcionDocumento() As TrackableCollection(Of RecepcionDocumento)
        Get
            If _recepcionDocumento Is Nothing Then
                _recepcionDocumento = New TrackableCollection(Of RecepcionDocumento)
                AddHandler _recepcionDocumento.CollectionChanged, AddressOf FixupRecepcionDocumento
            End If
            Return _recepcionDocumento
        End Get
        Set(ByVal value As TrackableCollection(Of RecepcionDocumento))
            If Not Object.ReferenceEquals(_recepcionDocumento, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _recepcionDocumento IsNot Nothing Then
                    RemoveHandler _recepcionDocumento.CollectionChanged, AddressOf FixupRecepcionDocumento
                End If
                _recepcionDocumento = value
                If _recepcionDocumento IsNot Nothing Then
                    AddHandler _recepcionDocumento.CollectionChanged, AddressOf FixupRecepcionDocumento
                End If
                OnNavigationPropertyChanged("RecepcionDocumento")
            End If
        End Set
    End Property

    Private _recepcionDocumento As TrackableCollection(Of RecepcionDocumento)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        DocuMovimiento.Clear()
        DetalleTipoDocumentos = Nothing
        Personas = Nothing
        TipoVenta = Nothing
        OrdenCompraCuotas.Clear()
        OrdenCompraDetalle.Clear()
        RecepcionDocumento.Clear()
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupDetalleTipoDocumentos(ByVal previousValue As DetalleTipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.OrdenCompra.Contains(Me) Then
            previousValue.OrdenCompra.Remove(Me)
        End If

        If DetalleTipoDocumentos IsNot Nothing Then
            If Not DetalleTipoDocumentos.OrdenCompra.Contains(Me) Then
                DetalleTipoDocumentos.OrdenCompra.Add(Me)
            End If

            DTD_ID = DetalleTipoDocumentos.DTD_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("DetalleTipoDocumentos") Is DetalleTipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("DetalleTipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTipoDocumentos", previousValue)
            End If
            If DetalleTipoDocumentos IsNot Nothing AndAlso Not DetalleTipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.OrdenCompra.Contains(Me) Then
            previousValue.OrdenCompra.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.OrdenCompra.Contains(Me) Then
                Personas.OrdenCompra.Add(Me)
            End If

            PER_ID_PROVEEDOR = Personas.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_PROVEEDOR = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoVenta(ByVal previousValue As TipoVenta, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.OrdenCompra.Contains(Me) Then
            previousValue.OrdenCompra.Remove(Me)
        End If

        If TipoVenta IsNot Nothing Then
            If Not TipoVenta.OrdenCompra.Contains(Me) Then
                TipoVenta.OrdenCompra.Add(Me)
            End If

            TIV_ID_PAGO = TipoVenta.TIV_ID
        ElseIf Not skipKeys Then
            TIV_ID_PAGO = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoVenta") AndAlso
                ChangeTracker.OriginalValues("TipoVenta") Is TipoVenta Then
                ChangeTracker.OriginalValues.Remove("TipoVenta")
            Else
                ChangeTracker.RecordOriginalValue("TipoVenta", previousValue)
            End If
            If TipoVenta IsNot Nothing AndAlso Not TipoVenta.ChangeTracker.ChangeTrackingEnabled Then
                TipoVenta.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDocuMovimiento(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DocuMovimiento In e.NewItems
                item.OrdenCompra = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DocuMovimiento", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DocuMovimiento In e.OldItems
                If ReferenceEquals(item.OrdenCompra, Me) Then
                    item.OrdenCompra = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DocuMovimiento", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupOrdenCompraCuotas(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As OrdenCompraCuotas In e.NewItems
                item.OrdenCompra = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("OrdenCompraCuotas", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As OrdenCompraCuotas In e.OldItems
                If ReferenceEquals(item.OrdenCompra, Me) Then
                    item.OrdenCompra = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("OrdenCompraCuotas", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupOrdenCompraDetalle(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As OrdenCompraDetalle In e.NewItems
                item.OrdenCompra = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("OrdenCompraDetalle", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As OrdenCompraDetalle In e.OldItems
                If ReferenceEquals(item.OrdenCompra, Me) Then
                    item.OrdenCompra = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("OrdenCompraDetalle", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupRecepcionDocumento(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As RecepcionDocumento In e.NewItems
                item.OrdenCompra = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("RecepcionDocumento", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As RecepcionDocumento In e.OldItems
                If ReferenceEquals(item.OrdenCompra, Me) Then
                    item.OrdenCompra = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("RecepcionDocumento", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
