'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Almacen))>
<KnownType(GetType(Articulos))>
<KnownType(GetType(UbicacionAlmacen))>
Partial Public Class Inventario
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared INV_ID As string = "INV_ID"
				public shared ART_ID As string = "ART_ID"
				public shared ALM_ID As string = "ALM_ID"
				public shared UBI_ID As string = "UBI_ID"
				public shared INV_FECHA As string = "INV_FECHA"
				public shared INV_STOCK As string = "INV_STOCK"
				public shared INV_CONTEO As string = "INV_CONTEO"
				public shared INV_PU As string = "INV_PU"
				public shared USU_ID As string = "USU_ID"
				public shared INV_FEC_GRAB As string = "INV_FEC_GRAB"
				public shared INV_ESTADO As string = "INV_ESTADO"
		    End Structure
	



    <DataMember()>
    Public Property INV_ID() As Integer
        Get
            Return _iNV_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_iNV_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'INV_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _iNV_ID = value
                OnPropertyChanged("INV_ID")
            End If
        End Set
    End Property

    Private _iNV_ID As Integer

    <DataMember()>
    Public Property ART_ID() As String
        Get
            Return _aRT_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_aRT_ID, value) Then
                ChangeTracker.RecordOriginalValue("ART_ID", _aRT_ID)
                If Not IsDeserializing Then
                    If Articulos IsNot Nothing AndAlso Not Equals(Articulos.ART_ID, value) Then
                        Articulos = Nothing
                    End If
                End If
                _aRT_ID = value
                OnPropertyChanged("ART_ID")
            End If
        End Set
    End Property

    Private _aRT_ID As String

    <DataMember()>
    Public Property ALM_ID() As Nullable(Of Integer)
        Get
            Return _aLM_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_aLM_ID, value) Then
                ChangeTracker.RecordOriginalValue("ALM_ID", _aLM_ID)
                If Not IsDeserializing Then
                    If Almacen IsNot Nothing AndAlso Not Equals(Almacen.ALM_ID, value) Then
                        Almacen = Nothing
                    End If
                End If
                _aLM_ID = value
                OnPropertyChanged("ALM_ID")
            End If
        End Set
    End Property

    Private _aLM_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property UBI_ID() As Nullable(Of Integer)
        Get
            Return _uBI_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_uBI_ID, value) Then
                ChangeTracker.RecordOriginalValue("UBI_ID", _uBI_ID)
                If Not IsDeserializing Then
                    If UbicacionAlmacen IsNot Nothing AndAlso Not Equals(UbicacionAlmacen.UBI_ID, value) Then
                        UbicacionAlmacen = Nothing
                    End If
                End If
                _uBI_ID = value
                OnPropertyChanged("UBI_ID")
            End If
        End Set
    End Property

    Private _uBI_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property INV_FECHA() As Nullable(Of Date)
        Get
            Return _iNV_FECHA
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_iNV_FECHA, value) Then
                _iNV_FECHA = value
                OnPropertyChanged("INV_FECHA")
            End If
        End Set
    End Property

    Private _iNV_FECHA As Nullable(Of Date)

    <DataMember()>
    Public Property INV_STOCK() As Nullable(Of Decimal)
        Get
            Return _iNV_STOCK
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_iNV_STOCK, value) Then
                _iNV_STOCK = value
                OnPropertyChanged("INV_STOCK")
            End If
        End Set
    End Property

    Private _iNV_STOCK As Nullable(Of Decimal)

    <DataMember()>
    Public Property INV_CONTEO() As Nullable(Of Decimal)
        Get
            Return _iNV_CONTEO
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_iNV_CONTEO, value) Then
                _iNV_CONTEO = value
                OnPropertyChanged("INV_CONTEO")
            End If
        End Set
    End Property

    Private _iNV_CONTEO As Nullable(Of Decimal)

    <DataMember()>
    Public Property INV_PU() As Nullable(Of Decimal)
        Get
            Return _iNV_PU
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_iNV_PU, value) Then
                _iNV_PU = value
                OnPropertyChanged("INV_PU")
            End If
        End Set
    End Property

    Private _iNV_PU As Nullable(Of Decimal)

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property INV_FEC_GRAB() As Nullable(Of Date)
        Get
            Return _iNV_FEC_GRAB
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_iNV_FEC_GRAB, value) Then
                _iNV_FEC_GRAB = value
                OnPropertyChanged("INV_FEC_GRAB")
            End If
        End Set
    End Property

    Private _iNV_FEC_GRAB As Nullable(Of Date)

    <DataMember()>
    Public Property INV_ESTADO() As Nullable(Of Boolean)
        Get
            Return _iNV_ESTADO
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_iNV_ESTADO, value) Then
                _iNV_ESTADO = value
                OnPropertyChanged("INV_ESTADO")
            End If
        End Set
    End Property

    Private _iNV_ESTADO As Nullable(Of Boolean)

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Almacen() As Almacen
        Get
            Return _almacen
        End Get
        Set(ByVal value As Almacen)
            If _almacen IsNot value Then
                Dim previousValue As Almacen = _almacen
                _almacen = value
                FixupAlmacen(previousValue)
                OnNavigationPropertyChanged("Almacen")
            End If
        End Set
    End Property

    Private _almacen As Almacen


    <DataMember()>
    Public Property Articulos() As Articulos
        Get
            Return _articulos
        End Get
        Set(ByVal value As Articulos)
            If _articulos IsNot value Then
                Dim previousValue As Articulos = _articulos
                _articulos = value
                FixupArticulos(previousValue)
                OnNavigationPropertyChanged("Articulos")
            End If
        End Set
    End Property

    Private _articulos As Articulos


    <DataMember()>
    Public Property UbicacionAlmacen() As UbicacionAlmacen
        Get
            Return _ubicacionAlmacen
        End Get
        Set(ByVal value As UbicacionAlmacen)
            If _ubicacionAlmacen IsNot value Then
                Dim previousValue As UbicacionAlmacen = _ubicacionAlmacen
                _ubicacionAlmacen = value
                FixupUbicacionAlmacen(previousValue)
                OnNavigationPropertyChanged("UbicacionAlmacen")
            End If
        End Set
    End Property

    Private _ubicacionAlmacen As UbicacionAlmacen


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Almacen = Nothing
        Articulos = Nothing
        UbicacionAlmacen = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupAlmacen(ByVal previousValue As Almacen, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Inventario.Contains(Me) Then
            previousValue.Inventario.Remove(Me)
        End If

        If Almacen IsNot Nothing Then
            If Not Almacen.Inventario.Contains(Me) Then
                Almacen.Inventario.Add(Me)
            End If

            ALM_ID = Almacen.ALM_ID
        ElseIf Not skipKeys Then
            ALM_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Almacen") AndAlso
                ChangeTracker.OriginalValues("Almacen") Is Almacen Then
                ChangeTracker.OriginalValues.Remove("Almacen")
            Else
                ChangeTracker.RecordOriginalValue("Almacen", previousValue)
            End If
            If Almacen IsNot Nothing AndAlso Not Almacen.ChangeTracker.ChangeTrackingEnabled Then
                Almacen.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupArticulos(ByVal previousValue As Articulos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Inventario.Contains(Me) Then
            previousValue.Inventario.Remove(Me)
        End If

        If Articulos IsNot Nothing Then
            If Not Articulos.Inventario.Contains(Me) Then
                Articulos.Inventario.Add(Me)
            End If

            ART_ID = Articulos.ART_ID
        ElseIf Not skipKeys Then
            ART_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Articulos") AndAlso
                ChangeTracker.OriginalValues("Articulos") Is Articulos Then
                ChangeTracker.OriginalValues.Remove("Articulos")
            Else
                ChangeTracker.RecordOriginalValue("Articulos", previousValue)
            End If
            If Articulos IsNot Nothing AndAlso Not Articulos.ChangeTracker.ChangeTrackingEnabled Then
                Articulos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUbicacionAlmacen(ByVal previousValue As UbicacionAlmacen, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Inventario.Contains(Me) Then
            previousValue.Inventario.Remove(Me)
        End If

        If UbicacionAlmacen IsNot Nothing Then
            If Not UbicacionAlmacen.Inventario.Contains(Me) Then
                UbicacionAlmacen.Inventario.Add(Me)
            End If

            UBI_ID = UbicacionAlmacen.UBI_ID
        ElseIf Not skipKeys Then
            UBI_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("UbicacionAlmacen") AndAlso
                ChangeTracker.OriginalValues("UbicacionAlmacen") Is UbicacionAlmacen Then
                ChangeTracker.OriginalValues.Remove("UbicacionAlmacen")
            Else
                ChangeTracker.RecordOriginalValue("UbicacionAlmacen", previousValue)
            End If
            If UbicacionAlmacen IsNot Nothing AndAlso Not UbicacionAlmacen.ChangeTracker.ChangeTrackingEnabled Then
                UbicacionAlmacen.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
