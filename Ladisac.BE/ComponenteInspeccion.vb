'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Inspeccion))>
<KnownType(GetType(ParametroEntidad))>
Partial Public Class ComponenteInspeccion
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared COM_ID As string = "COM_ID"
				public shared INS_ID As string = "INS_ID"
				public shared COM_DESCRIPCION As string = "COM_DESCRIPCION"
				public shared COM_TITULO As string = "COM_TITULO"
				public shared USU_ID As string = "USU_ID"
				public shared COM_FEC_GRAB As string = "COM_FEC_GRAB"
				public shared COM_ESTADO As string = "COM_ESTADO"
		    End Structure
	



    <DataMember()>
    Public Property COM_ID() As Integer
        Get
            Return _cOM_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_cOM_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'COM_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _cOM_ID = value
                OnPropertyChanged("COM_ID")
            End If
        End Set
    End Property

    Private _cOM_ID As Integer

    <DataMember()>
    Public Property INS_ID() As Nullable(Of Integer)
        Get
            Return _iNS_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_iNS_ID, value) Then
                ChangeTracker.RecordOriginalValue("INS_ID", _iNS_ID)
                If Not IsDeserializing Then
                    If Inspeccion IsNot Nothing AndAlso Not Equals(Inspeccion.INS_ID, value) Then
                        Inspeccion = Nothing
                    End If
                End If
                _iNS_ID = value
                OnPropertyChanged("INS_ID")
            End If
        End Set
    End Property

    Private _iNS_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property COM_DESCRIPCION() As String
        Get
            Return _cOM_DESCRIPCION
        End Get
        Set(ByVal value As String)
            If Not Equals(_cOM_DESCRIPCION, value) Then
                _cOM_DESCRIPCION = value
                OnPropertyChanged("COM_DESCRIPCION")
            End If
        End Set
    End Property

    Private _cOM_DESCRIPCION As String

    <DataMember()>
    Public Property COM_TITULO() As String
        Get
            Return _cOM_TITULO
        End Get
        Set(ByVal value As String)
            If Not Equals(_cOM_TITULO, value) Then
                _cOM_TITULO = value
                OnPropertyChanged("COM_TITULO")
            End If
        End Set
    End Property

    Private _cOM_TITULO As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property COM_FEC_GRAB() As Nullable(Of Date)
        Get
            Return _cOM_FEC_GRAB
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_cOM_FEC_GRAB, value) Then
                _cOM_FEC_GRAB = value
                OnPropertyChanged("COM_FEC_GRAB")
            End If
        End Set
    End Property

    Private _cOM_FEC_GRAB As Nullable(Of Date)

    <DataMember()>
    Public Property COM_ESTADO() As Nullable(Of Boolean)
        Get
            Return _cOM_ESTADO
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_cOM_ESTADO, value) Then
                _cOM_ESTADO = value
                OnPropertyChanged("COM_ESTADO")
            End If
        End Set
    End Property

    Private _cOM_ESTADO As Nullable(Of Boolean)

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Inspeccion() As Inspeccion
        Get
            Return _inspeccion
        End Get
        Set(ByVal value As Inspeccion)
            If _inspeccion IsNot value Then
                Dim previousValue As Inspeccion = _inspeccion
                _inspeccion = value
                FixupInspeccion(previousValue)
                OnNavigationPropertyChanged("Inspeccion")
            End If
        End Set
    End Property

    Private _inspeccion As Inspeccion


    <DataMember()>
    Public Property ParametroEntidad() As TrackableCollection(Of ParametroEntidad)
        Get
            If _parametroEntidad Is Nothing Then
                _parametroEntidad = New TrackableCollection(Of ParametroEntidad)
                AddHandler _parametroEntidad.CollectionChanged, AddressOf FixupParametroEntidad
            End If
            Return _parametroEntidad
        End Get
        Set(ByVal value As TrackableCollection(Of ParametroEntidad))
            If Not Object.ReferenceEquals(_parametroEntidad, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _parametroEntidad IsNot Nothing Then
                    RemoveHandler _parametroEntidad.CollectionChanged, AddressOf FixupParametroEntidad
                End If
                _parametroEntidad = value
                If _parametroEntidad IsNot Nothing Then
                    AddHandler _parametroEntidad.CollectionChanged, AddressOf FixupParametroEntidad
                End If
                OnNavigationPropertyChanged("ParametroEntidad")
            End If
        End Set
    End Property

    Private _parametroEntidad As TrackableCollection(Of ParametroEntidad)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Inspeccion = Nothing
        ParametroEntidad.Clear()
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupInspeccion(ByVal previousValue As Inspeccion, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ComponenteInspeccion.Contains(Me) Then
            previousValue.ComponenteInspeccion.Remove(Me)
        End If

        If Inspeccion IsNot Nothing Then
            If Not Inspeccion.ComponenteInspeccion.Contains(Me) Then
                Inspeccion.ComponenteInspeccion.Add(Me)
            End If

            INS_ID = Inspeccion.INS_ID
        ElseIf Not skipKeys Then
            INS_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Inspeccion") AndAlso
                ChangeTracker.OriginalValues("Inspeccion") Is Inspeccion Then
                ChangeTracker.OriginalValues.Remove("Inspeccion")
            Else
                ChangeTracker.RecordOriginalValue("Inspeccion", previousValue)
            End If
            If Inspeccion IsNot Nothing AndAlso Not Inspeccion.ChangeTracker.ChangeTrackingEnabled Then
                Inspeccion.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupParametroEntidad(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As ParametroEntidad In e.NewItems
                item.ComponenteInspeccion = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("ParametroEntidad", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As ParametroEntidad In e.OldItems
                If ReferenceEquals(item.ComponenteInspeccion, Me) Then
                    item.ComponenteInspeccion = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("ParametroEntidad", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
