'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Entidad))>
<KnownType(GetType(Mantto))>
<KnownType(GetType(TipoMantto))>
<KnownType(GetType(SuministroPlanMantto))>
Partial Public Class PlanMantto
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared PMO_ID As string = "PMO_ID"
				public shared ENO_ID As string = "ENO_ID"
				public shared MTO_ID As string = "MTO_ID"
				public shared TMO_ID As string = "TMO_ID"
				public shared PMO_HORA As string = "PMO_HORA"
				public shared PMO_TN As string = "PMO_TN"
				public shared PMO_DIA As string = "PMO_DIA"
				public shared PMO_USO As string = "PMO_USO"
				public shared PMO_HORA_UTIL As string = "PMO_HORA_UTIL"
				public shared PMO_TN_UTIL As string = "PMO_TN_UTIL"
				public shared PMO_DIA_UTIL As string = "PMO_DIA_UTIL"
				public shared PMO_USO_UTIL As string = "PMO_USO_UTIL"
				public shared PMO_PROCEDIMIENTO As string = "PMO_PROCEDIMIENTO"
				public shared PMO_HORA_ESTIMADA As string = "PMO_HORA_ESTIMADA"
				public shared PMO_TIPO_RESPONSABLE As string = "PMO_TIPO_RESPONSABLE"
				public shared USU_ID As string = "USU_ID"
				public shared PMO_FEC_GRAB As string = "PMO_FEC_GRAB"
				public shared PMO_ESTADO As string = "PMO_ESTADO"
				public shared PMO_KILOMETRO As string = "PMO_KILOMETRO"
				public shared PMO_KILOMETRO_UTIL As string = "PMO_KILOMETRO_UTIL"
		    End Structure
	



    <DataMember()>
    Public Property PMO_ID() As Integer
        Get
            Return _pMO_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_pMO_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'PMO_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _pMO_ID = value
                OnPropertyChanged("PMO_ID")
            End If
        End Set
    End Property

    Private _pMO_ID As Integer

    <DataMember()>
    Public Property ENO_ID() As Nullable(Of Integer)
        Get
            Return _eNO_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_eNO_ID, value) Then
                ChangeTracker.RecordOriginalValue("ENO_ID", _eNO_ID)
                If Not IsDeserializing Then
                    If Entidad IsNot Nothing AndAlso Not Equals(Entidad.ENO_ID, value) Then
                        Entidad = Nothing
                    End If
                End If
                _eNO_ID = value
                OnPropertyChanged("ENO_ID")
            End If
        End Set
    End Property

    Private _eNO_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property MTO_ID() As Nullable(Of Integer)
        Get
            Return _mTO_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_mTO_ID, value) Then
                ChangeTracker.RecordOriginalValue("MTO_ID", _mTO_ID)
                If Not IsDeserializing Then
                    If Mantto IsNot Nothing AndAlso Not Equals(Mantto.MTO_ID, value) Then
                        Mantto = Nothing
                    End If
                End If
                _mTO_ID = value
                OnPropertyChanged("MTO_ID")
            End If
        End Set
    End Property

    Private _mTO_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property TMO_ID() As Nullable(Of Integer)
        Get
            Return _tMO_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_tMO_ID, value) Then
                ChangeTracker.RecordOriginalValue("TMO_ID", _tMO_ID)
                If Not IsDeserializing Then
                    If TipoMantto IsNot Nothing AndAlso Not Equals(TipoMantto.TMO_ID, value) Then
                        TipoMantto = Nothing
                    End If
                End If
                _tMO_ID = value
                OnPropertyChanged("TMO_ID")
            End If
        End Set
    End Property

    Private _tMO_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property PMO_HORA() As Nullable(Of Decimal)
        Get
            Return _pMO_HORA
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_pMO_HORA, value) Then
                _pMO_HORA = value
                OnPropertyChanged("PMO_HORA")
            End If
        End Set
    End Property

    Private _pMO_HORA As Nullable(Of Decimal)

    <DataMember()>
    Public Property PMO_TN() As Nullable(Of Decimal)
        Get
            Return _pMO_TN
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_pMO_TN, value) Then
                _pMO_TN = value
                OnPropertyChanged("PMO_TN")
            End If
        End Set
    End Property

    Private _pMO_TN As Nullable(Of Decimal)

    <DataMember()>
    Public Property PMO_DIA() As Nullable(Of Integer)
        Get
            Return _pMO_DIA
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_pMO_DIA, value) Then
                _pMO_DIA = value
                OnPropertyChanged("PMO_DIA")
            End If
        End Set
    End Property

    Private _pMO_DIA As Nullable(Of Integer)

    <DataMember()>
    Public Property PMO_USO() As Nullable(Of Decimal)
        Get
            Return _pMO_USO
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_pMO_USO, value) Then
                _pMO_USO = value
                OnPropertyChanged("PMO_USO")
            End If
        End Set
    End Property

    Private _pMO_USO As Nullable(Of Decimal)

    <DataMember()>
    Public Property PMO_HORA_UTIL() As Nullable(Of Decimal)
        Get
            Return _pMO_HORA_UTIL
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_pMO_HORA_UTIL, value) Then
                _pMO_HORA_UTIL = value
                OnPropertyChanged("PMO_HORA_UTIL")
            End If
        End Set
    End Property

    Private _pMO_HORA_UTIL As Nullable(Of Decimal)

    <DataMember()>
    Public Property PMO_TN_UTIL() As Nullable(Of Decimal)
        Get
            Return _pMO_TN_UTIL
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_pMO_TN_UTIL, value) Then
                _pMO_TN_UTIL = value
                OnPropertyChanged("PMO_TN_UTIL")
            End If
        End Set
    End Property

    Private _pMO_TN_UTIL As Nullable(Of Decimal)

    <DataMember()>
    Public Property PMO_DIA_UTIL() As Nullable(Of Integer)
        Get
            Return _pMO_DIA_UTIL
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_pMO_DIA_UTIL, value) Then
                _pMO_DIA_UTIL = value
                OnPropertyChanged("PMO_DIA_UTIL")
            End If
        End Set
    End Property

    Private _pMO_DIA_UTIL As Nullable(Of Integer)

    <DataMember()>
    Public Property PMO_USO_UTIL() As Nullable(Of Decimal)
        Get
            Return _pMO_USO_UTIL
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_pMO_USO_UTIL, value) Then
                _pMO_USO_UTIL = value
                OnPropertyChanged("PMO_USO_UTIL")
            End If
        End Set
    End Property

    Private _pMO_USO_UTIL As Nullable(Of Decimal)

    <DataMember()>
    Public Property PMO_PROCEDIMIENTO() As String
        Get
            Return _pMO_PROCEDIMIENTO
        End Get
        Set(ByVal value As String)
            If Not Equals(_pMO_PROCEDIMIENTO, value) Then
                _pMO_PROCEDIMIENTO = value
                OnPropertyChanged("PMO_PROCEDIMIENTO")
            End If
        End Set
    End Property

    Private _pMO_PROCEDIMIENTO As String

    <DataMember()>
    Public Property PMO_HORA_ESTIMADA() As Nullable(Of Decimal)
        Get
            Return _pMO_HORA_ESTIMADA
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_pMO_HORA_ESTIMADA, value) Then
                _pMO_HORA_ESTIMADA = value
                OnPropertyChanged("PMO_HORA_ESTIMADA")
            End If
        End Set
    End Property

    Private _pMO_HORA_ESTIMADA As Nullable(Of Decimal)

    <DataMember()>
    Public Property PMO_TIPO_RESPONSABLE() As String
        Get
            Return _pMO_TIPO_RESPONSABLE
        End Get
        Set(ByVal value As String)
            If Not Equals(_pMO_TIPO_RESPONSABLE, value) Then
                _pMO_TIPO_RESPONSABLE = value
                OnPropertyChanged("PMO_TIPO_RESPONSABLE")
            End If
        End Set
    End Property

    Private _pMO_TIPO_RESPONSABLE As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property PMO_FEC_GRAB() As Nullable(Of Date)
        Get
            Return _pMO_FEC_GRAB
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_pMO_FEC_GRAB, value) Then
                _pMO_FEC_GRAB = value
                OnPropertyChanged("PMO_FEC_GRAB")
            End If
        End Set
    End Property

    Private _pMO_FEC_GRAB As Nullable(Of Date)

    <DataMember()>
    Public Property PMO_ESTADO() As Nullable(Of Boolean)
        Get
            Return _pMO_ESTADO
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_pMO_ESTADO, value) Then
                _pMO_ESTADO = value
                OnPropertyChanged("PMO_ESTADO")
            End If
        End Set
    End Property

    Private _pMO_ESTADO As Nullable(Of Boolean)

    <DataMember()>
    Public Property PMO_KILOMETRO() As Nullable(Of Decimal)
        Get
            Return _pMO_KILOMETRO
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_pMO_KILOMETRO, value) Then
                _pMO_KILOMETRO = value
                OnPropertyChanged("PMO_KILOMETRO")
            End If
        End Set
    End Property

    Private _pMO_KILOMETRO As Nullable(Of Decimal)

    <DataMember()>
    Public Property PMO_KILOMETRO_UTIL() As Nullable(Of Decimal)
        Get
            Return _pMO_KILOMETRO_UTIL
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_pMO_KILOMETRO_UTIL, value) Then
                _pMO_KILOMETRO_UTIL = value
                OnPropertyChanged("PMO_KILOMETRO_UTIL")
            End If
        End Set
    End Property

    Private _pMO_KILOMETRO_UTIL As Nullable(Of Decimal)

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property Entidad() As Entidad
        Get
            Return _entidad
        End Get
        Set(ByVal value As Entidad)
            If _entidad IsNot value Then
                Dim previousValue As Entidad = _entidad
                _entidad = value
                FixupEntidad(previousValue)
                OnNavigationPropertyChanged("Entidad")
            End If
        End Set
    End Property

    Private _entidad As Entidad


    <DataMember()>
    Public Property Mantto() As Mantto
        Get
            Return _mantto
        End Get
        Set(ByVal value As Mantto)
            If _mantto IsNot value Then
                Dim previousValue As Mantto = _mantto
                _mantto = value
                FixupMantto(previousValue)
                OnNavigationPropertyChanged("Mantto")
            End If
        End Set
    End Property

    Private _mantto As Mantto


    <DataMember()>
    Public Property TipoMantto() As TipoMantto
        Get
            Return _tipoMantto
        End Get
        Set(ByVal value As TipoMantto)
            If _tipoMantto IsNot value Then
                Dim previousValue As TipoMantto = _tipoMantto
                _tipoMantto = value
                FixupTipoMantto(previousValue)
                OnNavigationPropertyChanged("TipoMantto")
            End If
        End Set
    End Property

    Private _tipoMantto As TipoMantto


    <DataMember()>
    Public Property SuministroPlanMantto() As TrackableCollection(Of SuministroPlanMantto)
        Get
            If _suministroPlanMantto Is Nothing Then
                _suministroPlanMantto = New TrackableCollection(Of SuministroPlanMantto)
                AddHandler _suministroPlanMantto.CollectionChanged, AddressOf FixupSuministroPlanMantto
            End If
            Return _suministroPlanMantto
        End Get
        Set(ByVal value As TrackableCollection(Of SuministroPlanMantto))
            If Not Object.ReferenceEquals(_suministroPlanMantto, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _suministroPlanMantto IsNot Nothing Then
                    RemoveHandler _suministroPlanMantto.CollectionChanged, AddressOf FixupSuministroPlanMantto
                End If
                _suministroPlanMantto = value
                If _suministroPlanMantto IsNot Nothing Then
                    AddHandler _suministroPlanMantto.CollectionChanged, AddressOf FixupSuministroPlanMantto
                End If
                OnNavigationPropertyChanged("SuministroPlanMantto")
            End If
        End Set
    End Property

    Private _suministroPlanMantto As TrackableCollection(Of SuministroPlanMantto)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Entidad = Nothing
        Mantto = Nothing
        TipoMantto = Nothing
        SuministroPlanMantto.Clear()
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupEntidad(ByVal previousValue As Entidad, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Entidad IsNot Nothing Then
            ENO_ID = Entidad.ENO_ID
        ElseIf Not skipKeys Then
            ENO_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Entidad") AndAlso
                ChangeTracker.OriginalValues("Entidad") Is Entidad Then
                ChangeTracker.OriginalValues.Remove("Entidad")
            Else
                ChangeTracker.RecordOriginalValue("Entidad", previousValue)
            End If
            If Entidad IsNot Nothing AndAlso Not Entidad.ChangeTracker.ChangeTrackingEnabled Then
                Entidad.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupMantto(ByVal previousValue As Mantto, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Mantto IsNot Nothing Then
            MTO_ID = Mantto.MTO_ID
        ElseIf Not skipKeys Then
            MTO_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Mantto") AndAlso
                ChangeTracker.OriginalValues("Mantto") Is Mantto Then
                ChangeTracker.OriginalValues.Remove("Mantto")
            Else
                ChangeTracker.RecordOriginalValue("Mantto", previousValue)
            End If
            If Mantto IsNot Nothing AndAlso Not Mantto.ChangeTracker.ChangeTrackingEnabled Then
                Mantto.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoMantto(ByVal previousValue As TipoMantto, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.PlanMantto.Contains(Me) Then
            previousValue.PlanMantto.Remove(Me)
        End If

        If TipoMantto IsNot Nothing Then
            If Not TipoMantto.PlanMantto.Contains(Me) Then
                TipoMantto.PlanMantto.Add(Me)
            End If

            TMO_ID = TipoMantto.TMO_ID
        ElseIf Not skipKeys Then
            TMO_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoMantto") AndAlso
                ChangeTracker.OriginalValues("TipoMantto") Is TipoMantto Then
                ChangeTracker.OriginalValues.Remove("TipoMantto")
            Else
                ChangeTracker.RecordOriginalValue("TipoMantto", previousValue)
            End If
            If TipoMantto IsNot Nothing AndAlso Not TipoMantto.ChangeTracker.ChangeTrackingEnabled Then
                TipoMantto.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupSuministroPlanMantto(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As SuministroPlanMantto In e.NewItems
                item.PlanMantto = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("SuministroPlanMantto", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As SuministroPlanMantto In e.OldItems
                If ReferenceEquals(item.PlanMantto, Me) Then
                    item.PlanMantto = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("SuministroPlanMantto", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
