'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(Conceptos))>
<KnownType(GetType(DatosLaborales))>
Partial Public Class DetallePlanillas
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared tdo_Id As string = "tdo_Id"
				public shared pla_SeriePlani As string = "pla_SeriePlani"
				public shared pla_Numero As string = "pla_Numero"
				public shared dep_Item As string = "dep_Item"
				public shared per_Id As string = "per_Id"
				public shared tic_TipoConcep_Id As string = "tic_TipoConcep_Id"
				public shared con_Conceptos_Id As string = "con_Conceptos_Id"
				public shared dep_Importe As string = "dep_Importe"
				public shared TDO_IDRef As string = "TDO_IDRef"
				public shared DTD_IDRef As string = "DTD_IDRef"
				public shared dep_SerieRef As string = "dep_SerieRef"
				public shared dep_NumeroRef As string = "dep_NumeroRef"
				public shared dep_temRef As string = "dep_temRef"
				public shared tip_TipoPlan_Id As string = "tip_TipoPlan_Id"
				public shared Usu_Id As string = "Usu_Id"
				public shared dep_FecGrab As string = "dep_FecGrab"
		    End Structure
	



    <DataMember()>
    Public Property tdo_Id() As String
        Get
            Return _tdo_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tdo_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'tdo_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _tdo_Id = value
                OnPropertyChanged("tdo_Id")
            End If
        End Set
    End Property

    Private _tdo_Id As String

    <DataMember()>
    Public Property pla_SeriePlani() As String
        Get
            Return _pla_SeriePlani
        End Get
        Set(ByVal value As String)
            If Not Equals(_pla_SeriePlani, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'pla_SeriePlani' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _pla_SeriePlani = value
                OnPropertyChanged("pla_SeriePlani")
            End If
        End Set
    End Property

    Private _pla_SeriePlani As String

    <DataMember()>
    Public Property pla_Numero() As String
        Get
            Return _pla_Numero
        End Get
        Set(ByVal value As String)
            If Not Equals(_pla_Numero, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'pla_Numero' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _pla_Numero = value
                OnPropertyChanged("pla_Numero")
            End If
        End Set
    End Property

    Private _pla_Numero As String

    <DataMember()>
    Public Property dep_Item() As String
        Get
            Return _dep_Item
        End Get
        Set(ByVal value As String)
            If Not Equals(_dep_Item, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'dep_Item' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _dep_Item = value
                OnPropertyChanged("dep_Item")
            End If
        End Set
    End Property

    Private _dep_Item As String

    <DataMember()>
    Public Property per_Id() As String
        Get
            Return _per_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_per_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'per_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If DatosLaborales IsNot Nothing AndAlso Not Equals(DatosLaborales.per_Id, value) Then
                        DatosLaborales = Nothing
                    End If
                End If
                _per_Id = value
                OnPropertyChanged("per_Id")
            End If
        End Set
    End Property

    Private _per_Id As String

    <DataMember()>
    Public Property tic_TipoConcep_Id() As String
        Get
            Return _tic_TipoConcep_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tic_TipoConcep_Id, value) Then
                ChangeTracker.RecordOriginalValue("tic_TipoConcep_Id", _tic_TipoConcep_Id)
                If Not IsDeserializing Then
                    If Conceptos IsNot Nothing AndAlso Not Equals(Conceptos.tic_TipoConcep_Id, value) Then
                        Conceptos = Nothing
                    End If
                End If
                _tic_TipoConcep_Id = value
                OnPropertyChanged("tic_TipoConcep_Id")
            End If
        End Set
    End Property

    Private _tic_TipoConcep_Id As String

    <DataMember()>
    Public Property con_Conceptos_Id() As String
        Get
            Return _con_Conceptos_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_con_Conceptos_Id, value) Then
                ChangeTracker.RecordOriginalValue("con_Conceptos_Id", _con_Conceptos_Id)
                If Not IsDeserializing Then
                    If Conceptos IsNot Nothing AndAlso Not Equals(Conceptos.con_Conceptos_Id, value) Then
                        Conceptos = Nothing
                    End If
                End If
                _con_Conceptos_Id = value
                OnPropertyChanged("con_Conceptos_Id")
            End If
        End Set
    End Property

    Private _con_Conceptos_Id As String

    <DataMember()>
    Public Property dep_Importe() As Decimal
        Get
            Return _dep_Importe
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dep_Importe, value) Then
                _dep_Importe = value
                OnPropertyChanged("dep_Importe")
            End If
        End Set
    End Property

    Private _dep_Importe As Decimal

    <DataMember()>
    Public Property TDO_IDRef() As String
        Get
            Return _tDO_IDRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_IDRef, value) Then
                _tDO_IDRef = value
                OnPropertyChanged("TDO_IDRef")
            End If
        End Set
    End Property

    Private _tDO_IDRef As String

    <DataMember()>
    Public Property DTD_IDRef() As String
        Get
            Return _dTD_IDRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_IDRef, value) Then
                _dTD_IDRef = value
                OnPropertyChanged("DTD_IDRef")
            End If
        End Set
    End Property

    Private _dTD_IDRef As String

    <DataMember()>
    Public Property dep_SerieRef() As String
        Get
            Return _dep_SerieRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_dep_SerieRef, value) Then
                _dep_SerieRef = value
                OnPropertyChanged("dep_SerieRef")
            End If
        End Set
    End Property

    Private _dep_SerieRef As String

    <DataMember()>
    Public Property dep_NumeroRef() As String
        Get
            Return _dep_NumeroRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_dep_NumeroRef, value) Then
                _dep_NumeroRef = value
                OnPropertyChanged("dep_NumeroRef")
            End If
        End Set
    End Property

    Private _dep_NumeroRef As String

    <DataMember()>
    Public Property dep_temRef() As String
        Get
            Return _dep_temRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_dep_temRef, value) Then
                _dep_temRef = value
                OnPropertyChanged("dep_temRef")
            End If
        End Set
    End Property

    Private _dep_temRef As String

    <DataMember()>
    Public Property tip_TipoPlan_Id() As String
        Get
            Return _tip_TipoPlan_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tip_TipoPlan_Id, value) Then
                _tip_TipoPlan_Id = value
                OnPropertyChanged("tip_TipoPlan_Id")
            End If
        End Set
    End Property

    Private _tip_TipoPlan_Id As String

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                ChangeTracker.RecordOriginalValue("Usu_Id", _usu_Id)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property dep_FecGrab() As Date
        Get
            Return _dep_FecGrab
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dep_FecGrab, value) Then
                _dep_FecGrab = value
                OnPropertyChanged("dep_FecGrab")
            End If
        End Set
    End Property

    Private _dep_FecGrab As Date

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property Conceptos() As Conceptos
        Get
            Return _conceptos
        End Get
        Set(ByVal value As Conceptos)
            If _conceptos IsNot value Then
                Dim previousValue As Conceptos = _conceptos
                _conceptos = value
                FixupConceptos(previousValue)
                OnNavigationPropertyChanged("Conceptos")
            End If
        End Set
    End Property

    Private _conceptos As Conceptos


    <DataMember()>
    Public Property DatosLaborales() As DatosLaborales
        Get
            Return _datosLaborales
        End Get
        Set(ByVal value As DatosLaborales)
            If _datosLaborales IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(per_Id, value.per_Id) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As DatosLaborales = _datosLaborales
                _datosLaborales = value
                FixupDatosLaborales(previousValue)
                OnNavigationPropertyChanged("DatosLaborales")
            End If
        End Set
    End Property

    Private _datosLaborales As DatosLaborales


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociaci칩n que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesar치 notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Usuarios = Nothing
        Conceptos = Nothing
        DatosLaborales = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            Usu_Id = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupConceptos(ByVal previousValue As Conceptos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetallePlanillas.Contains(Me) Then
            previousValue.DetallePlanillas.Remove(Me)
        End If

        If Conceptos IsNot Nothing Then
            If Not Conceptos.DetallePlanillas.Contains(Me) Then
                Conceptos.DetallePlanillas.Add(Me)
            End If

            con_Conceptos_Id = Conceptos.con_Conceptos_Id
            tic_TipoConcep_Id = Conceptos.tic_TipoConcep_Id
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Conceptos") AndAlso
                ChangeTracker.OriginalValues("Conceptos") Is Conceptos Then
                ChangeTracker.OriginalValues.Remove("Conceptos")
            Else
                ChangeTracker.RecordOriginalValue("Conceptos", previousValue)
            End If
            If Conceptos IsNot Nothing AndAlso Not Conceptos.ChangeTracker.ChangeTrackingEnabled Then
                Conceptos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDatosLaborales(ByVal previousValue As DatosLaborales)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetallePlanillas.Contains(Me) Then
            previousValue.DetallePlanillas.Remove(Me)
        End If

        If DatosLaborales IsNot Nothing Then
            If Not DatosLaborales.DetallePlanillas.Contains(Me) Then
                DatosLaborales.DetallePlanillas.Add(Me)
            End If

            per_Id = DatosLaborales.per_Id
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DatosLaborales") AndAlso
                ChangeTracker.OriginalValues("DatosLaborales") Is DatosLaborales Then
                ChangeTracker.OriginalValues.Remove("DatosLaborales")
            Else
                ChangeTracker.RecordOriginalValue("DatosLaborales", previousValue)
            End If
            If DatosLaborales IsNot Nothing AndAlso Not DatosLaborales.ChangeTracker.ChangeTrackingEnabled Then
                DatosLaborales.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
