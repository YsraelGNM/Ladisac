'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Entidad))>
<KnownType(GetType(Grupo))>
<KnownType(GetType(Mantto))>
<KnownType(GetType(TipoClaseMantto))>
<KnownType(GetType(TipoFalla))>
<KnownType(GetType(OrdenTrabajoPersonal))>
<KnownType(GetType(OrdenTrabajoEntidad))>
<KnownType(GetType(Personas))>
<KnownType(GetType(OrdenRequerimientoDetalle))>
<KnownType(GetType(RendicionGastos))>
Partial Public Class OrdenTrabajo
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared OTR_ID As string = "OTR_ID"
				public shared ENO_ID As string = "ENO_ID"
				public shared MTO_ID As string = "MTO_ID"
				public shared TFA_ID As string = "TFA_ID"
				public shared TCM_ID As string = "TCM_ID"
				public shared GRU_ID As string = "GRU_ID"
				public shared OTR_CRITICIDAD As string = "OTR_CRITICIDAD"
				public shared OTR_FECHA_INGRESO As string = "OTR_FECHA_INGRESO"
				public shared OTR_HORO_INICIAL As string = "OTR_HORO_INICIAL"
				public shared OTR_HORO_FINAL As string = "OTR_HORO_FINAL"
				public shared OTR_TOTAL_HORA As string = "OTR_TOTAL_HORA"
				public shared OTR_TOTAL_TN As string = "OTR_TOTAL_TN"
				public shared OTR_FEC_EMI As string = "OTR_FEC_EMI"
				public shared OTR_FEC_INI As string = "OTR_FEC_INI"
				public shared OTR_FEC_FIN As string = "OTR_FEC_FIN"
				public shared OTR_FEC_MAX As string = "OTR_FEC_MAX"
				public shared OTR_HORA_EST As string = "OTR_HORA_EST"
				public shared OTR_HORA_REAL As string = "OTR_HORA_REAL"
				public shared PER_ID_SOLICITADO As string = "PER_ID_SOLICITADO"
				public shared PER_ID_AUTORIZADO As string = "PER_ID_AUTORIZADO"
				public shared PER_ID_EMITIDO As string = "PER_ID_EMITIDO"
				public shared OTR_FASE As string = "OTR_FASE"
				public shared OTR_OBSERVACION As string = "OTR_OBSERVACION"
				public shared USU_ID As string = "USU_ID"
				public shared OTR_FEC_GRAB As string = "OTR_FEC_GRAB"
				public shared OTR_ESTADO As string = "OTR_ESTADO"
		    End Structure
	



    <DataMember()>
    Public Property OTR_ID() As Integer
        Get
            Return _oTR_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_oTR_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'OTR_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _oTR_ID = value
                OnPropertyChanged("OTR_ID")
            End If
        End Set
    End Property

    Private _oTR_ID As Integer

    <DataMember()>
    Public Property ENO_ID() As Nullable(Of Integer)
        Get
            Return _eNO_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_eNO_ID, value) Then
                ChangeTracker.RecordOriginalValue("ENO_ID", _eNO_ID)
                If Not IsDeserializing Then
                    If Entidad IsNot Nothing AndAlso Not Equals(Entidad.ENO_ID, value) Then
                        Entidad = Nothing
                    End If
                End If
                _eNO_ID = value
                OnPropertyChanged("ENO_ID")
            End If
        End Set
    End Property

    Private _eNO_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property MTO_ID() As Nullable(Of Integer)
        Get
            Return _mTO_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_mTO_ID, value) Then
                ChangeTracker.RecordOriginalValue("MTO_ID", _mTO_ID)
                If Not IsDeserializing Then
                    If Mantto IsNot Nothing AndAlso Not Equals(Mantto.MTO_ID, value) Then
                        Mantto = Nothing
                    End If
                End If
                _mTO_ID = value
                OnPropertyChanged("MTO_ID")
            End If
        End Set
    End Property

    Private _mTO_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property TFA_ID() As Nullable(Of Integer)
        Get
            Return _tFA_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_tFA_ID, value) Then
                ChangeTracker.RecordOriginalValue("TFA_ID", _tFA_ID)
                If Not IsDeserializing Then
                    If TipoFalla IsNot Nothing AndAlso Not Equals(TipoFalla.TFA_ID, value) Then
                        TipoFalla = Nothing
                    End If
                End If
                _tFA_ID = value
                OnPropertyChanged("TFA_ID")
            End If
        End Set
    End Property

    Private _tFA_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property TCM_ID() As Nullable(Of Integer)
        Get
            Return _tCM_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_tCM_ID, value) Then
                ChangeTracker.RecordOriginalValue("TCM_ID", _tCM_ID)
                If Not IsDeserializing Then
                    If TipoClaseMantto IsNot Nothing AndAlso Not Equals(TipoClaseMantto.TCM_ID, value) Then
                        TipoClaseMantto = Nothing
                    End If
                End If
                _tCM_ID = value
                OnPropertyChanged("TCM_ID")
            End If
        End Set
    End Property

    Private _tCM_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property GRU_ID() As Nullable(Of Integer)
        Get
            Return _gRU_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_gRU_ID, value) Then
                ChangeTracker.RecordOriginalValue("GRU_ID", _gRU_ID)
                If Not IsDeserializing Then
                    If Grupo IsNot Nothing AndAlso Not Equals(Grupo.GRU_ID, value) Then
                        Grupo = Nothing
                    End If
                End If
                _gRU_ID = value
                OnPropertyChanged("GRU_ID")
            End If
        End Set
    End Property

    Private _gRU_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property OTR_CRITICIDAD() As Nullable(Of Integer)
        Get
            Return _oTR_CRITICIDAD
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_oTR_CRITICIDAD, value) Then
                _oTR_CRITICIDAD = value
                OnPropertyChanged("OTR_CRITICIDAD")
            End If
        End Set
    End Property

    Private _oTR_CRITICIDAD As Nullable(Of Integer)

    <DataMember()>
    Public Property OTR_FECHA_INGRESO() As Nullable(Of Date)
        Get
            Return _oTR_FECHA_INGRESO
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_oTR_FECHA_INGRESO, value) Then
                _oTR_FECHA_INGRESO = value
                OnPropertyChanged("OTR_FECHA_INGRESO")
            End If
        End Set
    End Property

    Private _oTR_FECHA_INGRESO As Nullable(Of Date)

    <DataMember()>
    Public Property OTR_HORO_INICIAL() As Nullable(Of Decimal)
        Get
            Return _oTR_HORO_INICIAL
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_oTR_HORO_INICIAL, value) Then
                _oTR_HORO_INICIAL = value
                OnPropertyChanged("OTR_HORO_INICIAL")
            End If
        End Set
    End Property

    Private _oTR_HORO_INICIAL As Nullable(Of Decimal)

    <DataMember()>
    Public Property OTR_HORO_FINAL() As Nullable(Of Decimal)
        Get
            Return _oTR_HORO_FINAL
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_oTR_HORO_FINAL, value) Then
                _oTR_HORO_FINAL = value
                OnPropertyChanged("OTR_HORO_FINAL")
            End If
        End Set
    End Property

    Private _oTR_HORO_FINAL As Nullable(Of Decimal)

    <DataMember()>
    Public Property OTR_TOTAL_HORA() As Nullable(Of Decimal)
        Get
            Return _oTR_TOTAL_HORA
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_oTR_TOTAL_HORA, value) Then
                _oTR_TOTAL_HORA = value
                OnPropertyChanged("OTR_TOTAL_HORA")
            End If
        End Set
    End Property

    Private _oTR_TOTAL_HORA As Nullable(Of Decimal)

    <DataMember()>
    Public Property OTR_TOTAL_TN() As Nullable(Of Decimal)
        Get
            Return _oTR_TOTAL_TN
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_oTR_TOTAL_TN, value) Then
                _oTR_TOTAL_TN = value
                OnPropertyChanged("OTR_TOTAL_TN")
            End If
        End Set
    End Property

    Private _oTR_TOTAL_TN As Nullable(Of Decimal)

    <DataMember()>
    Public Property OTR_FEC_EMI() As Nullable(Of Date)
        Get
            Return _oTR_FEC_EMI
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_oTR_FEC_EMI, value) Then
                _oTR_FEC_EMI = value
                OnPropertyChanged("OTR_FEC_EMI")
            End If
        End Set
    End Property

    Private _oTR_FEC_EMI As Nullable(Of Date)

    <DataMember()>
    Public Property OTR_FEC_INI() As Nullable(Of Date)
        Get
            Return _oTR_FEC_INI
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_oTR_FEC_INI, value) Then
                _oTR_FEC_INI = value
                OnPropertyChanged("OTR_FEC_INI")
            End If
        End Set
    End Property

    Private _oTR_FEC_INI As Nullable(Of Date)

    <DataMember()>
    Public Property OTR_FEC_FIN() As Nullable(Of Date)
        Get
            Return _oTR_FEC_FIN
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_oTR_FEC_FIN, value) Then
                _oTR_FEC_FIN = value
                OnPropertyChanged("OTR_FEC_FIN")
            End If
        End Set
    End Property

    Private _oTR_FEC_FIN As Nullable(Of Date)

    <DataMember()>
    Public Property OTR_FEC_MAX() As Nullable(Of Date)
        Get
            Return _oTR_FEC_MAX
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_oTR_FEC_MAX, value) Then
                _oTR_FEC_MAX = value
                OnPropertyChanged("OTR_FEC_MAX")
            End If
        End Set
    End Property

    Private _oTR_FEC_MAX As Nullable(Of Date)

    <DataMember()>
    Public Property OTR_HORA_EST() As Nullable(Of Decimal)
        Get
            Return _oTR_HORA_EST
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_oTR_HORA_EST, value) Then
                _oTR_HORA_EST = value
                OnPropertyChanged("OTR_HORA_EST")
            End If
        End Set
    End Property

    Private _oTR_HORA_EST As Nullable(Of Decimal)

    <DataMember()>
    Public Property OTR_HORA_REAL() As Nullable(Of Decimal)
        Get
            Return _oTR_HORA_REAL
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_oTR_HORA_REAL, value) Then
                _oTR_HORA_REAL = value
                OnPropertyChanged("OTR_HORA_REAL")
            End If
        End Set
    End Property

    Private _oTR_HORA_REAL As Nullable(Of Decimal)

    <DataMember()>
    Public Property PER_ID_SOLICITADO() As String
        Get
            Return _pER_ID_SOLICITADO
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_SOLICITADO, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_SOLICITADO", _pER_ID_SOLICITADO)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID_SOLICITADO = value
                OnPropertyChanged("PER_ID_SOLICITADO")
            End If
        End Set
    End Property

    Private _pER_ID_SOLICITADO As String

    <DataMember()>
    Public Property PER_ID_AUTORIZADO() As String
        Get
            Return _pER_ID_AUTORIZADO
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_AUTORIZADO, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_AUTORIZADO", _pER_ID_AUTORIZADO)
                If Not IsDeserializing Then
                    If Personas1 IsNot Nothing AndAlso Not Equals(Personas1.PER_ID, value) Then
                        Personas1 = Nothing
                    End If
                End If
                _pER_ID_AUTORIZADO = value
                OnPropertyChanged("PER_ID_AUTORIZADO")
            End If
        End Set
    End Property

    Private _pER_ID_AUTORIZADO As String

    <DataMember()>
    Public Property PER_ID_EMITIDO() As String
        Get
            Return _pER_ID_EMITIDO
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_EMITIDO, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_EMITIDO", _pER_ID_EMITIDO)
                If Not IsDeserializing Then
                    If Personas2 IsNot Nothing AndAlso Not Equals(Personas2.PER_ID, value) Then
                        Personas2 = Nothing
                    End If
                End If
                _pER_ID_EMITIDO = value
                OnPropertyChanged("PER_ID_EMITIDO")
            End If
        End Set
    End Property

    Private _pER_ID_EMITIDO As String

    <DataMember()>
    Public Property OTR_FASE() As String
        Get
            Return _oTR_FASE
        End Get
        Set(ByVal value As String)
            If Not Equals(_oTR_FASE, value) Then
                _oTR_FASE = value
                OnPropertyChanged("OTR_FASE")
            End If
        End Set
    End Property

    Private _oTR_FASE As String

    <DataMember()>
    Public Property OTR_OBSERVACION() As String
        Get
            Return _oTR_OBSERVACION
        End Get
        Set(ByVal value As String)
            If Not Equals(_oTR_OBSERVACION, value) Then
                _oTR_OBSERVACION = value
                OnPropertyChanged("OTR_OBSERVACION")
            End If
        End Set
    End Property

    Private _oTR_OBSERVACION As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property OTR_FEC_GRAB() As Nullable(Of Date)
        Get
            Return _oTR_FEC_GRAB
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_oTR_FEC_GRAB, value) Then
                _oTR_FEC_GRAB = value
                OnPropertyChanged("OTR_FEC_GRAB")
            End If
        End Set
    End Property

    Private _oTR_FEC_GRAB As Nullable(Of Date)

    <DataMember()>
    Public Property OTR_ESTADO() As Nullable(Of Boolean)
        Get
            Return _oTR_ESTADO
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_oTR_ESTADO, value) Then
                _oTR_ESTADO = value
                OnPropertyChanged("OTR_ESTADO")
            End If
        End Set
    End Property

    Private _oTR_ESTADO As Nullable(Of Boolean)

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property Entidad() As Entidad
        Get
            Return _entidad
        End Get
        Set(ByVal value As Entidad)
            If _entidad IsNot value Then
                Dim previousValue As Entidad = _entidad
                _entidad = value
                FixupEntidad(previousValue)
                OnNavigationPropertyChanged("Entidad")
            End If
        End Set
    End Property

    Private _entidad As Entidad


    <DataMember()>
    Public Property Grupo() As Grupo
        Get
            Return _grupo
        End Get
        Set(ByVal value As Grupo)
            If _grupo IsNot value Then
                Dim previousValue As Grupo = _grupo
                _grupo = value
                FixupGrupo(previousValue)
                OnNavigationPropertyChanged("Grupo")
            End If
        End Set
    End Property

    Private _grupo As Grupo


    <DataMember()>
    Public Property Mantto() As Mantto
        Get
            Return _mantto
        End Get
        Set(ByVal value As Mantto)
            If _mantto IsNot value Then
                Dim previousValue As Mantto = _mantto
                _mantto = value
                FixupMantto(previousValue)
                OnNavigationPropertyChanged("Mantto")
            End If
        End Set
    End Property

    Private _mantto As Mantto


    <DataMember()>
    Public Property TipoClaseMantto() As TipoClaseMantto
        Get
            Return _tipoClaseMantto
        End Get
        Set(ByVal value As TipoClaseMantto)
            If _tipoClaseMantto IsNot value Then
                Dim previousValue As TipoClaseMantto = _tipoClaseMantto
                _tipoClaseMantto = value
                FixupTipoClaseMantto(previousValue)
                OnNavigationPropertyChanged("TipoClaseMantto")
            End If
        End Set
    End Property

    Private _tipoClaseMantto As TipoClaseMantto


    <DataMember()>
    Public Property TipoFalla() As TipoFalla
        Get
            Return _tipoFalla
        End Get
        Set(ByVal value As TipoFalla)
            If _tipoFalla IsNot value Then
                Dim previousValue As TipoFalla = _tipoFalla
                _tipoFalla = value
                FixupTipoFalla(previousValue)
                OnNavigationPropertyChanged("TipoFalla")
            End If
        End Set
    End Property

    Private _tipoFalla As TipoFalla


    <DataMember()>
    Public Property OrdenTrabajoPersonal() As TrackableCollection(Of OrdenTrabajoPersonal)
        Get
            If _ordenTrabajoPersonal Is Nothing Then
                _ordenTrabajoPersonal = New TrackableCollection(Of OrdenTrabajoPersonal)
                AddHandler _ordenTrabajoPersonal.CollectionChanged, AddressOf FixupOrdenTrabajoPersonal
            End If
            Return _ordenTrabajoPersonal
        End Get
        Set(ByVal value As TrackableCollection(Of OrdenTrabajoPersonal))
            If Not Object.ReferenceEquals(_ordenTrabajoPersonal, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _ordenTrabajoPersonal IsNot Nothing Then
                    RemoveHandler _ordenTrabajoPersonal.CollectionChanged, AddressOf FixupOrdenTrabajoPersonal
                End If
                _ordenTrabajoPersonal = value
                If _ordenTrabajoPersonal IsNot Nothing Then
                    AddHandler _ordenTrabajoPersonal.CollectionChanged, AddressOf FixupOrdenTrabajoPersonal
                End If
                OnNavigationPropertyChanged("OrdenTrabajoPersonal")
            End If
        End Set
    End Property

    Private _ordenTrabajoPersonal As TrackableCollection(Of OrdenTrabajoPersonal)

    <DataMember()>
    Public Property OrdenTrabajoEntidad() As TrackableCollection(Of OrdenTrabajoEntidad)
        Get
            If _ordenTrabajoEntidad Is Nothing Then
                _ordenTrabajoEntidad = New TrackableCollection(Of OrdenTrabajoEntidad)
                AddHandler _ordenTrabajoEntidad.CollectionChanged, AddressOf FixupOrdenTrabajoEntidad
            End If
            Return _ordenTrabajoEntidad
        End Get
        Set(ByVal value As TrackableCollection(Of OrdenTrabajoEntidad))
            If Not Object.ReferenceEquals(_ordenTrabajoEntidad, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _ordenTrabajoEntidad IsNot Nothing Then
                    RemoveHandler _ordenTrabajoEntidad.CollectionChanged, AddressOf FixupOrdenTrabajoEntidad
                End If
                _ordenTrabajoEntidad = value
                If _ordenTrabajoEntidad IsNot Nothing Then
                    AddHandler _ordenTrabajoEntidad.CollectionChanged, AddressOf FixupOrdenTrabajoEntidad
                End If
                OnNavigationPropertyChanged("OrdenTrabajoEntidad")
            End If
        End Set
    End Property

    Private _ordenTrabajoEntidad As TrackableCollection(Of OrdenTrabajoEntidad)

    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property Personas1() As Personas
        Get
            Return _personas1
        End Get
        Set(ByVal value As Personas)
            If _personas1 IsNot value Then
                Dim previousValue As Personas = _personas1
                _personas1 = value
                FixupPersonas1(previousValue)
                OnNavigationPropertyChanged("Personas1")
            End If
        End Set
    End Property

    Private _personas1 As Personas


    <DataMember()>
    Public Property Personas2() As Personas
        Get
            Return _personas2
        End Get
        Set(ByVal value As Personas)
            If _personas2 IsNot value Then
                Dim previousValue As Personas = _personas2
                _personas2 = value
                FixupPersonas2(previousValue)
                OnNavigationPropertyChanged("Personas2")
            End If
        End Set
    End Property

    Private _personas2 As Personas


    <DataMember()>
    Public Property OrdenRequerimientoDetalle() As TrackableCollection(Of OrdenRequerimientoDetalle)
        Get
            If _ordenRequerimientoDetalle Is Nothing Then
                _ordenRequerimientoDetalle = New TrackableCollection(Of OrdenRequerimientoDetalle)
                AddHandler _ordenRequerimientoDetalle.CollectionChanged, AddressOf FixupOrdenRequerimientoDetalle
            End If
            Return _ordenRequerimientoDetalle
        End Get
        Set(ByVal value As TrackableCollection(Of OrdenRequerimientoDetalle))
            If Not Object.ReferenceEquals(_ordenRequerimientoDetalle, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _ordenRequerimientoDetalle IsNot Nothing Then
                    RemoveHandler _ordenRequerimientoDetalle.CollectionChanged, AddressOf FixupOrdenRequerimientoDetalle
                End If
                _ordenRequerimientoDetalle = value
                If _ordenRequerimientoDetalle IsNot Nothing Then
                    AddHandler _ordenRequerimientoDetalle.CollectionChanged, AddressOf FixupOrdenRequerimientoDetalle
                End If
                OnNavigationPropertyChanged("OrdenRequerimientoDetalle")
            End If
        End Set
    End Property

    Private _ordenRequerimientoDetalle As TrackableCollection(Of OrdenRequerimientoDetalle)

    <DataMember()>
    Public Property RendicionGastos() As TrackableCollection(Of RendicionGastos)
        Get
            If _rendicionGastos Is Nothing Then
                _rendicionGastos = New TrackableCollection(Of RendicionGastos)
                AddHandler _rendicionGastos.CollectionChanged, AddressOf FixupRendicionGastos
            End If
            Return _rendicionGastos
        End Get
        Set(ByVal value As TrackableCollection(Of RendicionGastos))
            If Not Object.ReferenceEquals(_rendicionGastos, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _rendicionGastos IsNot Nothing Then
                    RemoveHandler _rendicionGastos.CollectionChanged, AddressOf FixupRendicionGastos
                End If
                _rendicionGastos = value
                If _rendicionGastos IsNot Nothing Then
                    AddHandler _rendicionGastos.CollectionChanged, AddressOf FixupRendicionGastos
                End If
                OnNavigationPropertyChanged("RendicionGastos")
            End If
        End Set
    End Property

    Private _rendicionGastos As TrackableCollection(Of RendicionGastos)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Entidad = Nothing
        Grupo = Nothing
        Mantto = Nothing
        TipoClaseMantto = Nothing
        TipoFalla = Nothing
        OrdenTrabajoPersonal.Clear()
        OrdenTrabajoEntidad.Clear()
        Personas = Nothing
        Personas1 = Nothing
        Personas2 = Nothing
        OrdenRequerimientoDetalle.Clear()
        RendicionGastos.Clear()
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupEntidad(ByVal previousValue As Entidad, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Entidad IsNot Nothing Then
            ENO_ID = Entidad.ENO_ID
        ElseIf Not skipKeys Then
            ENO_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Entidad") AndAlso
                ChangeTracker.OriginalValues("Entidad") Is Entidad Then
                ChangeTracker.OriginalValues.Remove("Entidad")
            Else
                ChangeTracker.RecordOriginalValue("Entidad", previousValue)
            End If
            If Entidad IsNot Nothing AndAlso Not Entidad.ChangeTracker.ChangeTrackingEnabled Then
                Entidad.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupGrupo(ByVal previousValue As Grupo, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Grupo IsNot Nothing Then
            GRU_ID = Grupo.GRU_ID
        ElseIf Not skipKeys Then
            GRU_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Grupo") AndAlso
                ChangeTracker.OriginalValues("Grupo") Is Grupo Then
                ChangeTracker.OriginalValues.Remove("Grupo")
            Else
                ChangeTracker.RecordOriginalValue("Grupo", previousValue)
            End If
            If Grupo IsNot Nothing AndAlso Not Grupo.ChangeTracker.ChangeTrackingEnabled Then
                Grupo.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupMantto(ByVal previousValue As Mantto, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Mantto IsNot Nothing Then
            MTO_ID = Mantto.MTO_ID
        ElseIf Not skipKeys Then
            MTO_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Mantto") AndAlso
                ChangeTracker.OriginalValues("Mantto") Is Mantto Then
                ChangeTracker.OriginalValues.Remove("Mantto")
            Else
                ChangeTracker.RecordOriginalValue("Mantto", previousValue)
            End If
            If Mantto IsNot Nothing AndAlso Not Mantto.ChangeTracker.ChangeTrackingEnabled Then
                Mantto.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoClaseMantto(ByVal previousValue As TipoClaseMantto, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If TipoClaseMantto IsNot Nothing Then
            TCM_ID = TipoClaseMantto.TCM_ID
        ElseIf Not skipKeys Then
            TCM_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoClaseMantto") AndAlso
                ChangeTracker.OriginalValues("TipoClaseMantto") Is TipoClaseMantto Then
                ChangeTracker.OriginalValues.Remove("TipoClaseMantto")
            Else
                ChangeTracker.RecordOriginalValue("TipoClaseMantto", previousValue)
            End If
            If TipoClaseMantto IsNot Nothing AndAlso Not TipoClaseMantto.ChangeTracker.ChangeTrackingEnabled Then
                TipoClaseMantto.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoFalla(ByVal previousValue As TipoFalla, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If TipoFalla IsNot Nothing Then
            TFA_ID = TipoFalla.TFA_ID
        ElseIf Not skipKeys Then
            TFA_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoFalla") AndAlso
                ChangeTracker.OriginalValues("TipoFalla") Is TipoFalla Then
                ChangeTracker.OriginalValues.Remove("TipoFalla")
            Else
                ChangeTracker.RecordOriginalValue("TipoFalla", previousValue)
            End If
            If TipoFalla IsNot Nothing AndAlso Not TipoFalla.ChangeTracker.ChangeTrackingEnabled Then
                TipoFalla.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Personas IsNot Nothing Then
            PER_ID_SOLICITADO = Personas.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_SOLICITADO = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas1(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Personas1 IsNot Nothing Then
            PER_ID_AUTORIZADO = Personas1.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_AUTORIZADO = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas1") AndAlso
                ChangeTracker.OriginalValues("Personas1") Is Personas1 Then
                ChangeTracker.OriginalValues.Remove("Personas1")
            Else
                ChangeTracker.RecordOriginalValue("Personas1", previousValue)
            End If
            If Personas1 IsNot Nothing AndAlso Not Personas1.ChangeTracker.ChangeTrackingEnabled Then
                Personas1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas2(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Personas2 IsNot Nothing Then
            PER_ID_EMITIDO = Personas2.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_EMITIDO = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas2") AndAlso
                ChangeTracker.OriginalValues("Personas2") Is Personas2 Then
                ChangeTracker.OriginalValues.Remove("Personas2")
            Else
                ChangeTracker.RecordOriginalValue("Personas2", previousValue)
            End If
            If Personas2 IsNot Nothing AndAlso Not Personas2.ChangeTracker.ChangeTrackingEnabled Then
                Personas2.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupOrdenTrabajoPersonal(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As OrdenTrabajoPersonal In e.NewItems
                item.OTR_ID = OTR_ID
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("OrdenTrabajoPersonal", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As OrdenTrabajoPersonal In e.OldItems
                item.OTR_ID = Nothing
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("OrdenTrabajoPersonal", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupOrdenTrabajoEntidad(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As OrdenTrabajoEntidad In e.NewItems
                item.OTR_ID = OTR_ID
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("OrdenTrabajoEntidad", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As OrdenTrabajoEntidad In e.OldItems
                item.OTR_ID = Nothing
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("OrdenTrabajoEntidad", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupOrdenRequerimientoDetalle(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As OrdenRequerimientoDetalle In e.NewItems
                item.OrdenTrabajo = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("OrdenRequerimientoDetalle", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As OrdenRequerimientoDetalle In e.OldItems
                If ReferenceEquals(item.OrdenTrabajo, Me) Then
                    item.OrdenTrabajo = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("OrdenRequerimientoDetalle", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupRendicionGastos(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As RendicionGastos In e.NewItems
                item.OrdenTrabajo = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("RendicionGastos", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As RendicionGastos In e.OldItems
                If ReferenceEquals(item.OrdenTrabajo, Me) Then
                    item.OrdenTrabajo = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("RendicionGastos", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
