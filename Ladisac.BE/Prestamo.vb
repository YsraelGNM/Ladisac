'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(DetalleTipoDocumentos))>
<KnownType(GetType(Personas))>
<KnownType(GetType(PuntoVenta))>
<KnownType(GetType(TipoDocumentos))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(CajaCtaCte))>
<KnownType(GetType(DetallePrestamo))>
<KnownType(GetType(Prestamo))>
Partial Public Class Prestamo
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared TDO_ID As string = "TDO_ID"
				public shared DTD_ID As string = "DTD_ID"
				public shared CCC_ID As string = "CCC_ID"
				public shared PRE_SERIE As string = "PRE_SERIE"
				public shared PRE_NUMERO As string = "PRE_NUMERO"
				public shared PRE_FECHA_EMI As string = "PRE_FECHA_EMI"
				public shared PVE_ID As string = "PVE_ID"
				public shared PER_ID_CAJ As string = "PER_ID_CAJ"
				public shared PRE_MONTO_TOTAL As string = "PRE_MONTO_TOTAL"
				public shared USU_ID As string = "USU_ID"
				public shared PRE_FEC_GRAB As string = "PRE_FEC_GRAB"
				public shared PRE_ESTADO As string = "PRE_ESTADO"
				public shared PRE_TIPO As string = "PRE_TIPO"
				public shared TDO_ID_ENL As string = "TDO_ID_ENL"
				public shared DTD_ID_ENL As string = "DTD_ID_ENL"
				public shared CCC_ID_ENL As string = "CCC_ID_ENL"
				public shared PRE_SERIE_ENL As string = "PRE_SERIE_ENL"
				public shared PRE_NUMERO_ENL As string = "PRE_NUMERO_ENL"
				public shared CCT_ID_ENL As string = "CCT_ID_ENL"
		    End Structure
	



    <DataMember()>
    Public Property TDO_ID() As String
        Get
            Return _tDO_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'TDO_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If TipoDocumentos IsNot Nothing AndAlso Not Equals(TipoDocumentos.TDO_ID, value) Then
                        TipoDocumentos = Nothing
                    End If
                    If Prestamo2 IsNot Nothing AndAlso Not Equals(Prestamo2.TDO_ID, value) Then
                        Prestamo2 = Nothing
                    End If
                End If
                _tDO_ID = value
                OnPropertyChanged("TDO_ID")
            End If
        End Set
    End Property

    Private _tDO_ID As String

    <DataMember()>
    Public Property DTD_ID() As String
        Get
            Return _dTD_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DTD_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If DetalleTipoDocumentos IsNot Nothing AndAlso Not Equals(DetalleTipoDocumentos.DTD_ID, value) Then
                        DetalleTipoDocumentos = Nothing
                    End If
                    If Prestamo2 IsNot Nothing AndAlso Not Equals(Prestamo2.DTD_ID, value) Then
                        Prestamo2 = Nothing
                    End If
                End If
                _dTD_ID = value
                OnPropertyChanged("DTD_ID")
            End If
        End Set
    End Property

    Private _dTD_ID As String

    <DataMember()>
    Public Property CCC_ID() As String
        Get
            Return _cCC_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCC_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'CCC_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If CajaCtaCte IsNot Nothing AndAlso Not Equals(CajaCtaCte.CCC_ID, value) Then
                        CajaCtaCte = Nothing
                    End If
                    If Prestamo2 IsNot Nothing AndAlso Not Equals(Prestamo2.CCC_ID, value) Then
                        Prestamo2 = Nothing
                    End If
                End If
                _cCC_ID = value
                OnPropertyChanged("CCC_ID")
            End If
        End Set
    End Property

    Private _cCC_ID As String

    <DataMember()>
    Public Property PRE_SERIE() As String
        Get
            Return _pRE_SERIE
        End Get
        Set(ByVal value As String)
            If Not Equals(_pRE_SERIE, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'PRE_SERIE' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If Prestamo2 IsNot Nothing AndAlso Not Equals(Prestamo2.PRE_SERIE, value) Then
                        Prestamo2 = Nothing
                    End If
                End If
                _pRE_SERIE = value
                OnPropertyChanged("PRE_SERIE")
            End If
        End Set
    End Property

    Private _pRE_SERIE As String

    <DataMember()>
    Public Property PRE_NUMERO() As String
        Get
            Return _pRE_NUMERO
        End Get
        Set(ByVal value As String)
            If Not Equals(_pRE_NUMERO, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'PRE_NUMERO' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If Prestamo2 IsNot Nothing AndAlso Not Equals(Prestamo2.PRE_NUMERO, value) Then
                        Prestamo2 = Nothing
                    End If
                End If
                _pRE_NUMERO = value
                OnPropertyChanged("PRE_NUMERO")
            End If
        End Set
    End Property

    Private _pRE_NUMERO As String

    <DataMember()>
    Public Property PRE_FECHA_EMI() As Date
        Get
            Return _pRE_FECHA_EMI
        End Get
        Set(ByVal value As Date)
            If Not Equals(_pRE_FECHA_EMI, value) Then
                _pRE_FECHA_EMI = value
                OnPropertyChanged("PRE_FECHA_EMI")
            End If
        End Set
    End Property

    Private _pRE_FECHA_EMI As Date

    <DataMember()>
    Public Property PVE_ID() As String
        Get
            Return _pVE_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_pVE_ID, value) Then
                ChangeTracker.RecordOriginalValue("PVE_ID", _pVE_ID)
                If Not IsDeserializing Then
                    If PuntoVenta IsNot Nothing AndAlso Not Equals(PuntoVenta.PVE_ID, value) Then
                        PuntoVenta = Nothing
                    End If
                End If
                _pVE_ID = value
                OnPropertyChanged("PVE_ID")
            End If
        End Set
    End Property

    Private _pVE_ID As String

    <DataMember()>
    Public Property PER_ID_CAJ() As String
        Get
            Return _pER_ID_CAJ
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_CAJ, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_CAJ", _pER_ID_CAJ)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID_CAJ = value
                OnPropertyChanged("PER_ID_CAJ")
            End If
        End Set
    End Property

    Private _pER_ID_CAJ As String

    <DataMember()>
    Public Property PRE_MONTO_TOTAL() As Decimal
        Get
            Return _pRE_MONTO_TOTAL
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_pRE_MONTO_TOTAL, value) Then
                _pRE_MONTO_TOTAL = value
                OnPropertyChanged("PRE_MONTO_TOTAL")
            End If
        End Set
    End Property

    Private _pRE_MONTO_TOTAL As Decimal

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property PRE_FEC_GRAB() As Date
        Get
            Return _pRE_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_pRE_FEC_GRAB, value) Then
                _pRE_FEC_GRAB = value
                OnPropertyChanged("PRE_FEC_GRAB")
            End If
        End Set
    End Property

    Private _pRE_FEC_GRAB As Date

    <DataMember()>
    Public Property PRE_ESTADO() As Boolean
        Get
            Return _pRE_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_pRE_ESTADO, value) Then
                _pRE_ESTADO = value
                OnPropertyChanged("PRE_ESTADO")
            End If
        End Set
    End Property

    Private _pRE_ESTADO As Boolean

    <DataMember()>
    Public Property PRE_TIPO() As Boolean
        Get
            Return _pRE_TIPO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_pRE_TIPO, value) Then
                _pRE_TIPO = value
                OnPropertyChanged("PRE_TIPO")
            End If
        End Set
    End Property

    Private _pRE_TIPO As Boolean

    <DataMember()>
    Public Property TDO_ID_ENL() As String
        Get
            Return _tDO_ID_ENL
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID_ENL, value) Then
                _tDO_ID_ENL = value
                OnPropertyChanged("TDO_ID_ENL")
            End If
        End Set
    End Property

    Private _tDO_ID_ENL As String

    <DataMember()>
    Public Property DTD_ID_ENL() As String
        Get
            Return _dTD_ID_ENL
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID_ENL, value) Then
                _dTD_ID_ENL = value
                OnPropertyChanged("DTD_ID_ENL")
            End If
        End Set
    End Property

    Private _dTD_ID_ENL As String

    <DataMember()>
    Public Property CCC_ID_ENL() As String
        Get
            Return _cCC_ID_ENL
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCC_ID_ENL, value) Then
                _cCC_ID_ENL = value
                OnPropertyChanged("CCC_ID_ENL")
            End If
        End Set
    End Property

    Private _cCC_ID_ENL As String

    <DataMember()>
    Public Property PRE_SERIE_ENL() As String
        Get
            Return _pRE_SERIE_ENL
        End Get
        Set(ByVal value As String)
            If Not Equals(_pRE_SERIE_ENL, value) Then
                _pRE_SERIE_ENL = value
                OnPropertyChanged("PRE_SERIE_ENL")
            End If
        End Set
    End Property

    Private _pRE_SERIE_ENL As String

    <DataMember()>
    Public Property PRE_NUMERO_ENL() As String
        Get
            Return _pRE_NUMERO_ENL
        End Get
        Set(ByVal value As String)
            If Not Equals(_pRE_NUMERO_ENL, value) Then
                _pRE_NUMERO_ENL = value
                OnPropertyChanged("PRE_NUMERO_ENL")
            End If
        End Set
    End Property

    Private _pRE_NUMERO_ENL As String

    <DataMember()>
    Public Property CCT_ID_ENL() As String
        Get
            Return _cCT_ID_ENL
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCT_ID_ENL, value) Then
                _cCT_ID_ENL = value
                OnPropertyChanged("CCT_ID_ENL")
            End If
        End Set
    End Property

    Private _cCT_ID_ENL As String

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property DetalleTipoDocumentos() As DetalleTipoDocumentos
        Get
            Return _detalleTipoDocumentos
        End Get
        Set(ByVal value As DetalleTipoDocumentos)
            If _detalleTipoDocumentos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(DTD_ID, value.DTD_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As DetalleTipoDocumentos = _detalleTipoDocumentos
                _detalleTipoDocumentos = value
                FixupDetalleTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("DetalleTipoDocumentos")
            End If
        End Set
    End Property

    Private _detalleTipoDocumentos As DetalleTipoDocumentos


    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property PuntoVenta() As PuntoVenta
        Get
            Return _puntoVenta
        End Get
        Set(ByVal value As PuntoVenta)
            If _puntoVenta IsNot value Then
                Dim previousValue As PuntoVenta = _puntoVenta
                _puntoVenta = value
                FixupPuntoVenta(previousValue)
                OnNavigationPropertyChanged("PuntoVenta")
            End If
        End Set
    End Property

    Private _puntoVenta As PuntoVenta


    <DataMember()>
    Public Property TipoDocumentos() As TipoDocumentos
        Get
            Return _tipoDocumentos
        End Get
        Set(ByVal value As TipoDocumentos)
            If _tipoDocumentos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(TDO_ID, value.TDO_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As TipoDocumentos = _tipoDocumentos
                _tipoDocumentos = value
                FixupTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("TipoDocumentos")
            End If
        End Set
    End Property

    Private _tipoDocumentos As TipoDocumentos


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property CajaCtaCte() As CajaCtaCte
        Get
            Return _cajaCtaCte
        End Get
        Set(ByVal value As CajaCtaCte)
            If _cajaCtaCte IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(CCC_ID, value.CCC_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As CajaCtaCte = _cajaCtaCte
                _cajaCtaCte = value
                FixupCajaCtaCte(previousValue)
                OnNavigationPropertyChanged("CajaCtaCte")
            End If
        End Set
    End Property

    Private _cajaCtaCte As CajaCtaCte


    <DataMember()>
    Public Property DetallePrestamo() As TrackableCollection(Of DetallePrestamo)
        Get
            If _detallePrestamo Is Nothing Then
                _detallePrestamo = New TrackableCollection(Of DetallePrestamo)
                AddHandler _detallePrestamo.CollectionChanged, AddressOf FixupDetallePrestamo
            End If
            Return _detallePrestamo
        End Get
        Set(ByVal value As TrackableCollection(Of DetallePrestamo))
            If Not Object.ReferenceEquals(_detallePrestamo, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detallePrestamo IsNot Nothing Then
                    RemoveHandler _detallePrestamo.CollectionChanged, AddressOf FixupDetallePrestamo
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As DetallePrestamo In _detallePrestamo
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detallePrestamo = value
                If _detallePrestamo IsNot Nothing Then
                    AddHandler _detallePrestamo.CollectionChanged, AddressOf FixupDetallePrestamo
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As DetallePrestamo In _detallePrestamo
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetallePrestamo")
            End If
        End Set
    End Property

    Private _detallePrestamo As TrackableCollection(Of DetallePrestamo)

    <DataMember()>
    Public Property Prestamo1() As Prestamo
        Get
            Return _prestamo1
        End Get
        Set(ByVal value As Prestamo)
            If _prestamo1 IsNot value Then
                Dim previousValue As Prestamo = _prestamo1
                _prestamo1 = value
                FixupPrestamo1(previousValue)
                OnNavigationPropertyChanged("Prestamo1")
            End If
        End Set
    End Property

    Private _prestamo1 As Prestamo


    <DataMember()>
    Public Property Prestamo2() As Prestamo
        Get
            Return _prestamo2
        End Get
        Set(ByVal value As Prestamo)
            If _prestamo2 IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(TDO_ID, value.TDO_ID) OrElse Not Equals(DTD_ID, value.DTD_ID) OrElse Not Equals(CCC_ID, value.CCC_ID) OrElse Not Equals(PRE_SERIE, value.PRE_SERIE) OrElse Not Equals(PRE_NUMERO, value.PRE_NUMERO) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As Prestamo = _prestamo2
                _prestamo2 = value
                FixupPrestamo2(previousValue)
                OnNavigationPropertyChanged("Prestamo2")
            End If
        End Set
    End Property

    Private _prestamo2 As Prestamo


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociaci칩n que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesar치 notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        DetalleTipoDocumentos = Nothing
        Personas = Nothing
        PuntoVenta = Nothing
        TipoDocumentos = Nothing
        Usuarios = Nothing
        CajaCtaCte = Nothing
        DetallePrestamo.Clear()
        Prestamo1 = Nothing
        Prestamo2 = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupDetalleTipoDocumentos(ByVal previousValue As DetalleTipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Prestamo.Contains(Me) Then
            previousValue.Prestamo.Remove(Me)
        End If

        If DetalleTipoDocumentos IsNot Nothing Then
            If Not DetalleTipoDocumentos.Prestamo.Contains(Me) Then
                DetalleTipoDocumentos.Prestamo.Add(Me)
            End If

            DTD_ID = DetalleTipoDocumentos.DTD_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("DetalleTipoDocumentos") Is DetalleTipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("DetalleTipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTipoDocumentos", previousValue)
            End If
            If DetalleTipoDocumentos IsNot Nothing AndAlso Not DetalleTipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Prestamo.Contains(Me) Then
            previousValue.Prestamo.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.Prestamo.Contains(Me) Then
                Personas.Prestamo.Add(Me)
            End If

            PER_ID_CAJ = Personas.PER_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPuntoVenta(ByVal previousValue As PuntoVenta)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Prestamo.Contains(Me) Then
            previousValue.Prestamo.Remove(Me)
        End If

        If PuntoVenta IsNot Nothing Then
            If Not PuntoVenta.Prestamo.Contains(Me) Then
                PuntoVenta.Prestamo.Add(Me)
            End If

            PVE_ID = PuntoVenta.PVE_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("PuntoVenta") AndAlso
                ChangeTracker.OriginalValues("PuntoVenta") Is PuntoVenta Then
                ChangeTracker.OriginalValues.Remove("PuntoVenta")
            Else
                ChangeTracker.RecordOriginalValue("PuntoVenta", previousValue)
            End If
            If PuntoVenta IsNot Nothing AndAlso Not PuntoVenta.ChangeTracker.ChangeTrackingEnabled Then
                PuntoVenta.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoDocumentos(ByVal previousValue As TipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Prestamo.Contains(Me) Then
            previousValue.Prestamo.Remove(Me)
        End If

        If TipoDocumentos IsNot Nothing Then
            If Not TipoDocumentos.Prestamo.Contains(Me) Then
                TipoDocumentos.Prestamo.Add(Me)
            End If

            TDO_ID = TipoDocumentos.TDO_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("TipoDocumentos") Is TipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("TipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("TipoDocumentos", previousValue)
            End If
            If TipoDocumentos IsNot Nothing AndAlso Not TipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                TipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Prestamo.Contains(Me) Then
            previousValue.Prestamo.Remove(Me)
        End If

        If Usuarios IsNot Nothing Then
            If Not Usuarios.Prestamo.Contains(Me) Then
                Usuarios.Prestamo.Add(Me)
            End If

            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCajaCtaCte(ByVal previousValue As CajaCtaCte)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Prestamo.Contains(Me) Then
            previousValue.Prestamo.Remove(Me)
        End If

        If CajaCtaCte IsNot Nothing Then
            If Not CajaCtaCte.Prestamo.Contains(Me) Then
                CajaCtaCte.Prestamo.Add(Me)
            End If

            CCC_ID = CajaCtaCte.CCC_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CajaCtaCte") AndAlso
                ChangeTracker.OriginalValues("CajaCtaCte") Is CajaCtaCte Then
                ChangeTracker.OriginalValues.Remove("CajaCtaCte")
            Else
                ChangeTracker.RecordOriginalValue("CajaCtaCte", previousValue)
            End If
            If CajaCtaCte IsNot Nothing AndAlso Not CajaCtaCte.ChangeTracker.ChangeTrackingEnabled Then
                CajaCtaCte.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPrestamo1(ByVal previousValue As Prestamo)
        If previousValue IsNot Nothing Then
            RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf previousValue.HandleCascadeDelete
        End If

        If Prestamo1 IsNot Nothing Then
            AddHandler ChangeTracker.ObjectStateChanging, AddressOf Prestamo1.HandleCascadeDelete
        End If
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso ReferenceEquals(previousValue.Prestamo2, Me) Then
            previousValue.Prestamo2 = Nothing
        End If

        If Prestamo1 IsNot Nothing Then
            Prestamo1.Prestamo2 = Me
        End If

        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Prestamo1") AndAlso
                ChangeTracker.OriginalValues("Prestamo1") Is Prestamo1 Then
                ChangeTracker.OriginalValues.Remove("Prestamo1")
            Else
                ChangeTracker.RecordOriginalValue("Prestamo1", previousValue)
                ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                If previousValue IsNot Nothing AndAlso previousValue.ChangeTracker.State <> ObjectState.Added Then
                    previousValue.MarkAsDeleted()
                End If
            End If
            If Prestamo1 IsNot Nothing AndAlso Not Prestamo1.ChangeTracker.ChangeTrackingEnabled Then
                Prestamo1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPrestamo2(ByVal previousValue As Prestamo)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso ReferenceEquals(previousValue.Prestamo1, Me) Then
            previousValue.Prestamo1 = Nothing
        End If

        If Prestamo2 IsNot Nothing Then
            Prestamo2.Prestamo1 = Me
            TDO_ID = Prestamo2.TDO_ID
            DTD_ID = Prestamo2.DTD_ID
            CCC_ID = Prestamo2.CCC_ID
            PRE_SERIE = Prestamo2.PRE_SERIE
            PRE_NUMERO = Prestamo2.PRE_NUMERO
        End If

        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Prestamo2") AndAlso
                ChangeTracker.OriginalValues("Prestamo2") Is Prestamo2 Then
                ChangeTracker.OriginalValues.Remove("Prestamo2")
            Else
                ChangeTracker.RecordOriginalValue("Prestamo2", previousValue)
            End If
            If Prestamo2 IsNot Nothing AndAlso Not Prestamo2.ChangeTracker.ChangeTrackingEnabled Then
                Prestamo2.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetallePrestamo(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetallePrestamo In e.NewItems
                item.Prestamo = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetallePrestamo", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetallePrestamo In e.OldItems
                If ReferenceEquals(item.Prestamo, Me) Then
                    item.Prestamo = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetallePrestamo", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

#End Region
End Class
