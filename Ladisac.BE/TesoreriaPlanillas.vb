'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(Conceptos))>
<KnownType(GetType(DatosLaborales))>
<KnownType(GetType(Personas))>
<KnownType(GetType(RolOpeCtaCte))>
Partial Public Class TesoreriaPlanillas
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared cct_Id As string = "cct_Id"
				public shared tdo_Id As string = "tdo_Id"
				public shared dtd_Id As string = "dtd_Id"
				public shared tep_Serie As string = "tep_Serie"
				public shared tep_Numero As string = "tep_Numero"
				public shared tep_Item As string = "tep_Item"
				public shared tep_Cargo As string = "tep_Cargo"
				public shared tep_Abono As string = "tep_Abono"
				public shared tep_Fecha As string = "tep_Fecha"
				public shared tep_Vencimiento As string = "tep_Vencimiento"
				public shared tic_TipoConcep_Id As string = "tic_TipoConcep_Id"
				public shared con_Conceptos_Id As string = "con_Conceptos_Id"
				public shared tep_ItemRef As string = "tep_ItemRef"
				public shared cct_IdRef As string = "cct_IdRef"
				public shared tdo_IdRef As string = "tdo_IdRef"
				public shared dtd_IdRef As string = "dtd_IdRef"
				public shared tep_SerieRef As string = "tep_SerieRef"
				public shared tep_NumeroRef As string = "tep_NumeroRef"
				public shared per_IdDoc As string = "per_IdDoc"
				public shared per_IdBeneficiario As string = "per_IdBeneficiario"
				public shared Usu_Id As string = "Usu_Id"
				public shared tep_FecGrab As string = "tep_FecGrab"
		    End Structure
	



    <DataMember()>
    Public Property cct_Id() As String
        Get
            Return _cct_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_cct_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'cct_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If RolOpeCtaCte IsNot Nothing AndAlso Not Equals(RolOpeCtaCte.CCT_ID, value) Then
                        RolOpeCtaCte = Nothing
                    End If
                End If
                _cct_Id = value
                OnPropertyChanged("cct_Id")
            End If
        End Set
    End Property

    Private _cct_Id As String

    <DataMember()>
    Public Property tdo_Id() As String
        Get
            Return _tdo_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tdo_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'tdo_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If RolOpeCtaCte IsNot Nothing AndAlso Not Equals(RolOpeCtaCte.TDO_ID, value) Then
                        RolOpeCtaCte = Nothing
                    End If
                End If
                _tdo_Id = value
                OnPropertyChanged("tdo_Id")
            End If
        End Set
    End Property

    Private _tdo_Id As String

    <DataMember()>
    Public Property dtd_Id() As String
        Get
            Return _dtd_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_dtd_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'dtd_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If RolOpeCtaCte IsNot Nothing AndAlso Not Equals(RolOpeCtaCte.DTD_ID, value) Then
                        RolOpeCtaCte = Nothing
                    End If
                End If
                _dtd_Id = value
                OnPropertyChanged("dtd_Id")
            End If
        End Set
    End Property

    Private _dtd_Id As String

    <DataMember()>
    Public Property tep_Serie() As String
        Get
            Return _tep_Serie
        End Get
        Set(ByVal value As String)
            If Not Equals(_tep_Serie, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'tep_Serie' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _tep_Serie = value
                OnPropertyChanged("tep_Serie")
            End If
        End Set
    End Property

    Private _tep_Serie As String

    <DataMember()>
    Public Property tep_Numero() As String
        Get
            Return _tep_Numero
        End Get
        Set(ByVal value As String)
            If Not Equals(_tep_Numero, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'tep_Numero' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _tep_Numero = value
                OnPropertyChanged("tep_Numero")
            End If
        End Set
    End Property

    Private _tep_Numero As String

    <DataMember()>
    Public Property tep_Item() As String
        Get
            Return _tep_Item
        End Get
        Set(ByVal value As String)
            If Not Equals(_tep_Item, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'tep_Item' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _tep_Item = value
                OnPropertyChanged("tep_Item")
            End If
        End Set
    End Property

    Private _tep_Item As String

    <DataMember()>
    Public Property tep_Cargo() As Nullable(Of Decimal)
        Get
            Return _tep_Cargo
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_tep_Cargo, value) Then
                _tep_Cargo = value
                OnPropertyChanged("tep_Cargo")
            End If
        End Set
    End Property

    Private _tep_Cargo As Nullable(Of Decimal)

    <DataMember()>
    Public Property tep_Abono() As Nullable(Of Decimal)
        Get
            Return _tep_Abono
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_tep_Abono, value) Then
                _tep_Abono = value
                OnPropertyChanged("tep_Abono")
            End If
        End Set
    End Property

    Private _tep_Abono As Nullable(Of Decimal)

    <DataMember()>
    Public Property tep_Fecha() As Nullable(Of Date)
        Get
            Return _tep_Fecha
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_tep_Fecha, value) Then
                _tep_Fecha = value
                OnPropertyChanged("tep_Fecha")
            End If
        End Set
    End Property

    Private _tep_Fecha As Nullable(Of Date)

    <DataMember()>
    Public Property tep_Vencimiento() As Nullable(Of Date)
        Get
            Return _tep_Vencimiento
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_tep_Vencimiento, value) Then
                _tep_Vencimiento = value
                OnPropertyChanged("tep_Vencimiento")
            End If
        End Set
    End Property

    Private _tep_Vencimiento As Nullable(Of Date)

    <DataMember()>
    Public Property tic_TipoConcep_Id() As String
        Get
            Return _tic_TipoConcep_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tic_TipoConcep_Id, value) Then
                ChangeTracker.RecordOriginalValue("tic_TipoConcep_Id", _tic_TipoConcep_Id)
                If Not IsDeserializing Then
                    If Conceptos IsNot Nothing AndAlso Not Equals(Conceptos.tic_TipoConcep_Id, value) Then
                        Dim previousValue As Conceptos = _conceptos
                        _conceptos = Nothing
                        FixupConceptos(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("Conceptos")
                    End If
                End If
                _tic_TipoConcep_Id = value
                OnPropertyChanged("tic_TipoConcep_Id")
            End If
        End Set
    End Property

    Private _tic_TipoConcep_Id As String

    <DataMember()>
    Public Property con_Conceptos_Id() As String
        Get
            Return _con_Conceptos_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_con_Conceptos_Id, value) Then
                ChangeTracker.RecordOriginalValue("con_Conceptos_Id", _con_Conceptos_Id)
                If Not IsDeserializing Then
                    If Conceptos IsNot Nothing AndAlso Not Equals(Conceptos.con_Conceptos_Id, value) Then
                        Dim previousValue As Conceptos = _conceptos
                        _conceptos = Nothing
                        FixupConceptos(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("Conceptos")
                    End If
                End If
                _con_Conceptos_Id = value
                OnPropertyChanged("con_Conceptos_Id")
            End If
        End Set
    End Property

    Private _con_Conceptos_Id As String

    <DataMember()>
    Public Property tep_ItemRef() As String
        Get
            Return _tep_ItemRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_tep_ItemRef, value) Then
                _tep_ItemRef = value
                OnPropertyChanged("tep_ItemRef")
            End If
        End Set
    End Property

    Private _tep_ItemRef As String

    <DataMember()>
    Public Property cct_IdRef() As String
        Get
            Return _cct_IdRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_cct_IdRef, value) Then
                ChangeTracker.RecordOriginalValue("cct_IdRef", _cct_IdRef)
                If Not IsDeserializing Then
                    If RolOpeCtaCte1 IsNot Nothing AndAlso Not Equals(RolOpeCtaCte1.CCT_ID, value) Then
                        Dim previousValue As RolOpeCtaCte = _rolOpeCtaCte1
                        _rolOpeCtaCte1 = Nothing
                        FixupRolOpeCtaCte1(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("RolOpeCtaCte1")
                    End If
                End If
                _cct_IdRef = value
                OnPropertyChanged("cct_IdRef")
            End If
        End Set
    End Property

    Private _cct_IdRef As String

    <DataMember()>
    Public Property tdo_IdRef() As String
        Get
            Return _tdo_IdRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_tdo_IdRef, value) Then
                ChangeTracker.RecordOriginalValue("tdo_IdRef", _tdo_IdRef)
                If Not IsDeserializing Then
                    If RolOpeCtaCte1 IsNot Nothing AndAlso Not Equals(RolOpeCtaCte1.TDO_ID, value) Then
                        Dim previousValue As RolOpeCtaCte = _rolOpeCtaCte1
                        _rolOpeCtaCte1 = Nothing
                        FixupRolOpeCtaCte1(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("RolOpeCtaCte1")
                    End If
                End If
                _tdo_IdRef = value
                OnPropertyChanged("tdo_IdRef")
            End If
        End Set
    End Property

    Private _tdo_IdRef As String

    <DataMember()>
    Public Property dtd_IdRef() As String
        Get
            Return _dtd_IdRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_dtd_IdRef, value) Then
                ChangeTracker.RecordOriginalValue("dtd_IdRef", _dtd_IdRef)
                If Not IsDeserializing Then
                    If RolOpeCtaCte1 IsNot Nothing AndAlso Not Equals(RolOpeCtaCte1.DTD_ID, value) Then
                        Dim previousValue As RolOpeCtaCte = _rolOpeCtaCte1
                        _rolOpeCtaCte1 = Nothing
                        FixupRolOpeCtaCte1(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("RolOpeCtaCte1")
                    End If
                End If
                _dtd_IdRef = value
                OnPropertyChanged("dtd_IdRef")
            End If
        End Set
    End Property

    Private _dtd_IdRef As String

    <DataMember()>
    Public Property tep_SerieRef() As String
        Get
            Return _tep_SerieRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_tep_SerieRef, value) Then
                _tep_SerieRef = value
                OnPropertyChanged("tep_SerieRef")
            End If
        End Set
    End Property

    Private _tep_SerieRef As String

    <DataMember()>
    Public Property tep_NumeroRef() As String
        Get
            Return _tep_NumeroRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_tep_NumeroRef, value) Then
                _tep_NumeroRef = value
                OnPropertyChanged("tep_NumeroRef")
            End If
        End Set
    End Property

    Private _tep_NumeroRef As String

    <DataMember()>
    Public Property per_IdDoc() As String
        Get
            Return _per_IdDoc
        End Get
        Set(ByVal value As String)
            If Not Equals(_per_IdDoc, value) Then
                ChangeTracker.RecordOriginalValue("per_IdDoc", _per_IdDoc)
                If Not IsDeserializing Then
                    If DatosLaborales IsNot Nothing AndAlso Not Equals(DatosLaborales.per_Id, value) Then
                        DatosLaborales = Nothing
                    End If
                End If
                _per_IdDoc = value
                OnPropertyChanged("per_IdDoc")
            End If
        End Set
    End Property

    Private _per_IdDoc As String

    <DataMember()>
    Public Property per_IdBeneficiario() As String
        Get
            Return _per_IdBeneficiario
        End Get
        Set(ByVal value As String)
            If Not Equals(_per_IdBeneficiario, value) Then
                ChangeTracker.RecordOriginalValue("per_IdBeneficiario", _per_IdBeneficiario)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _per_IdBeneficiario = value
                OnPropertyChanged("per_IdBeneficiario")
            End If
        End Set
    End Property

    Private _per_IdBeneficiario As String

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                ChangeTracker.RecordOriginalValue("Usu_Id", _usu_Id)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property tep_FecGrab() As Nullable(Of Date)
        Get
            Return _tep_FecGrab
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_tep_FecGrab, value) Then
                _tep_FecGrab = value
                OnPropertyChanged("tep_FecGrab")
            End If
        End Set
    End Property

    Private _tep_FecGrab As Nullable(Of Date)

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property Conceptos() As Conceptos
        Get
            Return _conceptos
        End Get
        Set(ByVal value As Conceptos)
            If _conceptos IsNot value Then
                Dim previousValue As Conceptos = _conceptos
                _conceptos = value
                FixupConceptos(previousValue)
                OnNavigationPropertyChanged("Conceptos")
            End If
        End Set
    End Property

    Private _conceptos As Conceptos


    <DataMember()>
    Public Property DatosLaborales() As DatosLaborales
        Get
            Return _datosLaborales
        End Get
        Set(ByVal value As DatosLaborales)
            If _datosLaborales IsNot value Then
                Dim previousValue As DatosLaborales = _datosLaborales
                _datosLaborales = value
                FixupDatosLaborales(previousValue)
                OnNavigationPropertyChanged("DatosLaborales")
            End If
        End Set
    End Property

    Private _datosLaborales As DatosLaborales


    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property RolOpeCtaCte() As RolOpeCtaCte
        Get
            Return _rolOpeCtaCte
        End Get
        Set(ByVal value As RolOpeCtaCte)
            If _rolOpeCtaCte IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(cct_Id, value.CCT_ID) OrElse Not Equals(tdo_Id, value.TDO_ID) OrElse Not Equals(dtd_Id, value.DTD_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As RolOpeCtaCte = _rolOpeCtaCte
                _rolOpeCtaCte = value
                FixupRolOpeCtaCte(previousValue)
                OnNavigationPropertyChanged("RolOpeCtaCte")
            End If
        End Set
    End Property

    Private _rolOpeCtaCte As RolOpeCtaCte


    <DataMember()>
    Public Property RolOpeCtaCte1() As RolOpeCtaCte
        Get
            Return _rolOpeCtaCte1
        End Get
        Set(ByVal value As RolOpeCtaCte)
            If _rolOpeCtaCte1 IsNot value Then
                Dim previousValue As RolOpeCtaCte = _rolOpeCtaCte1
                _rolOpeCtaCte1 = value
                FixupRolOpeCtaCte1(previousValue)
                OnNavigationPropertyChanged("RolOpeCtaCte1")
            End If
        End Set
    End Property

    Private _rolOpeCtaCte1 As RolOpeCtaCte


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociaci칩n que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesar치 notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Usuarios = Nothing
        Conceptos = Nothing
        DatosLaborales = Nothing
        Personas = Nothing
        RolOpeCtaCte = Nothing
        RolOpeCtaCte1 = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            Usu_Id = Usuarios.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupConceptos(ByVal previousValue As Conceptos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.TesoreriaPlanillas.Contains(Me) Then
            previousValue.TesoreriaPlanillas.Remove(Me)
        End If

        If Conceptos IsNot Nothing Then
            If Not Conceptos.TesoreriaPlanillas.Contains(Me) Then
                Conceptos.TesoreriaPlanillas.Add(Me)
            End If

            con_Conceptos_Id = Conceptos.con_Conceptos_Id
            tic_TipoConcep_Id = Conceptos.tic_TipoConcep_Id
        ElseIf Not skipKeys Then
            con_Conceptos_Id = Nothing
            tic_TipoConcep_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Conceptos") AndAlso
                ChangeTracker.OriginalValues("Conceptos") Is Conceptos Then
                ChangeTracker.OriginalValues.Remove("Conceptos")
            Else
                ChangeTracker.RecordOriginalValue("Conceptos", previousValue)
            End If
            If Conceptos IsNot Nothing AndAlso Not Conceptos.ChangeTracker.ChangeTrackingEnabled Then
                Conceptos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDatosLaborales(ByVal previousValue As DatosLaborales, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.TesoreriaPlanillas.Contains(Me) Then
            previousValue.TesoreriaPlanillas.Remove(Me)
        End If

        If DatosLaborales IsNot Nothing Then
            If Not DatosLaborales.TesoreriaPlanillas.Contains(Me) Then
                DatosLaborales.TesoreriaPlanillas.Add(Me)
            End If

            per_IdDoc = DatosLaborales.per_Id
        ElseIf Not skipKeys Then
            per_IdDoc = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DatosLaborales") AndAlso
                ChangeTracker.OriginalValues("DatosLaborales") Is DatosLaborales Then
                ChangeTracker.OriginalValues.Remove("DatosLaborales")
            Else
                ChangeTracker.RecordOriginalValue("DatosLaborales", previousValue)
            End If
            If DatosLaborales IsNot Nothing AndAlso Not DatosLaborales.ChangeTracker.ChangeTrackingEnabled Then
                DatosLaborales.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.TesoreriaPlanillas.Contains(Me) Then
            previousValue.TesoreriaPlanillas.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.TesoreriaPlanillas.Contains(Me) Then
                Personas.TesoreriaPlanillas.Add(Me)
            End If

            per_IdBeneficiario = Personas.PER_ID
        ElseIf Not skipKeys Then
            per_IdBeneficiario = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupRolOpeCtaCte(ByVal previousValue As RolOpeCtaCte)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.TesoreriaPlanillas.Contains(Me) Then
            previousValue.TesoreriaPlanillas.Remove(Me)
        End If

        If RolOpeCtaCte IsNot Nothing Then
            If Not RolOpeCtaCte.TesoreriaPlanillas.Contains(Me) Then
                RolOpeCtaCte.TesoreriaPlanillas.Add(Me)
            End If

            cct_Id = RolOpeCtaCte.CCT_ID
            tdo_Id = RolOpeCtaCte.TDO_ID
            dtd_Id = RolOpeCtaCte.DTD_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("RolOpeCtaCte") AndAlso
                ChangeTracker.OriginalValues("RolOpeCtaCte") Is RolOpeCtaCte Then
                ChangeTracker.OriginalValues.Remove("RolOpeCtaCte")
            Else
                ChangeTracker.RecordOriginalValue("RolOpeCtaCte", previousValue)
            End If
            If RolOpeCtaCte IsNot Nothing AndAlso Not RolOpeCtaCte.ChangeTracker.ChangeTrackingEnabled Then
                RolOpeCtaCte.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupRolOpeCtaCte1(ByVal previousValue As RolOpeCtaCte, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.TesoreriaPlanillas1.Contains(Me) Then
            previousValue.TesoreriaPlanillas1.Remove(Me)
        End If

        If RolOpeCtaCte1 IsNot Nothing Then
            If Not RolOpeCtaCte1.TesoreriaPlanillas1.Contains(Me) Then
                RolOpeCtaCte1.TesoreriaPlanillas1.Add(Me)
            End If

            cct_IdRef = RolOpeCtaCte1.CCT_ID
            tdo_IdRef = RolOpeCtaCte1.TDO_ID
            dtd_IdRef = RolOpeCtaCte1.DTD_ID
        ElseIf Not skipKeys Then
            cct_IdRef = Nothing
            tdo_IdRef = Nothing
            dtd_IdRef = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("RolOpeCtaCte1") AndAlso
                ChangeTracker.OriginalValues("RolOpeCtaCte1") Is RolOpeCtaCte1 Then
                ChangeTracker.OriginalValues.Remove("RolOpeCtaCte1")
            Else
                ChangeTracker.RecordOriginalValue("RolOpeCtaCte1", previousValue)
            End If
            If RolOpeCtaCte1 IsNot Nothing AndAlso Not RolOpeCtaCte1.ChangeTracker.ChangeTrackingEnabled Then
                RolOpeCtaCte1.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
