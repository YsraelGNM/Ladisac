'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(TiposPlanillas))>
Partial Public Class DetalleTiposPlanillas
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared tip_TipoPlan_ref As string = "tip_TipoPlan_ref"
				public shared tip_TipoPlan_Id As string = "tip_TipoPlan_Id"
				public shared tip_Item As string = "tip_Item"
				public shared Usu_Id As string = "Usu_Id"
				public shared det_FecGrab As string = "det_FecGrab"
		    End Structure
	



    <DataMember()>
    Public Property tip_TipoPlan_ref() As String
        Get
            Return _tip_TipoPlan_ref
        End Get
        Set(ByVal value As String)
            If Not Equals(_tip_TipoPlan_ref, value) Then
                ChangeTracker.RecordOriginalValue("tip_TipoPlan_ref", _tip_TipoPlan_ref)
                If Not IsDeserializing Then
                    If TiposPlanillas IsNot Nothing AndAlso Not Equals(TiposPlanillas.tip_TipoPlan_Id, value) Then
                        TiposPlanillas = Nothing
                    End If
                End If
                _tip_TipoPlan_ref = value
                OnPropertyChanged("tip_TipoPlan_ref")
            End If
        End Set
    End Property

    Private _tip_TipoPlan_ref As String

    <DataMember()>
    Public Property tip_TipoPlan_Id() As String
        Get
            Return _tip_TipoPlan_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tip_TipoPlan_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'tip_TipoPlan_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If TiposPlanillas1 IsNot Nothing AndAlso Not Equals(TiposPlanillas1.tip_TipoPlan_Id, value) Then
                        TiposPlanillas1 = Nothing
                    End If
                End If
                _tip_TipoPlan_Id = value
                OnPropertyChanged("tip_TipoPlan_Id")
            End If
        End Set
    End Property

    Private _tip_TipoPlan_Id As String

    <DataMember()>
    Public Property tip_Item() As String
        Get
            Return _tip_Item
        End Get
        Set(ByVal value As String)
            If Not Equals(_tip_Item, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'tip_Item' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _tip_Item = value
                OnPropertyChanged("tip_Item")
            End If
        End Set
    End Property

    Private _tip_Item As String

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                ChangeTracker.RecordOriginalValue("Usu_Id", _usu_Id)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property det_FecGrab() As Date
        Get
            Return _det_FecGrab
        End Get
        Set(ByVal value As Date)
            If Not Equals(_det_FecGrab, value) Then
                _det_FecGrab = value
                OnPropertyChanged("det_FecGrab")
            End If
        End Set
    End Property

    Private _det_FecGrab As Date

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property TiposPlanillas() As TiposPlanillas
        Get
            Return _tiposPlanillas
        End Get
        Set(ByVal value As TiposPlanillas)
            If _tiposPlanillas IsNot value Then
                Dim previousValue As TiposPlanillas = _tiposPlanillas
                _tiposPlanillas = value
                FixupTiposPlanillas(previousValue)
                OnNavigationPropertyChanged("TiposPlanillas")
            End If
        End Set
    End Property

    Private _tiposPlanillas As TiposPlanillas


    <DataMember()>
    Public Property TiposPlanillas1() As TiposPlanillas
        Get
            Return _tiposPlanillas1
        End Get
        Set(ByVal value As TiposPlanillas)
            If _tiposPlanillas1 IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(tip_TipoPlan_Id, value.tip_TipoPlan_Id) Then
                        Throw New InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As TiposPlanillas = _tiposPlanillas1
                _tiposPlanillas1 = value
                FixupTiposPlanillas1(previousValue)
                OnNavigationPropertyChanged("TiposPlanillas1")
            End If
        End Set
    End Property

    Private _tiposPlanillas1 As TiposPlanillas


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociación que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesará notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Usuarios = Nothing
        TiposPlanillas = Nothing
        TiposPlanillas1 = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            Usu_Id = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTiposPlanillas(ByVal previousValue As TiposPlanillas)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleTiposPlanillas.Contains(Me) Then
            previousValue.DetalleTiposPlanillas.Remove(Me)
        End If

        If TiposPlanillas IsNot Nothing Then
            If Not TiposPlanillas.DetalleTiposPlanillas.Contains(Me) Then
                TiposPlanillas.DetalleTiposPlanillas.Add(Me)
            End If

            tip_TipoPlan_ref = TiposPlanillas.tip_TipoPlan_Id
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TiposPlanillas") AndAlso
                ChangeTracker.OriginalValues("TiposPlanillas") Is TiposPlanillas Then
                ChangeTracker.OriginalValues.Remove("TiposPlanillas")
            Else
                ChangeTracker.RecordOriginalValue("TiposPlanillas", previousValue)
            End If
            If TiposPlanillas IsNot Nothing AndAlso Not TiposPlanillas.ChangeTracker.ChangeTrackingEnabled Then
                TiposPlanillas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTiposPlanillas1(ByVal previousValue As TiposPlanillas)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleTiposPlanillas1.Contains(Me) Then
            previousValue.DetalleTiposPlanillas1.Remove(Me)
        End If

        If TiposPlanillas1 IsNot Nothing Then
            If Not TiposPlanillas1.DetalleTiposPlanillas1.Contains(Me) Then
                TiposPlanillas1.DetalleTiposPlanillas1.Add(Me)
            End If

            tip_TipoPlan_Id = TiposPlanillas1.tip_TipoPlan_Id
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TiposPlanillas1") AndAlso
                ChangeTracker.OriginalValues("TiposPlanillas1") Is TiposPlanillas1 Then
                ChangeTracker.OriginalValues.Remove("TiposPlanillas1")
            Else
                ChangeTracker.RecordOriginalValue("TiposPlanillas1", previousValue)
            End If
            If TiposPlanillas1 IsNot Nothing AndAlso Not TiposPlanillas1.ChangeTracker.ChangeTrackingEnabled Then
                TiposPlanillas1.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
