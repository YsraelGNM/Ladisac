'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Personas))>
Partial Public Class DetalleComedorPLL
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared com_Numero As string = "com_Numero"
				public shared deco_Item As string = "deco_Item"
				public shared per_id As string = "per_id"
				public shared deco_Importe As string = "deco_Importe"
				public shared deco_Observaciones As string = "deco_Observaciones"
				public shared Usu_Id As string = "Usu_Id"
				public shared deco_FecGrab As string = "deco_FecGrab"
				public shared TDO_ID As string = "TDO_ID"
				public shared DTD_ID As string = "DTD_ID"
				public shared CCC_ID As string = "CCC_ID"
				public shared DPR_SERIE As string = "DPR_SERIE"
				public shared DPR_NUMERO As string = "DPR_NUMERO"
				public shared DPR_ITEM As string = "DPR_ITEM"
				public shared PER_ID_CLI As string = "PER_ID_CLI"
				public shared CCT_ID As string = "CCT_ID"
		    End Structure
	



    <DataMember()>
    Public Property com_Numero() As String
        Get
            Return _com_Numero
        End Get
        Set(ByVal value As String)
            If Not Equals(_com_Numero, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'com_Numero' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _com_Numero = value
                OnPropertyChanged("com_Numero")
            End If
        End Set
    End Property

    Private _com_Numero As String

    <DataMember()>
    Public Property deco_Item() As String
        Get
            Return _deco_Item
        End Get
        Set(ByVal value As String)
            If Not Equals(_deco_Item, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'deco_Item' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _deco_Item = value
                OnPropertyChanged("deco_Item")
            End If
        End Set
    End Property

    Private _deco_Item As String

    <DataMember()>
    Public Property per_id() As String
        Get
            Return _per_id
        End Get
        Set(ByVal value As String)
            If Not Equals(_per_id, value) Then
                ChangeTracker.RecordOriginalValue("per_id", _per_id)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _per_id = value
                OnPropertyChanged("per_id")
            End If
        End Set
    End Property

    Private _per_id As String

    <DataMember()>
    Public Property deco_Importe() As Decimal
        Get
            Return _deco_Importe
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_deco_Importe, value) Then
                _deco_Importe = value
                OnPropertyChanged("deco_Importe")
            End If
        End Set
    End Property

    Private _deco_Importe As Decimal

    <DataMember()>
    Public Property deco_Observaciones() As String
        Get
            Return _deco_Observaciones
        End Get
        Set(ByVal value As String)
            If Not Equals(_deco_Observaciones, value) Then
                _deco_Observaciones = value
                OnPropertyChanged("deco_Observaciones")
            End If
        End Set
    End Property

    Private _deco_Observaciones As String

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property deco_FecGrab() As Nullable(Of Date)
        Get
            Return _deco_FecGrab
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_deco_FecGrab, value) Then
                _deco_FecGrab = value
                OnPropertyChanged("deco_FecGrab")
            End If
        End Set
    End Property

    Private _deco_FecGrab As Nullable(Of Date)

    <DataMember()>
    Public Property TDO_ID() As String
        Get
            Return _tDO_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID, value) Then
                _tDO_ID = value
                OnPropertyChanged("TDO_ID")
            End If
        End Set
    End Property

    Private _tDO_ID As String

    <DataMember()>
    Public Property DTD_ID() As String
        Get
            Return _dTD_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID, value) Then
                _dTD_ID = value
                OnPropertyChanged("DTD_ID")
            End If
        End Set
    End Property

    Private _dTD_ID As String

    <DataMember()>
    Public Property CCC_ID() As String
        Get
            Return _cCC_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCC_ID, value) Then
                _cCC_ID = value
                OnPropertyChanged("CCC_ID")
            End If
        End Set
    End Property

    Private _cCC_ID As String

    <DataMember()>
    Public Property DPR_SERIE() As String
        Get
            Return _dPR_SERIE
        End Get
        Set(ByVal value As String)
            If Not Equals(_dPR_SERIE, value) Then
                _dPR_SERIE = value
                OnPropertyChanged("DPR_SERIE")
            End If
        End Set
    End Property

    Private _dPR_SERIE As String

    <DataMember()>
    Public Property DPR_NUMERO() As String
        Get
            Return _dPR_NUMERO
        End Get
        Set(ByVal value As String)
            If Not Equals(_dPR_NUMERO, value) Then
                _dPR_NUMERO = value
                OnPropertyChanged("DPR_NUMERO")
            End If
        End Set
    End Property

    Private _dPR_NUMERO As String

    <DataMember()>
    Public Property DPR_ITEM() As Nullable(Of Decimal)
        Get
            Return _dPR_ITEM
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dPR_ITEM, value) Then
                _dPR_ITEM = value
                OnPropertyChanged("DPR_ITEM")
            End If
        End Set
    End Property

    Private _dPR_ITEM As Nullable(Of Decimal)

    <DataMember()>
    Public Property PER_ID_CLI() As String
        Get
            Return _pER_ID_CLI
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_CLI, value) Then
                _pER_ID_CLI = value
                OnPropertyChanged("PER_ID_CLI")
            End If
        End Set
    End Property

    Private _pER_ID_CLI As String

    <DataMember()>
    Public Property CCT_ID() As String
        Get
            Return _cCT_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCT_ID, value) Then
                _cCT_ID = value
                OnPropertyChanged("CCT_ID")
            End If
        End Set
    End Property

    Private _cCT_ID As String

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociación que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesará notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Personas = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupPersonas(ByVal previousValue As Personas)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleComedorPLL.Contains(Me) Then
            previousValue.DetalleComedorPLL.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.DetalleComedorPLL.Contains(Me) Then
                Personas.DetalleComedorPLL.Add(Me)
            End If

            per_id = Personas.PER_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
