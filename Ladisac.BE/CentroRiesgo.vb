'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(DatosLaborales))>
Partial Public Class CentroRiesgo
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared cer_ID As string = "cer_ID"
				public shared cer_Descripcion As string = "cer_Descripcion"
				public shared cer_Tasa As string = "cer_Tasa"
				public shared Usu_Id As string = "Usu_Id"
				public shared con_FecGrab As string = "con_FecGrab"
		    End Structure
	



    <DataMember()>
    Public Property cer_ID() As String
        Get
            Return _cer_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cer_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'cer_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _cer_ID = value
                OnPropertyChanged("cer_ID")
            End If
        End Set
    End Property

    Private _cer_ID As String

    <DataMember()>
    Public Property cer_Descripcion() As String
        Get
            Return _cer_Descripcion
        End Get
        Set(ByVal value As String)
            If Not Equals(_cer_Descripcion, value) Then
                _cer_Descripcion = value
                OnPropertyChanged("cer_Descripcion")
            End If
        End Set
    End Property

    Private _cer_Descripcion As String

    <DataMember()>
    Public Property cer_Tasa() As Decimal
        Get
            Return _cer_Tasa
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_cer_Tasa, value) Then
                _cer_Tasa = value
                OnPropertyChanged("cer_Tasa")
            End If
        End Set
    End Property

    Private _cer_Tasa As Decimal

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property con_FecGrab() As Nullable(Of Date)
        Get
            Return _con_FecGrab
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_con_FecGrab, value) Then
                _con_FecGrab = value
                OnPropertyChanged("con_FecGrab")
            End If
        End Set
    End Property

    Private _con_FecGrab As Nullable(Of Date)

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property DatosLaborales() As TrackableCollection(Of DatosLaborales)
        Get
            If _datosLaborales Is Nothing Then
                _datosLaborales = New TrackableCollection(Of DatosLaborales)
                AddHandler _datosLaborales.CollectionChanged, AddressOf FixupDatosLaborales
            End If
            Return _datosLaborales
        End Get
        Set(ByVal value As TrackableCollection(Of DatosLaborales))
            If Not Object.ReferenceEquals(_datosLaborales, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _datosLaborales IsNot Nothing Then
                    RemoveHandler _datosLaborales.CollectionChanged, AddressOf FixupDatosLaborales
                End If
                _datosLaborales = value
                If _datosLaborales IsNot Nothing Then
                    AddHandler _datosLaborales.CollectionChanged, AddressOf FixupDatosLaborales
                End If
                OnNavigationPropertyChanged("DatosLaborales")
            End If
        End Set
    End Property

    Private _datosLaborales As TrackableCollection(Of DatosLaborales)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        DatosLaborales.Clear()
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupDatosLaborales(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DatosLaborales In e.NewItems
                item.CentroRiesgo = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DatosLaborales", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DatosLaborales In e.OldItems
                If ReferenceEquals(item.CentroRiesgo, Me) Then
                    item.CentroRiesgo = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DatosLaborales", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
