'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(TipoDocumentos))>
<KnownType(GetType(Personas))>
<KnownType(GetType(Usuarios))>
Partial Public Class ReferenciaProvisionCompras
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared prc_Voucher As string = "prc_Voucher"
				public shared lib_Id As string = "lib_Id"
				public shared prd_Periodo_id As string = "prd_Periodo_id"
				public shared cct_Id As string = "cct_Id"
				public shared tdo_Id As string = "tdo_Id"
				public shared dtd_Id As string = "dtd_Id"
				public shared rep_Serie As string = "rep_Serie"
				public shared rep_Numero As string = "rep_Numero"
				public shared rep_Item As string = "rep_Item"
				public shared rep_Importe As string = "rep_Importe"
				public shared rep_ContraValor As string = "rep_ContraValor"
				public shared per_Id As string = "per_Id"
				public shared Usu_Id As string = "Usu_Id"
				public shared rep_FecGrab As string = "rep_FecGrab"
				public shared rep_EsLogistica As string = "rep_EsLogistica"
				public shared rep_ItemDoc As string = "rep_ItemDoc"
		    End Structure
	



    <DataMember()>
    Public Property prc_Voucher() As String
        Get
            Return _prc_Voucher
        End Get
        Set(ByVal value As String)
            If Not Equals(_prc_Voucher, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'prc_Voucher' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _prc_Voucher = value
                OnPropertyChanged("prc_Voucher")
            End If
        End Set
    End Property

    Private _prc_Voucher As String

    <DataMember()>
    Public Property lib_Id() As String
        Get
            Return _lib_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_lib_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'lib_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _lib_Id = value
                OnPropertyChanged("lib_Id")
            End If
        End Set
    End Property

    Private _lib_Id As String

    <DataMember()>
    Public Property prd_Periodo_id() As String
        Get
            Return _prd_Periodo_id
        End Get
        Set(ByVal value As String)
            If Not Equals(_prd_Periodo_id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'prd_Periodo_id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _prd_Periodo_id = value
                OnPropertyChanged("prd_Periodo_id")
            End If
        End Set
    End Property

    Private _prd_Periodo_id As String

    <DataMember()>
    Public Property cct_Id() As String
        Get
            Return _cct_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_cct_Id, value) Then
                _cct_Id = value
                OnPropertyChanged("cct_Id")
            End If
        End Set
    End Property

    Private _cct_Id As String

    <DataMember()>
    Public Property tdo_Id() As String
        Get
            Return _tdo_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tdo_Id, value) Then
                ChangeTracker.RecordOriginalValue("tdo_Id", _tdo_Id)
                If Not IsDeserializing Then
                    If TipoDocumentos IsNot Nothing AndAlso Not Equals(TipoDocumentos.TDO_ID, value) Then
                        TipoDocumentos = Nothing
                    End If
                End If
                _tdo_Id = value
                OnPropertyChanged("tdo_Id")
            End If
        End Set
    End Property

    Private _tdo_Id As String

    <DataMember()>
    Public Property dtd_Id() As String
        Get
            Return _dtd_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_dtd_Id, value) Then
                _dtd_Id = value
                OnPropertyChanged("dtd_Id")
            End If
        End Set
    End Property

    Private _dtd_Id As String

    <DataMember()>
    Public Property rep_Serie() As String
        Get
            Return _rep_Serie
        End Get
        Set(ByVal value As String)
            If Not Equals(_rep_Serie, value) Then
                _rep_Serie = value
                OnPropertyChanged("rep_Serie")
            End If
        End Set
    End Property

    Private _rep_Serie As String

    <DataMember()>
    Public Property rep_Numero() As String
        Get
            Return _rep_Numero
        End Get
        Set(ByVal value As String)
            If Not Equals(_rep_Numero, value) Then
                _rep_Numero = value
                OnPropertyChanged("rep_Numero")
            End If
        End Set
    End Property

    Private _rep_Numero As String

    <DataMember()>
    Public Property rep_Item() As String
        Get
            Return _rep_Item
        End Get
        Set(ByVal value As String)
            If Not Equals(_rep_Item, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'rep_Item' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _rep_Item = value
                OnPropertyChanged("rep_Item")
            End If
        End Set
    End Property

    Private _rep_Item As String

    <DataMember()>
    Public Property rep_Importe() As Nullable(Of Decimal)
        Get
            Return _rep_Importe
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_rep_Importe, value) Then
                _rep_Importe = value
                OnPropertyChanged("rep_Importe")
            End If
        End Set
    End Property

    Private _rep_Importe As Nullable(Of Decimal)

    <DataMember()>
    Public Property rep_ContraValor() As Nullable(Of Decimal)
        Get
            Return _rep_ContraValor
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_rep_ContraValor, value) Then
                _rep_ContraValor = value
                OnPropertyChanged("rep_ContraValor")
            End If
        End Set
    End Property

    Private _rep_ContraValor As Nullable(Of Decimal)

    <DataMember()>
    Public Property per_Id() As String
        Get
            Return _per_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_per_Id, value) Then
                ChangeTracker.RecordOriginalValue("per_Id", _per_Id)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _per_Id = value
                OnPropertyChanged("per_Id")
            End If
        End Set
    End Property

    Private _per_Id As String

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                ChangeTracker.RecordOriginalValue("Usu_Id", _usu_Id)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property rep_FecGrab() As Nullable(Of Date)
        Get
            Return _rep_FecGrab
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_rep_FecGrab, value) Then
                _rep_FecGrab = value
                OnPropertyChanged("rep_FecGrab")
            End If
        End Set
    End Property

    Private _rep_FecGrab As Nullable(Of Date)

    <DataMember()>
    Public Property rep_EsLogistica() As Nullable(Of Boolean)
        Get
            Return _rep_EsLogistica
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_rep_EsLogistica, value) Then
                _rep_EsLogistica = value
                OnPropertyChanged("rep_EsLogistica")
            End If
        End Set
    End Property

    Private _rep_EsLogistica As Nullable(Of Boolean)

    <DataMember()>
    Public Property rep_ItemDoc() As String
        Get
            Return _rep_ItemDoc
        End Get
        Set(ByVal value As String)
            If Not Equals(_rep_ItemDoc, value) Then
                _rep_ItemDoc = value
                OnPropertyChanged("rep_ItemDoc")
            End If
        End Set
    End Property

    Private _rep_ItemDoc As String

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property TipoDocumentos() As TipoDocumentos
        Get
            Return _tipoDocumentos
        End Get
        Set(ByVal value As TipoDocumentos)
            If _tipoDocumentos IsNot value Then
                Dim previousValue As TipoDocumentos = _tipoDocumentos
                _tipoDocumentos = value
                FixupTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("TipoDocumentos")
            End If
        End Set
    End Property

    Private _tipoDocumentos As TipoDocumentos


    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociaci칩n que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesar치 notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        TipoDocumentos = Nothing
        Personas = Nothing
        Usuarios = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupTipoDocumentos(ByVal previousValue As TipoDocumentos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ReferenciaProvisionCompras.Contains(Me) Then
            previousValue.ReferenciaProvisionCompras.Remove(Me)
        End If

        If TipoDocumentos IsNot Nothing Then
            If Not TipoDocumentos.ReferenciaProvisionCompras.Contains(Me) Then
                TipoDocumentos.ReferenciaProvisionCompras.Add(Me)
            End If

            tdo_Id = TipoDocumentos.TDO_ID
        ElseIf Not skipKeys Then
            tdo_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("TipoDocumentos") Is TipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("TipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("TipoDocumentos", previousValue)
            End If
            If TipoDocumentos IsNot Nothing AndAlso Not TipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                TipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ReferenciaProvisionCompras.Contains(Me) Then
            previousValue.ReferenciaProvisionCompras.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.ReferenciaProvisionCompras.Contains(Me) Then
                Personas.ReferenciaProvisionCompras.Add(Me)
            End If

            per_Id = Personas.PER_ID
        ElseIf Not skipKeys Then
            per_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ReferenciaProvisionCompras.Contains(Me) Then
            previousValue.ReferenciaProvisionCompras.Remove(Me)
        End If

        If Usuarios IsNot Nothing Then
            If Not Usuarios.ReferenciaProvisionCompras.Contains(Me) Then
                Usuarios.ReferenciaProvisionCompras.Add(Me)
            End If

            Usu_Id = Usuarios.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
