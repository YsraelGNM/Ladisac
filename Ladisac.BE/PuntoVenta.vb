'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Edificios))>
<KnownType(GetType(FletesTransporte))>
<KnownType(GetType(ListaPreciosArticulos))>
<KnownType(GetType(Cierre))>
<KnownType(GetType(CorrelativoTipoDocumento))>
<KnownType(GetType(Distrito))>
<KnownType(GetType(CajaCtaCte))>
<KnownType(GetType(PuntoVentaDatosUsuarios))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(RolPuntoVentaAlmacen))>
<KnownType(GetType(Tesoreria))>
<KnownType(GetType(PrestamosTrabajador))>
<KnownType(GetType(Documentos))>
<KnownType(GetType(PuntoVentaAnexo))>
<KnownType(GetType(Despachos))>
<KnownType(GetType(CajeroAnexo))>
<KnownType(GetType(ProvisionCompras))>
<KnownType(GetType(TesoreriaEditar))>
<KnownType(GetType(Prestamo))>
Partial Public Class PuntoVenta
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared PVE_ID As string = "PVE_ID"
				public shared PVE_DESCRIPCION As string = "PVE_DESCRIPCION"
				public shared PVE_DIRECCION As string = "PVE_DIRECCION"
				public shared PVE_TELEFONOS As string = "PVE_TELEFONOS"
				public shared DIS_ID As string = "DIS_ID"
				public shared LPR_ID As string = "LPR_ID"
				public shared PVE_TIPO As string = "PVE_TIPO"
				public shared USU_ID As string = "USU_ID"
				public shared PVE_FEC_GRAB As string = "PVE_FEC_GRAB"
				public shared PVE_ESTADO As string = "PVE_ESTADO"
				public shared PVE_LUGAR As string = "PVE_LUGAR"
				public shared OTR_ID As string = "OTR_ID"
				public shared UnidadNegocio As string = "UnidadNegocio"
				public shared CostCenter As string = "CostCenter"
		    End Structure
	



    <DataMember()>
    Public Property PVE_ID() As String
        Get
            Return _pVE_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_pVE_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'PVE_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _pVE_ID = value
                OnPropertyChanged("PVE_ID")
            End If
        End Set
    End Property

    Private _pVE_ID As String

    <DataMember()>
    Public Property PVE_DESCRIPCION() As String
        Get
            Return _pVE_DESCRIPCION
        End Get
        Set(ByVal value As String)
            If Not Equals(_pVE_DESCRIPCION, value) Then
                _pVE_DESCRIPCION = value
                OnPropertyChanged("PVE_DESCRIPCION")
            End If
        End Set
    End Property

    Private _pVE_DESCRIPCION As String

    <DataMember()>
    Public Property PVE_DIRECCION() As String
        Get
            Return _pVE_DIRECCION
        End Get
        Set(ByVal value As String)
            If Not Equals(_pVE_DIRECCION, value) Then
                _pVE_DIRECCION = value
                OnPropertyChanged("PVE_DIRECCION")
            End If
        End Set
    End Property

    Private _pVE_DIRECCION As String

    <DataMember()>
    Public Property PVE_TELEFONOS() As String
        Get
            Return _pVE_TELEFONOS
        End Get
        Set(ByVal value As String)
            If Not Equals(_pVE_TELEFONOS, value) Then
                _pVE_TELEFONOS = value
                OnPropertyChanged("PVE_TELEFONOS")
            End If
        End Set
    End Property

    Private _pVE_TELEFONOS As String

    <DataMember()>
    Public Property DIS_ID() As String
        Get
            Return _dIS_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_dIS_ID, value) Then
                ChangeTracker.RecordOriginalValue("DIS_ID", _dIS_ID)
                If Not IsDeserializing Then
                    If Distrito IsNot Nothing AndAlso Not Equals(Distrito.DIS_ID, value) Then
                        Distrito = Nothing
                    End If
                End If
                _dIS_ID = value
                OnPropertyChanged("DIS_ID")
            End If
        End Set
    End Property

    Private _dIS_ID As String

    <DataMember()>
    Public Property LPR_ID() As String
        Get
            Return _lPR_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_lPR_ID, value) Then
                ChangeTracker.RecordOriginalValue("LPR_ID", _lPR_ID)
                If Not IsDeserializing Then
                    If ListaPreciosArticulos IsNot Nothing AndAlso Not Equals(ListaPreciosArticulos.LPR_ID, value) Then
                        ListaPreciosArticulos = Nothing
                    End If
                End If
                _lPR_ID = value
                OnPropertyChanged("LPR_ID")
            End If
        End Set
    End Property

    Private _lPR_ID As String

    <DataMember()>
    Public Property PVE_TIPO() As Short
        Get
            Return _pVE_TIPO
        End Get
        Set(ByVal value As Short)
            If Not Equals(_pVE_TIPO, value) Then
                _pVE_TIPO = value
                OnPropertyChanged("PVE_TIPO")
            End If
        End Set
    End Property

    Private _pVE_TIPO As Short

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property PVE_FEC_GRAB() As Date
        Get
            Return _pVE_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_pVE_FEC_GRAB, value) Then
                _pVE_FEC_GRAB = value
                OnPropertyChanged("PVE_FEC_GRAB")
            End If
        End Set
    End Property

    Private _pVE_FEC_GRAB As Date

    <DataMember()>
    Public Property PVE_ESTADO() As Boolean
        Get
            Return _pVE_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_pVE_ESTADO, value) Then
                _pVE_ESTADO = value
                OnPropertyChanged("PVE_ESTADO")
            End If
        End Set
    End Property

    Private _pVE_ESTADO As Boolean

    <DataMember()>
    Public Property PVE_LUGAR() As Short
        Get
            Return _pVE_LUGAR
        End Get
        Set(ByVal value As Short)
            If Not Equals(_pVE_LUGAR, value) Then
                _pVE_LUGAR = value
                OnPropertyChanged("PVE_LUGAR")
            End If
        End Set
    End Property

    Private _pVE_LUGAR As Short

    <DataMember()>
    Public Property OTR_ID() As Nullable(Of Integer)
        Get
            Return _oTR_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_oTR_ID, value) Then
                _oTR_ID = value
                OnPropertyChanged("OTR_ID")
            End If
        End Set
    End Property

    Private _oTR_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property UnidadNegocio() As String
        Get
            Return _unidadNegocio
        End Get
        Set(ByVal value As String)
            If Not Equals(_unidadNegocio, value) Then
                _unidadNegocio = value
                OnPropertyChanged("UnidadNegocio")
            End If
        End Set
    End Property

    Private _unidadNegocio As String

    <DataMember()>
    Public Property CostCenter() As String
        Get
            Return _costCenter
        End Get
        Set(ByVal value As String)
            If Not Equals(_costCenter, value) Then
                _costCenter = value
                OnPropertyChanged("CostCenter")
            End If
        End Set
    End Property

    Private _costCenter As String

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Edificios() As TrackableCollection(Of Edificios)
        Get
            If _edificios Is Nothing Then
                _edificios = New TrackableCollection(Of Edificios)
                AddHandler _edificios.CollectionChanged, AddressOf FixupEdificios
            End If
            Return _edificios
        End Get
        Set(ByVal value As TrackableCollection(Of Edificios))
            If Not Object.ReferenceEquals(_edificios, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _edificios IsNot Nothing Then
                    RemoveHandler _edificios.CollectionChanged, AddressOf FixupEdificios
                End If
                _edificios = value
                If _edificios IsNot Nothing Then
                    AddHandler _edificios.CollectionChanged, AddressOf FixupEdificios
                End If
                OnNavigationPropertyChanged("Edificios")
            End If
        End Set
    End Property

    Private _edificios As TrackableCollection(Of Edificios)

    <DataMember()>
    Public Property FletesTransporte() As TrackableCollection(Of FletesTransporte)
        Get
            If _fletesTransporte Is Nothing Then
                _fletesTransporte = New TrackableCollection(Of FletesTransporte)
                AddHandler _fletesTransporte.CollectionChanged, AddressOf FixupFletesTransporte
            End If
            Return _fletesTransporte
        End Get
        Set(ByVal value As TrackableCollection(Of FletesTransporte))
            If Not Object.ReferenceEquals(_fletesTransporte, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _fletesTransporte IsNot Nothing Then
                    RemoveHandler _fletesTransporte.CollectionChanged, AddressOf FixupFletesTransporte
                End If
                _fletesTransporte = value
                If _fletesTransporte IsNot Nothing Then
                    AddHandler _fletesTransporte.CollectionChanged, AddressOf FixupFletesTransporte
                End If
                OnNavigationPropertyChanged("FletesTransporte")
            End If
        End Set
    End Property

    Private _fletesTransporte As TrackableCollection(Of FletesTransporte)

    <DataMember()>
    Public Property ListaPreciosArticulos() As ListaPreciosArticulos
        Get
            Return _listaPreciosArticulos
        End Get
        Set(ByVal value As ListaPreciosArticulos)
            If _listaPreciosArticulos IsNot value Then
                Dim previousValue As ListaPreciosArticulos = _listaPreciosArticulos
                _listaPreciosArticulos = value
                FixupListaPreciosArticulos(previousValue)
                OnNavigationPropertyChanged("ListaPreciosArticulos")
            End If
        End Set
    End Property

    Private _listaPreciosArticulos As ListaPreciosArticulos


    <DataMember()>
    Public Property Cierre() As TrackableCollection(Of Cierre)
        Get
            If _cierre Is Nothing Then
                _cierre = New TrackableCollection(Of Cierre)
                AddHandler _cierre.CollectionChanged, AddressOf FixupCierre
            End If
            Return _cierre
        End Get
        Set(ByVal value As TrackableCollection(Of Cierre))
            If Not Object.ReferenceEquals(_cierre, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _cierre IsNot Nothing Then
                    RemoveHandler _cierre.CollectionChanged, AddressOf FixupCierre
                End If
                _cierre = value
                If _cierre IsNot Nothing Then
                    AddHandler _cierre.CollectionChanged, AddressOf FixupCierre
                End If
                OnNavigationPropertyChanged("Cierre")
            End If
        End Set
    End Property

    Private _cierre As TrackableCollection(Of Cierre)

    <DataMember()>
    Public Property CorrelativoTipoDocumento() As TrackableCollection(Of CorrelativoTipoDocumento)
        Get
            If _correlativoTipoDocumento Is Nothing Then
                _correlativoTipoDocumento = New TrackableCollection(Of CorrelativoTipoDocumento)
                AddHandler _correlativoTipoDocumento.CollectionChanged, AddressOf FixupCorrelativoTipoDocumento
            End If
            Return _correlativoTipoDocumento
        End Get
        Set(ByVal value As TrackableCollection(Of CorrelativoTipoDocumento))
            If Not Object.ReferenceEquals(_correlativoTipoDocumento, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _correlativoTipoDocumento IsNot Nothing Then
                    RemoveHandler _correlativoTipoDocumento.CollectionChanged, AddressOf FixupCorrelativoTipoDocumento
                End If
                _correlativoTipoDocumento = value
                If _correlativoTipoDocumento IsNot Nothing Then
                    AddHandler _correlativoTipoDocumento.CollectionChanged, AddressOf FixupCorrelativoTipoDocumento
                End If
                OnNavigationPropertyChanged("CorrelativoTipoDocumento")
            End If
        End Set
    End Property

    Private _correlativoTipoDocumento As TrackableCollection(Of CorrelativoTipoDocumento)

    <DataMember()>
    Public Property Distrito() As Distrito
        Get
            Return _distrito
        End Get
        Set(ByVal value As Distrito)
            If _distrito IsNot value Then
                Dim previousValue As Distrito = _distrito
                _distrito = value
                FixupDistrito(previousValue)
                OnNavigationPropertyChanged("Distrito")
            End If
        End Set
    End Property

    Private _distrito As Distrito


    <DataMember()>
    Public Property CajaCtaCte() As TrackableCollection(Of CajaCtaCte)
        Get
            If _cajaCtaCte Is Nothing Then
                _cajaCtaCte = New TrackableCollection(Of CajaCtaCte)
                AddHandler _cajaCtaCte.CollectionChanged, AddressOf FixupCajaCtaCte
            End If
            Return _cajaCtaCte
        End Get
        Set(ByVal value As TrackableCollection(Of CajaCtaCte))
            If Not Object.ReferenceEquals(_cajaCtaCte, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _cajaCtaCte IsNot Nothing Then
                    RemoveHandler _cajaCtaCte.CollectionChanged, AddressOf FixupCajaCtaCte
                End If
                _cajaCtaCte = value
                If _cajaCtaCte IsNot Nothing Then
                    AddHandler _cajaCtaCte.CollectionChanged, AddressOf FixupCajaCtaCte
                End If
                OnNavigationPropertyChanged("CajaCtaCte")
            End If
        End Set
    End Property

    Private _cajaCtaCte As TrackableCollection(Of CajaCtaCte)

    <DataMember()>
    Public Property PuntoVentaDatosUsuarios() As TrackableCollection(Of PuntoVentaDatosUsuarios)
        Get
            If _puntoVentaDatosUsuarios Is Nothing Then
                _puntoVentaDatosUsuarios = New TrackableCollection(Of PuntoVentaDatosUsuarios)
                AddHandler _puntoVentaDatosUsuarios.CollectionChanged, AddressOf FixupPuntoVentaDatosUsuarios
            End If
            Return _puntoVentaDatosUsuarios
        End Get
        Set(ByVal value As TrackableCollection(Of PuntoVentaDatosUsuarios))
            If Not Object.ReferenceEquals(_puntoVentaDatosUsuarios, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _puntoVentaDatosUsuarios IsNot Nothing Then
                    RemoveHandler _puntoVentaDatosUsuarios.CollectionChanged, AddressOf FixupPuntoVentaDatosUsuarios
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminación en cascada para aquellas entidades de la colección actual.
                    For Each item As PuntoVentaDatosUsuarios In _puntoVentaDatosUsuarios
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _puntoVentaDatosUsuarios = value
                If _puntoVentaDatosUsuarios IsNot Nothing Then
                    AddHandler _puntoVentaDatosUsuarios.CollectionChanged, AddressOf FixupPuntoVentaDatosUsuarios
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                    For Each item As PuntoVentaDatosUsuarios In _puntoVentaDatosUsuarios
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("PuntoVentaDatosUsuarios")
            End If
        End Set
    End Property

    Private _puntoVentaDatosUsuarios As TrackableCollection(Of PuntoVentaDatosUsuarios)

    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property RolPuntoVentaAlmacen() As TrackableCollection(Of RolPuntoVentaAlmacen)
        Get
            If _rolPuntoVentaAlmacen Is Nothing Then
                _rolPuntoVentaAlmacen = New TrackableCollection(Of RolPuntoVentaAlmacen)
                AddHandler _rolPuntoVentaAlmacen.CollectionChanged, AddressOf FixupRolPuntoVentaAlmacen
            End If
            Return _rolPuntoVentaAlmacen
        End Get
        Set(ByVal value As TrackableCollection(Of RolPuntoVentaAlmacen))
            If Not Object.ReferenceEquals(_rolPuntoVentaAlmacen, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _rolPuntoVentaAlmacen IsNot Nothing Then
                    RemoveHandler _rolPuntoVentaAlmacen.CollectionChanged, AddressOf FixupRolPuntoVentaAlmacen
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminación en cascada para aquellas entidades de la colección actual.
                    For Each item As RolPuntoVentaAlmacen In _rolPuntoVentaAlmacen
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _rolPuntoVentaAlmacen = value
                If _rolPuntoVentaAlmacen IsNot Nothing Then
                    AddHandler _rolPuntoVentaAlmacen.CollectionChanged, AddressOf FixupRolPuntoVentaAlmacen
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                    For Each item As RolPuntoVentaAlmacen In _rolPuntoVentaAlmacen
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("RolPuntoVentaAlmacen")
            End If
        End Set
    End Property

    Private _rolPuntoVentaAlmacen As TrackableCollection(Of RolPuntoVentaAlmacen)

    <DataMember()>
    Public Property Tesoreria() As TrackableCollection(Of Tesoreria)
        Get
            If _tesoreria Is Nothing Then
                _tesoreria = New TrackableCollection(Of Tesoreria)
                AddHandler _tesoreria.CollectionChanged, AddressOf FixupTesoreria
            End If
            Return _tesoreria
        End Get
        Set(ByVal value As TrackableCollection(Of Tesoreria))
            If Not Object.ReferenceEquals(_tesoreria, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _tesoreria IsNot Nothing Then
                    RemoveHandler _tesoreria.CollectionChanged, AddressOf FixupTesoreria
                End If
                _tesoreria = value
                If _tesoreria IsNot Nothing Then
                    AddHandler _tesoreria.CollectionChanged, AddressOf FixupTesoreria
                End If
                OnNavigationPropertyChanged("Tesoreria")
            End If
        End Set
    End Property

    Private _tesoreria As TrackableCollection(Of Tesoreria)

    <DataMember()>
    Public Property PrestamosTrabajador() As TrackableCollection(Of PrestamosTrabajador)
        Get
            If _prestamosTrabajador Is Nothing Then
                _prestamosTrabajador = New TrackableCollection(Of PrestamosTrabajador)
                AddHandler _prestamosTrabajador.CollectionChanged, AddressOf FixupPrestamosTrabajador
            End If
            Return _prestamosTrabajador
        End Get
        Set(ByVal value As TrackableCollection(Of PrestamosTrabajador))
            If Not Object.ReferenceEquals(_prestamosTrabajador, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _prestamosTrabajador IsNot Nothing Then
                    RemoveHandler _prestamosTrabajador.CollectionChanged, AddressOf FixupPrestamosTrabajador
                End If
                _prestamosTrabajador = value
                If _prestamosTrabajador IsNot Nothing Then
                    AddHandler _prestamosTrabajador.CollectionChanged, AddressOf FixupPrestamosTrabajador
                End If
                OnNavigationPropertyChanged("PrestamosTrabajador")
            End If
        End Set
    End Property

    Private _prestamosTrabajador As TrackableCollection(Of PrestamosTrabajador)

    <DataMember()>
    Public Property Documentos() As TrackableCollection(Of Documentos)
        Get
            If _documentos Is Nothing Then
                _documentos = New TrackableCollection(Of Documentos)
                AddHandler _documentos.CollectionChanged, AddressOf FixupDocumentos
            End If
            Return _documentos
        End Get
        Set(ByVal value As TrackableCollection(Of Documentos))
            If Not Object.ReferenceEquals(_documentos, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _documentos IsNot Nothing Then
                    RemoveHandler _documentos.CollectionChanged, AddressOf FixupDocumentos
                End If
                _documentos = value
                If _documentos IsNot Nothing Then
                    AddHandler _documentos.CollectionChanged, AddressOf FixupDocumentos
                End If
                OnNavigationPropertyChanged("Documentos")
            End If
        End Set
    End Property

    Private _documentos As TrackableCollection(Of Documentos)

    <DataMember()>
    Public Property Documentos1() As TrackableCollection(Of Documentos)
        Get
            If _documentos1 Is Nothing Then
                _documentos1 = New TrackableCollection(Of Documentos)
                AddHandler _documentos1.CollectionChanged, AddressOf FixupDocumentos1
            End If
            Return _documentos1
        End Get
        Set(ByVal value As TrackableCollection(Of Documentos))
            If Not Object.ReferenceEquals(_documentos1, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _documentos1 IsNot Nothing Then
                    RemoveHandler _documentos1.CollectionChanged, AddressOf FixupDocumentos1
                End If
                _documentos1 = value
                If _documentos1 IsNot Nothing Then
                    AddHandler _documentos1.CollectionChanged, AddressOf FixupDocumentos1
                End If
                OnNavigationPropertyChanged("Documentos1")
            End If
        End Set
    End Property

    Private _documentos1 As TrackableCollection(Of Documentos)

    <DataMember()>
    Public Property PuntoVentaAnexo() As TrackableCollection(Of PuntoVentaAnexo)
        Get
            If _puntoVentaAnexo Is Nothing Then
                _puntoVentaAnexo = New TrackableCollection(Of PuntoVentaAnexo)
                AddHandler _puntoVentaAnexo.CollectionChanged, AddressOf FixupPuntoVentaAnexo
            End If
            Return _puntoVentaAnexo
        End Get
        Set(ByVal value As TrackableCollection(Of PuntoVentaAnexo))
            If Not Object.ReferenceEquals(_puntoVentaAnexo, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _puntoVentaAnexo IsNot Nothing Then
                    RemoveHandler _puntoVentaAnexo.CollectionChanged, AddressOf FixupPuntoVentaAnexo
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminación en cascada para aquellas entidades de la colección actual.
                    For Each item As PuntoVentaAnexo In _puntoVentaAnexo
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _puntoVentaAnexo = value
                If _puntoVentaAnexo IsNot Nothing Then
                    AddHandler _puntoVentaAnexo.CollectionChanged, AddressOf FixupPuntoVentaAnexo
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                    For Each item As PuntoVentaAnexo In _puntoVentaAnexo
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("PuntoVentaAnexo")
            End If
        End Set
    End Property

    Private _puntoVentaAnexo As TrackableCollection(Of PuntoVentaAnexo)

    <DataMember()>
    Public Property PuntoVentaAnexo1() As TrackableCollection(Of PuntoVentaAnexo)
        Get
            If _puntoVentaAnexo1 Is Nothing Then
                _puntoVentaAnexo1 = New TrackableCollection(Of PuntoVentaAnexo)
                AddHandler _puntoVentaAnexo1.CollectionChanged, AddressOf FixupPuntoVentaAnexo1
            End If
            Return _puntoVentaAnexo1
        End Get
        Set(ByVal value As TrackableCollection(Of PuntoVentaAnexo))
            If Not Object.ReferenceEquals(_puntoVentaAnexo1, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _puntoVentaAnexo1 IsNot Nothing Then
                    RemoveHandler _puntoVentaAnexo1.CollectionChanged, AddressOf FixupPuntoVentaAnexo1
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminación en cascada para aquellas entidades de la colección actual.
                    For Each item As PuntoVentaAnexo In _puntoVentaAnexo1
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _puntoVentaAnexo1 = value
                If _puntoVentaAnexo1 IsNot Nothing Then
                    AddHandler _puntoVentaAnexo1.CollectionChanged, AddressOf FixupPuntoVentaAnexo1
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                    For Each item As PuntoVentaAnexo In _puntoVentaAnexo1
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("PuntoVentaAnexo1")
            End If
        End Set
    End Property

    Private _puntoVentaAnexo1 As TrackableCollection(Of PuntoVentaAnexo)

    <DataMember()>
    Public Property Despachos() As TrackableCollection(Of Despachos)
        Get
            If _despachos Is Nothing Then
                _despachos = New TrackableCollection(Of Despachos)
                AddHandler _despachos.CollectionChanged, AddressOf FixupDespachos
            End If
            Return _despachos
        End Get
        Set(ByVal value As TrackableCollection(Of Despachos))
            If Not Object.ReferenceEquals(_despachos, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _despachos IsNot Nothing Then
                    RemoveHandler _despachos.CollectionChanged, AddressOf FixupDespachos
                End If
                _despachos = value
                If _despachos IsNot Nothing Then
                    AddHandler _despachos.CollectionChanged, AddressOf FixupDespachos
                End If
                OnNavigationPropertyChanged("Despachos")
            End If
        End Set
    End Property

    Private _despachos As TrackableCollection(Of Despachos)

    <DataMember()>
    Public Property CajeroAnexo() As TrackableCollection(Of CajeroAnexo)
        Get
            If _cajeroAnexo Is Nothing Then
                _cajeroAnexo = New TrackableCollection(Of CajeroAnexo)
                AddHandler _cajeroAnexo.CollectionChanged, AddressOf FixupCajeroAnexo
            End If
            Return _cajeroAnexo
        End Get
        Set(ByVal value As TrackableCollection(Of CajeroAnexo))
            If Not Object.ReferenceEquals(_cajeroAnexo, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _cajeroAnexo IsNot Nothing Then
                    RemoveHandler _cajeroAnexo.CollectionChanged, AddressOf FixupCajeroAnexo
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminación en cascada para aquellas entidades de la colección actual.
                    For Each item As CajeroAnexo In _cajeroAnexo
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _cajeroAnexo = value
                If _cajeroAnexo IsNot Nothing Then
                    AddHandler _cajeroAnexo.CollectionChanged, AddressOf FixupCajeroAnexo
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                    For Each item As CajeroAnexo In _cajeroAnexo
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("CajeroAnexo")
            End If
        End Set
    End Property

    Private _cajeroAnexo As TrackableCollection(Of CajeroAnexo)

    <DataMember()>
    Public Property ProvisionCompras() As TrackableCollection(Of ProvisionCompras)
        Get
            If _provisionCompras Is Nothing Then
                _provisionCompras = New TrackableCollection(Of ProvisionCompras)
                AddHandler _provisionCompras.CollectionChanged, AddressOf FixupProvisionCompras
            End If
            Return _provisionCompras
        End Get
        Set(ByVal value As TrackableCollection(Of ProvisionCompras))
            If Not Object.ReferenceEquals(_provisionCompras, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _provisionCompras IsNot Nothing Then
                    RemoveHandler _provisionCompras.CollectionChanged, AddressOf FixupProvisionCompras
                End If
                _provisionCompras = value
                If _provisionCompras IsNot Nothing Then
                    AddHandler _provisionCompras.CollectionChanged, AddressOf FixupProvisionCompras
                End If
                OnNavigationPropertyChanged("ProvisionCompras")
            End If
        End Set
    End Property

    Private _provisionCompras As TrackableCollection(Of ProvisionCompras)

    <DataMember()>
    Public Property TesoreriaEditar() As TrackableCollection(Of TesoreriaEditar)
        Get
            If _tesoreriaEditar Is Nothing Then
                _tesoreriaEditar = New TrackableCollection(Of TesoreriaEditar)
                AddHandler _tesoreriaEditar.CollectionChanged, AddressOf FixupTesoreriaEditar
            End If
            Return _tesoreriaEditar
        End Get
        Set(ByVal value As TrackableCollection(Of TesoreriaEditar))
            If Not Object.ReferenceEquals(_tesoreriaEditar, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _tesoreriaEditar IsNot Nothing Then
                    RemoveHandler _tesoreriaEditar.CollectionChanged, AddressOf FixupTesoreriaEditar
                End If
                _tesoreriaEditar = value
                If _tesoreriaEditar IsNot Nothing Then
                    AddHandler _tesoreriaEditar.CollectionChanged, AddressOf FixupTesoreriaEditar
                End If
                OnNavigationPropertyChanged("TesoreriaEditar")
            End If
        End Set
    End Property

    Private _tesoreriaEditar As TrackableCollection(Of TesoreriaEditar)

    <DataMember()>
    Public Property Prestamo() As TrackableCollection(Of Prestamo)
        Get
            If _prestamo Is Nothing Then
                _prestamo = New TrackableCollection(Of Prestamo)
                AddHandler _prestamo.CollectionChanged, AddressOf FixupPrestamo
            End If
            Return _prestamo
        End Get
        Set(ByVal value As TrackableCollection(Of Prestamo))
            If Not Object.ReferenceEquals(_prestamo, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _prestamo IsNot Nothing Then
                    RemoveHandler _prestamo.CollectionChanged, AddressOf FixupPrestamo
                End If
                _prestamo = value
                If _prestamo IsNot Nothing Then
                    AddHandler _prestamo.CollectionChanged, AddressOf FixupPrestamo
                End If
                OnNavigationPropertyChanged("Prestamo")
            End If
        End Set
    End Property

    Private _prestamo As TrackableCollection(Of Prestamo)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Edificios.Clear()
        FletesTransporte.Clear()
        ListaPreciosArticulos = Nothing
        Cierre.Clear()
        CorrelativoTipoDocumento.Clear()
        Distrito = Nothing
        CajaCtaCte.Clear()
        PuntoVentaDatosUsuarios.Clear()
        Usuarios = Nothing
        RolPuntoVentaAlmacen.Clear()
        Tesoreria.Clear()
        PrestamosTrabajador.Clear()
        Documentos.Clear()
        Documentos1.Clear()
        PuntoVentaAnexo.Clear()
        PuntoVentaAnexo1.Clear()
        Despachos.Clear()
        CajeroAnexo.Clear()
        ProvisionCompras.Clear()
        TesoreriaEditar.Clear()
        Prestamo.Clear()
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupListaPreciosArticulos(ByVal previousValue As ListaPreciosArticulos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.PuntoVenta.Contains(Me) Then
            previousValue.PuntoVenta.Remove(Me)
        End If

        If ListaPreciosArticulos IsNot Nothing Then
            If Not ListaPreciosArticulos.PuntoVenta.Contains(Me) Then
                ListaPreciosArticulos.PuntoVenta.Add(Me)
            End If

            LPR_ID = ListaPreciosArticulos.LPR_ID
        ElseIf Not skipKeys Then
            LPR_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("ListaPreciosArticulos") AndAlso
                ChangeTracker.OriginalValues("ListaPreciosArticulos") Is ListaPreciosArticulos Then
                ChangeTracker.OriginalValues.Remove("ListaPreciosArticulos")
            Else
                ChangeTracker.RecordOriginalValue("ListaPreciosArticulos", previousValue)
            End If
            If ListaPreciosArticulos IsNot Nothing AndAlso Not ListaPreciosArticulos.ChangeTracker.ChangeTrackingEnabled Then
                ListaPreciosArticulos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDistrito(ByVal previousValue As Distrito)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.PuntoVenta.Contains(Me) Then
            previousValue.PuntoVenta.Remove(Me)
        End If

        If Distrito IsNot Nothing Then
            If Not Distrito.PuntoVenta.Contains(Me) Then
                Distrito.PuntoVenta.Add(Me)
            End If

            DIS_ID = Distrito.DIS_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Distrito") AndAlso
                ChangeTracker.OriginalValues("Distrito") Is Distrito Then
                ChangeTracker.OriginalValues.Remove("Distrito")
            Else
                ChangeTracker.RecordOriginalValue("Distrito", previousValue)
            End If
            If Distrito IsNot Nothing AndAlso Not Distrito.ChangeTracker.ChangeTrackingEnabled Then
                Distrito.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupEdificios(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As Edificios In e.NewItems
                item.PuntoVenta = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("Edificios", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As Edificios In e.OldItems
                If ReferenceEquals(item.PuntoVenta, Me) Then
                    item.PuntoVenta = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("Edificios", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupFletesTransporte(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As FletesTransporte In e.NewItems
                item.PuntoVenta = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("FletesTransporte", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As FletesTransporte In e.OldItems
                If ReferenceEquals(item.PuntoVenta, Me) Then
                    item.PuntoVenta = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("FletesTransporte", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupCierre(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As Cierre In e.NewItems
                item.PuntoVenta = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("Cierre", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As Cierre In e.OldItems
                If ReferenceEquals(item.PuntoVenta, Me) Then
                    item.PuntoVenta = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("Cierre", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupCorrelativoTipoDocumento(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As CorrelativoTipoDocumento In e.NewItems
                item.PuntoVenta = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("CorrelativoTipoDocumento", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As CorrelativoTipoDocumento In e.OldItems
                If ReferenceEquals(item.PuntoVenta, Me) Then
                    item.PuntoVenta = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("CorrelativoTipoDocumento", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupCajaCtaCte(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As CajaCtaCte In e.NewItems
                item.PuntoVenta = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("CajaCtaCte", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As CajaCtaCte In e.OldItems
                If ReferenceEquals(item.PuntoVenta, Me) Then
                    item.PuntoVenta = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("CajaCtaCte", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupPuntoVentaDatosUsuarios(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PuntoVentaDatosUsuarios In e.NewItems
                item.PuntoVenta = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PuntoVentaDatosUsuarios", item)
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PuntoVentaDatosUsuarios In e.OldItems
                If ReferenceEquals(item.PuntoVenta, Me) Then
                    item.PuntoVenta = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PuntoVentaDatosUsuarios", item)
                    ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                    ' permite que la relación se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupRolPuntoVentaAlmacen(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As RolPuntoVentaAlmacen In e.NewItems
                item.PuntoVenta = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("RolPuntoVentaAlmacen", item)
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As RolPuntoVentaAlmacen In e.OldItems
                If ReferenceEquals(item.PuntoVenta, Me) Then
                    item.PuntoVenta = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("RolPuntoVentaAlmacen", item)
                    ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                    ' permite que la relación se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupTesoreria(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As Tesoreria In e.NewItems
                item.PuntoVenta = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("Tesoreria", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As Tesoreria In e.OldItems
                If ReferenceEquals(item.PuntoVenta, Me) Then
                    item.PuntoVenta = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("Tesoreria", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupPrestamosTrabajador(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PrestamosTrabajador In e.NewItems
                item.PuntoVenta = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PrestamosTrabajador", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PrestamosTrabajador In e.OldItems
                If ReferenceEquals(item.PuntoVenta, Me) Then
                    item.PuntoVenta = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PrestamosTrabajador", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupDocumentos(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As Documentos In e.NewItems
                item.PuntoVenta = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("Documentos", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As Documentos In e.OldItems
                If ReferenceEquals(item.PuntoVenta, Me) Then
                    item.PuntoVenta = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("Documentos", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupDocumentos1(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As Documentos In e.NewItems
                item.PuntoVenta1 = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("Documentos1", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As Documentos In e.OldItems
                If ReferenceEquals(item.PuntoVenta1, Me) Then
                    item.PuntoVenta1 = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("Documentos1", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupPuntoVentaAnexo(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PuntoVentaAnexo In e.NewItems
                item.PuntoVenta = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PuntoVentaAnexo", item)
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PuntoVentaAnexo In e.OldItems
                If ReferenceEquals(item.PuntoVenta, Me) Then
                    item.PuntoVenta = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PuntoVentaAnexo", item)
                    ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                    ' permite que la relación se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupPuntoVentaAnexo1(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PuntoVentaAnexo In e.NewItems
                item.PuntoVenta1 = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PuntoVentaAnexo1", item)
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PuntoVentaAnexo In e.OldItems
                If ReferenceEquals(item.PuntoVenta1, Me) Then
                    item.PuntoVenta1 = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PuntoVentaAnexo1", item)
                    ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                    ' permite que la relación se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupDespachos(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As Despachos In e.NewItems
                item.PuntoVenta = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("Despachos", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As Despachos In e.OldItems
                If ReferenceEquals(item.PuntoVenta, Me) Then
                    item.PuntoVenta = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("Despachos", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupCajeroAnexo(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As CajeroAnexo In e.NewItems
                item.PuntoVenta = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("CajeroAnexo", item)
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As CajeroAnexo In e.OldItems
                If ReferenceEquals(item.PuntoVenta, Me) Then
                    item.PuntoVenta = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("CajeroAnexo", item)
                    ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                    ' permite que la relación se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupProvisionCompras(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As ProvisionCompras In e.NewItems
                item.PuntoVenta = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("ProvisionCompras", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As ProvisionCompras In e.OldItems
                If ReferenceEquals(item.PuntoVenta, Me) Then
                    item.PuntoVenta = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("ProvisionCompras", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupTesoreriaEditar(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As TesoreriaEditar In e.NewItems
                item.PuntoVenta = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("TesoreriaEditar", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As TesoreriaEditar In e.OldItems
                If ReferenceEquals(item.PuntoVenta, Me) Then
                    item.PuntoVenta = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("TesoreriaEditar", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupPrestamo(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As Prestamo In e.NewItems
                item.PuntoVenta = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("Prestamo", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As Prestamo In e.OldItems
                If ReferenceEquals(item.PuntoVenta, Me) Then
                    item.PuntoVenta = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("Prestamo", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
