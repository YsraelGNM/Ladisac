'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(DetalleFletesTransporte))>
<KnownType(GetType(DireccionesPersonas))>
<KnownType(GetType(Provincia))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(PuntoVenta))>
Partial Public Class Distrito
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared DIS_ID As string = "DIS_ID"
				public shared DIS_DESCRIPCION As string = "DIS_DESCRIPCION"
				public shared PRO_ID As string = "PRO_ID"
				public shared DIS_COD_SUNAT As string = "DIS_COD_SUNAT"
				public shared USU_ID As string = "USU_ID"
				public shared DIS_FEC_GRAB As string = "DIS_FEC_GRAB"
				public shared DIS_ESTADO As string = "DIS_ESTADO"
		    End Structure
	



    <DataMember()>
    Public Property DIS_ID() As String
        Get
            Return _dIS_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_dIS_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DIS_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _dIS_ID = value
                OnPropertyChanged("DIS_ID")
            End If
        End Set
    End Property

    Private _dIS_ID As String

    <DataMember()>
    Public Property DIS_DESCRIPCION() As String
        Get
            Return _dIS_DESCRIPCION
        End Get
        Set(ByVal value As String)
            If Not Equals(_dIS_DESCRIPCION, value) Then
                _dIS_DESCRIPCION = value
                OnPropertyChanged("DIS_DESCRIPCION")
            End If
        End Set
    End Property

    Private _dIS_DESCRIPCION As String

    <DataMember()>
    Public Property PRO_ID() As String
        Get
            Return _pRO_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_pRO_ID, value) Then
                ChangeTracker.RecordOriginalValue("PRO_ID", _pRO_ID)
                If Not IsDeserializing Then
                    If Provincia IsNot Nothing AndAlso Not Equals(Provincia.PRO_ID, value) Then
                        Provincia = Nothing
                    End If
                End If
                _pRO_ID = value
                OnPropertyChanged("PRO_ID")
            End If
        End Set
    End Property

    Private _pRO_ID As String

    <DataMember()>
    Public Property DIS_COD_SUNAT() As String
        Get
            Return _dIS_COD_SUNAT
        End Get
        Set(ByVal value As String)
            If Not Equals(_dIS_COD_SUNAT, value) Then
                _dIS_COD_SUNAT = value
                OnPropertyChanged("DIS_COD_SUNAT")
            End If
        End Set
    End Property

    Private _dIS_COD_SUNAT As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property DIS_FEC_GRAB() As Date
        Get
            Return _dIS_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dIS_FEC_GRAB, value) Then
                _dIS_FEC_GRAB = value
                OnPropertyChanged("DIS_FEC_GRAB")
            End If
        End Set
    End Property

    Private _dIS_FEC_GRAB As Date

    <DataMember()>
    Public Property DIS_ESTADO() As Boolean
        Get
            Return _dIS_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_dIS_ESTADO, value) Then
                _dIS_ESTADO = value
                OnPropertyChanged("DIS_ESTADO")
            End If
        End Set
    End Property

    Private _dIS_ESTADO As Boolean

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property DetalleFletesTransporte() As TrackableCollection(Of DetalleFletesTransporte)
        Get
            If _detalleFletesTransporte Is Nothing Then
                _detalleFletesTransporte = New TrackableCollection(Of DetalleFletesTransporte)
                AddHandler _detalleFletesTransporte.CollectionChanged, AddressOf FixupDetalleFletesTransporte
            End If
            Return _detalleFletesTransporte
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleFletesTransporte))
            If Not Object.ReferenceEquals(_detalleFletesTransporte, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleFletesTransporte IsNot Nothing Then
                    RemoveHandler _detalleFletesTransporte.CollectionChanged, AddressOf FixupDetalleFletesTransporte
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminación en cascada para aquellas entidades de la colección actual.
                    For Each item As DetalleFletesTransporte In _detalleFletesTransporte
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detalleFletesTransporte = value
                If _detalleFletesTransporte IsNot Nothing Then
                    AddHandler _detalleFletesTransporte.CollectionChanged, AddressOf FixupDetalleFletesTransporte
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                    For Each item As DetalleFletesTransporte In _detalleFletesTransporte
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetalleFletesTransporte")
            End If
        End Set
    End Property

    Private _detalleFletesTransporte As TrackableCollection(Of DetalleFletesTransporte)

    <DataMember()>
    Public Property DireccionesPersonas() As TrackableCollection(Of DireccionesPersonas)
        Get
            If _direccionesPersonas Is Nothing Then
                _direccionesPersonas = New TrackableCollection(Of DireccionesPersonas)
                AddHandler _direccionesPersonas.CollectionChanged, AddressOf FixupDireccionesPersonas
            End If
            Return _direccionesPersonas
        End Get
        Set(ByVal value As TrackableCollection(Of DireccionesPersonas))
            If Not Object.ReferenceEquals(_direccionesPersonas, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _direccionesPersonas IsNot Nothing Then
                    RemoveHandler _direccionesPersonas.CollectionChanged, AddressOf FixupDireccionesPersonas
                End If
                _direccionesPersonas = value
                If _direccionesPersonas IsNot Nothing Then
                    AddHandler _direccionesPersonas.CollectionChanged, AddressOf FixupDireccionesPersonas
                End If
                OnNavigationPropertyChanged("DireccionesPersonas")
            End If
        End Set
    End Property

    Private _direccionesPersonas As TrackableCollection(Of DireccionesPersonas)

    <DataMember()>
    Public Property Provincia() As Provincia
        Get
            Return _provincia
        End Get
        Set(ByVal value As Provincia)
            If _provincia IsNot value Then
                Dim previousValue As Provincia = _provincia
                _provincia = value
                FixupProvincia(previousValue)
                OnNavigationPropertyChanged("Provincia")
            End If
        End Set
    End Property

    Private _provincia As Provincia


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property PuntoVenta() As TrackableCollection(Of PuntoVenta)
        Get
            If _puntoVenta Is Nothing Then
                _puntoVenta = New TrackableCollection(Of PuntoVenta)
                AddHandler _puntoVenta.CollectionChanged, AddressOf FixupPuntoVenta
            End If
            Return _puntoVenta
        End Get
        Set(ByVal value As TrackableCollection(Of PuntoVenta))
            If Not Object.ReferenceEquals(_puntoVenta, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _puntoVenta IsNot Nothing Then
                    RemoveHandler _puntoVenta.CollectionChanged, AddressOf FixupPuntoVenta
                End If
                _puntoVenta = value
                If _puntoVenta IsNot Nothing Then
                    AddHandler _puntoVenta.CollectionChanged, AddressOf FixupPuntoVenta
                End If
                OnNavigationPropertyChanged("PuntoVenta")
            End If
        End Set
    End Property

    Private _puntoVenta As TrackableCollection(Of PuntoVenta)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        DetalleFletesTransporte.Clear()
        DireccionesPersonas.Clear()
        Provincia = Nothing
        Usuarios = Nothing
        PuntoVenta.Clear()
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupProvincia(ByVal previousValue As Provincia)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Distrito.Contains(Me) Then
            previousValue.Distrito.Remove(Me)
        End If

        If Provincia IsNot Nothing Then
            If Not Provincia.Distrito.Contains(Me) Then
                Provincia.Distrito.Add(Me)
            End If

            PRO_ID = Provincia.PRO_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Provincia") AndAlso
                ChangeTracker.OriginalValues("Provincia") Is Provincia Then
                ChangeTracker.OriginalValues.Remove("Provincia")
            Else
                ChangeTracker.RecordOriginalValue("Provincia", previousValue)
            End If
            If Provincia IsNot Nothing AndAlso Not Provincia.ChangeTracker.ChangeTrackingEnabled Then
                Provincia.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleFletesTransporte(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleFletesTransporte In e.NewItems
                item.Distrito = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleFletesTransporte", item)
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleFletesTransporte In e.OldItems
                If ReferenceEquals(item.Distrito, Me) Then
                    item.Distrito = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleFletesTransporte", item)
                    ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                    ' permite que la relación se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupDireccionesPersonas(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DireccionesPersonas In e.NewItems
                item.Distrito = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DireccionesPersonas", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DireccionesPersonas In e.OldItems
                If ReferenceEquals(item.Distrito, Me) Then
                    item.Distrito = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DireccionesPersonas", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupPuntoVenta(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PuntoVenta In e.NewItems
                item.Distrito = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PuntoVenta", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PuntoVenta In e.OldItems
                If ReferenceEquals(item.Distrito, Me) Then
                    item.Distrito = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PuntoVenta", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
