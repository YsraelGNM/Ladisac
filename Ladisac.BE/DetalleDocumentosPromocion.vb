'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(CtaCte))>
<KnownType(GetType(DocumentosPromocion))>
<KnownType(GetType(DetalleTipoDocumentos))>
<KnownType(GetType(TipoDocumentos))>
<KnownType(GetType(Usuarios))>
Partial Public Class DetalleDocumentosPromocion
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared DDP_NUMERO As string = "DDP_NUMERO"
				public shared DDP_TIPO_PROMOCION As string = "DDP_TIPO_PROMOCION"
				public shared DDP_ITEM As string = "DDP_ITEM"
				public shared TDO_ID_DOC As string = "TDO_ID_DOC"
				public shared DTD_ID_DOC As string = "DTD_ID_DOC"
				public shared CCT_ID_DOC As string = "CCT_ID_DOC"
				public shared DDP_SERIE_DOC As string = "DDP_SERIE_DOC"
				public shared DDP_NUMERO_DOC As string = "DDP_NUMERO_DOC"
				public shared USU_ID As string = "USU_ID"
				public shared DDP_FEC_GRAB As string = "DDP_FEC_GRAB"
				public shared DDP_ESTADO As string = "DDP_ESTADO"
				public shared DDP_PUNTOS As string = "DDP_PUNTOS"
				public shared ART_ID As string = "ART_ID"
				public shared DDP_PUNTOS_CONTROL As string = "DDP_PUNTOS_CONTROL"
		    End Structure
	



    <DataMember()>
    Public Property DDP_NUMERO() As String
        Get
            Return _dDP_NUMERO
        End Get
        Set(ByVal value As String)
            If Not Equals(_dDP_NUMERO, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DDP_NUMERO' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If DocumentosPromocion IsNot Nothing AndAlso Not Equals(DocumentosPromocion.DPR_NUMERO, value) Then
                        DocumentosPromocion = Nothing
                    End If
                End If
                _dDP_NUMERO = value
                OnPropertyChanged("DDP_NUMERO")
            End If
        End Set
    End Property

    Private _dDP_NUMERO As String

    <DataMember()>
    Public Property DDP_TIPO_PROMOCION() As Short
        Get
            Return _dDP_TIPO_PROMOCION
        End Get
        Set(ByVal value As Short)
            If Not Equals(_dDP_TIPO_PROMOCION, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DDP_TIPO_PROMOCION' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If DocumentosPromocion IsNot Nothing AndAlso Not Equals(DocumentosPromocion.DPR_TIPO_PROMOCION, value) Then
                        DocumentosPromocion = Nothing
                    End If
                End If
                _dDP_TIPO_PROMOCION = value
                OnPropertyChanged("DDP_TIPO_PROMOCION")
            End If
        End Set
    End Property

    Private _dDP_TIPO_PROMOCION As Short

    <DataMember()>
    Public Property DDP_ITEM() As Decimal
        Get
            Return _dDP_ITEM
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dDP_ITEM, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DDP_ITEM' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _dDP_ITEM = value
                OnPropertyChanged("DDP_ITEM")
            End If
        End Set
    End Property

    Private _dDP_ITEM As Decimal

    <DataMember()>
    Public Property TDO_ID_DOC() As String
        Get
            Return _tDO_ID_DOC
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID_DOC, value) Then
                ChangeTracker.RecordOriginalValue("TDO_ID_DOC", _tDO_ID_DOC)
                If Not IsDeserializing Then
                    If TipoDocumentos IsNot Nothing AndAlso Not Equals(TipoDocumentos.TDO_ID, value) Then
                        TipoDocumentos = Nothing
                    End If
                End If
                _tDO_ID_DOC = value
                OnPropertyChanged("TDO_ID_DOC")
            End If
        End Set
    End Property

    Private _tDO_ID_DOC As String

    <DataMember()>
    Public Property DTD_ID_DOC() As String
        Get
            Return _dTD_ID_DOC
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID_DOC, value) Then
                ChangeTracker.RecordOriginalValue("DTD_ID_DOC", _dTD_ID_DOC)
                If Not IsDeserializing Then
                    If DetalleTipoDocumentos IsNot Nothing AndAlso Not Equals(DetalleTipoDocumentos.DTD_ID, value) Then
                        DetalleTipoDocumentos = Nothing
                    End If
                End If
                _dTD_ID_DOC = value
                OnPropertyChanged("DTD_ID_DOC")
            End If
        End Set
    End Property

    Private _dTD_ID_DOC As String

    <DataMember()>
    Public Property CCT_ID_DOC() As String
        Get
            Return _cCT_ID_DOC
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCT_ID_DOC, value) Then
                ChangeTracker.RecordOriginalValue("CCT_ID_DOC", _cCT_ID_DOC)
                If Not IsDeserializing Then
                    If CtaCte IsNot Nothing AndAlso Not Equals(CtaCte.CCT_ID, value) Then
                        CtaCte = Nothing
                    End If
                End If
                _cCT_ID_DOC = value
                OnPropertyChanged("CCT_ID_DOC")
            End If
        End Set
    End Property

    Private _cCT_ID_DOC As String

    <DataMember()>
    Public Property DDP_SERIE_DOC() As String
        Get
            Return _dDP_SERIE_DOC
        End Get
        Set(ByVal value As String)
            If Not Equals(_dDP_SERIE_DOC, value) Then
                _dDP_SERIE_DOC = value
                OnPropertyChanged("DDP_SERIE_DOC")
            End If
        End Set
    End Property

    Private _dDP_SERIE_DOC As String

    <DataMember()>
    Public Property DDP_NUMERO_DOC() As String
        Get
            Return _dDP_NUMERO_DOC
        End Get
        Set(ByVal value As String)
            If Not Equals(_dDP_NUMERO_DOC, value) Then
                _dDP_NUMERO_DOC = value
                OnPropertyChanged("DDP_NUMERO_DOC")
            End If
        End Set
    End Property

    Private _dDP_NUMERO_DOC As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property DDP_FEC_GRAB() As Date
        Get
            Return _dDP_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dDP_FEC_GRAB, value) Then
                _dDP_FEC_GRAB = value
                OnPropertyChanged("DDP_FEC_GRAB")
            End If
        End Set
    End Property

    Private _dDP_FEC_GRAB As Date

    <DataMember()>
    Public Property DDP_ESTADO() As Short
        Get
            Return _dDP_ESTADO
        End Get
        Set(ByVal value As Short)
            If Not Equals(_dDP_ESTADO, value) Then
                _dDP_ESTADO = value
                OnPropertyChanged("DDP_ESTADO")
            End If
        End Set
    End Property

    Private _dDP_ESTADO As Short

    <DataMember()>
    Public Property DDP_PUNTOS() As Decimal
        Get
            Return _dDP_PUNTOS
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dDP_PUNTOS, value) Then
                _dDP_PUNTOS = value
                OnPropertyChanged("DDP_PUNTOS")
            End If
        End Set
    End Property

    Private _dDP_PUNTOS As Decimal

    <DataMember()>
    Public Property ART_ID() As String
        Get
            Return _aRT_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_aRT_ID, value) Then
                _aRT_ID = value
                OnPropertyChanged("ART_ID")
            End If
        End Set
    End Property

    Private _aRT_ID As String

    <DataMember()>
    Public Property DDP_PUNTOS_CONTROL() As Decimal
        Get
            Return _dDP_PUNTOS_CONTROL
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dDP_PUNTOS_CONTROL, value) Then
                _dDP_PUNTOS_CONTROL = value
                OnPropertyChanged("DDP_PUNTOS_CONTROL")
            End If
        End Set
    End Property

    Private _dDP_PUNTOS_CONTROL As Decimal

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property CtaCte() As CtaCte
        Get
            Return _ctaCte
        End Get
        Set(ByVal value As CtaCte)
            If _ctaCte IsNot value Then
                Dim previousValue As CtaCte = _ctaCte
                _ctaCte = value
                FixupCtaCte(previousValue)
                OnNavigationPropertyChanged("CtaCte")
            End If
        End Set
    End Property

    Private _ctaCte As CtaCte


    <DataMember()>
    Public Property DocumentosPromocion() As DocumentosPromocion
        Get
            Return _documentosPromocion
        End Get
        Set(ByVal value As DocumentosPromocion)
            If _documentosPromocion IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(DDP_NUMERO, value.DPR_NUMERO) OrElse Not Equals(DDP_TIPO_PROMOCION, value.DPR_TIPO_PROMOCION) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As DocumentosPromocion = _documentosPromocion
                _documentosPromocion = value
                FixupDocumentosPromocion(previousValue)
                OnNavigationPropertyChanged("DocumentosPromocion")
            End If
        End Set
    End Property

    Private _documentosPromocion As DocumentosPromocion


    <DataMember()>
    Public Property DetalleTipoDocumentos() As DetalleTipoDocumentos
        Get
            Return _detalleTipoDocumentos
        End Get
        Set(ByVal value As DetalleTipoDocumentos)
            If _detalleTipoDocumentos IsNot value Then
                Dim previousValue As DetalleTipoDocumentos = _detalleTipoDocumentos
                _detalleTipoDocumentos = value
                FixupDetalleTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("DetalleTipoDocumentos")
            End If
        End Set
    End Property

    Private _detalleTipoDocumentos As DetalleTipoDocumentos


    <DataMember()>
    Public Property TipoDocumentos() As TipoDocumentos
        Get
            Return _tipoDocumentos
        End Get
        Set(ByVal value As TipoDocumentos)
            If _tipoDocumentos IsNot value Then
                Dim previousValue As TipoDocumentos = _tipoDocumentos
                _tipoDocumentos = value
                FixupTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("TipoDocumentos")
            End If
        End Set
    End Property

    Private _tipoDocumentos As TipoDocumentos


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociaci칩n que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesar치 notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        CtaCte = Nothing
        DocumentosPromocion = Nothing
        DetalleTipoDocumentos = Nothing
        TipoDocumentos = Nothing
        Usuarios = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupCtaCte(ByVal previousValue As CtaCte, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleDocumentosPromocion.Contains(Me) Then
            previousValue.DetalleDocumentosPromocion.Remove(Me)
        End If

        If CtaCte IsNot Nothing Then
            If Not CtaCte.DetalleDocumentosPromocion.Contains(Me) Then
                CtaCte.DetalleDocumentosPromocion.Add(Me)
            End If

            CCT_ID_DOC = CtaCte.CCT_ID
        ElseIf Not skipKeys Then
            CCT_ID_DOC = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CtaCte") AndAlso
                ChangeTracker.OriginalValues("CtaCte") Is CtaCte Then
                ChangeTracker.OriginalValues.Remove("CtaCte")
            Else
                ChangeTracker.RecordOriginalValue("CtaCte", previousValue)
            End If
            If CtaCte IsNot Nothing AndAlso Not CtaCte.ChangeTracker.ChangeTrackingEnabled Then
                CtaCte.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDocumentosPromocion(ByVal previousValue As DocumentosPromocion)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleDocumentosPromocion.Contains(Me) Then
            previousValue.DetalleDocumentosPromocion.Remove(Me)
        End If

        If DocumentosPromocion IsNot Nothing Then
            If Not DocumentosPromocion.DetalleDocumentosPromocion.Contains(Me) Then
                DocumentosPromocion.DetalleDocumentosPromocion.Add(Me)
            End If

            DDP_NUMERO = DocumentosPromocion.DPR_NUMERO
            DDP_TIPO_PROMOCION = DocumentosPromocion.DPR_TIPO_PROMOCION
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DocumentosPromocion") AndAlso
                ChangeTracker.OriginalValues("DocumentosPromocion") Is DocumentosPromocion Then
                ChangeTracker.OriginalValues.Remove("DocumentosPromocion")
            Else
                ChangeTracker.RecordOriginalValue("DocumentosPromocion", previousValue)
            End If
            If DocumentosPromocion IsNot Nothing AndAlso Not DocumentosPromocion.ChangeTracker.ChangeTrackingEnabled Then
                DocumentosPromocion.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleTipoDocumentos(ByVal previousValue As DetalleTipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleDocumentosPromocion.Contains(Me) Then
            previousValue.DetalleDocumentosPromocion.Remove(Me)
        End If

        If DetalleTipoDocumentos IsNot Nothing Then
            If Not DetalleTipoDocumentos.DetalleDocumentosPromocion.Contains(Me) Then
                DetalleTipoDocumentos.DetalleDocumentosPromocion.Add(Me)
            End If

            DTD_ID_DOC = DetalleTipoDocumentos.DTD_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("DetalleTipoDocumentos") Is DetalleTipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("DetalleTipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTipoDocumentos", previousValue)
            End If
            If DetalleTipoDocumentos IsNot Nothing AndAlso Not DetalleTipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoDocumentos(ByVal previousValue As TipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleDocumentosPromocion.Contains(Me) Then
            previousValue.DetalleDocumentosPromocion.Remove(Me)
        End If

        If TipoDocumentos IsNot Nothing Then
            If Not TipoDocumentos.DetalleDocumentosPromocion.Contains(Me) Then
                TipoDocumentos.DetalleDocumentosPromocion.Add(Me)
            End If

            TDO_ID_DOC = TipoDocumentos.TDO_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("TipoDocumentos") Is TipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("TipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("TipoDocumentos", previousValue)
            End If
            If TipoDocumentos IsNot Nothing AndAlso Not TipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                TipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleDocumentosPromocion.Contains(Me) Then
            previousValue.DetalleDocumentosPromocion.Remove(Me)
        End If

        If Usuarios IsNot Nothing Then
            If Not Usuarios.DetalleDocumentosPromocion.Contains(Me) Then
                Usuarios.DetalleDocumentosPromocion.Add(Me)
            End If

            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
