'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(ActivosFijos))>
Partial Public Class DetalleActivosFijos
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared ACF_ID As string = "ACF_ID"
				public shared ACF_COR_INCIDENCIA As string = "ACF_COR_INCIDENCIA"
				public shared DAC_ID As string = "DAC_ID"
				public shared DAC_DESCRIPCION As string = "DAC_DESCRIPCION"
				public shared PRC_VOUCHER As string = "PRC_VOUCHER"
				public shared PRD_ID As string = "PRD_ID"
				public shared LIB_ID As string = "LIB_ID"
				public shared MON_ID As string = "MON_ID"
				public shared DAC_VALOR_COMPRA As string = "DAC_VALOR_COMPRA"
				public shared DAC_CONTRAVALOR As string = "DAC_CONTRAVALOR"
				public shared DAC_OBSERVACIONES As string = "DAC_OBSERVACIONES"
				public shared USU_ID As string = "USU_ID"
				public shared DAC_FEC_GRAB As string = "DAC_FEC_GRAB"
				public shared DAC_ESTADO As string = "DAC_ESTADO"
		    End Structure
	



    <DataMember()>
    Public Property ACF_ID() As String
        Get
            Return _aCF_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_aCF_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'ACF_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If ActivosFijos IsNot Nothing AndAlso Not Equals(ActivosFijos.ACF_ID, value) Then
                        ActivosFijos = Nothing
                    End If
                End If
                _aCF_ID = value
                OnPropertyChanged("ACF_ID")
            End If
        End Set
    End Property

    Private _aCF_ID As String

    <DataMember()>
    Public Property ACF_COR_INCIDENCIA() As Decimal
        Get
            Return _aCF_COR_INCIDENCIA
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_aCF_COR_INCIDENCIA, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'ACF_COR_INCIDENCIA' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If ActivosFijos IsNot Nothing AndAlso Not Equals(ActivosFijos.ACF_COR_INCIDENCIA, value) Then
                        ActivosFijos = Nothing
                    End If
                End If
                _aCF_COR_INCIDENCIA = value
                OnPropertyChanged("ACF_COR_INCIDENCIA")
            End If
        End Set
    End Property

    Private _aCF_COR_INCIDENCIA As Decimal

    <DataMember()>
    Public Property DAC_ID() As String
        Get
            Return _dAC_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_dAC_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DAC_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _dAC_ID = value
                OnPropertyChanged("DAC_ID")
            End If
        End Set
    End Property

    Private _dAC_ID As String

    <DataMember()>
    Public Property DAC_DESCRIPCION() As String
        Get
            Return _dAC_DESCRIPCION
        End Get
        Set(ByVal value As String)
            If Not Equals(_dAC_DESCRIPCION, value) Then
                _dAC_DESCRIPCION = value
                OnPropertyChanged("DAC_DESCRIPCION")
            End If
        End Set
    End Property

    Private _dAC_DESCRIPCION As String

    <DataMember()>
    Public Property PRC_VOUCHER() As String
        Get
            Return _pRC_VOUCHER
        End Get
        Set(ByVal value As String)
            If Not Equals(_pRC_VOUCHER, value) Then
                _pRC_VOUCHER = value
                OnPropertyChanged("PRC_VOUCHER")
            End If
        End Set
    End Property

    Private _pRC_VOUCHER As String

    <DataMember()>
    Public Property PRD_ID() As String
        Get
            Return _pRD_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_pRD_ID, value) Then
                _pRD_ID = value
                OnPropertyChanged("PRD_ID")
            End If
        End Set
    End Property

    Private _pRD_ID As String

    <DataMember()>
    Public Property LIB_ID() As String
        Get
            Return _lIB_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_lIB_ID, value) Then
                _lIB_ID = value
                OnPropertyChanged("LIB_ID")
            End If
        End Set
    End Property

    Private _lIB_ID As String

    <DataMember()>
    Public Property MON_ID() As String
        Get
            Return _mON_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_mON_ID, value) Then
                _mON_ID = value
                OnPropertyChanged("MON_ID")
            End If
        End Set
    End Property

    Private _mON_ID As String

    <DataMember()>
    Public Property DAC_VALOR_COMPRA() As Decimal
        Get
            Return _dAC_VALOR_COMPRA
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dAC_VALOR_COMPRA, value) Then
                _dAC_VALOR_COMPRA = value
                OnPropertyChanged("DAC_VALOR_COMPRA")
            End If
        End Set
    End Property

    Private _dAC_VALOR_COMPRA As Decimal

    <DataMember()>
    Public Property DAC_CONTRAVALOR() As Nullable(Of Decimal)
        Get
            Return _dAC_CONTRAVALOR
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dAC_CONTRAVALOR, value) Then
                _dAC_CONTRAVALOR = value
                OnPropertyChanged("DAC_CONTRAVALOR")
            End If
        End Set
    End Property

    Private _dAC_CONTRAVALOR As Nullable(Of Decimal)

    <DataMember()>
    Public Property DAC_OBSERVACIONES() As String
        Get
            Return _dAC_OBSERVACIONES
        End Get
        Set(ByVal value As String)
            If Not Equals(_dAC_OBSERVACIONES, value) Then
                _dAC_OBSERVACIONES = value
                OnPropertyChanged("DAC_OBSERVACIONES")
            End If
        End Set
    End Property

    Private _dAC_OBSERVACIONES As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property DAC_FEC_GRAB() As Date
        Get
            Return _dAC_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dAC_FEC_GRAB, value) Then
                _dAC_FEC_GRAB = value
                OnPropertyChanged("DAC_FEC_GRAB")
            End If
        End Set
    End Property

    Private _dAC_FEC_GRAB As Date

    <DataMember()>
    Public Property DAC_ESTADO() As Boolean
        Get
            Return _dAC_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_dAC_ESTADO, value) Then
                _dAC_ESTADO = value
                OnPropertyChanged("DAC_ESTADO")
            End If
        End Set
    End Property

    Private _dAC_ESTADO As Boolean

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property ActivosFijos() As ActivosFijos
        Get
            Return _activosFijos
        End Get
        Set(ByVal value As ActivosFijos)
            If _activosFijos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(ACF_ID, value.ACF_ID) OrElse Not Equals(ACF_COR_INCIDENCIA, value.ACF_COR_INCIDENCIA) Then
                        Throw New InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As ActivosFijos = _activosFijos
                _activosFijos = value
                FixupActivosFijos(previousValue)
                OnNavigationPropertyChanged("ActivosFijos")
            End If
        End Set
    End Property

    Private _activosFijos As ActivosFijos


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociación que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesará notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        ActivosFijos = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupActivosFijos(ByVal previousValue As ActivosFijos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleActivosFijos.Contains(Me) Then
            previousValue.DetalleActivosFijos.Remove(Me)
        End If

        If ActivosFijos IsNot Nothing Then
            If Not ActivosFijos.DetalleActivosFijos.Contains(Me) Then
                ActivosFijos.DetalleActivosFijos.Add(Me)
            End If

            ACF_ID = ActivosFijos.ACF_ID
            ACF_COR_INCIDENCIA = ActivosFijos.ACF_COR_INCIDENCIA
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("ActivosFijos") AndAlso
                ChangeTracker.OriginalValues("ActivosFijos") Is ActivosFijos Then
                ChangeTracker.OriginalValues.Remove("ActivosFijos")
            Else
                ChangeTracker.RecordOriginalValue("ActivosFijos", previousValue)
            End If
            If ActivosFijos IsNot Nothing AndAlso Not ActivosFijos.ChangeTracker.ChangeTrackingEnabled Then
                ActivosFijos.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
