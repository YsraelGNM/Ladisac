'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(DetalleTipoDocumentos))>
<KnownType(GetType(TipoDocumentos))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(CajaCtaCte))>
<KnownType(GetType(Cheques))>
<KnownType(GetType(DetalleTesoreria))>
<KnownType(GetType(Personas))>
Partial Public Class MedioPagoTesoreria
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared TDO_ID As string = "TDO_ID"
				public shared DTD_ID As string = "DTD_ID"
				public shared CCC_ID As string = "CCC_ID"
				public shared MPT_SERIE As string = "MPT_SERIE"
				public shared MPT_NUMERO As string = "MPT_NUMERO"
				public shared MPT_ITEM As string = "MPT_ITEM"
				public shared MPT_IMPORTE_AFECTO As string = "MPT_IMPORTE_AFECTO"
				public shared MPT_PORCENTAJE As string = "MPT_PORCENTAJE"
				public shared CHE_ID As string = "CHE_ID"
				public shared MPT_MEDIO_PAGO As string = "MPT_MEDIO_PAGO"
				public shared MPT_SERIE_MEDIO As string = "MPT_SERIE_MEDIO"
				public shared MPT_NUMERO_MEDIO As string = "MPT_NUMERO_MEDIO"
				public shared MPT_GIRADO_A As string = "MPT_GIRADO_A"
				public shared MPT_CONCEPTO As string = "MPT_CONCEPTO"
				public shared MPT_UBICACION As string = "MPT_UBICACION"
				public shared PER_ID_BAN As string = "PER_ID_BAN"
				public shared MPT_DIFERIDO As string = "MPT_DIFERIDO"
				public shared MPT_FECHA_DIFERIDO As string = "MPT_FECHA_DIFERIDO"
				public shared MPT_RECEPCION As string = "MPT_RECEPCION"
				public shared USU_ID As string = "USU_ID"
				public shared MPT_FEC_GRAB As string = "MPT_FEC_GRAB"
				public shared MPT_ESTADO As string = "MPT_ESTADO"
				public shared MPT_OPERACION_BANCARIA As string = "MPT_OPERACION_BANCARIA"
		    End Structure
	



    <DataMember()>
    Public Property TDO_ID() As String
        Get
            Return _tDO_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'TDO_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If TipoDocumentos IsNot Nothing AndAlso Not Equals(TipoDocumentos.TDO_ID, value) Then
                        TipoDocumentos = Nothing
                    End If
                    If DetalleTesoreria IsNot Nothing AndAlso Not Equals(DetalleTesoreria.TDO_ID, value) Then
                        DetalleTesoreria = Nothing
                    End If
                End If
                _tDO_ID = value
                OnPropertyChanged("TDO_ID")
            End If
        End Set
    End Property

    Private _tDO_ID As String

    <DataMember()>
    Public Property DTD_ID() As String
        Get
            Return _dTD_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DTD_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If DetalleTipoDocumentos IsNot Nothing AndAlso Not Equals(DetalleTipoDocumentos.DTD_ID, value) Then
                        DetalleTipoDocumentos = Nothing
                    End If
                    If DetalleTesoreria IsNot Nothing AndAlso Not Equals(DetalleTesoreria.DTD_ID, value) Then
                        DetalleTesoreria = Nothing
                    End If
                End If
                _dTD_ID = value
                OnPropertyChanged("DTD_ID")
            End If
        End Set
    End Property

    Private _dTD_ID As String

    <DataMember()>
    Public Property CCC_ID() As String
        Get
            Return _cCC_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCC_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'CCC_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If CajaCtaCte IsNot Nothing AndAlso Not Equals(CajaCtaCte.CCC_ID, value) Then
                        CajaCtaCte = Nothing
                    End If
                    If DetalleTesoreria IsNot Nothing AndAlso Not Equals(DetalleTesoreria.CCC_ID, value) Then
                        DetalleTesoreria = Nothing
                    End If
                End If
                _cCC_ID = value
                OnPropertyChanged("CCC_ID")
            End If
        End Set
    End Property

    Private _cCC_ID As String

    <DataMember()>
    Public Property MPT_SERIE() As String
        Get
            Return _mPT_SERIE
        End Get
        Set(ByVal value As String)
            If Not Equals(_mPT_SERIE, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'MPT_SERIE' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If DetalleTesoreria IsNot Nothing AndAlso Not Equals(DetalleTesoreria.DTE_SERIE, value) Then
                        DetalleTesoreria = Nothing
                    End If
                End If
                _mPT_SERIE = value
                OnPropertyChanged("MPT_SERIE")
            End If
        End Set
    End Property

    Private _mPT_SERIE As String

    <DataMember()>
    Public Property MPT_NUMERO() As String
        Get
            Return _mPT_NUMERO
        End Get
        Set(ByVal value As String)
            If Not Equals(_mPT_NUMERO, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'MPT_NUMERO' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If DetalleTesoreria IsNot Nothing AndAlso Not Equals(DetalleTesoreria.DTE_NUMERO, value) Then
                        DetalleTesoreria = Nothing
                    End If
                End If
                _mPT_NUMERO = value
                OnPropertyChanged("MPT_NUMERO")
            End If
        End Set
    End Property

    Private _mPT_NUMERO As String

    <DataMember()>
    Public Property MPT_ITEM() As Decimal
        Get
            Return _mPT_ITEM
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_mPT_ITEM, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'MPT_ITEM' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If DetalleTesoreria IsNot Nothing AndAlso Not Equals(DetalleTesoreria.DTE_ITEM, value) Then
                        DetalleTesoreria = Nothing
                    End If
                End If
                _mPT_ITEM = value
                OnPropertyChanged("MPT_ITEM")
            End If
        End Set
    End Property

    Private _mPT_ITEM As Decimal

    <DataMember()>
    Public Property MPT_IMPORTE_AFECTO() As Decimal
        Get
            Return _mPT_IMPORTE_AFECTO
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_mPT_IMPORTE_AFECTO, value) Then
                _mPT_IMPORTE_AFECTO = value
                OnPropertyChanged("MPT_IMPORTE_AFECTO")
            End If
        End Set
    End Property

    Private _mPT_IMPORTE_AFECTO As Decimal

    <DataMember()>
    Public Property MPT_PORCENTAJE() As Decimal
        Get
            Return _mPT_PORCENTAJE
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_mPT_PORCENTAJE, value) Then
                _mPT_PORCENTAJE = value
                OnPropertyChanged("MPT_PORCENTAJE")
            End If
        End Set
    End Property

    Private _mPT_PORCENTAJE As Decimal

    <DataMember()>
    Public Property CHE_ID() As String
        Get
            Return _cHE_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cHE_ID, value) Then
                ChangeTracker.RecordOriginalValue("CHE_ID", _cHE_ID)
                If Not IsDeserializing Then
                    If Cheques IsNot Nothing AndAlso Not Equals(Cheques.CHE_ID, value) Then
                        Cheques = Nothing
                    End If
                End If
                _cHE_ID = value
                OnPropertyChanged("CHE_ID")
            End If
        End Set
    End Property

    Private _cHE_ID As String

    <DataMember()>
    Public Property MPT_MEDIO_PAGO() As Short
        Get
            Return _mPT_MEDIO_PAGO
        End Get
        Set(ByVal value As Short)
            If Not Equals(_mPT_MEDIO_PAGO, value) Then
                _mPT_MEDIO_PAGO = value
                OnPropertyChanged("MPT_MEDIO_PAGO")
            End If
        End Set
    End Property

    Private _mPT_MEDIO_PAGO As Short

    <DataMember()>
    Public Property MPT_SERIE_MEDIO() As String
        Get
            Return _mPT_SERIE_MEDIO
        End Get
        Set(ByVal value As String)
            If Not Equals(_mPT_SERIE_MEDIO, value) Then
                _mPT_SERIE_MEDIO = value
                OnPropertyChanged("MPT_SERIE_MEDIO")
            End If
        End Set
    End Property

    Private _mPT_SERIE_MEDIO As String

    <DataMember()>
    Public Property MPT_NUMERO_MEDIO() As String
        Get
            Return _mPT_NUMERO_MEDIO
        End Get
        Set(ByVal value As String)
            If Not Equals(_mPT_NUMERO_MEDIO, value) Then
                _mPT_NUMERO_MEDIO = value
                OnPropertyChanged("MPT_NUMERO_MEDIO")
            End If
        End Set
    End Property

    Private _mPT_NUMERO_MEDIO As String

    <DataMember()>
    Public Property MPT_GIRADO_A() As String
        Get
            Return _mPT_GIRADO_A
        End Get
        Set(ByVal value As String)
            If Not Equals(_mPT_GIRADO_A, value) Then
                _mPT_GIRADO_A = value
                OnPropertyChanged("MPT_GIRADO_A")
            End If
        End Set
    End Property

    Private _mPT_GIRADO_A As String

    <DataMember()>
    Public Property MPT_CONCEPTO() As String
        Get
            Return _mPT_CONCEPTO
        End Get
        Set(ByVal value As String)
            If Not Equals(_mPT_CONCEPTO, value) Then
                _mPT_CONCEPTO = value
                OnPropertyChanged("MPT_CONCEPTO")
            End If
        End Set
    End Property

    Private _mPT_CONCEPTO As String

    <DataMember()>
    Public Property MPT_UBICACION() As Short
        Get
            Return _mPT_UBICACION
        End Get
        Set(ByVal value As Short)
            If Not Equals(_mPT_UBICACION, value) Then
                _mPT_UBICACION = value
                OnPropertyChanged("MPT_UBICACION")
            End If
        End Set
    End Property

    Private _mPT_UBICACION As Short

    <DataMember()>
    Public Property PER_ID_BAN() As String
        Get
            Return _pER_ID_BAN
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_BAN, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_BAN", _pER_ID_BAN)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID_BAN = value
                OnPropertyChanged("PER_ID_BAN")
            End If
        End Set
    End Property

    Private _pER_ID_BAN As String

    <DataMember()>
    Public Property MPT_DIFERIDO() As Nullable(Of Boolean)
        Get
            Return _mPT_DIFERIDO
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_mPT_DIFERIDO, value) Then
                _mPT_DIFERIDO = value
                OnPropertyChanged("MPT_DIFERIDO")
            End If
        End Set
    End Property

    Private _mPT_DIFERIDO As Nullable(Of Boolean)

    <DataMember()>
    Public Property MPT_FECHA_DIFERIDO() As Nullable(Of Date)
        Get
            Return _mPT_FECHA_DIFERIDO
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_mPT_FECHA_DIFERIDO, value) Then
                _mPT_FECHA_DIFERIDO = value
                OnPropertyChanged("MPT_FECHA_DIFERIDO")
            End If
        End Set
    End Property

    Private _mPT_FECHA_DIFERIDO As Nullable(Of Date)

    <DataMember()>
    Public Property MPT_RECEPCION() As Nullable(Of Short)
        Get
            Return _mPT_RECEPCION
        End Get
        Set(ByVal value As Nullable(Of Short))
            If Not Equals(_mPT_RECEPCION, value) Then
                _mPT_RECEPCION = value
                OnPropertyChanged("MPT_RECEPCION")
            End If
        End Set
    End Property

    Private _mPT_RECEPCION As Nullable(Of Short)

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property MPT_FEC_GRAB() As Date
        Get
            Return _mPT_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_mPT_FEC_GRAB, value) Then
                _mPT_FEC_GRAB = value
                OnPropertyChanged("MPT_FEC_GRAB")
            End If
        End Set
    End Property

    Private _mPT_FEC_GRAB As Date

    <DataMember()>
    Public Property MPT_ESTADO() As Boolean
        Get
            Return _mPT_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_mPT_ESTADO, value) Then
                _mPT_ESTADO = value
                OnPropertyChanged("MPT_ESTADO")
            End If
        End Set
    End Property

    Private _mPT_ESTADO As Boolean

    <DataMember()>
    Public Property MPT_OPERACION_BANCARIA() As String
        Get
            Return _mPT_OPERACION_BANCARIA
        End Get
        Set(ByVal value As String)
            If Not Equals(_mPT_OPERACION_BANCARIA, value) Then
                _mPT_OPERACION_BANCARIA = value
                OnPropertyChanged("MPT_OPERACION_BANCARIA")
            End If
        End Set
    End Property

    Private _mPT_OPERACION_BANCARIA As String

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property DetalleTipoDocumentos() As DetalleTipoDocumentos
        Get
            Return _detalleTipoDocumentos
        End Get
        Set(ByVal value As DetalleTipoDocumentos)
            If _detalleTipoDocumentos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(DTD_ID, value.DTD_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As DetalleTipoDocumentos = _detalleTipoDocumentos
                _detalleTipoDocumentos = value
                FixupDetalleTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("DetalleTipoDocumentos")
            End If
        End Set
    End Property

    Private _detalleTipoDocumentos As DetalleTipoDocumentos


    <DataMember()>
    Public Property TipoDocumentos() As TipoDocumentos
        Get
            Return _tipoDocumentos
        End Get
        Set(ByVal value As TipoDocumentos)
            If _tipoDocumentos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(TDO_ID, value.TDO_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As TipoDocumentos = _tipoDocumentos
                _tipoDocumentos = value
                FixupTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("TipoDocumentos")
            End If
        End Set
    End Property

    Private _tipoDocumentos As TipoDocumentos


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property CajaCtaCte() As CajaCtaCte
        Get
            Return _cajaCtaCte
        End Get
        Set(ByVal value As CajaCtaCte)
            If _cajaCtaCte IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(CCC_ID, value.CCC_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As CajaCtaCte = _cajaCtaCte
                _cajaCtaCte = value
                FixupCajaCtaCte(previousValue)
                OnNavigationPropertyChanged("CajaCtaCte")
            End If
        End Set
    End Property

    Private _cajaCtaCte As CajaCtaCte


    <DataMember()>
    Public Property Cheques() As Cheques
        Get
            Return _cheques
        End Get
        Set(ByVal value As Cheques)
            If _cheques IsNot value Then
                Dim previousValue As Cheques = _cheques
                _cheques = value
                FixupCheques(previousValue)
                OnNavigationPropertyChanged("Cheques")
            End If
        End Set
    End Property

    Private _cheques As Cheques


    <DataMember()>
    Public Property DetalleTesoreria() As DetalleTesoreria
        Get
            Return _detalleTesoreria
        End Get
        Set(ByVal value As DetalleTesoreria)
            If _detalleTesoreria IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(TDO_ID, value.TDO_ID) OrElse Not Equals(DTD_ID, value.DTD_ID) OrElse Not Equals(CCC_ID, value.CCC_ID) OrElse Not Equals(MPT_SERIE, value.DTE_SERIE) OrElse Not Equals(MPT_NUMERO, value.DTE_NUMERO) OrElse Not Equals(MPT_ITEM, value.DTE_ITEM) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As DetalleTesoreria = _detalleTesoreria
                _detalleTesoreria = value
                FixupDetalleTesoreria(previousValue)
                OnNavigationPropertyChanged("DetalleTesoreria")
            End If
        End Set
    End Property

    Private _detalleTesoreria As DetalleTesoreria


    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociaci칩n que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesar치 notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        DetalleTipoDocumentos = Nothing
        TipoDocumentos = Nothing
        Usuarios = Nothing
        CajaCtaCte = Nothing
        Cheques = Nothing
        DetalleTesoreria = Nothing
        Personas = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupDetalleTipoDocumentos(ByVal previousValue As DetalleTipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.MedioPagoTesoreria.Contains(Me) Then
            previousValue.MedioPagoTesoreria.Remove(Me)
        End If

        If DetalleTipoDocumentos IsNot Nothing Then
            If Not DetalleTipoDocumentos.MedioPagoTesoreria.Contains(Me) Then
                DetalleTipoDocumentos.MedioPagoTesoreria.Add(Me)
            End If

            DTD_ID = DetalleTipoDocumentos.DTD_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("DetalleTipoDocumentos") Is DetalleTipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("DetalleTipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTipoDocumentos", previousValue)
            End If
            If DetalleTipoDocumentos IsNot Nothing AndAlso Not DetalleTipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoDocumentos(ByVal previousValue As TipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.MedioPagoTesoreria.Contains(Me) Then
            previousValue.MedioPagoTesoreria.Remove(Me)
        End If

        If TipoDocumentos IsNot Nothing Then
            If Not TipoDocumentos.MedioPagoTesoreria.Contains(Me) Then
                TipoDocumentos.MedioPagoTesoreria.Add(Me)
            End If

            TDO_ID = TipoDocumentos.TDO_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("TipoDocumentos") Is TipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("TipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("TipoDocumentos", previousValue)
            End If
            If TipoDocumentos IsNot Nothing AndAlso Not TipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                TipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCajaCtaCte(ByVal previousValue As CajaCtaCte)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.MedioPagoTesoreria.Contains(Me) Then
            previousValue.MedioPagoTesoreria.Remove(Me)
        End If

        If CajaCtaCte IsNot Nothing Then
            If Not CajaCtaCte.MedioPagoTesoreria.Contains(Me) Then
                CajaCtaCte.MedioPagoTesoreria.Add(Me)
            End If

            CCC_ID = CajaCtaCte.CCC_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CajaCtaCte") AndAlso
                ChangeTracker.OriginalValues("CajaCtaCte") Is CajaCtaCte Then
                ChangeTracker.OriginalValues.Remove("CajaCtaCte")
            Else
                ChangeTracker.RecordOriginalValue("CajaCtaCte", previousValue)
            End If
            If CajaCtaCte IsNot Nothing AndAlso Not CajaCtaCte.ChangeTracker.ChangeTrackingEnabled Then
                CajaCtaCte.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCheques(ByVal previousValue As Cheques, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.MedioPagoTesoreria.Contains(Me) Then
            previousValue.MedioPagoTesoreria.Remove(Me)
        End If

        If Cheques IsNot Nothing Then
            If Not Cheques.MedioPagoTesoreria.Contains(Me) Then
                Cheques.MedioPagoTesoreria.Add(Me)
            End If

            CHE_ID = Cheques.CHE_ID
        ElseIf Not skipKeys Then
            CHE_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Cheques") AndAlso
                ChangeTracker.OriginalValues("Cheques") Is Cheques Then
                ChangeTracker.OriginalValues.Remove("Cheques")
            Else
                ChangeTracker.RecordOriginalValue("Cheques", previousValue)
            End If
            If Cheques IsNot Nothing AndAlso Not Cheques.ChangeTracker.ChangeTrackingEnabled Then
                Cheques.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleTesoreria(ByVal previousValue As DetalleTesoreria)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso ReferenceEquals(previousValue.MedioPagoTesoreria, Me) Then
            previousValue.MedioPagoTesoreria = Nothing
        End If

        If DetalleTesoreria IsNot Nothing Then
            DetalleTesoreria.MedioPagoTesoreria = Me
            TDO_ID = DetalleTesoreria.TDO_ID
            DTD_ID = DetalleTesoreria.DTD_ID
            CCC_ID = DetalleTesoreria.CCC_ID
            MPT_SERIE = DetalleTesoreria.DTE_SERIE
            MPT_NUMERO = DetalleTesoreria.DTE_NUMERO
            MPT_ITEM = DetalleTesoreria.DTE_ITEM
        End If

        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTesoreria") AndAlso
                ChangeTracker.OriginalValues("DetalleTesoreria") Is DetalleTesoreria Then
                ChangeTracker.OriginalValues.Remove("DetalleTesoreria")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTesoreria", previousValue)
            End If
            If DetalleTesoreria IsNot Nothing AndAlso Not DetalleTesoreria.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTesoreria.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.MedioPagoTesoreria.Contains(Me) Then
            previousValue.MedioPagoTesoreria.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.MedioPagoTesoreria.Contains(Me) Then
                Personas.MedioPagoTesoreria.Add(Me)
            End If

            PER_ID_BAN = Personas.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_BAN = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
