'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(FletesTransporte))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(Distrito))>
Partial Public Class DetalleFletesTransporte
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared FLE_ID As string = "FLE_ID"
				public shared DIS_ID As string = "DIS_ID"
				public shared USU_ID As string = "USU_ID"
				public shared FDE_FEC_GRAB As string = "FDE_FEC_GRAB"
				public shared FDE_ESTADO As string = "FDE_ESTADO"
				public shared FDE_ID As string = "FDE_ID"
				public shared FDE_DESCRIPCION As string = "FDE_DESCRIPCION"
		    End Structure
	



    <DataMember()>
    Public Property FLE_ID() As String
        Get
            Return _fLE_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_fLE_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'FLE_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If FletesTransporte IsNot Nothing AndAlso Not Equals(FletesTransporte.FLE_ID, value) Then
                        FletesTransporte = Nothing
                    End If
                End If
                _fLE_ID = value
                OnPropertyChanged("FLE_ID")
            End If
        End Set
    End Property

    Private _fLE_ID As String

    <DataMember()>
    Public Property DIS_ID() As String
        Get
            Return _dIS_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_dIS_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DIS_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If Distrito IsNot Nothing AndAlso Not Equals(Distrito.DIS_ID, value) Then
                        Distrito = Nothing
                    End If
                End If
                _dIS_ID = value
                OnPropertyChanged("DIS_ID")
            End If
        End Set
    End Property

    Private _dIS_ID As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property FDE_FEC_GRAB() As Date
        Get
            Return _fDE_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_fDE_FEC_GRAB, value) Then
                _fDE_FEC_GRAB = value
                OnPropertyChanged("FDE_FEC_GRAB")
            End If
        End Set
    End Property

    Private _fDE_FEC_GRAB As Date

    <DataMember()>
    Public Property FDE_ESTADO() As Boolean
        Get
            Return _fDE_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_fDE_ESTADO, value) Then
                _fDE_ESTADO = value
                OnPropertyChanged("FDE_ESTADO")
            End If
        End Set
    End Property

    Private _fDE_ESTADO As Boolean

    <DataMember()>
    Public Property FDE_ID() As String
        Get
            Return _fDE_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_fDE_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'FDE_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _fDE_ID = value
                OnPropertyChanged("FDE_ID")
            End If
        End Set
    End Property

    Private _fDE_ID As String

    <DataMember()>
    Public Property FDE_DESCRIPCION() As String
        Get
            Return _fDE_DESCRIPCION
        End Get
        Set(ByVal value As String)
            If Not Equals(_fDE_DESCRIPCION, value) Then
                _fDE_DESCRIPCION = value
                OnPropertyChanged("FDE_DESCRIPCION")
            End If
        End Set
    End Property

    Private _fDE_DESCRIPCION As String

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property FletesTransporte() As FletesTransporte
        Get
            Return _fletesTransporte
        End Get
        Set(ByVal value As FletesTransporte)
            If _fletesTransporte IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(FLE_ID, value.FLE_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As FletesTransporte = _fletesTransporte
                _fletesTransporte = value
                FixupFletesTransporte(previousValue)
                OnNavigationPropertyChanged("FletesTransporte")
            End If
        End Set
    End Property

    Private _fletesTransporte As FletesTransporte


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property Distrito() As Distrito
        Get
            Return _distrito
        End Get
        Set(ByVal value As Distrito)
            If _distrito IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(DIS_ID, value.DIS_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As Distrito = _distrito
                _distrito = value
                FixupDistrito(previousValue)
                OnNavigationPropertyChanged("Distrito")
            End If
        End Set
    End Property

    Private _distrito As Distrito


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociación que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesará notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        FletesTransporte = Nothing
        Usuarios = Nothing
        Distrito = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupFletesTransporte(ByVal previousValue As FletesTransporte)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleFletesTransporte.Contains(Me) Then
            previousValue.DetalleFletesTransporte.Remove(Me)
        End If

        If FletesTransporte IsNot Nothing Then
            If Not FletesTransporte.DetalleFletesTransporte.Contains(Me) Then
                FletesTransporte.DetalleFletesTransporte.Add(Me)
            End If

            FLE_ID = FletesTransporte.FLE_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("FletesTransporte") AndAlso
                ChangeTracker.OriginalValues("FletesTransporte") Is FletesTransporte Then
                ChangeTracker.OriginalValues.Remove("FletesTransporte")
            Else
                ChangeTracker.RecordOriginalValue("FletesTransporte", previousValue)
            End If
            If FletesTransporte IsNot Nothing AndAlso Not FletesTransporte.ChangeTracker.ChangeTrackingEnabled Then
                FletesTransporte.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDistrito(ByVal previousValue As Distrito)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleFletesTransporte.Contains(Me) Then
            previousValue.DetalleFletesTransporte.Remove(Me)
        End If

        If Distrito IsNot Nothing Then
            If Not Distrito.DetalleFletesTransporte.Contains(Me) Then
                Distrito.DetalleFletesTransporte.Add(Me)
            End If

            DIS_ID = Distrito.DIS_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Distrito") AndAlso
                ChangeTracker.OriginalValues("Distrito") Is Distrito Then
                ChangeTracker.OriginalValues.Remove("Distrito")
            Else
                ChangeTracker.RecordOriginalValue("Distrito", previousValue)
            End If
            If Distrito IsNot Nothing AndAlso Not Distrito.ChangeTracker.ChangeTrackingEnabled Then
                Distrito.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
