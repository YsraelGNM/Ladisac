'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Moneda))>
<KnownType(GetType(TipoDocumentos))>
Partial Public Class DetalleComprobantes
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared cct_Id As string = "cct_Id"
				public shared cob_Serie As string = "cob_Serie"
				public shared cob_Numero As string = "cob_Numero"
				public shared dtd_Id As string = "dtd_Id"
				public shared tdo_Id As string = "tdo_Id"
				public shared dco_Item As string = "dco_Item"
				public shared tdo_IdRef As string = "tdo_IdRef"
				public shared dtd_IdRef As string = "dtd_IdRef"
				public shared dco_SerieRef As string = "dco_SerieRef"
				public shared dco_NumeroRef As string = "dco_NumeroRef"
				public shared dco_Importe As string = "dco_Importe"
				public shared dco_ContraValor As string = "dco_ContraValor"
				public shared per_IdRef As string = "per_IdRef"
				public shared Usu_Id As string = "Usu_Id"
				public shared dco_FecGrab As string = "dco_FecGrab"
				public shared mon_Id As string = "mon_Id"
				public shared dco_PencionJubilacion As string = "dco_PencionJubilacion"
				public shared dco_importePrima As string = "dco_importePrima"
				public shared dco_ImporteComision As string = "dco_ImporteComision"
		    End Structure
	



    <DataMember()>
    Public Property cct_Id() As String
        Get
            Return _cct_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_cct_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'cct_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _cct_Id = value
                OnPropertyChanged("cct_Id")
            End If
        End Set
    End Property

    Private _cct_Id As String

    <DataMember()>
    Public Property cob_Serie() As String
        Get
            Return _cob_Serie
        End Get
        Set(ByVal value As String)
            If Not Equals(_cob_Serie, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'cob_Serie' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _cob_Serie = value
                OnPropertyChanged("cob_Serie")
            End If
        End Set
    End Property

    Private _cob_Serie As String

    <DataMember()>
    Public Property cob_Numero() As String
        Get
            Return _cob_Numero
        End Get
        Set(ByVal value As String)
            If Not Equals(_cob_Numero, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'cob_Numero' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _cob_Numero = value
                OnPropertyChanged("cob_Numero")
            End If
        End Set
    End Property

    Private _cob_Numero As String

    <DataMember()>
    Public Property dtd_Id() As String
        Get
            Return _dtd_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_dtd_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'dtd_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _dtd_Id = value
                OnPropertyChanged("dtd_Id")
            End If
        End Set
    End Property

    Private _dtd_Id As String

    <DataMember()>
    Public Property tdo_Id() As String
        Get
            Return _tdo_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tdo_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'tdo_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If TipoDocumentos IsNot Nothing AndAlso Not Equals(TipoDocumentos.TDO_ID, value) Then
                        TipoDocumentos = Nothing
                    End If
                End If
                _tdo_Id = value
                OnPropertyChanged("tdo_Id")
            End If
        End Set
    End Property

    Private _tdo_Id As String

    <DataMember()>
    Public Property dco_Item() As String
        Get
            Return _dco_Item
        End Get
        Set(ByVal value As String)
            If Not Equals(_dco_Item, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'dco_Item' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _dco_Item = value
                OnPropertyChanged("dco_Item")
            End If
        End Set
    End Property

    Private _dco_Item As String

    <DataMember()>
    Public Property tdo_IdRef() As String
        Get
            Return _tdo_IdRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_tdo_IdRef, value) Then
                _tdo_IdRef = value
                OnPropertyChanged("tdo_IdRef")
            End If
        End Set
    End Property

    Private _tdo_IdRef As String

    <DataMember()>
    Public Property dtd_IdRef() As String
        Get
            Return _dtd_IdRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_dtd_IdRef, value) Then
                _dtd_IdRef = value
                OnPropertyChanged("dtd_IdRef")
            End If
        End Set
    End Property

    Private _dtd_IdRef As String

    <DataMember()>
    Public Property dco_SerieRef() As String
        Get
            Return _dco_SerieRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_dco_SerieRef, value) Then
                _dco_SerieRef = value
                OnPropertyChanged("dco_SerieRef")
            End If
        End Set
    End Property

    Private _dco_SerieRef As String

    <DataMember()>
    Public Property dco_NumeroRef() As String
        Get
            Return _dco_NumeroRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_dco_NumeroRef, value) Then
                _dco_NumeroRef = value
                OnPropertyChanged("dco_NumeroRef")
            End If
        End Set
    End Property

    Private _dco_NumeroRef As String

    <DataMember()>
    Public Property dco_Importe() As Nullable(Of Decimal)
        Get
            Return _dco_Importe
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dco_Importe, value) Then
                _dco_Importe = value
                OnPropertyChanged("dco_Importe")
            End If
        End Set
    End Property

    Private _dco_Importe As Nullable(Of Decimal)

    <DataMember()>
    Public Property dco_ContraValor() As Nullable(Of Decimal)
        Get
            Return _dco_ContraValor
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dco_ContraValor, value) Then
                _dco_ContraValor = value
                OnPropertyChanged("dco_ContraValor")
            End If
        End Set
    End Property

    Private _dco_ContraValor As Nullable(Of Decimal)

    <DataMember()>
    Public Property per_IdRef() As String
        Get
            Return _per_IdRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_per_IdRef, value) Then
                _per_IdRef = value
                OnPropertyChanged("per_IdRef")
            End If
        End Set
    End Property

    Private _per_IdRef As String

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property dco_FecGrab() As Nullable(Of Date)
        Get
            Return _dco_FecGrab
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_dco_FecGrab, value) Then
                _dco_FecGrab = value
                OnPropertyChanged("dco_FecGrab")
            End If
        End Set
    End Property

    Private _dco_FecGrab As Nullable(Of Date)

    <DataMember()>
    Public Property mon_Id() As String
        Get
            Return _mon_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_mon_Id, value) Then
                ChangeTracker.RecordOriginalValue("mon_Id", _mon_Id)
                If Not IsDeserializing Then
                    If Moneda IsNot Nothing AndAlso Not Equals(Moneda.MON_ID, value) Then
                        Moneda = Nothing
                    End If
                End If
                _mon_Id = value
                OnPropertyChanged("mon_Id")
            End If
        End Set
    End Property

    Private _mon_Id As String

    <DataMember()>
    Public Property dco_PencionJubilacion() As Nullable(Of Decimal)
        Get
            Return _dco_PencionJubilacion
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dco_PencionJubilacion, value) Then
                _dco_PencionJubilacion = value
                OnPropertyChanged("dco_PencionJubilacion")
            End If
        End Set
    End Property

    Private _dco_PencionJubilacion As Nullable(Of Decimal)

    <DataMember()>
    Public Property dco_importePrima() As Nullable(Of Decimal)
        Get
            Return _dco_importePrima
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dco_importePrima, value) Then
                _dco_importePrima = value
                OnPropertyChanged("dco_importePrima")
            End If
        End Set
    End Property

    Private _dco_importePrima As Nullable(Of Decimal)

    <DataMember()>
    Public Property dco_ImporteComision() As Nullable(Of Decimal)
        Get
            Return _dco_ImporteComision
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dco_ImporteComision, value) Then
                _dco_ImporteComision = value
                OnPropertyChanged("dco_ImporteComision")
            End If
        End Set
    End Property

    Private _dco_ImporteComision As Nullable(Of Decimal)

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property Moneda() As Moneda
        Get
            Return _moneda
        End Get
        Set(ByVal value As Moneda)
            If _moneda IsNot value Then
                Dim previousValue As Moneda = _moneda
                _moneda = value
                FixupMoneda(previousValue)
                OnNavigationPropertyChanged("Moneda")
            End If
        End Set
    End Property

    Private _moneda As Moneda


    <DataMember()>
    Public Property TipoDocumentos() As TipoDocumentos
        Get
            Return _tipoDocumentos
        End Get
        Set(ByVal value As TipoDocumentos)
            If _tipoDocumentos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(tdo_Id, value.TDO_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As TipoDocumentos = _tipoDocumentos
                _tipoDocumentos = value
                FixupTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("TipoDocumentos")
            End If
        End Set
    End Property

    Private _tipoDocumentos As TipoDocumentos


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociaci칩n que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesar치 notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Moneda = Nothing
        TipoDocumentos = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupMoneda(ByVal previousValue As Moneda, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Moneda IsNot Nothing Then
            mon_Id = Moneda.MON_ID
        ElseIf Not skipKeys Then
            mon_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Moneda") AndAlso
                ChangeTracker.OriginalValues("Moneda") Is Moneda Then
                ChangeTracker.OriginalValues.Remove("Moneda")
            Else
                ChangeTracker.RecordOriginalValue("Moneda", previousValue)
            End If
            If Moneda IsNot Nothing AndAlso Not Moneda.ChangeTracker.ChangeTrackingEnabled Then
                Moneda.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoDocumentos(ByVal previousValue As TipoDocumentos)
        ' Este es el extremo dependiente en una asociaci칩n que realiza eliminaciones en cascada.
        ' Actualizar la escucha de eventos del extremo principal para que se refiera al nuevo extremo dependiente.
        ' Esta es una relaci칩n unidireccional desde el extremo dependiente al extremo principal por lo que el extremo dependiente es
        ' responsable de administrar el controlador de eventos de eliminaci칩n en cascada. En el resto de los casos, ser치 el extremo principal el que lo administrar치.
        If previousValue IsNot Nothing Then
            RemoveHandler previousValue.ChangeTracker.ObjectStateChanging, AddressOf HandleCascadeDelete
        End If

        If TipoDocumentos IsNot Nothing Then
            AddHandler TipoDocumentos.ChangeTracker.ObjectStateChanging, AddressOf HandleCascadeDelete
        End If

        If IsDeserializing Then
            Return
        End If

        If TipoDocumentos IsNot Nothing Then
            tdo_Id = TipoDocumentos.TDO_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("TipoDocumentos") Is TipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("TipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("TipoDocumentos", previousValue)
                ' Este es el extremo dependiente de una asociaci칩n de identificaci칩n, por lo que se debe eliminar cuando la relaci칩n se
                ' elimine. Si el estado actual es agregado, la relaci칩n se puede modificar sin eliminar el extremo dependiente.
                ' Esta es una relaci칩n unidireccional desde el extremo dependiente al extremo principal por lo que el extremo dependiente es
                ' responsable de administrar en cascada la eliminaci칩n. En el resto de los casos, ser치 el extremo principal el que lo administre.
                If previousValue IsNot Nothing AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Me.MarkAsDeleted()
                End If
            End If
            If TipoDocumentos IsNot Nothing AndAlso Not TipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                TipoDocumentos.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
