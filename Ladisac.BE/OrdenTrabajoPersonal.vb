'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Personas))>
Partial Public Class OrdenTrabajoPersonal
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared OTP_ID As string = "OTP_ID"
				public shared OTR_ID As string = "OTR_ID"
				public shared PER_ID_OPERADOR As string = "PER_ID_OPERADOR"
				public shared OTP_HORA_NORMAL As string = "OTP_HORA_NORMAL"
				public shared OTP_HORA_EXTRA As string = "OTP_HORA_EXTRA"
				public shared OTP_HORA_ESPECIAL As string = "OTP_HORA_ESPECIAL"
				public shared OTP_FECHA As string = "OTP_FECHA"
		    End Structure
	



    <DataMember()>
    Public Property OTP_ID() As Integer
        Get
            Return _oTP_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_oTP_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'OTP_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _oTP_ID = value
                OnPropertyChanged("OTP_ID")
            End If
        End Set
    End Property

    Private _oTP_ID As Integer

    <DataMember()>
    Public Property OTR_ID() As Nullable(Of Integer)
        Get
            Return _oTR_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_oTR_ID, value) Then
                ChangeTracker.RecordOriginalValue("OTR_ID", _oTR_ID)
                _oTR_ID = value
                OnPropertyChanged("OTR_ID")
            End If
        End Set
    End Property

    Private _oTR_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property PER_ID_OPERADOR() As String
        Get
            Return _pER_ID_OPERADOR
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_OPERADOR, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_OPERADOR", _pER_ID_OPERADOR)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID_OPERADOR = value
                OnPropertyChanged("PER_ID_OPERADOR")
            End If
        End Set
    End Property

    Private _pER_ID_OPERADOR As String

    <DataMember()>
    Public Property OTP_HORA_NORMAL() As Nullable(Of Decimal)
        Get
            Return _oTP_HORA_NORMAL
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_oTP_HORA_NORMAL, value) Then
                _oTP_HORA_NORMAL = value
                OnPropertyChanged("OTP_HORA_NORMAL")
            End If
        End Set
    End Property

    Private _oTP_HORA_NORMAL As Nullable(Of Decimal)

    <DataMember()>
    Public Property OTP_HORA_EXTRA() As Nullable(Of Decimal)
        Get
            Return _oTP_HORA_EXTRA
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_oTP_HORA_EXTRA, value) Then
                _oTP_HORA_EXTRA = value
                OnPropertyChanged("OTP_HORA_EXTRA")
            End If
        End Set
    End Property

    Private _oTP_HORA_EXTRA As Nullable(Of Decimal)

    <DataMember()>
    Public Property OTP_HORA_ESPECIAL() As Nullable(Of Decimal)
        Get
            Return _oTP_HORA_ESPECIAL
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_oTP_HORA_ESPECIAL, value) Then
                _oTP_HORA_ESPECIAL = value
                OnPropertyChanged("OTP_HORA_ESPECIAL")
            End If
        End Set
    End Property

    Private _oTP_HORA_ESPECIAL As Nullable(Of Decimal)

    <DataMember()>
    Public Property OTP_FECHA() As Nullable(Of Date)
        Get
            Return _oTP_FECHA
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_oTP_FECHA, value) Then
                _oTP_FECHA = value
                OnPropertyChanged("OTP_FECHA")
            End If
        End Set
    End Property

    Private _oTP_FECHA As Nullable(Of Date)

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Personas = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Personas IsNot Nothing Then
            PER_ID_OPERADOR = Personas.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_OPERADOR = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
