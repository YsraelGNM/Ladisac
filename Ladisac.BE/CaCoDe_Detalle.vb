'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(ControlCarga))>
<KnownType(GetType(ControlDescarga))>
<KnownType(GetType(ControlQuema))>
<KnownType(GetType(LadrilloMalecon))>
Partial Public Class CaCoDe_Detalle
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared CCD_ID As string = "CCD_ID"
				public shared CAR_ID As string = "CAR_ID"
				public shared COQ_ID As string = "COQ_ID"
				public shared DES_ID As string = "DES_ID"
				public shared LMA_ID As string = "LMA_ID"
				public shared CCD_NRO_MALE As string = "CCD_NRO_MALE"
				public shared CCD_FECHA As string = "CCD_FECHA"
				public shared CCD_TIPO As string = "CCD_TIPO"
				public shared CCD_ESTADO As string = "CCD_ESTADO"
				public shared CCD_CANTIDAD As string = "CCD_CANTIDAD"
				public shared HOR_ID As string = "HOR_ID"
				public shared PUE_ID As string = "PUE_ID"
				public shared CCD_HORNO As string = "CCD_HORNO"
				public shared CCD_PUERTA As string = "CCD_PUERTA"
				public shared CCD_HI As string = "CCD_HI"
				public shared CCD_HF As string = "CCD_HF"
				public shared ENO_ID_ORIDES As string = "ENO_ID_ORIDES"
				public shared CCD_ORIGEN_DESTINO As string = "CCD_ORIGEN_DESTINO"
				public shared UNT_ID As string = "UNT_ID"
				public shared PER_ID_EMPRESA As string = "PER_ID_EMPRESA"
		    End Structure
	



    <DataMember()>
    Public Property CCD_ID() As Integer
        Get
            Return _cCD_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_cCD_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'CCD_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _cCD_ID = value
                OnPropertyChanged("CCD_ID")
            End If
        End Set
    End Property

    Private _cCD_ID As Integer

    <DataMember()>
    Public Property CAR_ID() As Nullable(Of Integer)
        Get
            Return _cAR_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_cAR_ID, value) Then
                ChangeTracker.RecordOriginalValue("CAR_ID", _cAR_ID)
                If Not IsDeserializing Then
                    If ControlCarga IsNot Nothing AndAlso Not Equals(ControlCarga.CAR_ID, value) Then
                        ControlCarga = Nothing
                    End If
                End If
                _cAR_ID = value
                OnPropertyChanged("CAR_ID")
            End If
        End Set
    End Property

    Private _cAR_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property COQ_ID() As Nullable(Of Integer)
        Get
            Return _cOQ_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_cOQ_ID, value) Then
                ChangeTracker.RecordOriginalValue("COQ_ID", _cOQ_ID)
                If Not IsDeserializing Then
                    If ControlQuema IsNot Nothing AndAlso Not Equals(ControlQuema.COQ_ID, value) Then
                        ControlQuema = Nothing
                    End If
                End If
                _cOQ_ID = value
                OnPropertyChanged("COQ_ID")
            End If
        End Set
    End Property

    Private _cOQ_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property DES_ID() As Nullable(Of Integer)
        Get
            Return _dES_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_dES_ID, value) Then
                ChangeTracker.RecordOriginalValue("DES_ID", _dES_ID)
                If Not IsDeserializing Then
                    If ControlDescarga IsNot Nothing AndAlso Not Equals(ControlDescarga.DES_ID, value) Then
                        ControlDescarga = Nothing
                    End If
                End If
                _dES_ID = value
                OnPropertyChanged("DES_ID")
            End If
        End Set
    End Property

    Private _dES_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property LMA_ID() As Nullable(Of Integer)
        Get
            Return _lMA_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_lMA_ID, value) Then
                ChangeTracker.RecordOriginalValue("LMA_ID", _lMA_ID)
                If Not IsDeserializing Then
                    If LadrilloMalecon IsNot Nothing AndAlso Not Equals(LadrilloMalecon.LMA_ID, value) Then
                        LadrilloMalecon = Nothing
                    End If
                End If
                _lMA_ID = value
                OnPropertyChanged("LMA_ID")
            End If
        End Set
    End Property

    Private _lMA_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property CCD_NRO_MALE() As String
        Get
            Return _cCD_NRO_MALE
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCD_NRO_MALE, value) Then
                _cCD_NRO_MALE = value
                OnPropertyChanged("CCD_NRO_MALE")
            End If
        End Set
    End Property

    Private _cCD_NRO_MALE As String

    <DataMember()>
    Public Property CCD_FECHA() As Nullable(Of Date)
        Get
            Return _cCD_FECHA
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_cCD_FECHA, value) Then
                _cCD_FECHA = value
                OnPropertyChanged("CCD_FECHA")
            End If
        End Set
    End Property

    Private _cCD_FECHA As Nullable(Of Date)

    <DataMember()>
    Public Property CCD_TIPO() As String
        Get
            Return _cCD_TIPO
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCD_TIPO, value) Then
                _cCD_TIPO = value
                OnPropertyChanged("CCD_TIPO")
            End If
        End Set
    End Property

    Private _cCD_TIPO As String

    <DataMember()>
    Public Property CCD_ESTADO() As String
        Get
            Return _cCD_ESTADO
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCD_ESTADO, value) Then
                _cCD_ESTADO = value
                OnPropertyChanged("CCD_ESTADO")
            End If
        End Set
    End Property

    Private _cCD_ESTADO As String

    <DataMember()>
    Public Property CCD_CANTIDAD() As Nullable(Of Integer)
        Get
            Return _cCD_CANTIDAD
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_cCD_CANTIDAD, value) Then
                _cCD_CANTIDAD = value
                OnPropertyChanged("CCD_CANTIDAD")
            End If
        End Set
    End Property

    Private _cCD_CANTIDAD As Nullable(Of Integer)

    <DataMember()>
    Public Property HOR_ID() As Nullable(Of Integer)
        Get
            Return _hOR_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_hOR_ID, value) Then
                _hOR_ID = value
                OnPropertyChanged("HOR_ID")
            End If
        End Set
    End Property

    Private _hOR_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property PUE_ID() As Nullable(Of Integer)
        Get
            Return _pUE_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_pUE_ID, value) Then
                _pUE_ID = value
                OnPropertyChanged("PUE_ID")
            End If
        End Set
    End Property

    Private _pUE_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property CCD_HORNO() As String
        Get
            Return _cCD_HORNO
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCD_HORNO, value) Then
                _cCD_HORNO = value
                OnPropertyChanged("CCD_HORNO")
            End If
        End Set
    End Property

    Private _cCD_HORNO As String

    <DataMember()>
    Public Property CCD_PUERTA() As String
        Get
            Return _cCD_PUERTA
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCD_PUERTA, value) Then
                _cCD_PUERTA = value
                OnPropertyChanged("CCD_PUERTA")
            End If
        End Set
    End Property

    Private _cCD_PUERTA As String

    <DataMember()>
    Public Property CCD_HI() As Nullable(Of Decimal)
        Get
            Return _cCD_HI
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_cCD_HI, value) Then
                _cCD_HI = value
                OnPropertyChanged("CCD_HI")
            End If
        End Set
    End Property

    Private _cCD_HI As Nullable(Of Decimal)

    <DataMember()>
    Public Property CCD_HF() As Nullable(Of Decimal)
        Get
            Return _cCD_HF
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_cCD_HF, value) Then
                _cCD_HF = value
                OnPropertyChanged("CCD_HF")
            End If
        End Set
    End Property

    Private _cCD_HF As Nullable(Of Decimal)

    <DataMember()>
    Public Property ENO_ID_ORIDES() As Nullable(Of Integer)
        Get
            Return _eNO_ID_ORIDES
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_eNO_ID_ORIDES, value) Then
                _eNO_ID_ORIDES = value
                OnPropertyChanged("ENO_ID_ORIDES")
            End If
        End Set
    End Property

    Private _eNO_ID_ORIDES As Nullable(Of Integer)

    <DataMember()>
    Public Property CCD_ORIGEN_DESTINO() As String
        Get
            Return _cCD_ORIGEN_DESTINO
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCD_ORIGEN_DESTINO, value) Then
                _cCD_ORIGEN_DESTINO = value
                OnPropertyChanged("CCD_ORIGEN_DESTINO")
            End If
        End Set
    End Property

    Private _cCD_ORIGEN_DESTINO As String

    <DataMember()>
    Public Property UNT_ID() As String
        Get
            Return _uNT_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uNT_ID, value) Then
                _uNT_ID = value
                OnPropertyChanged("UNT_ID")
            End If
        End Set
    End Property

    Private _uNT_ID As String

    <DataMember()>
    Public Property PER_ID_EMPRESA() As String
        Get
            Return _pER_ID_EMPRESA
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_EMPRESA, value) Then
                _pER_ID_EMPRESA = value
                OnPropertyChanged("PER_ID_EMPRESA")
            End If
        End Set
    End Property

    Private _pER_ID_EMPRESA As String

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property ControlCarga() As ControlCarga
        Get
            Return _controlCarga
        End Get
        Set(ByVal value As ControlCarga)
            If _controlCarga IsNot value Then
                Dim previousValue As ControlCarga = _controlCarga
                _controlCarga = value
                FixupControlCarga(previousValue)
                OnNavigationPropertyChanged("ControlCarga")
            End If
        End Set
    End Property

    Private _controlCarga As ControlCarga


    <DataMember()>
    Public Property ControlDescarga() As ControlDescarga
        Get
            Return _controlDescarga
        End Get
        Set(ByVal value As ControlDescarga)
            If _controlDescarga IsNot value Then
                Dim previousValue As ControlDescarga = _controlDescarga
                _controlDescarga = value
                FixupControlDescarga(previousValue)
                OnNavigationPropertyChanged("ControlDescarga")
            End If
        End Set
    End Property

    Private _controlDescarga As ControlDescarga


    <DataMember()>
    Public Property ControlQuema() As ControlQuema
        Get
            Return _controlQuema
        End Get
        Set(ByVal value As ControlQuema)
            If _controlQuema IsNot value Then
                Dim previousValue As ControlQuema = _controlQuema
                _controlQuema = value
                FixupControlQuema(previousValue)
                OnNavigationPropertyChanged("ControlQuema")
            End If
        End Set
    End Property

    Private _controlQuema As ControlQuema


    <DataMember()>
    Public Property LadrilloMalecon() As LadrilloMalecon
        Get
            Return _ladrilloMalecon
        End Get
        Set(ByVal value As LadrilloMalecon)
            If _ladrilloMalecon IsNot value Then
                Dim previousValue As LadrilloMalecon = _ladrilloMalecon
                _ladrilloMalecon = value
                FixupLadrilloMalecon(previousValue)
                OnNavigationPropertyChanged("LadrilloMalecon")
            End If
        End Set
    End Property

    Private _ladrilloMalecon As LadrilloMalecon


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        ControlCarga = Nothing
        ControlDescarga = Nothing
        ControlQuema = Nothing
        LadrilloMalecon = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupControlCarga(ByVal previousValue As ControlCarga, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If ControlCarga IsNot Nothing Then
            CAR_ID = ControlCarga.CAR_ID
        ElseIf Not skipKeys Then
            CAR_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("ControlCarga") AndAlso
                ChangeTracker.OriginalValues("ControlCarga") Is ControlCarga Then
                ChangeTracker.OriginalValues.Remove("ControlCarga")
            Else
                ChangeTracker.RecordOriginalValue("ControlCarga", previousValue)
            End If
            If ControlCarga IsNot Nothing AndAlso Not ControlCarga.ChangeTracker.ChangeTrackingEnabled Then
                ControlCarga.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupControlDescarga(ByVal previousValue As ControlDescarga, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If ControlDescarga IsNot Nothing Then
            DES_ID = ControlDescarga.DES_ID
        ElseIf Not skipKeys Then
            DES_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("ControlDescarga") AndAlso
                ChangeTracker.OriginalValues("ControlDescarga") Is ControlDescarga Then
                ChangeTracker.OriginalValues.Remove("ControlDescarga")
            Else
                ChangeTracker.RecordOriginalValue("ControlDescarga", previousValue)
            End If
            If ControlDescarga IsNot Nothing AndAlso Not ControlDescarga.ChangeTracker.ChangeTrackingEnabled Then
                ControlDescarga.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupControlQuema(ByVal previousValue As ControlQuema, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If ControlQuema IsNot Nothing Then
            COQ_ID = ControlQuema.COQ_ID
        ElseIf Not skipKeys Then
            COQ_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("ControlQuema") AndAlso
                ChangeTracker.OriginalValues("ControlQuema") Is ControlQuema Then
                ChangeTracker.OriginalValues.Remove("ControlQuema")
            Else
                ChangeTracker.RecordOriginalValue("ControlQuema", previousValue)
            End If
            If ControlQuema IsNot Nothing AndAlso Not ControlQuema.ChangeTracker.ChangeTrackingEnabled Then
                ControlQuema.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupLadrilloMalecon(ByVal previousValue As LadrilloMalecon, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If LadrilloMalecon IsNot Nothing Then
            LMA_ID = LadrilloMalecon.LMA_ID
        ElseIf Not skipKeys Then
            LMA_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("LadrilloMalecon") AndAlso
                ChangeTracker.OriginalValues("LadrilloMalecon") Is LadrilloMalecon Then
                ChangeTracker.OriginalValues.Remove("LadrilloMalecon")
            Else
                ChangeTracker.RecordOriginalValue("LadrilloMalecon", previousValue)
            End If
            If LadrilloMalecon IsNot Nothing AndAlso Not LadrilloMalecon.ChangeTracker.ChangeTrackingEnabled Then
                LadrilloMalecon.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
