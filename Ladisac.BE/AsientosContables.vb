'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Periodo))>
<KnownType(GetType(LibrosContables))>
<KnownType(GetType(CuentasContables))>
<KnownType(GetType(Personas))>
<KnownType(GetType(Usuarios))>
Partial Public Class AsientosContables
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared prd_Periodo_id As string = "prd_Periodo_id"
				public shared lib_Id As string = "lib_Id"
				public shared mon_Id As string = "mon_Id"
				public shared asi_Cargo As string = "asi_Cargo"
				public shared asi_Abono As string = "asi_Abono"
				public shared asi_Voucher As string = "asi_Voucher"
				public shared asi_Glosa As string = "asi_Glosa"
				public shared cuc_Id As string = "cuc_Id"
				public shared asi_SerieDoc As string = "asi_SerieDoc"
				public shared asi_NumeroDoc As string = "asi_NumeroDoc"
				public shared asi_SerieRef As string = "asi_SerieRef"
				public shared asi_NumeroRef As string = "asi_NumeroRef"
				public shared per_IdRef As string = "per_IdRef"
				public shared per_IdDoc As string = "per_IdDoc"
				public shared asi_Item As string = "asi_Item"
				public shared asi_ItemDoc As string = "asi_ItemDoc"
				public shared asi_ItemRef As string = "asi_ItemRef"
				public shared asi_AbonoME As string = "asi_AbonoME"
				public shared asi_CargoME As string = "asi_CargoME"
				public shared asi_EsAutomatico As string = "asi_EsAutomatico"
				public shared asi_EsApertura As string = "asi_EsApertura"
				public shared asi_EsCierre As string = "asi_EsCierre"
				public shared tdo_IdDoc As string = "tdo_IdDoc"
				public shared dtd_IdDoc As string = "dtd_IdDoc"
				public shared cct_Id As string = "cct_Id"
				public shared tdo_IdRef As string = "tdo_IdRef"
				public shared dtd_IdRef As string = "dtd_IdRef"
				public shared Usu_Id As string = "Usu_Id"
				public shared asi_FecGrab As string = "asi_FecGrab"
				public shared cct_IdRef As string = "cct_IdRef"
				public shared asi_FechaDoc As string = "asi_FechaDoc"
				public shared CCO_ID As string = "CCO_ID"
		    End Structure
	



    <DataMember()>
    Public Property prd_Periodo_id() As String
        Get
            Return _prd_Periodo_id
        End Get
        Set(ByVal value As String)
            If Not Equals(_prd_Periodo_id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'prd_Periodo_id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If Periodo IsNot Nothing AndAlso Not Equals(Periodo.prd_Periodo_id, value) Then
                        Periodo = Nothing
                    End If
                End If
                _prd_Periodo_id = value
                OnPropertyChanged("prd_Periodo_id")
            End If
        End Set
    End Property

    Private _prd_Periodo_id As String

    <DataMember()>
    Public Property lib_Id() As String
        Get
            Return _lib_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_lib_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'lib_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If LibrosContables IsNot Nothing AndAlso Not Equals(LibrosContables.lib_Id, value) Then
                        LibrosContables = Nothing
                    End If
                End If
                _lib_Id = value
                OnPropertyChanged("lib_Id")
            End If
        End Set
    End Property

    Private _lib_Id As String

    <DataMember()>
    Public Property mon_Id() As String
        Get
            Return _mon_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_mon_Id, value) Then
                _mon_Id = value
                OnPropertyChanged("mon_Id")
            End If
        End Set
    End Property

    Private _mon_Id As String

    <DataMember()>
    Public Property asi_Cargo() As Nullable(Of Decimal)
        Get
            Return _asi_Cargo
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_asi_Cargo, value) Then
                _asi_Cargo = value
                OnPropertyChanged("asi_Cargo")
            End If
        End Set
    End Property

    Private _asi_Cargo As Nullable(Of Decimal)

    <DataMember()>
    Public Property asi_Abono() As Nullable(Of Decimal)
        Get
            Return _asi_Abono
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_asi_Abono, value) Then
                _asi_Abono = value
                OnPropertyChanged("asi_Abono")
            End If
        End Set
    End Property

    Private _asi_Abono As Nullable(Of Decimal)

    <DataMember()>
    Public Property asi_Voucher() As String
        Get
            Return _asi_Voucher
        End Get
        Set(ByVal value As String)
            If Not Equals(_asi_Voucher, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'asi_Voucher' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _asi_Voucher = value
                OnPropertyChanged("asi_Voucher")
            End If
        End Set
    End Property

    Private _asi_Voucher As String

    <DataMember()>
    Public Property asi_Glosa() As String
        Get
            Return _asi_Glosa
        End Get
        Set(ByVal value As String)
            If Not Equals(_asi_Glosa, value) Then
                _asi_Glosa = value
                OnPropertyChanged("asi_Glosa")
            End If
        End Set
    End Property

    Private _asi_Glosa As String

    <DataMember()>
    Public Property cuc_Id() As String
        Get
            Return _cuc_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_cuc_Id, value) Then
                ChangeTracker.RecordOriginalValue("cuc_Id", _cuc_Id)
                If Not IsDeserializing Then
                    If CuentasContables IsNot Nothing AndAlso Not Equals(CuentasContables.CUC_ID, value) Then
                        CuentasContables = Nothing
                    End If
                End If
                _cuc_Id = value
                OnPropertyChanged("cuc_Id")
            End If
        End Set
    End Property

    Private _cuc_Id As String

    <DataMember()>
    Public Property asi_SerieDoc() As String
        Get
            Return _asi_SerieDoc
        End Get
        Set(ByVal value As String)
            If Not Equals(_asi_SerieDoc, value) Then
                _asi_SerieDoc = value
                OnPropertyChanged("asi_SerieDoc")
            End If
        End Set
    End Property

    Private _asi_SerieDoc As String

    <DataMember()>
    Public Property asi_NumeroDoc() As String
        Get
            Return _asi_NumeroDoc
        End Get
        Set(ByVal value As String)
            If Not Equals(_asi_NumeroDoc, value) Then
                _asi_NumeroDoc = value
                OnPropertyChanged("asi_NumeroDoc")
            End If
        End Set
    End Property

    Private _asi_NumeroDoc As String

    <DataMember()>
    Public Property asi_SerieRef() As String
        Get
            Return _asi_SerieRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_asi_SerieRef, value) Then
                _asi_SerieRef = value
                OnPropertyChanged("asi_SerieRef")
            End If
        End Set
    End Property

    Private _asi_SerieRef As String

    <DataMember()>
    Public Property asi_NumeroRef() As String
        Get
            Return _asi_NumeroRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_asi_NumeroRef, value) Then
                _asi_NumeroRef = value
                OnPropertyChanged("asi_NumeroRef")
            End If
        End Set
    End Property

    Private _asi_NumeroRef As String

    <DataMember()>
    Public Property per_IdRef() As String
        Get
            Return _per_IdRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_per_IdRef, value) Then
                ChangeTracker.RecordOriginalValue("per_IdRef", _per_IdRef)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _per_IdRef = value
                OnPropertyChanged("per_IdRef")
            End If
        End Set
    End Property

    Private _per_IdRef As String

    <DataMember()>
    Public Property per_IdDoc() As String
        Get
            Return _per_IdDoc
        End Get
        Set(ByVal value As String)
            If Not Equals(_per_IdDoc, value) Then
                ChangeTracker.RecordOriginalValue("per_IdDoc", _per_IdDoc)
                If Not IsDeserializing Then
                    If Personas1 IsNot Nothing AndAlso Not Equals(Personas1.PER_ID, value) Then
                        Personas1 = Nothing
                    End If
                End If
                _per_IdDoc = value
                OnPropertyChanged("per_IdDoc")
            End If
        End Set
    End Property

    Private _per_IdDoc As String

    <DataMember()>
    Public Property asi_Item() As String
        Get
            Return _asi_Item
        End Get
        Set(ByVal value As String)
            If Not Equals(_asi_Item, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'asi_Item' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _asi_Item = value
                OnPropertyChanged("asi_Item")
            End If
        End Set
    End Property

    Private _asi_Item As String

    <DataMember()>
    Public Property asi_ItemDoc() As String
        Get
            Return _asi_ItemDoc
        End Get
        Set(ByVal value As String)
            If Not Equals(_asi_ItemDoc, value) Then
                _asi_ItemDoc = value
                OnPropertyChanged("asi_ItemDoc")
            End If
        End Set
    End Property

    Private _asi_ItemDoc As String

    <DataMember()>
    Public Property asi_ItemRef() As String
        Get
            Return _asi_ItemRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_asi_ItemRef, value) Then
                _asi_ItemRef = value
                OnPropertyChanged("asi_ItemRef")
            End If
        End Set
    End Property

    Private _asi_ItemRef As String

    <DataMember()>
    Public Property asi_AbonoME() As Nullable(Of Decimal)
        Get
            Return _asi_AbonoME
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_asi_AbonoME, value) Then
                _asi_AbonoME = value
                OnPropertyChanged("asi_AbonoME")
            End If
        End Set
    End Property

    Private _asi_AbonoME As Nullable(Of Decimal)

    <DataMember()>
    Public Property asi_CargoME() As Nullable(Of Decimal)
        Get
            Return _asi_CargoME
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_asi_CargoME, value) Then
                _asi_CargoME = value
                OnPropertyChanged("asi_CargoME")
            End If
        End Set
    End Property

    Private _asi_CargoME As Nullable(Of Decimal)

    <DataMember()>
    Public Property asi_EsAutomatico() As Nullable(Of Boolean)
        Get
            Return _asi_EsAutomatico
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_asi_EsAutomatico, value) Then
                _asi_EsAutomatico = value
                OnPropertyChanged("asi_EsAutomatico")
            End If
        End Set
    End Property

    Private _asi_EsAutomatico As Nullable(Of Boolean)

    <DataMember()>
    Public Property asi_EsApertura() As Nullable(Of Boolean)
        Get
            Return _asi_EsApertura
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_asi_EsApertura, value) Then
                _asi_EsApertura = value
                OnPropertyChanged("asi_EsApertura")
            End If
        End Set
    End Property

    Private _asi_EsApertura As Nullable(Of Boolean)

    <DataMember()>
    Public Property asi_EsCierre() As Nullable(Of Boolean)
        Get
            Return _asi_EsCierre
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_asi_EsCierre, value) Then
                _asi_EsCierre = value
                OnPropertyChanged("asi_EsCierre")
            End If
        End Set
    End Property

    Private _asi_EsCierre As Nullable(Of Boolean)

    <DataMember()>
    Public Property tdo_IdDoc() As String
        Get
            Return _tdo_IdDoc
        End Get
        Set(ByVal value As String)
            If Not Equals(_tdo_IdDoc, value) Then
                _tdo_IdDoc = value
                OnPropertyChanged("tdo_IdDoc")
            End If
        End Set
    End Property

    Private _tdo_IdDoc As String

    <DataMember()>
    Public Property dtd_IdDoc() As String
        Get
            Return _dtd_IdDoc
        End Get
        Set(ByVal value As String)
            If Not Equals(_dtd_IdDoc, value) Then
                _dtd_IdDoc = value
                OnPropertyChanged("dtd_IdDoc")
            End If
        End Set
    End Property

    Private _dtd_IdDoc As String

    <DataMember()>
    Public Property cct_Id() As String
        Get
            Return _cct_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_cct_Id, value) Then
                _cct_Id = value
                OnPropertyChanged("cct_Id")
            End If
        End Set
    End Property

    Private _cct_Id As String

    <DataMember()>
    Public Property tdo_IdRef() As String
        Get
            Return _tdo_IdRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_tdo_IdRef, value) Then
                _tdo_IdRef = value
                OnPropertyChanged("tdo_IdRef")
            End If
        End Set
    End Property

    Private _tdo_IdRef As String

    <DataMember()>
    Public Property dtd_IdRef() As String
        Get
            Return _dtd_IdRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_dtd_IdRef, value) Then
                _dtd_IdRef = value
                OnPropertyChanged("dtd_IdRef")
            End If
        End Set
    End Property

    Private _dtd_IdRef As String

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                ChangeTracker.RecordOriginalValue("Usu_Id", _usu_Id)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property asi_FecGrab() As Nullable(Of Date)
        Get
            Return _asi_FecGrab
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_asi_FecGrab, value) Then
                _asi_FecGrab = value
                OnPropertyChanged("asi_FecGrab")
            End If
        End Set
    End Property

    Private _asi_FecGrab As Nullable(Of Date)

    <DataMember()>
    Public Property cct_IdRef() As String
        Get
            Return _cct_IdRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_cct_IdRef, value) Then
                _cct_IdRef = value
                OnPropertyChanged("cct_IdRef")
            End If
        End Set
    End Property

    Private _cct_IdRef As String

    <DataMember()>
    Public Property asi_FechaDoc() As Nullable(Of Date)
        Get
            Return _asi_FechaDoc
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_asi_FechaDoc, value) Then
                _asi_FechaDoc = value
                OnPropertyChanged("asi_FechaDoc")
            End If
        End Set
    End Property

    Private _asi_FechaDoc As Nullable(Of Date)

    <DataMember()>
    Public Property CCO_ID() As String
        Get
            Return _cCO_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCO_ID, value) Then
                _cCO_ID = value
                OnPropertyChanged("CCO_ID")
            End If
        End Set
    End Property

    Private _cCO_ID As String

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property Periodo() As Periodo
        Get
            Return _periodo
        End Get
        Set(ByVal value As Periodo)
            If _periodo IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(prd_Periodo_id, value.prd_Periodo_id) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As Periodo = _periodo
                _periodo = value
                FixupPeriodo(previousValue)
                OnNavigationPropertyChanged("Periodo")
            End If
        End Set
    End Property

    Private _periodo As Periodo


    <DataMember()>
    Public Property LibrosContables() As LibrosContables
        Get
            Return _librosContables
        End Get
        Set(ByVal value As LibrosContables)
            If _librosContables IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(lib_Id, value.lib_Id) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As LibrosContables = _librosContables
                _librosContables = value
                FixupLibrosContables(previousValue)
                OnNavigationPropertyChanged("LibrosContables")
            End If
        End Set
    End Property

    Private _librosContables As LibrosContables


    <DataMember()>
    Public Property CuentasContables() As CuentasContables
        Get
            Return _cuentasContables
        End Get
        Set(ByVal value As CuentasContables)
            If _cuentasContables IsNot value Then
                Dim previousValue As CuentasContables = _cuentasContables
                _cuentasContables = value
                FixupCuentasContables(previousValue)
                OnNavigationPropertyChanged("CuentasContables")
            End If
        End Set
    End Property

    Private _cuentasContables As CuentasContables


    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property Personas1() As Personas
        Get
            Return _personas1
        End Get
        Set(ByVal value As Personas)
            If _personas1 IsNot value Then
                Dim previousValue As Personas = _personas1
                _personas1 = value
                FixupPersonas1(previousValue)
                OnNavigationPropertyChanged("Personas1")
            End If
        End Set
    End Property

    Private _personas1 As Personas


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociaci칩n que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesar치 notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Periodo = Nothing
        LibrosContables = Nothing
        CuentasContables = Nothing
        Personas = Nothing
        Personas1 = Nothing
        Usuarios = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupPeriodo(ByVal previousValue As Periodo)
        ' Este es el extremo dependiente en una asociaci칩n que realiza eliminaciones en cascada.
        ' Actualizar la escucha de eventos del extremo principal para que se refiera al nuevo extremo dependiente.
        ' Esta es una relaci칩n unidireccional desde el extremo dependiente al extremo principal por lo que el extremo dependiente es
        ' responsable de administrar el controlador de eventos de eliminaci칩n en cascada. En el resto de los casos, ser치 el extremo principal el que lo administrar치.
        If previousValue IsNot Nothing Then
            RemoveHandler previousValue.ChangeTracker.ObjectStateChanging, AddressOf HandleCascadeDelete
        End If

        If Periodo IsNot Nothing Then
            AddHandler Periodo.ChangeTracker.ObjectStateChanging, AddressOf HandleCascadeDelete
        End If

        If IsDeserializing Then
            Return
        End If

        If Periodo IsNot Nothing Then
            prd_Periodo_id = Periodo.prd_Periodo_id
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Periodo") AndAlso
                ChangeTracker.OriginalValues("Periodo") Is Periodo Then
                ChangeTracker.OriginalValues.Remove("Periodo")
            Else
                ChangeTracker.RecordOriginalValue("Periodo", previousValue)
                ' Este es el extremo dependiente de una asociaci칩n de identificaci칩n, por lo que se debe eliminar cuando la relaci칩n se
                ' elimine. Si el estado actual es agregado, la relaci칩n se puede modificar sin eliminar el extremo dependiente.
                ' Esta es una relaci칩n unidireccional desde el extremo dependiente al extremo principal por lo que el extremo dependiente es
                ' responsable de administrar en cascada la eliminaci칩n. En el resto de los casos, ser치 el extremo principal el que lo administre.
                If previousValue IsNot Nothing AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Me.MarkAsDeleted()
                End If
            End If
            If Periodo IsNot Nothing AndAlso Not Periodo.ChangeTracker.ChangeTrackingEnabled Then
                Periodo.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupLibrosContables(ByVal previousValue As LibrosContables)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.AsientosContables.Contains(Me) Then
            previousValue.AsientosContables.Remove(Me)
        End If

        If LibrosContables IsNot Nothing Then
            If Not LibrosContables.AsientosContables.Contains(Me) Then
                LibrosContables.AsientosContables.Add(Me)
            End If

            lib_Id = LibrosContables.lib_Id
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("LibrosContables") AndAlso
                ChangeTracker.OriginalValues("LibrosContables") Is LibrosContables Then
                ChangeTracker.OriginalValues.Remove("LibrosContables")
            Else
                ChangeTracker.RecordOriginalValue("LibrosContables", previousValue)
            End If
            If LibrosContables IsNot Nothing AndAlso Not LibrosContables.ChangeTracker.ChangeTrackingEnabled Then
                LibrosContables.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCuentasContables(ByVal previousValue As CuentasContables, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.AsientosContables.Contains(Me) Then
            previousValue.AsientosContables.Remove(Me)
        End If

        If CuentasContables IsNot Nothing Then
            If Not CuentasContables.AsientosContables.Contains(Me) Then
                CuentasContables.AsientosContables.Add(Me)
            End If

            cuc_Id = CuentasContables.CUC_ID
        ElseIf Not skipKeys Then
            cuc_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CuentasContables") AndAlso
                ChangeTracker.OriginalValues("CuentasContables") Is CuentasContables Then
                ChangeTracker.OriginalValues.Remove("CuentasContables")
            Else
                ChangeTracker.RecordOriginalValue("CuentasContables", previousValue)
            End If
            If CuentasContables IsNot Nothing AndAlso Not CuentasContables.ChangeTracker.ChangeTrackingEnabled Then
                CuentasContables.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.AsientosContables.Contains(Me) Then
            previousValue.AsientosContables.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.AsientosContables.Contains(Me) Then
                Personas.AsientosContables.Add(Me)
            End If

            per_IdRef = Personas.PER_ID
        ElseIf Not skipKeys Then
            per_IdRef = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas1(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.AsientosContables1.Contains(Me) Then
            previousValue.AsientosContables1.Remove(Me)
        End If

        If Personas1 IsNot Nothing Then
            If Not Personas1.AsientosContables1.Contains(Me) Then
                Personas1.AsientosContables1.Add(Me)
            End If

            per_IdDoc = Personas1.PER_ID
        ElseIf Not skipKeys Then
            per_IdDoc = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas1") AndAlso
                ChangeTracker.OriginalValues("Personas1") Is Personas1 Then
                ChangeTracker.OriginalValues.Remove("Personas1")
            Else
                ChangeTracker.RecordOriginalValue("Personas1", previousValue)
            End If
            If Personas1 IsNot Nothing AndAlso Not Personas1.ChangeTracker.ChangeTrackingEnabled Then
                Personas1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            Usu_Id = Usuarios.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
