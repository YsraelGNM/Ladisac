'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(ControlPlanta))>
<KnownType(GetType(Parada))>
Partial Public Class ControlPlantaDetalle
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared DPL_ID As string = "DPL_ID"
				public shared CPL_ID As string = "CPL_ID"
				public shared DPL_HORA As string = "DPL_HORA"
				public shared PAR_ID As string = "PAR_ID"
				public shared DPL_HORA_FINAL As string = "DPL_HORA_FINAL"
				public shared DPL_OBSERVACION As string = "DPL_OBSERVACION"
		    End Structure
	



    <DataMember()>
    Public Property DPL_ID() As Integer
        Get
            Return _dPL_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_dPL_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DPL_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _dPL_ID = value
                OnPropertyChanged("DPL_ID")
            End If
        End Set
    End Property

    Private _dPL_ID As Integer

    <DataMember()>
    Public Property CPL_ID() As Nullable(Of Integer)
        Get
            Return _cPL_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_cPL_ID, value) Then
                ChangeTracker.RecordOriginalValue("CPL_ID", _cPL_ID)
                If Not IsDeserializing Then
                    If ControlPlanta IsNot Nothing AndAlso Not Equals(ControlPlanta.CPL_ID, value) Then
                        ControlPlanta = Nothing
                    End If
                End If
                _cPL_ID = value
                OnPropertyChanged("CPL_ID")
            End If
        End Set
    End Property

    Private _cPL_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property DPL_HORA() As Nullable(Of Decimal)
        Get
            Return _dPL_HORA
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dPL_HORA, value) Then
                _dPL_HORA = value
                OnPropertyChanged("DPL_HORA")
            End If
        End Set
    End Property

    Private _dPL_HORA As Nullable(Of Decimal)

    <DataMember()>
    Public Property PAR_ID() As Nullable(Of Integer)
        Get
            Return _pAR_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_pAR_ID, value) Then
                ChangeTracker.RecordOriginalValue("PAR_ID", _pAR_ID)
                If Not IsDeserializing Then
                    If Parada IsNot Nothing AndAlso Not Equals(Parada.PAR_ID, value) Then
                        Parada = Nothing
                    End If
                End If
                _pAR_ID = value
                OnPropertyChanged("PAR_ID")
            End If
        End Set
    End Property

    Private _pAR_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property DPL_HORA_FINAL() As Nullable(Of Decimal)
        Get
            Return _dPL_HORA_FINAL
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dPL_HORA_FINAL, value) Then
                _dPL_HORA_FINAL = value
                OnPropertyChanged("DPL_HORA_FINAL")
            End If
        End Set
    End Property

    Private _dPL_HORA_FINAL As Nullable(Of Decimal)

    <DataMember()>
    Public Property DPL_OBSERVACION() As String
        Get
            Return _dPL_OBSERVACION
        End Get
        Set(ByVal value As String)
            If Not Equals(_dPL_OBSERVACION, value) Then
                _dPL_OBSERVACION = value
                OnPropertyChanged("DPL_OBSERVACION")
            End If
        End Set
    End Property

    Private _dPL_OBSERVACION As String

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property ControlPlanta() As ControlPlanta
        Get
            Return _controlPlanta
        End Get
        Set(ByVal value As ControlPlanta)
            If _controlPlanta IsNot value Then
                Dim previousValue As ControlPlanta = _controlPlanta
                _controlPlanta = value
                FixupControlPlanta(previousValue)
                OnNavigationPropertyChanged("ControlPlanta")
            End If
        End Set
    End Property

    Private _controlPlanta As ControlPlanta


    <DataMember()>
    Public Property Parada() As Parada
        Get
            Return _parada
        End Get
        Set(ByVal value As Parada)
            If _parada IsNot value Then
                Dim previousValue As Parada = _parada
                _parada = value
                FixupParada(previousValue)
                OnNavigationPropertyChanged("Parada")
            End If
        End Set
    End Property

    Private _parada As Parada


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        ControlPlanta = Nothing
        Parada = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupControlPlanta(ByVal previousValue As ControlPlanta, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ControlPlantaDetalle.Contains(Me) Then
            previousValue.ControlPlantaDetalle.Remove(Me)
        End If

        If ControlPlanta IsNot Nothing Then
            If Not ControlPlanta.ControlPlantaDetalle.Contains(Me) Then
                ControlPlanta.ControlPlantaDetalle.Add(Me)
            End If

            CPL_ID = ControlPlanta.CPL_ID
        ElseIf Not skipKeys Then
            CPL_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("ControlPlanta") AndAlso
                ChangeTracker.OriginalValues("ControlPlanta") Is ControlPlanta Then
                ChangeTracker.OriginalValues.Remove("ControlPlanta")
            Else
                ChangeTracker.RecordOriginalValue("ControlPlanta", previousValue)
            End If
            If ControlPlanta IsNot Nothing AndAlso Not ControlPlanta.ChangeTracker.ChangeTrackingEnabled Then
                ControlPlanta.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupParada(ByVal previousValue As Parada, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ControlPlantaDetalle.Contains(Me) Then
            previousValue.ControlPlantaDetalle.Remove(Me)
        End If

        If Parada IsNot Nothing Then
            If Not Parada.ControlPlantaDetalle.Contains(Me) Then
                Parada.ControlPlantaDetalle.Add(Me)
            End If

            PAR_ID = Parada.PAR_ID
        ElseIf Not skipKeys Then
            PAR_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Parada") AndAlso
                ChangeTracker.OriginalValues("Parada") Is Parada Then
                ChangeTracker.OriginalValues.Remove("Parada")
            Else
                ChangeTracker.RecordOriginalValue("Parada", previousValue)
            End If
            If Parada IsNot Nothing AndAlso Not Parada.ChangeTracker.ChangeTrackingEnabled Then
                Parada.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
