'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Molde))>
Partial Public Class ControlParadaMoldeDetalle
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared DPM_ID As string = "DPM_ID"
				public shared CPA_ID As string = "CPA_ID"
				public shared MOL_ID As string = "MOL_ID"
				public shared DPM_NRO_MEZCLA As string = "DPM_NRO_MEZCLA"
				public shared DPM_HORA As string = "DPM_HORA"
				public shared DPM_TIEMPO As string = "DPM_TIEMPO"
				public shared DPM_TN As string = "DPM_TN"
				public shared DPM_CONTOMETRO As string = "DPM_CONTOMETRO"
		    End Structure
	



    <DataMember()>
    Public Property DPM_ID() As Integer
        Get
            Return _dPM_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_dPM_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DPM_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _dPM_ID = value
                OnPropertyChanged("DPM_ID")
            End If
        End Set
    End Property

    Private _dPM_ID As Integer

    <DataMember()>
    Public Property CPA_ID() As Nullable(Of Integer)
        Get
            Return _cPA_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_cPA_ID, value) Then
                ChangeTracker.RecordOriginalValue("CPA_ID", _cPA_ID)
                _cPA_ID = value
                OnPropertyChanged("CPA_ID")
            End If
        End Set
    End Property

    Private _cPA_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property MOL_ID() As Nullable(Of Integer)
        Get
            Return _mOL_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_mOL_ID, value) Then
                ChangeTracker.RecordOriginalValue("MOL_ID", _mOL_ID)
                If Not IsDeserializing Then
                    If Molde IsNot Nothing AndAlso Not Equals(Molde.MOL_ID, value) Then
                        Molde = Nothing
                    End If
                End If
                _mOL_ID = value
                OnPropertyChanged("MOL_ID")
            End If
        End Set
    End Property

    Private _mOL_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property DPM_NRO_MEZCLA() As Nullable(Of Integer)
        Get
            Return _dPM_NRO_MEZCLA
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_dPM_NRO_MEZCLA, value) Then
                _dPM_NRO_MEZCLA = value
                OnPropertyChanged("DPM_NRO_MEZCLA")
            End If
        End Set
    End Property

    Private _dPM_NRO_MEZCLA As Nullable(Of Integer)

    <DataMember()>
    Public Property DPM_HORA() As Nullable(Of Decimal)
        Get
            Return _dPM_HORA
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dPM_HORA, value) Then
                _dPM_HORA = value
                OnPropertyChanged("DPM_HORA")
            End If
        End Set
    End Property

    Private _dPM_HORA As Nullable(Of Decimal)

    <DataMember()>
    Public Property DPM_TIEMPO() As Nullable(Of Decimal)
        Get
            Return _dPM_TIEMPO
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dPM_TIEMPO, value) Then
                _dPM_TIEMPO = value
                OnPropertyChanged("DPM_TIEMPO")
            End If
        End Set
    End Property

    Private _dPM_TIEMPO As Nullable(Of Decimal)

    <DataMember()>
    Public Property DPM_TN() As Nullable(Of Decimal)
        Get
            Return _dPM_TN
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dPM_TN, value) Then
                _dPM_TN = value
                OnPropertyChanged("DPM_TN")
            End If
        End Set
    End Property

    Private _dPM_TN As Nullable(Of Decimal)

    <DataMember()>
    Public Property DPM_CONTOMETRO() As Nullable(Of Decimal)
        Get
            Return _dPM_CONTOMETRO
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dPM_CONTOMETRO, value) Then
                _dPM_CONTOMETRO = value
                OnPropertyChanged("DPM_CONTOMETRO")
            End If
        End Set
    End Property

    Private _dPM_CONTOMETRO As Nullable(Of Decimal)

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Molde() As Molde
        Get
            Return _molde
        End Get
        Set(ByVal value As Molde)
            If _molde IsNot value Then
                Dim previousValue As Molde = _molde
                _molde = value
                FixupMolde(previousValue)
                OnNavigationPropertyChanged("Molde")
            End If
        End Set
    End Property

    Private _molde As Molde


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Molde = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupMolde(ByVal previousValue As Molde, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Molde IsNot Nothing Then
            MOL_ID = Molde.MOL_ID
        ElseIf Not skipKeys Then
            MOL_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Molde") AndAlso
                ChangeTracker.OriginalValues("Molde") Is Molde Then
                ChangeTracker.OriginalValues.Remove("Molde")
            Else
                ChangeTracker.RecordOriginalValue("Molde", previousValue)
            End If
            If Molde IsNot Nothing AndAlso Not Molde.ChangeTracker.ChangeTrackingEnabled Then
                Molde.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
