'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Cortadora))>
<KnownType(GetType(Extrusora))>
<KnownType(GetType(Ladrillo))>
<KnownType(GetType(Planta))>
<KnownType(GetType(TipoProduccion))>
<KnownType(GetType(Personas))>
<KnownType(GetType(KardexLote))>
<KnownType(GetType(RegistroEquipo))>
<KnownType(GetType(PlanCargaDescargaHorno))>
<KnownType(GetType(ControlPaqueteo))>
Partial Public Class Produccion
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared PRO_ID As string = "PRO_ID"
				public shared LAD_ID As string = "LAD_ID"
				public shared PLA_ID As string = "PLA_ID"
				public shared EXT_ID As string = "EXT_ID"
				public shared TPR_ID As string = "TPR_ID"
				public shared COR_ID As string = "COR_ID"
				public shared PRO_OBSERVACION As string = "PRO_OBSERVACION"
				public shared PRO_FECHA As string = "PRO_FECHA"
				public shared PRO_CANT_CORTE As string = "PRO_CANT_CORTE"
				public shared PRO_CANT_TABLA As string = "PRO_CANT_TABLA"
				public shared PRO_ESTIMADO_RECICLAJE As string = "PRO_ESTIMADO_RECICLAJE"
				public shared PER_ID_ING As string = "PER_ID_ING"
				public shared USU_ID As string = "USU_ID"
				public shared PRO_FEC_GRAB As string = "PRO_FEC_GRAB"
				public shared PRO_ESTADO As string = "PRO_ESTADO"
				public shared PRO_HI As string = "PRO_HI"
				public shared PRO_HF As string = "PRO_HF"
				public shared PRO_CANT_VAGON As string = "PRO_CANT_VAGON"
				public shared PRO_FINALIZADA As string = "PRO_FINALIZADA"
				public shared PRO_FECHA_FINALIZADA As string = "PRO_FECHA_FINALIZADA"
				public shared PRO_CONTEO_FINALIZADA As string = "PRO_CONTEO_FINALIZADA"
				public shared PRO_CARGA_FINALIZADA As string = "PRO_CARGA_FINALIZADA"
				public shared PER_ID_ING2 As string = "PER_ID_ING2"
				public shared PER_ID_OPE As string = "PER_ID_OPE"
				public shared PER_ID_OPE2 As string = "PER_ID_OPE2"
		    End Structure
	



    <DataMember()>
    Public Property PRO_ID() As Integer
        Get
            Return _pRO_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_pRO_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'PRO_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _pRO_ID = value
                OnPropertyChanged("PRO_ID")
            End If
        End Set
    End Property

    Private _pRO_ID As Integer

    <DataMember()>
    Public Property LAD_ID() As String
        Get
            Return _lAD_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_lAD_ID, value) Then
                ChangeTracker.RecordOriginalValue("LAD_ID", _lAD_ID)
                If Not IsDeserializing Then
                    If Ladrillo IsNot Nothing AndAlso Not Equals(Ladrillo.LAD_ID, value) Then
                        Ladrillo = Nothing
                    End If
                End If
                _lAD_ID = value
                OnPropertyChanged("LAD_ID")
            End If
        End Set
    End Property

    Private _lAD_ID As String

    <DataMember()>
    Public Property PLA_ID() As Nullable(Of Integer)
        Get
            Return _pLA_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_pLA_ID, value) Then
                ChangeTracker.RecordOriginalValue("PLA_ID", _pLA_ID)
                If Not IsDeserializing Then
                    If Planta IsNot Nothing AndAlso Not Equals(Planta.PLA_ID, value) Then
                        Planta = Nothing
                    End If
                End If
                _pLA_ID = value
                OnPropertyChanged("PLA_ID")
            End If
        End Set
    End Property

    Private _pLA_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property EXT_ID() As Nullable(Of Integer)
        Get
            Return _eXT_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_eXT_ID, value) Then
                ChangeTracker.RecordOriginalValue("EXT_ID", _eXT_ID)
                If Not IsDeserializing Then
                    If Extrusora IsNot Nothing AndAlso Not Equals(Extrusora.EXT_ID, value) Then
                        Extrusora = Nothing
                    End If
                End If
                _eXT_ID = value
                OnPropertyChanged("EXT_ID")
            End If
        End Set
    End Property

    Private _eXT_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property TPR_ID() As Nullable(Of Integer)
        Get
            Return _tPR_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_tPR_ID, value) Then
                ChangeTracker.RecordOriginalValue("TPR_ID", _tPR_ID)
                If Not IsDeserializing Then
                    If TipoProduccion IsNot Nothing AndAlso Not Equals(TipoProduccion.TPR_ID, value) Then
                        TipoProduccion = Nothing
                    End If
                End If
                _tPR_ID = value
                OnPropertyChanged("TPR_ID")
            End If
        End Set
    End Property

    Private _tPR_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property COR_ID() As Nullable(Of Integer)
        Get
            Return _cOR_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_cOR_ID, value) Then
                ChangeTracker.RecordOriginalValue("COR_ID", _cOR_ID)
                If Not IsDeserializing Then
                    If Cortadora IsNot Nothing AndAlso Not Equals(Cortadora.COR_ID, value) Then
                        Cortadora = Nothing
                    End If
                End If
                _cOR_ID = value
                OnPropertyChanged("COR_ID")
            End If
        End Set
    End Property

    Private _cOR_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property PRO_OBSERVACION() As String
        Get
            Return _pRO_OBSERVACION
        End Get
        Set(ByVal value As String)
            If Not Equals(_pRO_OBSERVACION, value) Then
                _pRO_OBSERVACION = value
                OnPropertyChanged("PRO_OBSERVACION")
            End If
        End Set
    End Property

    Private _pRO_OBSERVACION As String

    <DataMember()>
    Public Property PRO_FECHA() As Nullable(Of Date)
        Get
            Return _pRO_FECHA
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_pRO_FECHA, value) Then
                _pRO_FECHA = value
                OnPropertyChanged("PRO_FECHA")
            End If
        End Set
    End Property

    Private _pRO_FECHA As Nullable(Of Date)

    <DataMember()>
    Public Property PRO_CANT_CORTE() As Nullable(Of Integer)
        Get
            Return _pRO_CANT_CORTE
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_pRO_CANT_CORTE, value) Then
                _pRO_CANT_CORTE = value
                OnPropertyChanged("PRO_CANT_CORTE")
            End If
        End Set
    End Property

    Private _pRO_CANT_CORTE As Nullable(Of Integer)

    <DataMember()>
    Public Property PRO_CANT_TABLA() As Nullable(Of Integer)
        Get
            Return _pRO_CANT_TABLA
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_pRO_CANT_TABLA, value) Then
                _pRO_CANT_TABLA = value
                OnPropertyChanged("PRO_CANT_TABLA")
            End If
        End Set
    End Property

    Private _pRO_CANT_TABLA As Nullable(Of Integer)

    <DataMember()>
    Public Property PRO_ESTIMADO_RECICLAJE() As Nullable(Of Decimal)
        Get
            Return _pRO_ESTIMADO_RECICLAJE
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_pRO_ESTIMADO_RECICLAJE, value) Then
                _pRO_ESTIMADO_RECICLAJE = value
                OnPropertyChanged("PRO_ESTIMADO_RECICLAJE")
            End If
        End Set
    End Property

    Private _pRO_ESTIMADO_RECICLAJE As Nullable(Of Decimal)

    <DataMember()>
    Public Property PER_ID_ING() As String
        Get
            Return _pER_ID_ING
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_ING, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_ING", _pER_ID_ING)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID_ING = value
                OnPropertyChanged("PER_ID_ING")
            End If
        End Set
    End Property

    Private _pER_ID_ING As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property PRO_FEC_GRAB() As Nullable(Of Date)
        Get
            Return _pRO_FEC_GRAB
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_pRO_FEC_GRAB, value) Then
                _pRO_FEC_GRAB = value
                OnPropertyChanged("PRO_FEC_GRAB")
            End If
        End Set
    End Property

    Private _pRO_FEC_GRAB As Nullable(Of Date)

    <DataMember()>
    Public Property PRO_ESTADO() As Nullable(Of Boolean)
        Get
            Return _pRO_ESTADO
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_pRO_ESTADO, value) Then
                _pRO_ESTADO = value
                OnPropertyChanged("PRO_ESTADO")
            End If
        End Set
    End Property

    Private _pRO_ESTADO As Nullable(Of Boolean)

    <DataMember()>
    Public Property PRO_HI() As Nullable(Of Decimal)
        Get
            Return _pRO_HI
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_pRO_HI, value) Then
                _pRO_HI = value
                OnPropertyChanged("PRO_HI")
            End If
        End Set
    End Property

    Private _pRO_HI As Nullable(Of Decimal)

    <DataMember()>
    Public Property PRO_HF() As Nullable(Of Decimal)
        Get
            Return _pRO_HF
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_pRO_HF, value) Then
                _pRO_HF = value
                OnPropertyChanged("PRO_HF")
            End If
        End Set
    End Property

    Private _pRO_HF As Nullable(Of Decimal)

    <DataMember()>
    Public Property PRO_CANT_VAGON() As Nullable(Of Integer)
        Get
            Return _pRO_CANT_VAGON
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_pRO_CANT_VAGON, value) Then
                _pRO_CANT_VAGON = value
                OnPropertyChanged("PRO_CANT_VAGON")
            End If
        End Set
    End Property

    Private _pRO_CANT_VAGON As Nullable(Of Integer)

    <DataMember()>
    Public Property PRO_FINALIZADA() As Nullable(Of Boolean)
        Get
            Return _pRO_FINALIZADA
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_pRO_FINALIZADA, value) Then
                _pRO_FINALIZADA = value
                OnPropertyChanged("PRO_FINALIZADA")
            End If
        End Set
    End Property

    Private _pRO_FINALIZADA As Nullable(Of Boolean)

    <DataMember()>
    Public Property PRO_FECHA_FINALIZADA() As Nullable(Of Date)
        Get
            Return _pRO_FECHA_FINALIZADA
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_pRO_FECHA_FINALIZADA, value) Then
                _pRO_FECHA_FINALIZADA = value
                OnPropertyChanged("PRO_FECHA_FINALIZADA")
            End If
        End Set
    End Property

    Private _pRO_FECHA_FINALIZADA As Nullable(Of Date)

    <DataMember()>
    Public Property PRO_CONTEO_FINALIZADA() As Nullable(Of Integer)
        Get
            Return _pRO_CONTEO_FINALIZADA
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_pRO_CONTEO_FINALIZADA, value) Then
                _pRO_CONTEO_FINALIZADA = value
                OnPropertyChanged("PRO_CONTEO_FINALIZADA")
            End If
        End Set
    End Property

    Private _pRO_CONTEO_FINALIZADA As Nullable(Of Integer)

    <DataMember()>
    Public Property PRO_CARGA_FINALIZADA() As Nullable(Of Integer)
        Get
            Return _pRO_CARGA_FINALIZADA
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_pRO_CARGA_FINALIZADA, value) Then
                _pRO_CARGA_FINALIZADA = value
                OnPropertyChanged("PRO_CARGA_FINALIZADA")
            End If
        End Set
    End Property

    Private _pRO_CARGA_FINALIZADA As Nullable(Of Integer)

    <DataMember()>
    Public Property PER_ID_ING2() As String
        Get
            Return _pER_ID_ING2
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_ING2, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_ING2", _pER_ID_ING2)
                If Not IsDeserializing Then
                    If Personas1 IsNot Nothing AndAlso Not Equals(Personas1.PER_ID, value) Then
                        Personas1 = Nothing
                    End If
                End If
                _pER_ID_ING2 = value
                OnPropertyChanged("PER_ID_ING2")
            End If
        End Set
    End Property

    Private _pER_ID_ING2 As String

    <DataMember()>
    Public Property PER_ID_OPE() As String
        Get
            Return _pER_ID_OPE
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_OPE, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_OPE", _pER_ID_OPE)
                If Not IsDeserializing Then
                    If Personas2 IsNot Nothing AndAlso Not Equals(Personas2.PER_ID, value) Then
                        Personas2 = Nothing
                    End If
                End If
                _pER_ID_OPE = value
                OnPropertyChanged("PER_ID_OPE")
            End If
        End Set
    End Property

    Private _pER_ID_OPE As String

    <DataMember()>
    Public Property PER_ID_OPE2() As String
        Get
            Return _pER_ID_OPE2
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_OPE2, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_OPE2", _pER_ID_OPE2)
                If Not IsDeserializing Then
                    If Personas3 IsNot Nothing AndAlso Not Equals(Personas3.PER_ID, value) Then
                        Personas3 = Nothing
                    End If
                End If
                _pER_ID_OPE2 = value
                OnPropertyChanged("PER_ID_OPE2")
            End If
        End Set
    End Property

    Private _pER_ID_OPE2 As String

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property Cortadora() As Cortadora
        Get
            Return _cortadora
        End Get
        Set(ByVal value As Cortadora)
            If _cortadora IsNot value Then
                Dim previousValue As Cortadora = _cortadora
                _cortadora = value
                FixupCortadora(previousValue)
                OnNavigationPropertyChanged("Cortadora")
            End If
        End Set
    End Property

    Private _cortadora As Cortadora


    <DataMember()>
    Public Property Extrusora() As Extrusora
        Get
            Return _extrusora
        End Get
        Set(ByVal value As Extrusora)
            If _extrusora IsNot value Then
                Dim previousValue As Extrusora = _extrusora
                _extrusora = value
                FixupExtrusora(previousValue)
                OnNavigationPropertyChanged("Extrusora")
            End If
        End Set
    End Property

    Private _extrusora As Extrusora


    <DataMember()>
    Public Property Ladrillo() As Ladrillo
        Get
            Return _ladrillo
        End Get
        Set(ByVal value As Ladrillo)
            If _ladrillo IsNot value Then
                Dim previousValue As Ladrillo = _ladrillo
                _ladrillo = value
                FixupLadrillo(previousValue)
                OnNavigationPropertyChanged("Ladrillo")
            End If
        End Set
    End Property

    Private _ladrillo As Ladrillo


    <DataMember()>
    Public Property Planta() As Planta
        Get
            Return _planta
        End Get
        Set(ByVal value As Planta)
            If _planta IsNot value Then
                Dim previousValue As Planta = _planta
                _planta = value
                FixupPlanta(previousValue)
                OnNavigationPropertyChanged("Planta")
            End If
        End Set
    End Property

    Private _planta As Planta


    <DataMember()>
    Public Property TipoProduccion() As TipoProduccion
        Get
            Return _tipoProduccion
        End Get
        Set(ByVal value As TipoProduccion)
            If _tipoProduccion IsNot value Then
                Dim previousValue As TipoProduccion = _tipoProduccion
                _tipoProduccion = value
                FixupTipoProduccion(previousValue)
                OnNavigationPropertyChanged("TipoProduccion")
            End If
        End Set
    End Property

    Private _tipoProduccion As TipoProduccion


    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property KardexLote() As TrackableCollection(Of KardexLote)
        Get
            If _kardexLote Is Nothing Then
                _kardexLote = New TrackableCollection(Of KardexLote)
                AddHandler _kardexLote.CollectionChanged, AddressOf FixupKardexLote
            End If
            Return _kardexLote
        End Get
        Set(ByVal value As TrackableCollection(Of KardexLote))
            If Not Object.ReferenceEquals(_kardexLote, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _kardexLote IsNot Nothing Then
                    RemoveHandler _kardexLote.CollectionChanged, AddressOf FixupKardexLote
                End If
                _kardexLote = value
                If _kardexLote IsNot Nothing Then
                    AddHandler _kardexLote.CollectionChanged, AddressOf FixupKardexLote
                End If
                OnNavigationPropertyChanged("KardexLote")
            End If
        End Set
    End Property

    Private _kardexLote As TrackableCollection(Of KardexLote)

    <DataMember()>
    Public Property Personas1() As Personas
        Get
            Return _personas1
        End Get
        Set(ByVal value As Personas)
            If _personas1 IsNot value Then
                Dim previousValue As Personas = _personas1
                _personas1 = value
                FixupPersonas1(previousValue)
                OnNavigationPropertyChanged("Personas1")
            End If
        End Set
    End Property

    Private _personas1 As Personas


    <DataMember()>
    Public Property Personas2() As Personas
        Get
            Return _personas2
        End Get
        Set(ByVal value As Personas)
            If _personas2 IsNot value Then
                Dim previousValue As Personas = _personas2
                _personas2 = value
                FixupPersonas2(previousValue)
                OnNavigationPropertyChanged("Personas2")
            End If
        End Set
    End Property

    Private _personas2 As Personas


    <DataMember()>
    Public Property Personas3() As Personas
        Get
            Return _personas3
        End Get
        Set(ByVal value As Personas)
            If _personas3 IsNot value Then
                Dim previousValue As Personas = _personas3
                _personas3 = value
                FixupPersonas3(previousValue)
                OnNavigationPropertyChanged("Personas3")
            End If
        End Set
    End Property

    Private _personas3 As Personas


    <DataMember()>
    Public Property RegistroEquipo() As TrackableCollection(Of RegistroEquipo)
        Get
            If _registroEquipo Is Nothing Then
                _registroEquipo = New TrackableCollection(Of RegistroEquipo)
                AddHandler _registroEquipo.CollectionChanged, AddressOf FixupRegistroEquipo
            End If
            Return _registroEquipo
        End Get
        Set(ByVal value As TrackableCollection(Of RegistroEquipo))
            If Not Object.ReferenceEquals(_registroEquipo, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _registroEquipo IsNot Nothing Then
                    RemoveHandler _registroEquipo.CollectionChanged, AddressOf FixupRegistroEquipo
                End If
                _registroEquipo = value
                If _registroEquipo IsNot Nothing Then
                    AddHandler _registroEquipo.CollectionChanged, AddressOf FixupRegistroEquipo
                End If
                OnNavigationPropertyChanged("RegistroEquipo")
            End If
        End Set
    End Property

    Private _registroEquipo As TrackableCollection(Of RegistroEquipo)

    <DataMember()>
    Public Property PlanCargaDescargaHorno() As TrackableCollection(Of PlanCargaDescargaHorno)
        Get
            If _planCargaDescargaHorno Is Nothing Then
                _planCargaDescargaHorno = New TrackableCollection(Of PlanCargaDescargaHorno)
                AddHandler _planCargaDescargaHorno.CollectionChanged, AddressOf FixupPlanCargaDescargaHorno
            End If
            Return _planCargaDescargaHorno
        End Get
        Set(ByVal value As TrackableCollection(Of PlanCargaDescargaHorno))
            If Not Object.ReferenceEquals(_planCargaDescargaHorno, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _planCargaDescargaHorno IsNot Nothing Then
                    RemoveHandler _planCargaDescargaHorno.CollectionChanged, AddressOf FixupPlanCargaDescargaHorno
                End If
                _planCargaDescargaHorno = value
                If _planCargaDescargaHorno IsNot Nothing Then
                    AddHandler _planCargaDescargaHorno.CollectionChanged, AddressOf FixupPlanCargaDescargaHorno
                End If
                OnNavigationPropertyChanged("PlanCargaDescargaHorno")
            End If
        End Set
    End Property

    Private _planCargaDescargaHorno As TrackableCollection(Of PlanCargaDescargaHorno)

    <DataMember()>
    Public Property ControlPaqueteo() As TrackableCollection(Of ControlPaqueteo)
        Get
            If _controlPaqueteo Is Nothing Then
                _controlPaqueteo = New TrackableCollection(Of ControlPaqueteo)
                AddHandler _controlPaqueteo.CollectionChanged, AddressOf FixupControlPaqueteo
            End If
            Return _controlPaqueteo
        End Get
        Set(ByVal value As TrackableCollection(Of ControlPaqueteo))
            If Not Object.ReferenceEquals(_controlPaqueteo, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _controlPaqueteo IsNot Nothing Then
                    RemoveHandler _controlPaqueteo.CollectionChanged, AddressOf FixupControlPaqueteo
                End If
                _controlPaqueteo = value
                If _controlPaqueteo IsNot Nothing Then
                    AddHandler _controlPaqueteo.CollectionChanged, AddressOf FixupControlPaqueteo
                End If
                OnNavigationPropertyChanged("ControlPaqueteo")
            End If
        End Set
    End Property

    Private _controlPaqueteo As TrackableCollection(Of ControlPaqueteo)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Cortadora = Nothing
        Extrusora = Nothing
        Ladrillo = Nothing
        Planta = Nothing
        TipoProduccion = Nothing
        Personas = Nothing
        KardexLote.Clear()
        Personas1 = Nothing
        Personas2 = Nothing
        Personas3 = Nothing
        RegistroEquipo.Clear()
        PlanCargaDescargaHorno.Clear()
        ControlPaqueteo.Clear()
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupCortadora(ByVal previousValue As Cortadora, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Cortadora IsNot Nothing Then
            COR_ID = Cortadora.COR_ID
        ElseIf Not skipKeys Then
            COR_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Cortadora") AndAlso
                ChangeTracker.OriginalValues("Cortadora") Is Cortadora Then
                ChangeTracker.OriginalValues.Remove("Cortadora")
            Else
                ChangeTracker.RecordOriginalValue("Cortadora", previousValue)
            End If
            If Cortadora IsNot Nothing AndAlso Not Cortadora.ChangeTracker.ChangeTrackingEnabled Then
                Cortadora.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupExtrusora(ByVal previousValue As Extrusora, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Extrusora IsNot Nothing Then
            EXT_ID = Extrusora.EXT_ID
        ElseIf Not skipKeys Then
            EXT_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Extrusora") AndAlso
                ChangeTracker.OriginalValues("Extrusora") Is Extrusora Then
                ChangeTracker.OriginalValues.Remove("Extrusora")
            Else
                ChangeTracker.RecordOriginalValue("Extrusora", previousValue)
            End If
            If Extrusora IsNot Nothing AndAlso Not Extrusora.ChangeTracker.ChangeTrackingEnabled Then
                Extrusora.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupLadrillo(ByVal previousValue As Ladrillo, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Ladrillo IsNot Nothing Then
            LAD_ID = Ladrillo.LAD_ID
        ElseIf Not skipKeys Then
            LAD_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Ladrillo") AndAlso
                ChangeTracker.OriginalValues("Ladrillo") Is Ladrillo Then
                ChangeTracker.OriginalValues.Remove("Ladrillo")
            Else
                ChangeTracker.RecordOriginalValue("Ladrillo", previousValue)
            End If
            If Ladrillo IsNot Nothing AndAlso Not Ladrillo.ChangeTracker.ChangeTrackingEnabled Then
                Ladrillo.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPlanta(ByVal previousValue As Planta, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Planta IsNot Nothing Then
            PLA_ID = Planta.PLA_ID
        ElseIf Not skipKeys Then
            PLA_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Planta") AndAlso
                ChangeTracker.OriginalValues("Planta") Is Planta Then
                ChangeTracker.OriginalValues.Remove("Planta")
            Else
                ChangeTracker.RecordOriginalValue("Planta", previousValue)
            End If
            If Planta IsNot Nothing AndAlso Not Planta.ChangeTracker.ChangeTrackingEnabled Then
                Planta.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoProduccion(ByVal previousValue As TipoProduccion, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If TipoProduccion IsNot Nothing Then
            TPR_ID = TipoProduccion.TPR_ID
        ElseIf Not skipKeys Then
            TPR_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoProduccion") AndAlso
                ChangeTracker.OriginalValues("TipoProduccion") Is TipoProduccion Then
                ChangeTracker.OriginalValues.Remove("TipoProduccion")
            Else
                ChangeTracker.RecordOriginalValue("TipoProduccion", previousValue)
            End If
            If TipoProduccion IsNot Nothing AndAlso Not TipoProduccion.ChangeTracker.ChangeTrackingEnabled Then
                TipoProduccion.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Personas IsNot Nothing Then
            PER_ID_ING = Personas.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_ING = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas1(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Personas1 IsNot Nothing Then
            PER_ID_ING2 = Personas1.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_ING2 = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas1") AndAlso
                ChangeTracker.OriginalValues("Personas1") Is Personas1 Then
                ChangeTracker.OriginalValues.Remove("Personas1")
            Else
                ChangeTracker.RecordOriginalValue("Personas1", previousValue)
            End If
            If Personas1 IsNot Nothing AndAlso Not Personas1.ChangeTracker.ChangeTrackingEnabled Then
                Personas1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas2(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Personas2 IsNot Nothing Then
            PER_ID_OPE = Personas2.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_OPE = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas2") AndAlso
                ChangeTracker.OriginalValues("Personas2") Is Personas2 Then
                ChangeTracker.OriginalValues.Remove("Personas2")
            Else
                ChangeTracker.RecordOriginalValue("Personas2", previousValue)
            End If
            If Personas2 IsNot Nothing AndAlso Not Personas2.ChangeTracker.ChangeTrackingEnabled Then
                Personas2.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas3(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Personas3 IsNot Nothing Then
            PER_ID_OPE2 = Personas3.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_OPE2 = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas3") AndAlso
                ChangeTracker.OriginalValues("Personas3") Is Personas3 Then
                ChangeTracker.OriginalValues.Remove("Personas3")
            Else
                ChangeTracker.RecordOriginalValue("Personas3", previousValue)
            End If
            If Personas3 IsNot Nothing AndAlso Not Personas3.ChangeTracker.ChangeTrackingEnabled Then
                Personas3.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupKardexLote(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As KardexLote In e.NewItems
                item.Produccion = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("KardexLote", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As KardexLote In e.OldItems
                If ReferenceEquals(item.Produccion, Me) Then
                    item.Produccion = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("KardexLote", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupRegistroEquipo(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As RegistroEquipo In e.NewItems
                item.Produccion = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("RegistroEquipo", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As RegistroEquipo In e.OldItems
                If ReferenceEquals(item.Produccion, Me) Then
                    item.Produccion = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("RegistroEquipo", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupPlanCargaDescargaHorno(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PlanCargaDescargaHorno In e.NewItems
                item.Produccion = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PlanCargaDescargaHorno", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PlanCargaDescargaHorno In e.OldItems
                If ReferenceEquals(item.Produccion, Me) Then
                    item.Produccion = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PlanCargaDescargaHorno", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupControlPaqueteo(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As ControlPaqueteo In e.NewItems
                item.Produccion = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("ControlPaqueteo", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As ControlPaqueteo In e.OldItems
                If ReferenceEquals(item.Produccion, Me) Then
                    item.Produccion = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("ControlPaqueteo", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
