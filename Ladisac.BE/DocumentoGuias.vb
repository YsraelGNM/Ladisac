'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Personas))>
<KnownType(GetType(DocumentoGuiasDetalle))>
<KnownType(GetType(OrdenServicio))>
Partial Public Class DocumentoGuias
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared DGU_ID As string = "DGU_ID"
				public shared PER_ID_PROVEEDOR As string = "PER_ID_PROVEEDOR"
				public shared TDO_ID As string = "TDO_ID"
				public shared DTD_ID As string = "DTD_ID"
				public shared DOC_SERIE As string = "DOC_SERIE"
				public shared DOC_NUMERO As string = "DOC_NUMERO"
				public shared USU_ID As string = "USU_ID"
				public shared DGU_FEC_GRAB As string = "DGU_FEC_GRAB"
				public shared DGU_ESTADO As string = "DGU_ESTADO"
				public shared DGU_MONTO As string = "DGU_MONTO"
		    End Structure
	



    <DataMember()>
    Public Property DGU_ID() As Integer
        Get
            Return _dGU_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_dGU_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DGU_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _dGU_ID = value
                OnPropertyChanged("DGU_ID")
            End If
        End Set
    End Property

    Private _dGU_ID As Integer

    <DataMember()>
    Public Property PER_ID_PROVEEDOR() As String
        Get
            Return _pER_ID_PROVEEDOR
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_PROVEEDOR, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_PROVEEDOR", _pER_ID_PROVEEDOR)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID_PROVEEDOR = value
                OnPropertyChanged("PER_ID_PROVEEDOR")
            End If
        End Set
    End Property

    Private _pER_ID_PROVEEDOR As String

    <DataMember()>
    Public Property TDO_ID() As String
        Get
            Return _tDO_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID, value) Then
                _tDO_ID = value
                OnPropertyChanged("TDO_ID")
            End If
        End Set
    End Property

    Private _tDO_ID As String

    <DataMember()>
    Public Property DTD_ID() As String
        Get
            Return _dTD_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID, value) Then
                _dTD_ID = value
                OnPropertyChanged("DTD_ID")
            End If
        End Set
    End Property

    Private _dTD_ID As String

    <DataMember()>
    Public Property DOC_SERIE() As String
        Get
            Return _dOC_SERIE
        End Get
        Set(ByVal value As String)
            If Not Equals(_dOC_SERIE, value) Then
                _dOC_SERIE = value
                OnPropertyChanged("DOC_SERIE")
            End If
        End Set
    End Property

    Private _dOC_SERIE As String

    <DataMember()>
    Public Property DOC_NUMERO() As String
        Get
            Return _dOC_NUMERO
        End Get
        Set(ByVal value As String)
            If Not Equals(_dOC_NUMERO, value) Then
                _dOC_NUMERO = value
                OnPropertyChanged("DOC_NUMERO")
            End If
        End Set
    End Property

    Private _dOC_NUMERO As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property DGU_FEC_GRAB() As Nullable(Of Date)
        Get
            Return _dGU_FEC_GRAB
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_dGU_FEC_GRAB, value) Then
                _dGU_FEC_GRAB = value
                OnPropertyChanged("DGU_FEC_GRAB")
            End If
        End Set
    End Property

    Private _dGU_FEC_GRAB As Nullable(Of Date)

    <DataMember()>
    Public Property DGU_ESTADO() As Nullable(Of Boolean)
        Get
            Return _dGU_ESTADO
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_dGU_ESTADO, value) Then
                _dGU_ESTADO = value
                OnPropertyChanged("DGU_ESTADO")
            End If
        End Set
    End Property

    Private _dGU_ESTADO As Nullable(Of Boolean)

    <DataMember()>
    Public Property DGU_MONTO() As Nullable(Of Decimal)
        Get
            Return _dGU_MONTO
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dGU_MONTO, value) Then
                _dGU_MONTO = value
                OnPropertyChanged("DGU_MONTO")
            End If
        End Set
    End Property

    Private _dGU_MONTO As Nullable(Of Decimal)

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property DocumentoGuiasDetalle() As TrackableCollection(Of DocumentoGuiasDetalle)
        Get
            If _documentoGuiasDetalle Is Nothing Then
                _documentoGuiasDetalle = New TrackableCollection(Of DocumentoGuiasDetalle)
                AddHandler _documentoGuiasDetalle.CollectionChanged, AddressOf FixupDocumentoGuiasDetalle
            End If
            Return _documentoGuiasDetalle
        End Get
        Set(ByVal value As TrackableCollection(Of DocumentoGuiasDetalle))
            If Not Object.ReferenceEquals(_documentoGuiasDetalle, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _documentoGuiasDetalle IsNot Nothing Then
                    RemoveHandler _documentoGuiasDetalle.CollectionChanged, AddressOf FixupDocumentoGuiasDetalle
                End If
                _documentoGuiasDetalle = value
                If _documentoGuiasDetalle IsNot Nothing Then
                    AddHandler _documentoGuiasDetalle.CollectionChanged, AddressOf FixupDocumentoGuiasDetalle
                End If
                OnNavigationPropertyChanged("DocumentoGuiasDetalle")
            End If
        End Set
    End Property

    Private _documentoGuiasDetalle As TrackableCollection(Of DocumentoGuiasDetalle)

    <DataMember()>
    Public Property OrdenServicio() As TrackableCollection(Of OrdenServicio)
        Get
            If _ordenServicio Is Nothing Then
                _ordenServicio = New TrackableCollection(Of OrdenServicio)
                AddHandler _ordenServicio.CollectionChanged, AddressOf FixupOrdenServicio
            End If
            Return _ordenServicio
        End Get
        Set(ByVal value As TrackableCollection(Of OrdenServicio))
            If Not Object.ReferenceEquals(_ordenServicio, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _ordenServicio IsNot Nothing Then
                    RemoveHandler _ordenServicio.CollectionChanged, AddressOf FixupOrdenServicio
                End If
                _ordenServicio = value
                If _ordenServicio IsNot Nothing Then
                    AddHandler _ordenServicio.CollectionChanged, AddressOf FixupOrdenServicio
                End If
                OnNavigationPropertyChanged("OrdenServicio")
            End If
        End Set
    End Property

    Private _ordenServicio As TrackableCollection(Of OrdenServicio)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Personas = Nothing
        DocumentoGuiasDetalle.Clear()
        OrdenServicio.Clear()
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupPersonas(ByVal previousValue As Personas)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DocumentoGuias.Contains(Me) Then
            previousValue.DocumentoGuias.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.DocumentoGuias.Contains(Me) Then
                Personas.DocumentoGuias.Add(Me)
            End If

            PER_ID_PROVEEDOR = Personas.PER_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDocumentoGuiasDetalle(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DocumentoGuiasDetalle In e.NewItems
                item.DocumentoGuias = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DocumentoGuiasDetalle", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DocumentoGuiasDetalle In e.OldItems
                If ReferenceEquals(item.DocumentoGuias, Me) Then
                    item.DocumentoGuias = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DocumentoGuiasDetalle", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupOrdenServicio(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As OrdenServicio In e.NewItems
                item.DocumentoGuias = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("OrdenServicio", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As OrdenServicio In e.OldItems
                If ReferenceEquals(item.DocumentoGuias, Me) Then
                    item.DocumentoGuias = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("OrdenServicio", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
