'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(CorrelativoTipoDocumento))>
<KnownType(GetType(PuntoVentaDatosUsuarios))>
<KnownType(GetType(Usuarios))>
Partial Public Class SeriesDatosUsuarios
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared DAU_ID As string = "DAU_ID"
				public shared PVE_ID As string = "PVE_ID"
				public shared TDO_ID As string = "TDO_ID"
				public shared CTD_COR_SERIE As string = "CTD_COR_SERIE"
				public shared USU_ID As string = "USU_ID"
				public shared SDU_FEC_GRAB As string = "SDU_FEC_GRAB"
				public shared SDU_ESTADO As string = "SDU_ESTADO"
		    End Structure
	



    <DataMember()>
    Public Property DAU_ID() As String
        Get
            Return _dAU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_dAU_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DAU_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If PuntoVentaDatosUsuarios IsNot Nothing AndAlso Not Equals(PuntoVentaDatosUsuarios.DAU_ID, value) Then
                        PuntoVentaDatosUsuarios = Nothing
                    End If
                End If
                _dAU_ID = value
                OnPropertyChanged("DAU_ID")
            End If
        End Set
    End Property

    Private _dAU_ID As String

    <DataMember()>
    Public Property PVE_ID() As String
        Get
            Return _pVE_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_pVE_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'PVE_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If PuntoVentaDatosUsuarios IsNot Nothing AndAlso Not Equals(PuntoVentaDatosUsuarios.PVE_ID, value) Then
                        PuntoVentaDatosUsuarios = Nothing
                    End If
                End If
                _pVE_ID = value
                OnPropertyChanged("PVE_ID")
            End If
        End Set
    End Property

    Private _pVE_ID As String

    <DataMember()>
    Public Property TDO_ID() As String
        Get
            Return _tDO_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'TDO_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If CorrelativoTipoDocumento IsNot Nothing AndAlso Not Equals(CorrelativoTipoDocumento.TDO_ID, value) Then
                        CorrelativoTipoDocumento = Nothing
                    End If
                End If
                _tDO_ID = value
                OnPropertyChanged("TDO_ID")
            End If
        End Set
    End Property

    Private _tDO_ID As String

    <DataMember()>
    Public Property CTD_COR_SERIE() As String
        Get
            Return _cTD_COR_SERIE
        End Get
        Set(ByVal value As String)
            If Not Equals(_cTD_COR_SERIE, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'CTD_COR_SERIE' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If CorrelativoTipoDocumento IsNot Nothing AndAlso Not Equals(CorrelativoTipoDocumento.CTD_COR_SERIE, value) Then
                        CorrelativoTipoDocumento = Nothing
                    End If
                End If
                _cTD_COR_SERIE = value
                OnPropertyChanged("CTD_COR_SERIE")
            End If
        End Set
    End Property

    Private _cTD_COR_SERIE As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property SDU_FEC_GRAB() As Date
        Get
            Return _sDU_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_sDU_FEC_GRAB, value) Then
                _sDU_FEC_GRAB = value
                OnPropertyChanged("SDU_FEC_GRAB")
            End If
        End Set
    End Property

    Private _sDU_FEC_GRAB As Date

    <DataMember()>
    Public Property SDU_ESTADO() As Boolean
        Get
            Return _sDU_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_sDU_ESTADO, value) Then
                _sDU_ESTADO = value
                OnPropertyChanged("SDU_ESTADO")
            End If
        End Set
    End Property

    Private _sDU_ESTADO As Boolean

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property CorrelativoTipoDocumento() As CorrelativoTipoDocumento
        Get
            Return _correlativoTipoDocumento
        End Get
        Set(ByVal value As CorrelativoTipoDocumento)
            If _correlativoTipoDocumento IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(TDO_ID, value.TDO_ID) OrElse Not Equals(CTD_COR_SERIE, value.CTD_COR_SERIE) Then
                        Throw New InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As CorrelativoTipoDocumento = _correlativoTipoDocumento
                _correlativoTipoDocumento = value
                FixupCorrelativoTipoDocumento(previousValue)
                OnNavigationPropertyChanged("CorrelativoTipoDocumento")
            End If
        End Set
    End Property

    Private _correlativoTipoDocumento As CorrelativoTipoDocumento


    <DataMember()>
    Public Property PuntoVentaDatosUsuarios() As PuntoVentaDatosUsuarios
        Get
            Return _puntoVentaDatosUsuarios
        End Get
        Set(ByVal value As PuntoVentaDatosUsuarios)
            If _puntoVentaDatosUsuarios IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(DAU_ID, value.DAU_ID) OrElse Not Equals(PVE_ID, value.PVE_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As PuntoVentaDatosUsuarios = _puntoVentaDatosUsuarios
                _puntoVentaDatosUsuarios = value
                FixupPuntoVentaDatosUsuarios(previousValue)
                OnNavigationPropertyChanged("PuntoVentaDatosUsuarios")
            End If
        End Set
    End Property

    Private _puntoVentaDatosUsuarios As PuntoVentaDatosUsuarios


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociación que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesará notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        CorrelativoTipoDocumento = Nothing
        PuntoVentaDatosUsuarios = Nothing
        Usuarios = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupCorrelativoTipoDocumento(ByVal previousValue As CorrelativoTipoDocumento)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.SeriesDatosUsuarios.Contains(Me) Then
            previousValue.SeriesDatosUsuarios.Remove(Me)
        End If

        If CorrelativoTipoDocumento IsNot Nothing Then
            If Not CorrelativoTipoDocumento.SeriesDatosUsuarios.Contains(Me) Then
                CorrelativoTipoDocumento.SeriesDatosUsuarios.Add(Me)
            End If

            TDO_ID = CorrelativoTipoDocumento.TDO_ID
            CTD_COR_SERIE = CorrelativoTipoDocumento.CTD_COR_SERIE
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CorrelativoTipoDocumento") AndAlso
                ChangeTracker.OriginalValues("CorrelativoTipoDocumento") Is CorrelativoTipoDocumento Then
                ChangeTracker.OriginalValues.Remove("CorrelativoTipoDocumento")
            Else
                ChangeTracker.RecordOriginalValue("CorrelativoTipoDocumento", previousValue)
            End If
            If CorrelativoTipoDocumento IsNot Nothing AndAlso Not CorrelativoTipoDocumento.ChangeTracker.ChangeTrackingEnabled Then
                CorrelativoTipoDocumento.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPuntoVentaDatosUsuarios(ByVal previousValue As PuntoVentaDatosUsuarios)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.SeriesDatosUsuarios.Contains(Me) Then
            previousValue.SeriesDatosUsuarios.Remove(Me)
        End If

        If PuntoVentaDatosUsuarios IsNot Nothing Then
            If Not PuntoVentaDatosUsuarios.SeriesDatosUsuarios.Contains(Me) Then
                PuntoVentaDatosUsuarios.SeriesDatosUsuarios.Add(Me)
            End If

            DAU_ID = PuntoVentaDatosUsuarios.DAU_ID
            PVE_ID = PuntoVentaDatosUsuarios.PVE_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("PuntoVentaDatosUsuarios") AndAlso
                ChangeTracker.OriginalValues("PuntoVentaDatosUsuarios") Is PuntoVentaDatosUsuarios Then
                ChangeTracker.OriginalValues.Remove("PuntoVentaDatosUsuarios")
            Else
                ChangeTracker.RecordOriginalValue("PuntoVentaDatosUsuarios", previousValue)
            End If
            If PuntoVentaDatosUsuarios IsNot Nothing AndAlso Not PuntoVentaDatosUsuarios.ChangeTracker.ChangeTrackingEnabled Then
                PuntoVentaDatosUsuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
