'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(DetallePermisoCuentaCorriente))>
<KnownType(GetType(PermisoUsuario))>
<KnownType(GetType(Usuarios))>
Partial Public Class PermisoCuentaCorriente
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared PEU_ID As string = "PEU_ID"
				public shared USU_ID As string = "USU_ID"
				public shared PCC_FEC_GRAB As string = "PCC_FEC_GRAB"
				public shared PCC_ESTADO As string = "PCC_ESTADO"
				public shared USU_ID_GRAB As string = "USU_ID_GRAB"
		    End Structure
	



    <DataMember()>
    Public Property PEU_ID() As String
        Get
            Return _pEU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_pEU_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'PEU_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If PermisoUsuario IsNot Nothing AndAlso Not Equals(PermisoUsuario.PEU_ID, value) Then
                        PermisoUsuario = Nothing
                    End If
                End If
                _pEU_ID = value
                OnPropertyChanged("PEU_ID")
            End If
        End Set
    End Property

    Private _pEU_ID As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property PCC_FEC_GRAB() As Date
        Get
            Return _pCC_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_pCC_FEC_GRAB, value) Then
                _pCC_FEC_GRAB = value
                OnPropertyChanged("PCC_FEC_GRAB")
            End If
        End Set
    End Property

    Private _pCC_FEC_GRAB As Date

    <DataMember()>
    Public Property PCC_ESTADO() As Boolean
        Get
            Return _pCC_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_pCC_ESTADO, value) Then
                _pCC_ESTADO = value
                OnPropertyChanged("PCC_ESTADO")
            End If
        End Set
    End Property

    Private _pCC_ESTADO As Boolean

    <DataMember()>
    Public Property USU_ID_GRAB() As String
        Get
            Return _uSU_ID_GRAB
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID_GRAB, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID_GRAB", _uSU_ID_GRAB)
                If Not IsDeserializing Then
                    If Usuarios1 IsNot Nothing AndAlso Not Equals(Usuarios1.USU_ID, value) Then
                        Usuarios1 = Nothing
                    End If
                End If
                _uSU_ID_GRAB = value
                OnPropertyChanged("USU_ID_GRAB")
            End If
        End Set
    End Property

    Private _uSU_ID_GRAB As String

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property DetallePermisoCuentaCorriente() As TrackableCollection(Of DetallePermisoCuentaCorriente)
        Get
            If _detallePermisoCuentaCorriente Is Nothing Then
                _detallePermisoCuentaCorriente = New TrackableCollection(Of DetallePermisoCuentaCorriente)
                AddHandler _detallePermisoCuentaCorriente.CollectionChanged, AddressOf FixupDetallePermisoCuentaCorriente
            End If
            Return _detallePermisoCuentaCorriente
        End Get
        Set(ByVal value As TrackableCollection(Of DetallePermisoCuentaCorriente))
            If Not Object.ReferenceEquals(_detallePermisoCuentaCorriente, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detallePermisoCuentaCorriente IsNot Nothing Then
                    RemoveHandler _detallePermisoCuentaCorriente.CollectionChanged, AddressOf FixupDetallePermisoCuentaCorriente
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminación en cascada para aquellas entidades de la colección actual.
                    For Each item As DetallePermisoCuentaCorriente In _detallePermisoCuentaCorriente
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detallePermisoCuentaCorriente = value
                If _detallePermisoCuentaCorriente IsNot Nothing Then
                    AddHandler _detallePermisoCuentaCorriente.CollectionChanged, AddressOf FixupDetallePermisoCuentaCorriente
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                    For Each item As DetallePermisoCuentaCorriente In _detallePermisoCuentaCorriente
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetallePermisoCuentaCorriente")
            End If
        End Set
    End Property

    Private _detallePermisoCuentaCorriente As TrackableCollection(Of DetallePermisoCuentaCorriente)

    <DataMember()>
    Public Property PermisoUsuario() As PermisoUsuario
        Get
            Return _permisoUsuario
        End Get
        Set(ByVal value As PermisoUsuario)
            If _permisoUsuario IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(PEU_ID, value.PEU_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As PermisoUsuario = _permisoUsuario
                _permisoUsuario = value
                FixupPermisoUsuario(previousValue)
                OnNavigationPropertyChanged("PermisoUsuario")
            End If
        End Set
    End Property

    Private _permisoUsuario As PermisoUsuario


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property Usuarios1() As Usuarios
        Get
            Return _usuarios1
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios1 IsNot value Then
                Dim previousValue As Usuarios = _usuarios1
                _usuarios1 = value
                FixupUsuarios1(previousValue)
                OnNavigationPropertyChanged("Usuarios1")
            End If
        End Set
    End Property

    Private _usuarios1 As Usuarios


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociación que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesará notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        DetallePermisoCuentaCorriente.Clear()
        PermisoUsuario = Nothing
        Usuarios = Nothing
        Usuarios1 = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupPermisoUsuario(ByVal previousValue As PermisoUsuario)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso ReferenceEquals(previousValue.PermisoCuentaCorriente, Me) Then
            previousValue.PermisoCuentaCorriente = Nothing
        End If

        If PermisoUsuario IsNot Nothing Then
            PermisoUsuario.PermisoCuentaCorriente = Me
            PEU_ID = PermisoUsuario.PEU_ID
        End If

        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("PermisoUsuario") AndAlso
                ChangeTracker.OriginalValues("PermisoUsuario") Is PermisoUsuario Then
                ChangeTracker.OriginalValues.Remove("PermisoUsuario")
            Else
                ChangeTracker.RecordOriginalValue("PermisoUsuario", previousValue)
            End If
            If PermisoUsuario IsNot Nothing AndAlso Not PermisoUsuario.ChangeTracker.ChangeTrackingEnabled Then
                PermisoUsuario.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.PermisoCuentaCorriente.Contains(Me) Then
            previousValue.PermisoCuentaCorriente.Remove(Me)
        End If

        If Usuarios IsNot Nothing Then
            If Not Usuarios.PermisoCuentaCorriente.Contains(Me) Then
                Usuarios.PermisoCuentaCorriente.Add(Me)
            End If

            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios1(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.PermisoCuentaCorriente1.Contains(Me) Then
            previousValue.PermisoCuentaCorriente1.Remove(Me)
        End If

        If Usuarios1 IsNot Nothing Then
            If Not Usuarios1.PermisoCuentaCorriente1.Contains(Me) Then
                Usuarios1.PermisoCuentaCorriente1.Add(Me)
            End If

            USU_ID_GRAB = Usuarios1.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios1") AndAlso
                ChangeTracker.OriginalValues("Usuarios1") Is Usuarios1 Then
                ChangeTracker.OriginalValues.Remove("Usuarios1")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios1", previousValue)
            End If
            If Usuarios1 IsNot Nothing AndAlso Not Usuarios1.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetallePermisoCuentaCorriente(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetallePermisoCuentaCorriente In e.NewItems
                item.PermisoCuentaCorriente = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetallePermisoCuentaCorriente", item)
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetallePermisoCuentaCorriente In e.OldItems
                If ReferenceEquals(item.PermisoCuentaCorriente, Me) Then
                    item.PermisoCuentaCorriente = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetallePermisoCuentaCorriente", item)
                    ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                    ' permite que la relación se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

#End Region
End Class
