'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Moneda))>
<KnownType(GetType(DetalleTipoDocumentos))>
<KnownType(GetType(TipoDocumentos))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(DetalleComprobantes))>
<KnownType(GetType(Personas))>
Partial Public Class Comprobantes
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared cct_Id As string = "cct_Id"
				public shared tdo_Id As string = "tdo_Id"
				public shared dtd_Id As string = "dtd_Id"
				public shared cob_Serie As string = "cob_Serie"
				public shared cob_Numero As string = "cob_Numero"
				public shared cob_Fecha As string = "cob_Fecha"
				public shared cbo_SerieComprobante As string = "cbo_SerieComprobante"
				public shared cbo_NumeroComprobante As string = "cbo_NumeroComprobante"
				public shared cbo_Observaciones As string = "cbo_Observaciones"
				public shared mon_Id As string = "mon_Id"
				public shared per_Id As string = "per_Id"
				public shared cbo_EsRecogido As string = "cbo_EsRecogido"
				public shared cob_FechaComprobante As string = "cob_FechaComprobante"
				public shared cbo_TotalImporte As string = "cbo_TotalImporte"
				public shared Usu_Id As string = "Usu_Id"
				public shared cbo_FecGrab As string = "cbo_FecGrab"
				public shared cbo_autoriza1 As string = "cbo_autoriza1"
				public shared cbo_fechaautoriza1 As string = "cbo_fechaautoriza1"
				public shared cbo_autoriza2 As string = "cbo_autoriza2"
				public shared cbo_fechaautoriza2 As string = "cbo_fechaautoriza2"
				public shared cbo_autoriza3 As string = "cbo_autoriza3"
				public shared cbo_fechaautoriza3 As string = "cbo_fechaautoriza3"
		    End Structure
	



    <DataMember()>
    Public Property cct_Id() As String
        Get
            Return _cct_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_cct_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'cct_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _cct_Id = value
                OnPropertyChanged("cct_Id")
            End If
        End Set
    End Property

    Private _cct_Id As String

    <DataMember()>
    Public Property tdo_Id() As String
        Get
            Return _tdo_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tdo_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'tdo_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If TipoDocumentos IsNot Nothing AndAlso Not Equals(TipoDocumentos.TDO_ID, value) Then
                        TipoDocumentos = Nothing
                    End If
                End If
                _tdo_Id = value
                OnPropertyChanged("tdo_Id")
            End If
        End Set
    End Property

    Private _tdo_Id As String

    <DataMember()>
    Public Property dtd_Id() As String
        Get
            Return _dtd_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_dtd_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'dtd_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If DetalleTipoDocumentos IsNot Nothing AndAlso Not Equals(DetalleTipoDocumentos.DTD_ID, value) Then
                        DetalleTipoDocumentos = Nothing
                    End If
                End If
                _dtd_Id = value
                OnPropertyChanged("dtd_Id")
            End If
        End Set
    End Property

    Private _dtd_Id As String

    <DataMember()>
    Public Property cob_Serie() As String
        Get
            Return _cob_Serie
        End Get
        Set(ByVal value As String)
            If Not Equals(_cob_Serie, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'cob_Serie' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _cob_Serie = value
                OnPropertyChanged("cob_Serie")
            End If
        End Set
    End Property

    Private _cob_Serie As String

    <DataMember()>
    Public Property cob_Numero() As String
        Get
            Return _cob_Numero
        End Get
        Set(ByVal value As String)
            If Not Equals(_cob_Numero, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'cob_Numero' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _cob_Numero = value
                OnPropertyChanged("cob_Numero")
            End If
        End Set
    End Property

    Private _cob_Numero As String

    <DataMember()>
    Public Property cob_Fecha() As Date
        Get
            Return _cob_Fecha
        End Get
        Set(ByVal value As Date)
            If Not Equals(_cob_Fecha, value) Then
                _cob_Fecha = value
                OnPropertyChanged("cob_Fecha")
            End If
        End Set
    End Property

    Private _cob_Fecha As Date

    <DataMember()>
    Public Property cbo_SerieComprobante() As String
        Get
            Return _cbo_SerieComprobante
        End Get
        Set(ByVal value As String)
            If Not Equals(_cbo_SerieComprobante, value) Then
                _cbo_SerieComprobante = value
                OnPropertyChanged("cbo_SerieComprobante")
            End If
        End Set
    End Property

    Private _cbo_SerieComprobante As String

    <DataMember()>
    Public Property cbo_NumeroComprobante() As String
        Get
            Return _cbo_NumeroComprobante
        End Get
        Set(ByVal value As String)
            If Not Equals(_cbo_NumeroComprobante, value) Then
                _cbo_NumeroComprobante = value
                OnPropertyChanged("cbo_NumeroComprobante")
            End If
        End Set
    End Property

    Private _cbo_NumeroComprobante As String

    <DataMember()>
    Public Property cbo_Observaciones() As String
        Get
            Return _cbo_Observaciones
        End Get
        Set(ByVal value As String)
            If Not Equals(_cbo_Observaciones, value) Then
                _cbo_Observaciones = value
                OnPropertyChanged("cbo_Observaciones")
            End If
        End Set
    End Property

    Private _cbo_Observaciones As String

    <DataMember()>
    Public Property mon_Id() As String
        Get
            Return _mon_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_mon_Id, value) Then
                ChangeTracker.RecordOriginalValue("mon_Id", _mon_Id)
                If Not IsDeserializing Then
                    If Moneda IsNot Nothing AndAlso Not Equals(Moneda.MON_ID, value) Then
                        Moneda = Nothing
                    End If
                End If
                _mon_Id = value
                OnPropertyChanged("mon_Id")
            End If
        End Set
    End Property

    Private _mon_Id As String

    <DataMember()>
    Public Property per_Id() As String
        Get
            Return _per_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_per_Id, value) Then
                ChangeTracker.RecordOriginalValue("per_Id", _per_Id)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _per_Id = value
                OnPropertyChanged("per_Id")
            End If
        End Set
    End Property

    Private _per_Id As String

    <DataMember()>
    Public Property cbo_EsRecogido() As Nullable(Of Boolean)
        Get
            Return _cbo_EsRecogido
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_cbo_EsRecogido, value) Then
                _cbo_EsRecogido = value
                OnPropertyChanged("cbo_EsRecogido")
            End If
        End Set
    End Property

    Private _cbo_EsRecogido As Nullable(Of Boolean)

    <DataMember()>
    Public Property cob_FechaComprobante() As Nullable(Of Date)
        Get
            Return _cob_FechaComprobante
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_cob_FechaComprobante, value) Then
                _cob_FechaComprobante = value
                OnPropertyChanged("cob_FechaComprobante")
            End If
        End Set
    End Property

    Private _cob_FechaComprobante As Nullable(Of Date)

    <DataMember()>
    Public Property cbo_TotalImporte() As Nullable(Of Decimal)
        Get
            Return _cbo_TotalImporte
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_cbo_TotalImporte, value) Then
                _cbo_TotalImporte = value
                OnPropertyChanged("cbo_TotalImporte")
            End If
        End Set
    End Property

    Private _cbo_TotalImporte As Nullable(Of Decimal)

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                ChangeTracker.RecordOriginalValue("Usu_Id", _usu_Id)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property cbo_FecGrab() As Nullable(Of Date)
        Get
            Return _cbo_FecGrab
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_cbo_FecGrab, value) Then
                _cbo_FecGrab = value
                OnPropertyChanged("cbo_FecGrab")
            End If
        End Set
    End Property

    Private _cbo_FecGrab As Nullable(Of Date)

    <DataMember()>
    Public Property cbo_autoriza1() As String
        Get
            Return _cbo_autoriza1
        End Get
        Set(ByVal value As String)
            If Not Equals(_cbo_autoriza1, value) Then
                _cbo_autoriza1 = value
                OnPropertyChanged("cbo_autoriza1")
            End If
        End Set
    End Property

    Private _cbo_autoriza1 As String

    <DataMember()>
    Public Property cbo_fechaautoriza1() As Nullable(Of Date)
        Get
            Return _cbo_fechaautoriza1
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_cbo_fechaautoriza1, value) Then
                _cbo_fechaautoriza1 = value
                OnPropertyChanged("cbo_fechaautoriza1")
            End If
        End Set
    End Property

    Private _cbo_fechaautoriza1 As Nullable(Of Date)

    <DataMember()>
    Public Property cbo_autoriza2() As String
        Get
            Return _cbo_autoriza2
        End Get
        Set(ByVal value As String)
            If Not Equals(_cbo_autoriza2, value) Then
                _cbo_autoriza2 = value
                OnPropertyChanged("cbo_autoriza2")
            End If
        End Set
    End Property

    Private _cbo_autoriza2 As String

    <DataMember()>
    Public Property cbo_fechaautoriza2() As Nullable(Of Date)
        Get
            Return _cbo_fechaautoriza2
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_cbo_fechaautoriza2, value) Then
                _cbo_fechaautoriza2 = value
                OnPropertyChanged("cbo_fechaautoriza2")
            End If
        End Set
    End Property

    Private _cbo_fechaautoriza2 As Nullable(Of Date)

    <DataMember()>
    Public Property cbo_autoriza3() As String
        Get
            Return _cbo_autoriza3
        End Get
        Set(ByVal value As String)
            If Not Equals(_cbo_autoriza3, value) Then
                _cbo_autoriza3 = value
                OnPropertyChanged("cbo_autoriza3")
            End If
        End Set
    End Property

    Private _cbo_autoriza3 As String

    <DataMember()>
    Public Property cbo_fechaautoriza3() As Nullable(Of Date)
        Get
            Return _cbo_fechaautoriza3
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_cbo_fechaautoriza3, value) Then
                _cbo_fechaautoriza3 = value
                OnPropertyChanged("cbo_fechaautoriza3")
            End If
        End Set
    End Property

    Private _cbo_fechaautoriza3 As Nullable(Of Date)

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property Moneda() As Moneda
        Get
            Return _moneda
        End Get
        Set(ByVal value As Moneda)
            If _moneda IsNot value Then
                Dim previousValue As Moneda = _moneda
                _moneda = value
                FixupMoneda(previousValue)
                OnNavigationPropertyChanged("Moneda")
            End If
        End Set
    End Property

    Private _moneda As Moneda


    <DataMember()>
    Public Property DetalleTipoDocumentos() As DetalleTipoDocumentos
        Get
            Return _detalleTipoDocumentos
        End Get
        Set(ByVal value As DetalleTipoDocumentos)
            If _detalleTipoDocumentos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(dtd_Id, value.DTD_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As DetalleTipoDocumentos = _detalleTipoDocumentos
                _detalleTipoDocumentos = value
                FixupDetalleTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("DetalleTipoDocumentos")
            End If
        End Set
    End Property

    Private _detalleTipoDocumentos As DetalleTipoDocumentos


    <DataMember()>
    Public Property TipoDocumentos() As TipoDocumentos
        Get
            Return _tipoDocumentos
        End Get
        Set(ByVal value As TipoDocumentos)
            If _tipoDocumentos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(tdo_Id, value.TDO_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As TipoDocumentos = _tipoDocumentos
                _tipoDocumentos = value
                FixupTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("TipoDocumentos")
            End If
        End Set
    End Property

    Private _tipoDocumentos As TipoDocumentos


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property DetalleComprobantes() As TrackableCollection(Of DetalleComprobantes)
        Get
            If _detalleComprobantes Is Nothing Then
                _detalleComprobantes = New TrackableCollection(Of DetalleComprobantes)
                AddHandler _detalleComprobantes.CollectionChanged, AddressOf FixupDetalleComprobantes
            End If
            Return _detalleComprobantes
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleComprobantes))
            If Not Object.ReferenceEquals(_detalleComprobantes, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleComprobantes IsNot Nothing Then
                    RemoveHandler _detalleComprobantes.CollectionChanged, AddressOf FixupDetalleComprobantes
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As DetalleComprobantes In _detalleComprobantes
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detalleComprobantes = value
                If _detalleComprobantes IsNot Nothing Then
                    AddHandler _detalleComprobantes.CollectionChanged, AddressOf FixupDetalleComprobantes
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As DetalleComprobantes In _detalleComprobantes
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetalleComprobantes")
            End If
        End Set
    End Property

    Private _detalleComprobantes As TrackableCollection(Of DetalleComprobantes)

    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociaci칩n que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesar치 notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Moneda = Nothing
        DetalleTipoDocumentos = Nothing
        TipoDocumentos = Nothing
        Usuarios = Nothing
        DetalleComprobantes.Clear()
        Personas = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupMoneda(ByVal previousValue As Moneda, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Moneda IsNot Nothing Then
            mon_Id = Moneda.MON_ID
        ElseIf Not skipKeys Then
            mon_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Moneda") AndAlso
                ChangeTracker.OriginalValues("Moneda") Is Moneda Then
                ChangeTracker.OriginalValues.Remove("Moneda")
            Else
                ChangeTracker.RecordOriginalValue("Moneda", previousValue)
            End If
            If Moneda IsNot Nothing AndAlso Not Moneda.ChangeTracker.ChangeTrackingEnabled Then
                Moneda.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleTipoDocumentos(ByVal previousValue As DetalleTipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Comprobantes.Contains(Me) Then
            previousValue.Comprobantes.Remove(Me)
        End If

        If DetalleTipoDocumentos IsNot Nothing Then
            If Not DetalleTipoDocumentos.Comprobantes.Contains(Me) Then
                DetalleTipoDocumentos.Comprobantes.Add(Me)
            End If

            dtd_Id = DetalleTipoDocumentos.DTD_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("DetalleTipoDocumentos") Is DetalleTipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("DetalleTipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTipoDocumentos", previousValue)
            End If
            If DetalleTipoDocumentos IsNot Nothing AndAlso Not DetalleTipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoDocumentos(ByVal previousValue As TipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Comprobantes.Contains(Me) Then
            previousValue.Comprobantes.Remove(Me)
        End If

        If TipoDocumentos IsNot Nothing Then
            If Not TipoDocumentos.Comprobantes.Contains(Me) Then
                TipoDocumentos.Comprobantes.Add(Me)
            End If

            tdo_Id = TipoDocumentos.TDO_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("TipoDocumentos") Is TipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("TipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("TipoDocumentos", previousValue)
            End If
            If TipoDocumentos IsNot Nothing AndAlso Not TipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                TipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            Usu_Id = Usuarios.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Comprobantes.Contains(Me) Then
            previousValue.Comprobantes.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.Comprobantes.Contains(Me) Then
                Personas.Comprobantes.Add(Me)
            End If

            per_Id = Personas.PER_ID
        ElseIf Not skipKeys Then
            per_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleComprobantes(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleComprobantes In e.NewItems
                item.cct_Id = cct_Id
                item.tdo_Id = tdo_Id
                item.dtd_Id = dtd_Id
                item.cob_Serie = cob_Serie
                item.cob_Numero = cob_Numero
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleComprobantes", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleComprobantes In e.OldItems
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleComprobantes", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

#End Region
End Class
