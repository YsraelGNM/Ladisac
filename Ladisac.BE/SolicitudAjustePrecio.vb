'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Personas))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(SolicitudAjustePrecioDetalle))>
Partial Public Class SolicitudAjustePrecio
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared SAP_ID As string = "SAP_ID"
				public shared PER_ID_SOLICITADO As string = "PER_ID_SOLICITADO"
				public shared SAP_FECHA As string = "SAP_FECHA"
				public shared USU_ID As string = "USU_ID"
				public shared SAP_FEC_GRAB As string = "SAP_FEC_GRAB"
				public shared SAP_ESTADO As string = "SAP_ESTADO"
				public shared PER_ID_CLI As string = "PER_ID_CLI"
		    End Structure
	



    <DataMember()>
    Public Property SAP_ID() As Integer
        Get
            Return _sAP_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_sAP_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'SAP_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _sAP_ID = value
                OnPropertyChanged("SAP_ID")
            End If
        End Set
    End Property

    Private _sAP_ID As Integer

    <DataMember()>
    Public Property PER_ID_SOLICITADO() As String
        Get
            Return _pER_ID_SOLICITADO
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_SOLICITADO, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_SOLICITADO", _pER_ID_SOLICITADO)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID_SOLICITADO = value
                OnPropertyChanged("PER_ID_SOLICITADO")
            End If
        End Set
    End Property

    Private _pER_ID_SOLICITADO As String

    <DataMember()>
    Public Property SAP_FECHA() As Nullable(Of Date)
        Get
            Return _sAP_FECHA
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_sAP_FECHA, value) Then
                _sAP_FECHA = value
                OnPropertyChanged("SAP_FECHA")
            End If
        End Set
    End Property

    Private _sAP_FECHA As Nullable(Of Date)

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property SAP_FEC_GRAB() As Nullable(Of Date)
        Get
            Return _sAP_FEC_GRAB
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_sAP_FEC_GRAB, value) Then
                _sAP_FEC_GRAB = value
                OnPropertyChanged("SAP_FEC_GRAB")
            End If
        End Set
    End Property

    Private _sAP_FEC_GRAB As Nullable(Of Date)

    <DataMember()>
    Public Property SAP_ESTADO() As Nullable(Of Boolean)
        Get
            Return _sAP_ESTADO
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_sAP_ESTADO, value) Then
                _sAP_ESTADO = value
                OnPropertyChanged("SAP_ESTADO")
            End If
        End Set
    End Property

    Private _sAP_ESTADO As Nullable(Of Boolean)

    <DataMember()>
    Public Property PER_ID_CLI() As String
        Get
            Return _pER_ID_CLI
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_CLI, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_CLI", _pER_ID_CLI)
                If Not IsDeserializing Then
                    If Personas1 IsNot Nothing AndAlso Not Equals(Personas1.PER_ID, value) Then
                        Personas1 = Nothing
                    End If
                End If
                _pER_ID_CLI = value
                OnPropertyChanged("PER_ID_CLI")
            End If
        End Set
    End Property

    Private _pER_ID_CLI As String

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property Personas1() As Personas
        Get
            Return _personas1
        End Get
        Set(ByVal value As Personas)
            If _personas1 IsNot value Then
                Dim previousValue As Personas = _personas1
                _personas1 = value
                FixupPersonas1(previousValue)
                OnNavigationPropertyChanged("Personas1")
            End If
        End Set
    End Property

    Private _personas1 As Personas


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property SolicitudAjustePrecioDetalle() As TrackableCollection(Of SolicitudAjustePrecioDetalle)
        Get
            If _solicitudAjustePrecioDetalle Is Nothing Then
                _solicitudAjustePrecioDetalle = New TrackableCollection(Of SolicitudAjustePrecioDetalle)
                AddHandler _solicitudAjustePrecioDetalle.CollectionChanged, AddressOf FixupSolicitudAjustePrecioDetalle
            End If
            Return _solicitudAjustePrecioDetalle
        End Get
        Set(ByVal value As TrackableCollection(Of SolicitudAjustePrecioDetalle))
            If Not Object.ReferenceEquals(_solicitudAjustePrecioDetalle, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _solicitudAjustePrecioDetalle IsNot Nothing Then
                    RemoveHandler _solicitudAjustePrecioDetalle.CollectionChanged, AddressOf FixupSolicitudAjustePrecioDetalle
                End If
                _solicitudAjustePrecioDetalle = value
                If _solicitudAjustePrecioDetalle IsNot Nothing Then
                    AddHandler _solicitudAjustePrecioDetalle.CollectionChanged, AddressOf FixupSolicitudAjustePrecioDetalle
                End If
                OnNavigationPropertyChanged("SolicitudAjustePrecioDetalle")
            End If
        End Set
    End Property

    Private _solicitudAjustePrecioDetalle As TrackableCollection(Of SolicitudAjustePrecioDetalle)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Personas = Nothing
        Personas1 = Nothing
        Usuarios = Nothing
        SolicitudAjustePrecioDetalle.Clear()
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.SolicitudAjustePrecio.Contains(Me) Then
            previousValue.SolicitudAjustePrecio.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.SolicitudAjustePrecio.Contains(Me) Then
                Personas.SolicitudAjustePrecio.Add(Me)
            End If

            PER_ID_SOLICITADO = Personas.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_SOLICITADO = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas1(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.SolicitudAjustePrecio1.Contains(Me) Then
            previousValue.SolicitudAjustePrecio1.Remove(Me)
        End If

        If Personas1 IsNot Nothing Then
            If Not Personas1.SolicitudAjustePrecio1.Contains(Me) Then
                Personas1.SolicitudAjustePrecio1.Add(Me)
            End If

            PER_ID_CLI = Personas1.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_CLI = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas1") AndAlso
                ChangeTracker.OriginalValues("Personas1") Is Personas1 Then
                ChangeTracker.OriginalValues.Remove("Personas1")
            Else
                ChangeTracker.RecordOriginalValue("Personas1", previousValue)
            End If
            If Personas1 IsNot Nothing AndAlso Not Personas1.ChangeTracker.ChangeTrackingEnabled Then
                Personas1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.SolicitudAjustePrecio.Contains(Me) Then
            previousValue.SolicitudAjustePrecio.Remove(Me)
        End If

        If Usuarios IsNot Nothing Then
            If Not Usuarios.SolicitudAjustePrecio.Contains(Me) Then
                Usuarios.SolicitudAjustePrecio.Add(Me)
            End If

            USU_ID = Usuarios.USU_ID
        ElseIf Not skipKeys Then
            USU_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupSolicitudAjustePrecioDetalle(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As SolicitudAjustePrecioDetalle In e.NewItems
                item.SolicitudAjustePrecio = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("SolicitudAjustePrecioDetalle", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As SolicitudAjustePrecioDetalle In e.OldItems
                If ReferenceEquals(item.SolicitudAjustePrecio, Me) Then
                    item.SolicitudAjustePrecio = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("SolicitudAjustePrecioDetalle", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
