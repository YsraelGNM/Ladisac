'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(RestriccionArticulo))>
<KnownType(GetType(DescuentoIncrementoTipoVentaPersonas))>
<KnownType(GetType(DetalleListaPrecios))>
<KnownType(GetType(GrupoLineas))>
<KnownType(GetType(MarcaArticulos))>
<KnownType(GetType(ModeloArticulos))>
<KnownType(GetType(UnidadMedidaArticulos))>
<KnownType(GetType(RolArticulosTipoArticulos))>
<KnownType(GetType(TareaTrabajo))>
<KnownType(GetType(DetalleDespachos))>
<KnownType(GetType(DetalleDescuentoIncrementoTipoVentaPersonas))>
<KnownType(GetType(Inventario))>
<KnownType(GetType(DespachoSalidaDetalle))>
<KnownType(GetType(DetalleAfectaProductoDocumentos))>
<KnownType(GetType(TiposBienesServicios))>
<KnownType(GetType(CuentasContables))>
<KnownType(GetType(OrdenServicioDetalle))>
<KnownType(GetType(SolicitudAjustePrecioDetalle))>
<KnownType(GetType(CuentaRendirDetalle))>
Partial Public Class Articulos
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared ART_ID As string = "ART_ID"
				public shared ART_DESCRIPCION As string = "ART_DESCRIPCION"
				public shared ART_COD_FAB As string = "ART_COD_FAB"
				public shared ART_DESC_FAB As string = "ART_DESC_FAB"
				public shared ART_ORIGEN As string = "ART_ORIGEN"
				public shared UM_ID As string = "UM_ID"
				public shared MAR_ID As string = "MAR_ID"
				public shared MOD_ID As string = "MOD_ID"
				public shared ART_COLOR As string = "ART_COLOR"
				public shared GLI_ID As string = "GLI_ID"
				public shared ART_CONT_STOCK As string = "ART_CONT_STOCK"
				public shared ART_FICHA_TEC As string = "ART_FICHA_TEC"
				public shared ART_FOTO As string = "ART_FOTO"
				public shared ART_FACTOR As string = "ART_FACTOR"
				public shared ART_INC_IGV As string = "ART_INC_IGV"
				public shared ART_AFE_PER As string = "ART_AFE_PER"
				public shared ART_AFE_RET As string = "ART_AFE_RET"
				public shared ART_PRE_NEG As string = "ART_PRE_NEG"
				public shared USU_ID As string = "USU_ID"
				public shared ART_FEC_GRAB As string = "ART_FEC_GRAB"
				public shared ART_ESTADO As string = "ART_ESTADO"
				public shared ART_CANTIDAD As string = "ART_CANTIDAD"
				public shared ART_VALOR As string = "ART_VALOR"
				public shared ART_SS As string = "ART_SS"
				public shared ART_PP As string = "ART_PP"
				public shared ART_Codigo As string = "ART_Codigo"
				public shared ART_ORDEN_REPORTE As string = "ART_ORDEN_REPORTE"
				public shared TIB_TIPOBIEN_ID As string = "TIB_TIPOBIEN_ID"
				public shared CUC_ID_1 As string = "CUC_ID_1"
				public shared CUC_ID_2 As string = "CUC_ID_2"
				public shared CUC_ID_3 As string = "CUC_ID_3"
				public shared CUC_ID_4 As string = "CUC_ID_4"
				public shared ART_LEADTIME As string = "ART_LEADTIME"
				public shared Item As string = "Item"
		    End Structure
	



    <DataMember()>
    Public Property ART_ID() As String
        Get
            Return _aRT_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_aRT_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'ART_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _aRT_ID = value
                OnPropertyChanged("ART_ID")
            End If
        End Set
    End Property

    Private _aRT_ID As String

    <DataMember()>
    Public Property ART_DESCRIPCION() As String
        Get
            Return _aRT_DESCRIPCION
        End Get
        Set(ByVal value As String)
            If Not Equals(_aRT_DESCRIPCION, value) Then
                _aRT_DESCRIPCION = value
                OnPropertyChanged("ART_DESCRIPCION")
            End If
        End Set
    End Property

    Private _aRT_DESCRIPCION As String

    <DataMember()>
    Public Property ART_COD_FAB() As String
        Get
            Return _aRT_COD_FAB
        End Get
        Set(ByVal value As String)
            If Not Equals(_aRT_COD_FAB, value) Then
                _aRT_COD_FAB = value
                OnPropertyChanged("ART_COD_FAB")
            End If
        End Set
    End Property

    Private _aRT_COD_FAB As String

    <DataMember()>
    Public Property ART_DESC_FAB() As String
        Get
            Return _aRT_DESC_FAB
        End Get
        Set(ByVal value As String)
            If Not Equals(_aRT_DESC_FAB, value) Then
                _aRT_DESC_FAB = value
                OnPropertyChanged("ART_DESC_FAB")
            End If
        End Set
    End Property

    Private _aRT_DESC_FAB As String

    <DataMember()>
    Public Property ART_ORIGEN() As Short
        Get
            Return _aRT_ORIGEN
        End Get
        Set(ByVal value As Short)
            If Not Equals(_aRT_ORIGEN, value) Then
                _aRT_ORIGEN = value
                OnPropertyChanged("ART_ORIGEN")
            End If
        End Set
    End Property

    Private _aRT_ORIGEN As Short

    <DataMember()>
    Public Property UM_ID() As String
        Get
            Return _uM_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uM_ID, value) Then
                ChangeTracker.RecordOriginalValue("UM_ID", _uM_ID)
                If Not IsDeserializing Then
                    If UnidadMedidaArticulos IsNot Nothing AndAlso Not Equals(UnidadMedidaArticulos.UM_ID, value) Then
                        UnidadMedidaArticulos = Nothing
                    End If
                End If
                _uM_ID = value
                OnPropertyChanged("UM_ID")
            End If
        End Set
    End Property

    Private _uM_ID As String

    <DataMember()>
    Public Property MAR_ID() As String
        Get
            Return _mAR_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_mAR_ID, value) Then
                ChangeTracker.RecordOriginalValue("MAR_ID", _mAR_ID)
                If Not IsDeserializing Then
                    If MarcaArticulos IsNot Nothing AndAlso Not Equals(MarcaArticulos.MAR_ID, value) Then
                        MarcaArticulos = Nothing
                    End If
                End If
                _mAR_ID = value
                OnPropertyChanged("MAR_ID")
            End If
        End Set
    End Property

    Private _mAR_ID As String

    <DataMember()>
    Public Property MOD_ID() As String
        Get
            Return _mOD_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_mOD_ID, value) Then
                ChangeTracker.RecordOriginalValue("MOD_ID", _mOD_ID)
                If Not IsDeserializing Then
                    If ModeloArticulos IsNot Nothing AndAlso Not Equals(ModeloArticulos.MOD_ID, value) Then
                        ModeloArticulos = Nothing
                    End If
                End If
                _mOD_ID = value
                OnPropertyChanged("MOD_ID")
            End If
        End Set
    End Property

    Private _mOD_ID As String

    <DataMember()>
    Public Property ART_COLOR() As String
        Get
            Return _aRT_COLOR
        End Get
        Set(ByVal value As String)
            If Not Equals(_aRT_COLOR, value) Then
                _aRT_COLOR = value
                OnPropertyChanged("ART_COLOR")
            End If
        End Set
    End Property

    Private _aRT_COLOR As String

    <DataMember()>
    Public Property GLI_ID() As String
        Get
            Return _gLI_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_gLI_ID, value) Then
                ChangeTracker.RecordOriginalValue("GLI_ID", _gLI_ID)
                If Not IsDeserializing Then
                    If GrupoLineas IsNot Nothing AndAlso Not Equals(GrupoLineas.GLI_ID, value) Then
                        GrupoLineas = Nothing
                    End If
                End If
                _gLI_ID = value
                OnPropertyChanged("GLI_ID")
            End If
        End Set
    End Property

    Private _gLI_ID As String

    <DataMember()>
    Public Property ART_CONT_STOCK() As Boolean
        Get
            Return _aRT_CONT_STOCK
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_aRT_CONT_STOCK, value) Then
                _aRT_CONT_STOCK = value
                OnPropertyChanged("ART_CONT_STOCK")
            End If
        End Set
    End Property

    Private _aRT_CONT_STOCK As Boolean

    <DataMember()>
    Public Property ART_FICHA_TEC() As String
        Get
            Return _aRT_FICHA_TEC
        End Get
        Set(ByVal value As String)
            If Not Equals(_aRT_FICHA_TEC, value) Then
                _aRT_FICHA_TEC = value
                OnPropertyChanged("ART_FICHA_TEC")
            End If
        End Set
    End Property

    Private _aRT_FICHA_TEC As String

    <DataMember()>
    Public Property ART_FOTO() As Byte()
        Get
            Return _aRT_FOTO
        End Get
        Set(ByVal value As Byte())
            If _aRT_FOTO IsNot value Then
                _aRT_FOTO = value
                OnPropertyChanged("ART_FOTO")
            End If
        End Set
    End Property

    Private _aRT_FOTO As Byte()

    <DataMember()>
    Public Property ART_FACTOR() As Decimal
        Get
            Return _aRT_FACTOR
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_aRT_FACTOR, value) Then
                _aRT_FACTOR = value
                OnPropertyChanged("ART_FACTOR")
            End If
        End Set
    End Property

    Private _aRT_FACTOR As Decimal

    <DataMember()>
    Public Property ART_INC_IGV() As Short
        Get
            Return _aRT_INC_IGV
        End Get
        Set(ByVal value As Short)
            If Not Equals(_aRT_INC_IGV, value) Then
                _aRT_INC_IGV = value
                OnPropertyChanged("ART_INC_IGV")
            End If
        End Set
    End Property

    Private _aRT_INC_IGV As Short

    <DataMember()>
    Public Property ART_AFE_PER() As Boolean
        Get
            Return _aRT_AFE_PER
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_aRT_AFE_PER, value) Then
                _aRT_AFE_PER = value
                OnPropertyChanged("ART_AFE_PER")
            End If
        End Set
    End Property

    Private _aRT_AFE_PER As Boolean

    <DataMember()>
    Public Property ART_AFE_RET() As Boolean
        Get
            Return _aRT_AFE_RET
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_aRT_AFE_RET, value) Then
                _aRT_AFE_RET = value
                OnPropertyChanged("ART_AFE_RET")
            End If
        End Set
    End Property

    Private _aRT_AFE_RET As Boolean

    <DataMember()>
    Public Property ART_PRE_NEG() As Boolean
        Get
            Return _aRT_PRE_NEG
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_aRT_PRE_NEG, value) Then
                _aRT_PRE_NEG = value
                OnPropertyChanged("ART_PRE_NEG")
            End If
        End Set
    End Property

    Private _aRT_PRE_NEG As Boolean

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property ART_FEC_GRAB() As Date
        Get
            Return _aRT_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_aRT_FEC_GRAB, value) Then
                _aRT_FEC_GRAB = value
                OnPropertyChanged("ART_FEC_GRAB")
            End If
        End Set
    End Property

    Private _aRT_FEC_GRAB As Date

    <DataMember()>
    Public Property ART_ESTADO() As Boolean
        Get
            Return _aRT_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_aRT_ESTADO, value) Then
                _aRT_ESTADO = value
                OnPropertyChanged("ART_ESTADO")
            End If
        End Set
    End Property

    Private _aRT_ESTADO As Boolean

    <DataMember()>
    Public Property ART_CANTIDAD() As Nullable(Of Decimal)
        Get
            Return _aRT_CANTIDAD
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_aRT_CANTIDAD, value) Then
                _aRT_CANTIDAD = value
                OnPropertyChanged("ART_CANTIDAD")
            End If
        End Set
    End Property

    Private _aRT_CANTIDAD As Nullable(Of Decimal)

    <DataMember()>
    Public Property ART_VALOR() As Nullable(Of Decimal)
        Get
            Return _aRT_VALOR
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_aRT_VALOR, value) Then
                _aRT_VALOR = value
                OnPropertyChanged("ART_VALOR")
            End If
        End Set
    End Property

    Private _aRT_VALOR As Nullable(Of Decimal)

    <DataMember()>
    Public Property ART_SS() As Nullable(Of Decimal)
        Get
            Return _aRT_SS
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_aRT_SS, value) Then
                _aRT_SS = value
                OnPropertyChanged("ART_SS")
            End If
        End Set
    End Property

    Private _aRT_SS As Nullable(Of Decimal)

    <DataMember()>
    Public Property ART_PP() As Nullable(Of Decimal)
        Get
            Return _aRT_PP
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_aRT_PP, value) Then
                _aRT_PP = value
                OnPropertyChanged("ART_PP")
            End If
        End Set
    End Property

    Private _aRT_PP As Nullable(Of Decimal)

    <DataMember()>
    Public Property ART_Codigo() As String
        Get
            Return _aRT_Codigo
        End Get
        Set(ByVal value As String)
            If Not Equals(_aRT_Codigo, value) Then
                _aRT_Codigo = value
                OnPropertyChanged("ART_Codigo")
            End If
        End Set
    End Property

    Private _aRT_Codigo As String

    <DataMember()>
    Public Property ART_ORDEN_REPORTE() As Nullable(Of Integer)
        Get
            Return _aRT_ORDEN_REPORTE
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_aRT_ORDEN_REPORTE, value) Then
                _aRT_ORDEN_REPORTE = value
                OnPropertyChanged("ART_ORDEN_REPORTE")
            End If
        End Set
    End Property

    Private _aRT_ORDEN_REPORTE As Nullable(Of Integer)

    <DataMember()>
    Public Property TIB_TIPOBIEN_ID() As String
        Get
            Return _tIB_TIPOBIEN_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_tIB_TIPOBIEN_ID, value) Then
                ChangeTracker.RecordOriginalValue("TIB_TIPOBIEN_ID", _tIB_TIPOBIEN_ID)
                If Not IsDeserializing Then
                    If TiposBienesServicios IsNot Nothing AndAlso Not Equals(TiposBienesServicios.tib_TipoBien_Id, value) Then
                        TiposBienesServicios = Nothing
                    End If
                End If
                _tIB_TIPOBIEN_ID = value
                OnPropertyChanged("TIB_TIPOBIEN_ID")
            End If
        End Set
    End Property

    Private _tIB_TIPOBIEN_ID As String

    <DataMember()>
    Public Property CUC_ID_1() As String
        Get
            Return _cUC_ID_1
        End Get
        Set(ByVal value As String)
            If Not Equals(_cUC_ID_1, value) Then
                ChangeTracker.RecordOriginalValue("CUC_ID_1", _cUC_ID_1)
                If Not IsDeserializing Then
                    If CuentasContables IsNot Nothing AndAlso Not Equals(CuentasContables.CUC_ID, value) Then
                        CuentasContables = Nothing
                    End If
                End If
                _cUC_ID_1 = value
                OnPropertyChanged("CUC_ID_1")
            End If
        End Set
    End Property

    Private _cUC_ID_1 As String

    <DataMember()>
    Public Property CUC_ID_2() As String
        Get
            Return _cUC_ID_2
        End Get
        Set(ByVal value As String)
            If Not Equals(_cUC_ID_2, value) Then
                ChangeTracker.RecordOriginalValue("CUC_ID_2", _cUC_ID_2)
                If Not IsDeserializing Then
                    If CuentasContables1 IsNot Nothing AndAlso Not Equals(CuentasContables1.CUC_ID, value) Then
                        CuentasContables1 = Nothing
                    End If
                End If
                _cUC_ID_2 = value
                OnPropertyChanged("CUC_ID_2")
            End If
        End Set
    End Property

    Private _cUC_ID_2 As String

    <DataMember()>
    Public Property CUC_ID_3() As String
        Get
            Return _cUC_ID_3
        End Get
        Set(ByVal value As String)
            If Not Equals(_cUC_ID_3, value) Then
                ChangeTracker.RecordOriginalValue("CUC_ID_3", _cUC_ID_3)
                If Not IsDeserializing Then
                    If CuentasContables2 IsNot Nothing AndAlso Not Equals(CuentasContables2.CUC_ID, value) Then
                        CuentasContables2 = Nothing
                    End If
                End If
                _cUC_ID_3 = value
                OnPropertyChanged("CUC_ID_3")
            End If
        End Set
    End Property

    Private _cUC_ID_3 As String

    <DataMember()>
    Public Property CUC_ID_4() As String
        Get
            Return _cUC_ID_4
        End Get
        Set(ByVal value As String)
            If Not Equals(_cUC_ID_4, value) Then
                ChangeTracker.RecordOriginalValue("CUC_ID_4", _cUC_ID_4)
                If Not IsDeserializing Then
                    If CuentasContables3 IsNot Nothing AndAlso Not Equals(CuentasContables3.CUC_ID, value) Then
                        CuentasContables3 = Nothing
                    End If
                End If
                _cUC_ID_4 = value
                OnPropertyChanged("CUC_ID_4")
            End If
        End Set
    End Property

    Private _cUC_ID_4 As String

    <DataMember()>
    Public Property ART_LEADTIME() As Nullable(Of Decimal)
        Get
            Return _aRT_LEADTIME
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_aRT_LEADTIME, value) Then
                _aRT_LEADTIME = value
                OnPropertyChanged("ART_LEADTIME")
            End If
        End Set
    End Property

    Private _aRT_LEADTIME As Nullable(Of Decimal)

    <DataMember()>
    Public Property Item() As String
        Get
            Return _item
        End Get
        Set(ByVal value As String)
            If Not Equals(_item, value) Then
                _item = value
                OnPropertyChanged("Item")
            End If
        End Set
    End Property

    Private _item As String

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property RestriccionArticulo() As TrackableCollection(Of RestriccionArticulo)
        Get
            If _restriccionArticulo Is Nothing Then
                _restriccionArticulo = New TrackableCollection(Of RestriccionArticulo)
                AddHandler _restriccionArticulo.CollectionChanged, AddressOf FixupRestriccionArticulo
            End If
            Return _restriccionArticulo
        End Get
        Set(ByVal value As TrackableCollection(Of RestriccionArticulo))
            If Not Object.ReferenceEquals(_restriccionArticulo, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _restriccionArticulo IsNot Nothing Then
                    RemoveHandler _restriccionArticulo.CollectionChanged, AddressOf FixupRestriccionArticulo
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As RestriccionArticulo In _restriccionArticulo
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _restriccionArticulo = value
                If _restriccionArticulo IsNot Nothing Then
                    AddHandler _restriccionArticulo.CollectionChanged, AddressOf FixupRestriccionArticulo
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As RestriccionArticulo In _restriccionArticulo
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("RestriccionArticulo")
            End If
        End Set
    End Property

    Private _restriccionArticulo As TrackableCollection(Of RestriccionArticulo)

    <DataMember()>
    Public Property DescuentoIncrementoTipoVentaPersonas() As TrackableCollection(Of DescuentoIncrementoTipoVentaPersonas)
        Get
            If _descuentoIncrementoTipoVentaPersonas Is Nothing Then
                _descuentoIncrementoTipoVentaPersonas = New TrackableCollection(Of DescuentoIncrementoTipoVentaPersonas)
                AddHandler _descuentoIncrementoTipoVentaPersonas.CollectionChanged, AddressOf FixupDescuentoIncrementoTipoVentaPersonas
            End If
            Return _descuentoIncrementoTipoVentaPersonas
        End Get
        Set(ByVal value As TrackableCollection(Of DescuentoIncrementoTipoVentaPersonas))
            If Not Object.ReferenceEquals(_descuentoIncrementoTipoVentaPersonas, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _descuentoIncrementoTipoVentaPersonas IsNot Nothing Then
                    RemoveHandler _descuentoIncrementoTipoVentaPersonas.CollectionChanged, AddressOf FixupDescuentoIncrementoTipoVentaPersonas
                End If
                _descuentoIncrementoTipoVentaPersonas = value
                If _descuentoIncrementoTipoVentaPersonas IsNot Nothing Then
                    AddHandler _descuentoIncrementoTipoVentaPersonas.CollectionChanged, AddressOf FixupDescuentoIncrementoTipoVentaPersonas
                End If
                OnNavigationPropertyChanged("DescuentoIncrementoTipoVentaPersonas")
            End If
        End Set
    End Property

    Private _descuentoIncrementoTipoVentaPersonas As TrackableCollection(Of DescuentoIncrementoTipoVentaPersonas)

    <DataMember()>
    Public Property DetalleListaPrecios() As TrackableCollection(Of DetalleListaPrecios)
        Get
            If _detalleListaPrecios Is Nothing Then
                _detalleListaPrecios = New TrackableCollection(Of DetalleListaPrecios)
                AddHandler _detalleListaPrecios.CollectionChanged, AddressOf FixupDetalleListaPrecios
            End If
            Return _detalleListaPrecios
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleListaPrecios))
            If Not Object.ReferenceEquals(_detalleListaPrecios, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleListaPrecios IsNot Nothing Then
                    RemoveHandler _detalleListaPrecios.CollectionChanged, AddressOf FixupDetalleListaPrecios
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As DetalleListaPrecios In _detalleListaPrecios
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detalleListaPrecios = value
                If _detalleListaPrecios IsNot Nothing Then
                    AddHandler _detalleListaPrecios.CollectionChanged, AddressOf FixupDetalleListaPrecios
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As DetalleListaPrecios In _detalleListaPrecios
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetalleListaPrecios")
            End If
        End Set
    End Property

    Private _detalleListaPrecios As TrackableCollection(Of DetalleListaPrecios)

    <DataMember()>
    Public Property GrupoLineas() As GrupoLineas
        Get
            Return _grupoLineas
        End Get
        Set(ByVal value As GrupoLineas)
            If _grupoLineas IsNot value Then
                Dim previousValue As GrupoLineas = _grupoLineas
                _grupoLineas = value
                FixupGrupoLineas(previousValue)
                OnNavigationPropertyChanged("GrupoLineas")
            End If
        End Set
    End Property

    Private _grupoLineas As GrupoLineas


    <DataMember()>
    Public Property MarcaArticulos() As MarcaArticulos
        Get
            Return _marcaArticulos
        End Get
        Set(ByVal value As MarcaArticulos)
            If _marcaArticulos IsNot value Then
                Dim previousValue As MarcaArticulos = _marcaArticulos
                _marcaArticulos = value
                FixupMarcaArticulos(previousValue)
                OnNavigationPropertyChanged("MarcaArticulos")
            End If
        End Set
    End Property

    Private _marcaArticulos As MarcaArticulos


    <DataMember()>
    Public Property ModeloArticulos() As ModeloArticulos
        Get
            Return _modeloArticulos
        End Get
        Set(ByVal value As ModeloArticulos)
            If _modeloArticulos IsNot value Then
                Dim previousValue As ModeloArticulos = _modeloArticulos
                _modeloArticulos = value
                FixupModeloArticulos(previousValue)
                OnNavigationPropertyChanged("ModeloArticulos")
            End If
        End Set
    End Property

    Private _modeloArticulos As ModeloArticulos


    <DataMember()>
    Public Property UnidadMedidaArticulos() As UnidadMedidaArticulos
        Get
            Return _unidadMedidaArticulos
        End Get
        Set(ByVal value As UnidadMedidaArticulos)
            If _unidadMedidaArticulos IsNot value Then
                Dim previousValue As UnidadMedidaArticulos = _unidadMedidaArticulos
                _unidadMedidaArticulos = value
                FixupUnidadMedidaArticulos(previousValue)
                OnNavigationPropertyChanged("UnidadMedidaArticulos")
            End If
        End Set
    End Property

    Private _unidadMedidaArticulos As UnidadMedidaArticulos


    <DataMember()>
    Public Property RolArticulosTipoArticulos() As TrackableCollection(Of RolArticulosTipoArticulos)
        Get
            If _rolArticulosTipoArticulos Is Nothing Then
                _rolArticulosTipoArticulos = New TrackableCollection(Of RolArticulosTipoArticulos)
                AddHandler _rolArticulosTipoArticulos.CollectionChanged, AddressOf FixupRolArticulosTipoArticulos
            End If
            Return _rolArticulosTipoArticulos
        End Get
        Set(ByVal value As TrackableCollection(Of RolArticulosTipoArticulos))
            If Not Object.ReferenceEquals(_rolArticulosTipoArticulos, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _rolArticulosTipoArticulos IsNot Nothing Then
                    RemoveHandler _rolArticulosTipoArticulos.CollectionChanged, AddressOf FixupRolArticulosTipoArticulos
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As RolArticulosTipoArticulos In _rolArticulosTipoArticulos
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _rolArticulosTipoArticulos = value
                If _rolArticulosTipoArticulos IsNot Nothing Then
                    AddHandler _rolArticulosTipoArticulos.CollectionChanged, AddressOf FixupRolArticulosTipoArticulos
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As RolArticulosTipoArticulos In _rolArticulosTipoArticulos
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("RolArticulosTipoArticulos")
            End If
        End Set
    End Property

    Private _rolArticulosTipoArticulos As TrackableCollection(Of RolArticulosTipoArticulos)

    <DataMember()>
    Public Property TareaTrabajo() As TrackableCollection(Of TareaTrabajo)
        Get
            If _tareaTrabajo Is Nothing Then
                _tareaTrabajo = New TrackableCollection(Of TareaTrabajo)
                AddHandler _tareaTrabajo.CollectionChanged, AddressOf FixupTareaTrabajo
            End If
            Return _tareaTrabajo
        End Get
        Set(ByVal value As TrackableCollection(Of TareaTrabajo))
            If Not Object.ReferenceEquals(_tareaTrabajo, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _tareaTrabajo IsNot Nothing Then
                    RemoveHandler _tareaTrabajo.CollectionChanged, AddressOf FixupTareaTrabajo
                End If
                _tareaTrabajo = value
                If _tareaTrabajo IsNot Nothing Then
                    AddHandler _tareaTrabajo.CollectionChanged, AddressOf FixupTareaTrabajo
                End If
                OnNavigationPropertyChanged("TareaTrabajo")
            End If
        End Set
    End Property

    Private _tareaTrabajo As TrackableCollection(Of TareaTrabajo)

    <DataMember()>
    Public Property DetalleDespachos() As TrackableCollection(Of DetalleDespachos)
        Get
            If _detalleDespachos Is Nothing Then
                _detalleDespachos = New TrackableCollection(Of DetalleDespachos)
                AddHandler _detalleDespachos.CollectionChanged, AddressOf FixupDetalleDespachos
            End If
            Return _detalleDespachos
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleDespachos))
            If Not Object.ReferenceEquals(_detalleDespachos, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleDespachos IsNot Nothing Then
                    RemoveHandler _detalleDespachos.CollectionChanged, AddressOf FixupDetalleDespachos
                End If
                _detalleDespachos = value
                If _detalleDespachos IsNot Nothing Then
                    AddHandler _detalleDespachos.CollectionChanged, AddressOf FixupDetalleDespachos
                End If
                OnNavigationPropertyChanged("DetalleDespachos")
            End If
        End Set
    End Property

    Private _detalleDespachos As TrackableCollection(Of DetalleDespachos)

    <DataMember()>
    Public Property DetalleDespachos1() As TrackableCollection(Of DetalleDespachos)
        Get
            If _detalleDespachos1 Is Nothing Then
                _detalleDespachos1 = New TrackableCollection(Of DetalleDespachos)
                AddHandler _detalleDespachos1.CollectionChanged, AddressOf FixupDetalleDespachos1
            End If
            Return _detalleDespachos1
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleDespachos))
            If Not Object.ReferenceEquals(_detalleDespachos1, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleDespachos1 IsNot Nothing Then
                    RemoveHandler _detalleDespachos1.CollectionChanged, AddressOf FixupDetalleDespachos1
                End If
                _detalleDespachos1 = value
                If _detalleDespachos1 IsNot Nothing Then
                    AddHandler _detalleDespachos1.CollectionChanged, AddressOf FixupDetalleDespachos1
                End If
                OnNavigationPropertyChanged("DetalleDespachos1")
            End If
        End Set
    End Property

    Private _detalleDespachos1 As TrackableCollection(Of DetalleDespachos)

    <DataMember()>
    Public Property DetalleDescuentoIncrementoTipoVentaPersonas() As TrackableCollection(Of DetalleDescuentoIncrementoTipoVentaPersonas)
        Get
            If _detalleDescuentoIncrementoTipoVentaPersonas Is Nothing Then
                _detalleDescuentoIncrementoTipoVentaPersonas = New TrackableCollection(Of DetalleDescuentoIncrementoTipoVentaPersonas)
                AddHandler _detalleDescuentoIncrementoTipoVentaPersonas.CollectionChanged, AddressOf FixupDetalleDescuentoIncrementoTipoVentaPersonas
            End If
            Return _detalleDescuentoIncrementoTipoVentaPersonas
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleDescuentoIncrementoTipoVentaPersonas))
            If Not Object.ReferenceEquals(_detalleDescuentoIncrementoTipoVentaPersonas, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleDescuentoIncrementoTipoVentaPersonas IsNot Nothing Then
                    RemoveHandler _detalleDescuentoIncrementoTipoVentaPersonas.CollectionChanged, AddressOf FixupDetalleDescuentoIncrementoTipoVentaPersonas
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As DetalleDescuentoIncrementoTipoVentaPersonas In _detalleDescuentoIncrementoTipoVentaPersonas
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detalleDescuentoIncrementoTipoVentaPersonas = value
                If _detalleDescuentoIncrementoTipoVentaPersonas IsNot Nothing Then
                    AddHandler _detalleDescuentoIncrementoTipoVentaPersonas.CollectionChanged, AddressOf FixupDetalleDescuentoIncrementoTipoVentaPersonas
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As DetalleDescuentoIncrementoTipoVentaPersonas In _detalleDescuentoIncrementoTipoVentaPersonas
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetalleDescuentoIncrementoTipoVentaPersonas")
            End If
        End Set
    End Property

    Private _detalleDescuentoIncrementoTipoVentaPersonas As TrackableCollection(Of DetalleDescuentoIncrementoTipoVentaPersonas)

    <DataMember()>
    Public Property Inventario() As TrackableCollection(Of Inventario)
        Get
            If _inventario Is Nothing Then
                _inventario = New TrackableCollection(Of Inventario)
                AddHandler _inventario.CollectionChanged, AddressOf FixupInventario
            End If
            Return _inventario
        End Get
        Set(ByVal value As TrackableCollection(Of Inventario))
            If Not Object.ReferenceEquals(_inventario, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _inventario IsNot Nothing Then
                    RemoveHandler _inventario.CollectionChanged, AddressOf FixupInventario
                End If
                _inventario = value
                If _inventario IsNot Nothing Then
                    AddHandler _inventario.CollectionChanged, AddressOf FixupInventario
                End If
                OnNavigationPropertyChanged("Inventario")
            End If
        End Set
    End Property

    Private _inventario As TrackableCollection(Of Inventario)

    <DataMember()>
    Public Property DespachoSalidaDetalle() As TrackableCollection(Of DespachoSalidaDetalle)
        Get
            If _despachoSalidaDetalle Is Nothing Then
                _despachoSalidaDetalle = New TrackableCollection(Of DespachoSalidaDetalle)
                AddHandler _despachoSalidaDetalle.CollectionChanged, AddressOf FixupDespachoSalidaDetalle
            End If
            Return _despachoSalidaDetalle
        End Get
        Set(ByVal value As TrackableCollection(Of DespachoSalidaDetalle))
            If Not Object.ReferenceEquals(_despachoSalidaDetalle, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _despachoSalidaDetalle IsNot Nothing Then
                    RemoveHandler _despachoSalidaDetalle.CollectionChanged, AddressOf FixupDespachoSalidaDetalle
                End If
                _despachoSalidaDetalle = value
                If _despachoSalidaDetalle IsNot Nothing Then
                    AddHandler _despachoSalidaDetalle.CollectionChanged, AddressOf FixupDespachoSalidaDetalle
                End If
                OnNavigationPropertyChanged("DespachoSalidaDetalle")
            End If
        End Set
    End Property

    Private _despachoSalidaDetalle As TrackableCollection(Of DespachoSalidaDetalle)

    <DataMember()>
    Public Property DetalleAfectaProductoDocumentos() As TrackableCollection(Of DetalleAfectaProductoDocumentos)
        Get
            If _detalleAfectaProductoDocumentos Is Nothing Then
                _detalleAfectaProductoDocumentos = New TrackableCollection(Of DetalleAfectaProductoDocumentos)
                AddHandler _detalleAfectaProductoDocumentos.CollectionChanged, AddressOf FixupDetalleAfectaProductoDocumentos
            End If
            Return _detalleAfectaProductoDocumentos
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleAfectaProductoDocumentos))
            If Not Object.ReferenceEquals(_detalleAfectaProductoDocumentos, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleAfectaProductoDocumentos IsNot Nothing Then
                    RemoveHandler _detalleAfectaProductoDocumentos.CollectionChanged, AddressOf FixupDetalleAfectaProductoDocumentos
                End If
                _detalleAfectaProductoDocumentos = value
                If _detalleAfectaProductoDocumentos IsNot Nothing Then
                    AddHandler _detalleAfectaProductoDocumentos.CollectionChanged, AddressOf FixupDetalleAfectaProductoDocumentos
                End If
                OnNavigationPropertyChanged("DetalleAfectaProductoDocumentos")
            End If
        End Set
    End Property

    Private _detalleAfectaProductoDocumentos As TrackableCollection(Of DetalleAfectaProductoDocumentos)

    <DataMember()>
    Public Property TiposBienesServicios() As TiposBienesServicios
        Get
            Return _tiposBienesServicios
        End Get
        Set(ByVal value As TiposBienesServicios)
            If _tiposBienesServicios IsNot value Then
                Dim previousValue As TiposBienesServicios = _tiposBienesServicios
                _tiposBienesServicios = value
                FixupTiposBienesServicios(previousValue)
                OnNavigationPropertyChanged("TiposBienesServicios")
            End If
        End Set
    End Property

    Private _tiposBienesServicios As TiposBienesServicios


    <DataMember()>
    Public Property CuentasContables() As CuentasContables
        Get
            Return _cuentasContables
        End Get
        Set(ByVal value As CuentasContables)
            If _cuentasContables IsNot value Then
                Dim previousValue As CuentasContables = _cuentasContables
                _cuentasContables = value
                FixupCuentasContables(previousValue)
                OnNavigationPropertyChanged("CuentasContables")
            End If
        End Set
    End Property

    Private _cuentasContables As CuentasContables


    <DataMember()>
    Public Property CuentasContables1() As CuentasContables
        Get
            Return _cuentasContables1
        End Get
        Set(ByVal value As CuentasContables)
            If _cuentasContables1 IsNot value Then
                Dim previousValue As CuentasContables = _cuentasContables1
                _cuentasContables1 = value
                FixupCuentasContables1(previousValue)
                OnNavigationPropertyChanged("CuentasContables1")
            End If
        End Set
    End Property

    Private _cuentasContables1 As CuentasContables


    <DataMember()>
    Public Property CuentasContables2() As CuentasContables
        Get
            Return _cuentasContables2
        End Get
        Set(ByVal value As CuentasContables)
            If _cuentasContables2 IsNot value Then
                Dim previousValue As CuentasContables = _cuentasContables2
                _cuentasContables2 = value
                FixupCuentasContables2(previousValue)
                OnNavigationPropertyChanged("CuentasContables2")
            End If
        End Set
    End Property

    Private _cuentasContables2 As CuentasContables


    <DataMember()>
    Public Property CuentasContables3() As CuentasContables
        Get
            Return _cuentasContables3
        End Get
        Set(ByVal value As CuentasContables)
            If _cuentasContables3 IsNot value Then
                Dim previousValue As CuentasContables = _cuentasContables3
                _cuentasContables3 = value
                FixupCuentasContables3(previousValue)
                OnNavigationPropertyChanged("CuentasContables3")
            End If
        End Set
    End Property

    Private _cuentasContables3 As CuentasContables


    <DataMember()>
    Public Property OrdenServicioDetalle() As TrackableCollection(Of OrdenServicioDetalle)
        Get
            If _ordenServicioDetalle Is Nothing Then
                _ordenServicioDetalle = New TrackableCollection(Of OrdenServicioDetalle)
                AddHandler _ordenServicioDetalle.CollectionChanged, AddressOf FixupOrdenServicioDetalle
            End If
            Return _ordenServicioDetalle
        End Get
        Set(ByVal value As TrackableCollection(Of OrdenServicioDetalle))
            If Not Object.ReferenceEquals(_ordenServicioDetalle, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _ordenServicioDetalle IsNot Nothing Then
                    RemoveHandler _ordenServicioDetalle.CollectionChanged, AddressOf FixupOrdenServicioDetalle
                End If
                _ordenServicioDetalle = value
                If _ordenServicioDetalle IsNot Nothing Then
                    AddHandler _ordenServicioDetalle.CollectionChanged, AddressOf FixupOrdenServicioDetalle
                End If
                OnNavigationPropertyChanged("OrdenServicioDetalle")
            End If
        End Set
    End Property

    Private _ordenServicioDetalle As TrackableCollection(Of OrdenServicioDetalle)

    <DataMember()>
    Public Property SolicitudAjustePrecioDetalle() As TrackableCollection(Of SolicitudAjustePrecioDetalle)
        Get
            If _solicitudAjustePrecioDetalle Is Nothing Then
                _solicitudAjustePrecioDetalle = New TrackableCollection(Of SolicitudAjustePrecioDetalle)
                AddHandler _solicitudAjustePrecioDetalle.CollectionChanged, AddressOf FixupSolicitudAjustePrecioDetalle
            End If
            Return _solicitudAjustePrecioDetalle
        End Get
        Set(ByVal value As TrackableCollection(Of SolicitudAjustePrecioDetalle))
            If Not Object.ReferenceEquals(_solicitudAjustePrecioDetalle, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _solicitudAjustePrecioDetalle IsNot Nothing Then
                    RemoveHandler _solicitudAjustePrecioDetalle.CollectionChanged, AddressOf FixupSolicitudAjustePrecioDetalle
                End If
                _solicitudAjustePrecioDetalle = value
                If _solicitudAjustePrecioDetalle IsNot Nothing Then
                    AddHandler _solicitudAjustePrecioDetalle.CollectionChanged, AddressOf FixupSolicitudAjustePrecioDetalle
                End If
                OnNavigationPropertyChanged("SolicitudAjustePrecioDetalle")
            End If
        End Set
    End Property

    Private _solicitudAjustePrecioDetalle As TrackableCollection(Of SolicitudAjustePrecioDetalle)

    <DataMember()>
    Public Property CuentaRendirDetalle() As TrackableCollection(Of CuentaRendirDetalle)
        Get
            If _cuentaRendirDetalle Is Nothing Then
                _cuentaRendirDetalle = New TrackableCollection(Of CuentaRendirDetalle)
                AddHandler _cuentaRendirDetalle.CollectionChanged, AddressOf FixupCuentaRendirDetalle
            End If
            Return _cuentaRendirDetalle
        End Get
        Set(ByVal value As TrackableCollection(Of CuentaRendirDetalle))
            If Not Object.ReferenceEquals(_cuentaRendirDetalle, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _cuentaRendirDetalle IsNot Nothing Then
                    RemoveHandler _cuentaRendirDetalle.CollectionChanged, AddressOf FixupCuentaRendirDetalle
                End If
                _cuentaRendirDetalle = value
                If _cuentaRendirDetalle IsNot Nothing Then
                    AddHandler _cuentaRendirDetalle.CollectionChanged, AddressOf FixupCuentaRendirDetalle
                End If
                OnNavigationPropertyChanged("CuentaRendirDetalle")
            End If
        End Set
    End Property

    Private _cuentaRendirDetalle As TrackableCollection(Of CuentaRendirDetalle)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        RestriccionArticulo.Clear()
        DescuentoIncrementoTipoVentaPersonas.Clear()
        DetalleListaPrecios.Clear()
        GrupoLineas = Nothing
        MarcaArticulos = Nothing
        ModeloArticulos = Nothing
        UnidadMedidaArticulos = Nothing
        RolArticulosTipoArticulos.Clear()
        TareaTrabajo.Clear()
        DetalleDespachos.Clear()
        DetalleDespachos1.Clear()
        DetalleDescuentoIncrementoTipoVentaPersonas.Clear()
        Inventario.Clear()
        DespachoSalidaDetalle.Clear()
        DetalleAfectaProductoDocumentos.Clear()
        TiposBienesServicios = Nothing
        CuentasContables = Nothing
        CuentasContables1 = Nothing
        CuentasContables2 = Nothing
        CuentasContables3 = Nothing
        OrdenServicioDetalle.Clear()
        SolicitudAjustePrecioDetalle.Clear()
        CuentaRendirDetalle.Clear()
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupGrupoLineas(ByVal previousValue As GrupoLineas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Articulos.Contains(Me) Then
            previousValue.Articulos.Remove(Me)
        End If

        If GrupoLineas IsNot Nothing Then
            If Not GrupoLineas.Articulos.Contains(Me) Then
                GrupoLineas.Articulos.Add(Me)
            End If

            GLI_ID = GrupoLineas.GLI_ID
        ElseIf Not skipKeys Then
            GLI_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("GrupoLineas") AndAlso
                ChangeTracker.OriginalValues("GrupoLineas") Is GrupoLineas Then
                ChangeTracker.OriginalValues.Remove("GrupoLineas")
            Else
                ChangeTracker.RecordOriginalValue("GrupoLineas", previousValue)
            End If
            If GrupoLineas IsNot Nothing AndAlso Not GrupoLineas.ChangeTracker.ChangeTrackingEnabled Then
                GrupoLineas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupMarcaArticulos(ByVal previousValue As MarcaArticulos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Articulos.Contains(Me) Then
            previousValue.Articulos.Remove(Me)
        End If

        If MarcaArticulos IsNot Nothing Then
            If Not MarcaArticulos.Articulos.Contains(Me) Then
                MarcaArticulos.Articulos.Add(Me)
            End If

            MAR_ID = MarcaArticulos.MAR_ID
        ElseIf Not skipKeys Then
            MAR_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("MarcaArticulos") AndAlso
                ChangeTracker.OriginalValues("MarcaArticulos") Is MarcaArticulos Then
                ChangeTracker.OriginalValues.Remove("MarcaArticulos")
            Else
                ChangeTracker.RecordOriginalValue("MarcaArticulos", previousValue)
            End If
            If MarcaArticulos IsNot Nothing AndAlso Not MarcaArticulos.ChangeTracker.ChangeTrackingEnabled Then
                MarcaArticulos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupModeloArticulos(ByVal previousValue As ModeloArticulos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Articulos.Contains(Me) Then
            previousValue.Articulos.Remove(Me)
        End If

        If ModeloArticulos IsNot Nothing Then
            If Not ModeloArticulos.Articulos.Contains(Me) Then
                ModeloArticulos.Articulos.Add(Me)
            End If

            MOD_ID = ModeloArticulos.MOD_ID
        ElseIf Not skipKeys Then
            MOD_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("ModeloArticulos") AndAlso
                ChangeTracker.OriginalValues("ModeloArticulos") Is ModeloArticulos Then
                ChangeTracker.OriginalValues.Remove("ModeloArticulos")
            Else
                ChangeTracker.RecordOriginalValue("ModeloArticulos", previousValue)
            End If
            If ModeloArticulos IsNot Nothing AndAlso Not ModeloArticulos.ChangeTracker.ChangeTrackingEnabled Then
                ModeloArticulos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUnidadMedidaArticulos(ByVal previousValue As UnidadMedidaArticulos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If UnidadMedidaArticulos IsNot Nothing Then
            UM_ID = UnidadMedidaArticulos.UM_ID
        ElseIf Not skipKeys Then
            UM_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("UnidadMedidaArticulos") AndAlso
                ChangeTracker.OriginalValues("UnidadMedidaArticulos") Is UnidadMedidaArticulos Then
                ChangeTracker.OriginalValues.Remove("UnidadMedidaArticulos")
            Else
                ChangeTracker.RecordOriginalValue("UnidadMedidaArticulos", previousValue)
            End If
            If UnidadMedidaArticulos IsNot Nothing AndAlso Not UnidadMedidaArticulos.ChangeTracker.ChangeTrackingEnabled Then
                UnidadMedidaArticulos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTiposBienesServicios(ByVal previousValue As TiposBienesServicios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Articulos.Contains(Me) Then
            previousValue.Articulos.Remove(Me)
        End If

        If TiposBienesServicios IsNot Nothing Then
            If Not TiposBienesServicios.Articulos.Contains(Me) Then
                TiposBienesServicios.Articulos.Add(Me)
            End If

            TIB_TIPOBIEN_ID = TiposBienesServicios.tib_TipoBien_Id
        ElseIf Not skipKeys Then
            TIB_TIPOBIEN_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TiposBienesServicios") AndAlso
                ChangeTracker.OriginalValues("TiposBienesServicios") Is TiposBienesServicios Then
                ChangeTracker.OriginalValues.Remove("TiposBienesServicios")
            Else
                ChangeTracker.RecordOriginalValue("TiposBienesServicios", previousValue)
            End If
            If TiposBienesServicios IsNot Nothing AndAlso Not TiposBienesServicios.ChangeTracker.ChangeTrackingEnabled Then
                TiposBienesServicios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCuentasContables(ByVal previousValue As CuentasContables, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Articulos.Contains(Me) Then
            previousValue.Articulos.Remove(Me)
        End If

        If CuentasContables IsNot Nothing Then
            If Not CuentasContables.Articulos.Contains(Me) Then
                CuentasContables.Articulos.Add(Me)
            End If

            CUC_ID_1 = CuentasContables.CUC_ID
        ElseIf Not skipKeys Then
            CUC_ID_1 = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CuentasContables") AndAlso
                ChangeTracker.OriginalValues("CuentasContables") Is CuentasContables Then
                ChangeTracker.OriginalValues.Remove("CuentasContables")
            Else
                ChangeTracker.RecordOriginalValue("CuentasContables", previousValue)
            End If
            If CuentasContables IsNot Nothing AndAlso Not CuentasContables.ChangeTracker.ChangeTrackingEnabled Then
                CuentasContables.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCuentasContables1(ByVal previousValue As CuentasContables, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Articulos1.Contains(Me) Then
            previousValue.Articulos1.Remove(Me)
        End If

        If CuentasContables1 IsNot Nothing Then
            If Not CuentasContables1.Articulos1.Contains(Me) Then
                CuentasContables1.Articulos1.Add(Me)
            End If

            CUC_ID_2 = CuentasContables1.CUC_ID
        ElseIf Not skipKeys Then
            CUC_ID_2 = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CuentasContables1") AndAlso
                ChangeTracker.OriginalValues("CuentasContables1") Is CuentasContables1 Then
                ChangeTracker.OriginalValues.Remove("CuentasContables1")
            Else
                ChangeTracker.RecordOriginalValue("CuentasContables1", previousValue)
            End If
            If CuentasContables1 IsNot Nothing AndAlso Not CuentasContables1.ChangeTracker.ChangeTrackingEnabled Then
                CuentasContables1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCuentasContables2(ByVal previousValue As CuentasContables, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Articulos2.Contains(Me) Then
            previousValue.Articulos2.Remove(Me)
        End If

        If CuentasContables2 IsNot Nothing Then
            If Not CuentasContables2.Articulos2.Contains(Me) Then
                CuentasContables2.Articulos2.Add(Me)
            End If

            CUC_ID_3 = CuentasContables2.CUC_ID
        ElseIf Not skipKeys Then
            CUC_ID_3 = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CuentasContables2") AndAlso
                ChangeTracker.OriginalValues("CuentasContables2") Is CuentasContables2 Then
                ChangeTracker.OriginalValues.Remove("CuentasContables2")
            Else
                ChangeTracker.RecordOriginalValue("CuentasContables2", previousValue)
            End If
            If CuentasContables2 IsNot Nothing AndAlso Not CuentasContables2.ChangeTracker.ChangeTrackingEnabled Then
                CuentasContables2.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCuentasContables3(ByVal previousValue As CuentasContables, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Articulos3.Contains(Me) Then
            previousValue.Articulos3.Remove(Me)
        End If

        If CuentasContables3 IsNot Nothing Then
            If Not CuentasContables3.Articulos3.Contains(Me) Then
                CuentasContables3.Articulos3.Add(Me)
            End If

            CUC_ID_4 = CuentasContables3.CUC_ID
        ElseIf Not skipKeys Then
            CUC_ID_4 = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CuentasContables3") AndAlso
                ChangeTracker.OriginalValues("CuentasContables3") Is CuentasContables3 Then
                ChangeTracker.OriginalValues.Remove("CuentasContables3")
            Else
                ChangeTracker.RecordOriginalValue("CuentasContables3", previousValue)
            End If
            If CuentasContables3 IsNot Nothing AndAlso Not CuentasContables3.ChangeTracker.ChangeTrackingEnabled Then
                CuentasContables3.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupRestriccionArticulo(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As RestriccionArticulo In e.NewItems
                item.Articulos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("RestriccionArticulo", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As RestriccionArticulo In e.OldItems
                If ReferenceEquals(item.Articulos, Me) Then
                    item.Articulos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("RestriccionArticulo", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupDescuentoIncrementoTipoVentaPersonas(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DescuentoIncrementoTipoVentaPersonas In e.NewItems
                item.Articulos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DescuentoIncrementoTipoVentaPersonas", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DescuentoIncrementoTipoVentaPersonas In e.OldItems
                If ReferenceEquals(item.Articulos, Me) Then
                    item.Articulos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DescuentoIncrementoTipoVentaPersonas", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupDetalleListaPrecios(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleListaPrecios In e.NewItems
                item.Articulos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleListaPrecios", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleListaPrecios In e.OldItems
                If ReferenceEquals(item.Articulos, Me) Then
                    item.Articulos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleListaPrecios", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupRolArticulosTipoArticulos(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As RolArticulosTipoArticulos In e.NewItems
                item.Articulos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("RolArticulosTipoArticulos", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As RolArticulosTipoArticulos In e.OldItems
                If ReferenceEquals(item.Articulos, Me) Then
                    item.Articulos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("RolArticulosTipoArticulos", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupTareaTrabajo(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As TareaTrabajo In e.NewItems
                item.Articulos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("TareaTrabajo", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As TareaTrabajo In e.OldItems
                If ReferenceEquals(item.Articulos, Me) Then
                    item.Articulos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("TareaTrabajo", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupDetalleDespachos(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleDespachos In e.NewItems
                item.Articulos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleDespachos", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleDespachos In e.OldItems
                If ReferenceEquals(item.Articulos, Me) Then
                    item.Articulos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleDespachos", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupDetalleDespachos1(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleDespachos In e.NewItems
                item.Articulos1 = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleDespachos1", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleDespachos In e.OldItems
                If ReferenceEquals(item.Articulos1, Me) Then
                    item.Articulos1 = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleDespachos1", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupDetalleDescuentoIncrementoTipoVentaPersonas(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleDescuentoIncrementoTipoVentaPersonas In e.NewItems
                item.Articulos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleDescuentoIncrementoTipoVentaPersonas", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleDescuentoIncrementoTipoVentaPersonas In e.OldItems
                If ReferenceEquals(item.Articulos, Me) Then
                    item.Articulos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleDescuentoIncrementoTipoVentaPersonas", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupInventario(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As Inventario In e.NewItems
                item.Articulos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("Inventario", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As Inventario In e.OldItems
                If ReferenceEquals(item.Articulos, Me) Then
                    item.Articulos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("Inventario", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupDespachoSalidaDetalle(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DespachoSalidaDetalle In e.NewItems
                item.Articulos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DespachoSalidaDetalle", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DespachoSalidaDetalle In e.OldItems
                If ReferenceEquals(item.Articulos, Me) Then
                    item.Articulos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DespachoSalidaDetalle", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupDetalleAfectaProductoDocumentos(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleAfectaProductoDocumentos In e.NewItems
                item.Articulos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleAfectaProductoDocumentos", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleAfectaProductoDocumentos In e.OldItems
                If ReferenceEquals(item.Articulos, Me) Then
                    item.Articulos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleAfectaProductoDocumentos", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupOrdenServicioDetalle(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As OrdenServicioDetalle In e.NewItems
                item.Articulos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("OrdenServicioDetalle", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As OrdenServicioDetalle In e.OldItems
                If ReferenceEquals(item.Articulos, Me) Then
                    item.Articulos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("OrdenServicioDetalle", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupSolicitudAjustePrecioDetalle(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As SolicitudAjustePrecioDetalle In e.NewItems
                item.Articulos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("SolicitudAjustePrecioDetalle", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As SolicitudAjustePrecioDetalle In e.OldItems
                If ReferenceEquals(item.Articulos, Me) Then
                    item.Articulos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("SolicitudAjustePrecioDetalle", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupCuentaRendirDetalle(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As CuentaRendirDetalle In e.NewItems
                item.Articulos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("CuentaRendirDetalle", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As CuentaRendirDetalle In e.OldItems
                If ReferenceEquals(item.Articulos, Me) Then
                    item.Articulos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("CuentaRendirDetalle", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
