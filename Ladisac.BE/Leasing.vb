'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(DetalleLeasing))>
<KnownType(GetType(DetalleLeasingActivosFijos))>
<KnownType(GetType(CentroCostos))>
<KnownType(GetType(Moneda))>
<KnownType(GetType(Personas))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(RolOpeCtaCte))>
Partial Public Class Leasing
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared cct_Id As string = "cct_Id"
				public shared tdo_Id As string = "tdo_Id"
				public shared dtd_Id As string = "dtd_Id"
				public shared lea_Serie As string = "lea_Serie"
				public shared lea_Numero As string = "lea_Numero"
				public shared lea_fecha As string = "lea_fecha"
				public shared lea_Observaciones As string = "lea_Observaciones"
				public shared lea_NumeroContrato As string = "lea_NumeroContrato"
				public shared CCO_ID As string = "CCO_ID"
				public shared per_Id As string = "per_Id"
				public shared mon_Id As string = "mon_Id"
				public shared Usu_Id As string = "Usu_Id"
				public shared lea_fechaSistema As string = "lea_fechaSistema"
		    End Structure
	



    <DataMember()>
    Public Property cct_Id() As String
        Get
            Return _cct_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_cct_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'cct_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If RolOpeCtaCte IsNot Nothing AndAlso Not Equals(RolOpeCtaCte.CCT_ID, value) Then
                        RolOpeCtaCte = Nothing
                    End If
                End If
                _cct_Id = value
                OnPropertyChanged("cct_Id")
            End If
        End Set
    End Property

    Private _cct_Id As String

    <DataMember()>
    Public Property tdo_Id() As String
        Get
            Return _tdo_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tdo_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'tdo_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If RolOpeCtaCte IsNot Nothing AndAlso Not Equals(RolOpeCtaCte.TDO_ID, value) Then
                        RolOpeCtaCte = Nothing
                    End If
                End If
                _tdo_Id = value
                OnPropertyChanged("tdo_Id")
            End If
        End Set
    End Property

    Private _tdo_Id As String

    <DataMember()>
    Public Property dtd_Id() As String
        Get
            Return _dtd_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_dtd_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'dtd_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If RolOpeCtaCte IsNot Nothing AndAlso Not Equals(RolOpeCtaCte.DTD_ID, value) Then
                        RolOpeCtaCte = Nothing
                    End If
                End If
                _dtd_Id = value
                OnPropertyChanged("dtd_Id")
            End If
        End Set
    End Property

    Private _dtd_Id As String

    <DataMember()>
    Public Property lea_Serie() As String
        Get
            Return _lea_Serie
        End Get
        Set(ByVal value As String)
            If Not Equals(_lea_Serie, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'lea_Serie' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _lea_Serie = value
                OnPropertyChanged("lea_Serie")
            End If
        End Set
    End Property

    Private _lea_Serie As String

    <DataMember()>
    Public Property lea_Numero() As String
        Get
            Return _lea_Numero
        End Get
        Set(ByVal value As String)
            If Not Equals(_lea_Numero, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'lea_Numero' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _lea_Numero = value
                OnPropertyChanged("lea_Numero")
            End If
        End Set
    End Property

    Private _lea_Numero As String

    <DataMember()>
    Public Property lea_fecha() As Nullable(Of Date)
        Get
            Return _lea_fecha
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_lea_fecha, value) Then
                _lea_fecha = value
                OnPropertyChanged("lea_fecha")
            End If
        End Set
    End Property

    Private _lea_fecha As Nullable(Of Date)

    <DataMember()>
    Public Property lea_Observaciones() As String
        Get
            Return _lea_Observaciones
        End Get
        Set(ByVal value As String)
            If Not Equals(_lea_Observaciones, value) Then
                _lea_Observaciones = value
                OnPropertyChanged("lea_Observaciones")
            End If
        End Set
    End Property

    Private _lea_Observaciones As String

    <DataMember()>
    Public Property lea_NumeroContrato() As String
        Get
            Return _lea_NumeroContrato
        End Get
        Set(ByVal value As String)
            If Not Equals(_lea_NumeroContrato, value) Then
                _lea_NumeroContrato = value
                OnPropertyChanged("lea_NumeroContrato")
            End If
        End Set
    End Property

    Private _lea_NumeroContrato As String

    <DataMember()>
    Public Property CCO_ID() As String
        Get
            Return _cCO_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCO_ID, value) Then
                ChangeTracker.RecordOriginalValue("CCO_ID", _cCO_ID)
                If Not IsDeserializing Then
                    If CentroCostos IsNot Nothing AndAlso Not Equals(CentroCostos.CCO_ID, value) Then
                        CentroCostos = Nothing
                    End If
                End If
                _cCO_ID = value
                OnPropertyChanged("CCO_ID")
            End If
        End Set
    End Property

    Private _cCO_ID As String

    <DataMember()>
    Public Property per_Id() As String
        Get
            Return _per_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_per_Id, value) Then
                ChangeTracker.RecordOriginalValue("per_Id", _per_Id)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _per_Id = value
                OnPropertyChanged("per_Id")
            End If
        End Set
    End Property

    Private _per_Id As String

    <DataMember()>
    Public Property mon_Id() As String
        Get
            Return _mon_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_mon_Id, value) Then
                ChangeTracker.RecordOriginalValue("mon_Id", _mon_Id)
                If Not IsDeserializing Then
                    If Moneda IsNot Nothing AndAlso Not Equals(Moneda.MON_ID, value) Then
                        Moneda = Nothing
                    End If
                End If
                _mon_Id = value
                OnPropertyChanged("mon_Id")
            End If
        End Set
    End Property

    Private _mon_Id As String

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                ChangeTracker.RecordOriginalValue("Usu_Id", _usu_Id)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                    If Usuarios1 IsNot Nothing AndAlso Not Equals(Usuarios1.USU_ID, value) Then
                        Usuarios1 = Nothing
                    End If
                    If Usuarios2 IsNot Nothing AndAlso Not Equals(Usuarios2.USU_ID, value) Then
                        Usuarios2 = Nothing
                    End If
                    If Usuarios3 IsNot Nothing AndAlso Not Equals(Usuarios3.USU_ID, value) Then
                        Usuarios3 = Nothing
                    End If
                    If Usuarios4 IsNot Nothing AndAlso Not Equals(Usuarios4.USU_ID, value) Then
                        Usuarios4 = Nothing
                    End If
                    If Usuarios5 IsNot Nothing AndAlso Not Equals(Usuarios5.USU_ID, value) Then
                        Usuarios5 = Nothing
                    End If
                    If Usuarios6 IsNot Nothing AndAlso Not Equals(Usuarios6.USU_ID, value) Then
                        Usuarios6 = Nothing
                    End If
                    If Usuarios7 IsNot Nothing AndAlso Not Equals(Usuarios7.USU_ID, value) Then
                        Usuarios7 = Nothing
                    End If
                    If Usuarios8 IsNot Nothing AndAlso Not Equals(Usuarios8.USU_ID, value) Then
                        Usuarios8 = Nothing
                    End If
                    If Usuarios9 IsNot Nothing AndAlso Not Equals(Usuarios9.USU_ID, value) Then
                        Usuarios9 = Nothing
                    End If
                    If Usuarios10 IsNot Nothing AndAlso Not Equals(Usuarios10.USU_ID, value) Then
                        Usuarios10 = Nothing
                    End If
                    If Usuarios11 IsNot Nothing AndAlso Not Equals(Usuarios11.USU_ID, value) Then
                        Usuarios11 = Nothing
                    End If
                    If Usuarios12 IsNot Nothing AndAlso Not Equals(Usuarios12.USU_ID, value) Then
                        Usuarios12 = Nothing
                    End If
                    If Usuarios13 IsNot Nothing AndAlso Not Equals(Usuarios13.USU_ID, value) Then
                        Usuarios13 = Nothing
                    End If
                    If Usuarios14 IsNot Nothing AndAlso Not Equals(Usuarios14.USU_ID, value) Then
                        Usuarios14 = Nothing
                    End If
                    If Usuarios15 IsNot Nothing AndAlso Not Equals(Usuarios15.USU_ID, value) Then
                        Usuarios15 = Nothing
                    End If
                    If Usuarios16 IsNot Nothing AndAlso Not Equals(Usuarios16.USU_ID, value) Then
                        Usuarios16 = Nothing
                    End If
                    If Usuarios17 IsNot Nothing AndAlso Not Equals(Usuarios17.USU_ID, value) Then
                        Usuarios17 = Nothing
                    End If
                    If Usuarios18 IsNot Nothing AndAlso Not Equals(Usuarios18.USU_ID, value) Then
                        Usuarios18 = Nothing
                    End If
                    If Usuarios19 IsNot Nothing AndAlso Not Equals(Usuarios19.USU_ID, value) Then
                        Usuarios19 = Nothing
                    End If
                    If Usuarios20 IsNot Nothing AndAlso Not Equals(Usuarios20.USU_ID, value) Then
                        Usuarios20 = Nothing
                    End If
                    If Usuarios21 IsNot Nothing AndAlso Not Equals(Usuarios21.USU_ID, value) Then
                        Usuarios21 = Nothing
                    End If
                End If
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property lea_fechaSistema() As Nullable(Of Date)
        Get
            Return _lea_fechaSistema
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_lea_fechaSistema, value) Then
                _lea_fechaSistema = value
                OnPropertyChanged("lea_fechaSistema")
            End If
        End Set
    End Property

    Private _lea_fechaSistema As Nullable(Of Date)

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property DetalleLeasing() As TrackableCollection(Of DetalleLeasing)
        Get
            If _detalleLeasing Is Nothing Then
                _detalleLeasing = New TrackableCollection(Of DetalleLeasing)
                AddHandler _detalleLeasing.CollectionChanged, AddressOf FixupDetalleLeasing
            End If
            Return _detalleLeasing
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleLeasing))
            If Not Object.ReferenceEquals(_detalleLeasing, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleLeasing IsNot Nothing Then
                    RemoveHandler _detalleLeasing.CollectionChanged, AddressOf FixupDetalleLeasing
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As DetalleLeasing In _detalleLeasing
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detalleLeasing = value
                If _detalleLeasing IsNot Nothing Then
                    AddHandler _detalleLeasing.CollectionChanged, AddressOf FixupDetalleLeasing
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As DetalleLeasing In _detalleLeasing
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetalleLeasing")
            End If
        End Set
    End Property

    Private _detalleLeasing As TrackableCollection(Of DetalleLeasing)

    <DataMember()>
    Public Property DetalleLeasingActivosFijos() As TrackableCollection(Of DetalleLeasingActivosFijos)
        Get
            If _detalleLeasingActivosFijos Is Nothing Then
                _detalleLeasingActivosFijos = New TrackableCollection(Of DetalleLeasingActivosFijos)
                AddHandler _detalleLeasingActivosFijos.CollectionChanged, AddressOf FixupDetalleLeasingActivosFijos
            End If
            Return _detalleLeasingActivosFijos
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleLeasingActivosFijos))
            If Not Object.ReferenceEquals(_detalleLeasingActivosFijos, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleLeasingActivosFijos IsNot Nothing Then
                    RemoveHandler _detalleLeasingActivosFijos.CollectionChanged, AddressOf FixupDetalleLeasingActivosFijos
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As DetalleLeasingActivosFijos In _detalleLeasingActivosFijos
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detalleLeasingActivosFijos = value
                If _detalleLeasingActivosFijos IsNot Nothing Then
                    AddHandler _detalleLeasingActivosFijos.CollectionChanged, AddressOf FixupDetalleLeasingActivosFijos
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As DetalleLeasingActivosFijos In _detalleLeasingActivosFijos
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetalleLeasingActivosFijos")
            End If
        End Set
    End Property

    Private _detalleLeasingActivosFijos As TrackableCollection(Of DetalleLeasingActivosFijos)

    <DataMember()>
    Public Property CentroCostos() As CentroCostos
        Get
            Return _centroCostos
        End Get
        Set(ByVal value As CentroCostos)
            If _centroCostos IsNot value Then
                Dim previousValue As CentroCostos = _centroCostos
                _centroCostos = value
                FixupCentroCostos(previousValue)
                OnNavigationPropertyChanged("CentroCostos")
            End If
        End Set
    End Property

    Private _centroCostos As CentroCostos


    <DataMember()>
    Public Property Moneda() As Moneda
        Get
            Return _moneda
        End Get
        Set(ByVal value As Moneda)
            If _moneda IsNot value Then
                Dim previousValue As Moneda = _moneda
                _moneda = value
                FixupMoneda(previousValue)
                OnNavigationPropertyChanged("Moneda")
            End If
        End Set
    End Property

    Private _moneda As Moneda


    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property Usuarios1() As Usuarios
        Get
            Return _usuarios1
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios1 IsNot value Then
                Dim previousValue As Usuarios = _usuarios1
                _usuarios1 = value
                FixupUsuarios1(previousValue)
                OnNavigationPropertyChanged("Usuarios1")
            End If
        End Set
    End Property

    Private _usuarios1 As Usuarios


    <DataMember()>
    Public Property Usuarios2() As Usuarios
        Get
            Return _usuarios2
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios2 IsNot value Then
                Dim previousValue As Usuarios = _usuarios2
                _usuarios2 = value
                FixupUsuarios2(previousValue)
                OnNavigationPropertyChanged("Usuarios2")
            End If
        End Set
    End Property

    Private _usuarios2 As Usuarios


    <DataMember()>
    Public Property Usuarios3() As Usuarios
        Get
            Return _usuarios3
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios3 IsNot value Then
                Dim previousValue As Usuarios = _usuarios3
                _usuarios3 = value
                FixupUsuarios3(previousValue)
                OnNavigationPropertyChanged("Usuarios3")
            End If
        End Set
    End Property

    Private _usuarios3 As Usuarios


    <DataMember()>
    Public Property Usuarios4() As Usuarios
        Get
            Return _usuarios4
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios4 IsNot value Then
                Dim previousValue As Usuarios = _usuarios4
                _usuarios4 = value
                FixupUsuarios4(previousValue)
                OnNavigationPropertyChanged("Usuarios4")
            End If
        End Set
    End Property

    Private _usuarios4 As Usuarios


    <DataMember()>
    Public Property Usuarios5() As Usuarios
        Get
            Return _usuarios5
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios5 IsNot value Then
                Dim previousValue As Usuarios = _usuarios5
                _usuarios5 = value
                FixupUsuarios5(previousValue)
                OnNavigationPropertyChanged("Usuarios5")
            End If
        End Set
    End Property

    Private _usuarios5 As Usuarios


    <DataMember()>
    Public Property Usuarios6() As Usuarios
        Get
            Return _usuarios6
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios6 IsNot value Then
                Dim previousValue As Usuarios = _usuarios6
                _usuarios6 = value
                FixupUsuarios6(previousValue)
                OnNavigationPropertyChanged("Usuarios6")
            End If
        End Set
    End Property

    Private _usuarios6 As Usuarios


    <DataMember()>
    Public Property Usuarios7() As Usuarios
        Get
            Return _usuarios7
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios7 IsNot value Then
                Dim previousValue As Usuarios = _usuarios7
                _usuarios7 = value
                FixupUsuarios7(previousValue)
                OnNavigationPropertyChanged("Usuarios7")
            End If
        End Set
    End Property

    Private _usuarios7 As Usuarios


    <DataMember()>
    Public Property Usuarios8() As Usuarios
        Get
            Return _usuarios8
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios8 IsNot value Then
                Dim previousValue As Usuarios = _usuarios8
                _usuarios8 = value
                FixupUsuarios8(previousValue)
                OnNavigationPropertyChanged("Usuarios8")
            End If
        End Set
    End Property

    Private _usuarios8 As Usuarios


    <DataMember()>
    Public Property Usuarios9() As Usuarios
        Get
            Return _usuarios9
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios9 IsNot value Then
                Dim previousValue As Usuarios = _usuarios9
                _usuarios9 = value
                FixupUsuarios9(previousValue)
                OnNavigationPropertyChanged("Usuarios9")
            End If
        End Set
    End Property

    Private _usuarios9 As Usuarios


    <DataMember()>
    Public Property Usuarios10() As Usuarios
        Get
            Return _usuarios10
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios10 IsNot value Then
                Dim previousValue As Usuarios = _usuarios10
                _usuarios10 = value
                FixupUsuarios10(previousValue)
                OnNavigationPropertyChanged("Usuarios10")
            End If
        End Set
    End Property

    Private _usuarios10 As Usuarios


    <DataMember()>
    Public Property Usuarios11() As Usuarios
        Get
            Return _usuarios11
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios11 IsNot value Then
                Dim previousValue As Usuarios = _usuarios11
                _usuarios11 = value
                FixupUsuarios11(previousValue)
                OnNavigationPropertyChanged("Usuarios11")
            End If
        End Set
    End Property

    Private _usuarios11 As Usuarios


    <DataMember()>
    Public Property Usuarios12() As Usuarios
        Get
            Return _usuarios12
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios12 IsNot value Then
                Dim previousValue As Usuarios = _usuarios12
                _usuarios12 = value
                FixupUsuarios12(previousValue)
                OnNavigationPropertyChanged("Usuarios12")
            End If
        End Set
    End Property

    Private _usuarios12 As Usuarios


    <DataMember()>
    Public Property Usuarios13() As Usuarios
        Get
            Return _usuarios13
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios13 IsNot value Then
                Dim previousValue As Usuarios = _usuarios13
                _usuarios13 = value
                FixupUsuarios13(previousValue)
                OnNavigationPropertyChanged("Usuarios13")
            End If
        End Set
    End Property

    Private _usuarios13 As Usuarios


    <DataMember()>
    Public Property Usuarios14() As Usuarios
        Get
            Return _usuarios14
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios14 IsNot value Then
                Dim previousValue As Usuarios = _usuarios14
                _usuarios14 = value
                FixupUsuarios14(previousValue)
                OnNavigationPropertyChanged("Usuarios14")
            End If
        End Set
    End Property

    Private _usuarios14 As Usuarios


    <DataMember()>
    Public Property Usuarios15() As Usuarios
        Get
            Return _usuarios15
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios15 IsNot value Then
                Dim previousValue As Usuarios = _usuarios15
                _usuarios15 = value
                FixupUsuarios15(previousValue)
                OnNavigationPropertyChanged("Usuarios15")
            End If
        End Set
    End Property

    Private _usuarios15 As Usuarios


    <DataMember()>
    Public Property Usuarios16() As Usuarios
        Get
            Return _usuarios16
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios16 IsNot value Then
                Dim previousValue As Usuarios = _usuarios16
                _usuarios16 = value
                FixupUsuarios16(previousValue)
                OnNavigationPropertyChanged("Usuarios16")
            End If
        End Set
    End Property

    Private _usuarios16 As Usuarios


    <DataMember()>
    Public Property Usuarios17() As Usuarios
        Get
            Return _usuarios17
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios17 IsNot value Then
                Dim previousValue As Usuarios = _usuarios17
                _usuarios17 = value
                FixupUsuarios17(previousValue)
                OnNavigationPropertyChanged("Usuarios17")
            End If
        End Set
    End Property

    Private _usuarios17 As Usuarios


    <DataMember()>
    Public Property Usuarios18() As Usuarios
        Get
            Return _usuarios18
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios18 IsNot value Then
                Dim previousValue As Usuarios = _usuarios18
                _usuarios18 = value
                FixupUsuarios18(previousValue)
                OnNavigationPropertyChanged("Usuarios18")
            End If
        End Set
    End Property

    Private _usuarios18 As Usuarios


    <DataMember()>
    Public Property Usuarios19() As Usuarios
        Get
            Return _usuarios19
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios19 IsNot value Then
                Dim previousValue As Usuarios = _usuarios19
                _usuarios19 = value
                FixupUsuarios19(previousValue)
                OnNavigationPropertyChanged("Usuarios19")
            End If
        End Set
    End Property

    Private _usuarios19 As Usuarios


    <DataMember()>
    Public Property Usuarios20() As Usuarios
        Get
            Return _usuarios20
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios20 IsNot value Then
                Dim previousValue As Usuarios = _usuarios20
                _usuarios20 = value
                FixupUsuarios20(previousValue)
                OnNavigationPropertyChanged("Usuarios20")
            End If
        End Set
    End Property

    Private _usuarios20 As Usuarios


    <DataMember()>
    Public Property Usuarios21() As Usuarios
        Get
            Return _usuarios21
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios21 IsNot value Then
                Dim previousValue As Usuarios = _usuarios21
                _usuarios21 = value
                FixupUsuarios21(previousValue)
                OnNavigationPropertyChanged("Usuarios21")
            End If
        End Set
    End Property

    Private _usuarios21 As Usuarios


    <DataMember()>
    Public Property RolOpeCtaCte() As RolOpeCtaCte
        Get
            Return _rolOpeCtaCte
        End Get
        Set(ByVal value As RolOpeCtaCte)
            If _rolOpeCtaCte IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(cct_Id, value.CCT_ID) OrElse Not Equals(tdo_Id, value.TDO_ID) OrElse Not Equals(dtd_Id, value.DTD_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As RolOpeCtaCte = _rolOpeCtaCte
                _rolOpeCtaCte = value
                FixupRolOpeCtaCte(previousValue)
                OnNavigationPropertyChanged("RolOpeCtaCte")
            End If
        End Set
    End Property

    Private _rolOpeCtaCte As RolOpeCtaCte


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociaci칩n que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesar치 notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        DetalleLeasing.Clear()
        DetalleLeasingActivosFijos.Clear()
        CentroCostos = Nothing
        Moneda = Nothing
        Personas = Nothing
        Usuarios = Nothing
        Usuarios1 = Nothing
        Usuarios2 = Nothing
        Usuarios3 = Nothing
        Usuarios4 = Nothing
        Usuarios5 = Nothing
        Usuarios6 = Nothing
        Usuarios7 = Nothing
        Usuarios8 = Nothing
        Usuarios9 = Nothing
        Usuarios10 = Nothing
        Usuarios11 = Nothing
        Usuarios12 = Nothing
        Usuarios13 = Nothing
        Usuarios14 = Nothing
        Usuarios15 = Nothing
        Usuarios16 = Nothing
        Usuarios17 = Nothing
        Usuarios18 = Nothing
        Usuarios19 = Nothing
        Usuarios20 = Nothing
        Usuarios21 = Nothing
        RolOpeCtaCte = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupCentroCostos(ByVal previousValue As CentroCostos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Leasing.Contains(Me) Then
            previousValue.Leasing.Remove(Me)
        End If

        If CentroCostos IsNot Nothing Then
            If Not CentroCostos.Leasing.Contains(Me) Then
                CentroCostos.Leasing.Add(Me)
            End If

            CCO_ID = CentroCostos.CCO_ID
        ElseIf Not skipKeys Then
            CCO_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CentroCostos") AndAlso
                ChangeTracker.OriginalValues("CentroCostos") Is CentroCostos Then
                ChangeTracker.OriginalValues.Remove("CentroCostos")
            Else
                ChangeTracker.RecordOriginalValue("CentroCostos", previousValue)
            End If
            If CentroCostos IsNot Nothing AndAlso Not CentroCostos.ChangeTracker.ChangeTrackingEnabled Then
                CentroCostos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupMoneda(ByVal previousValue As Moneda, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Moneda IsNot Nothing Then
            mon_Id = Moneda.MON_ID
        ElseIf Not skipKeys Then
            mon_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Moneda") AndAlso
                ChangeTracker.OriginalValues("Moneda") Is Moneda Then
                ChangeTracker.OriginalValues.Remove("Moneda")
            Else
                ChangeTracker.RecordOriginalValue("Moneda", previousValue)
            End If
            If Moneda IsNot Nothing AndAlso Not Moneda.ChangeTracker.ChangeTrackingEnabled Then
                Moneda.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Leasing.Contains(Me) Then
            previousValue.Leasing.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.Leasing.Contains(Me) Then
                Personas.Leasing.Add(Me)
            End If

            per_Id = Personas.PER_ID
        ElseIf Not skipKeys Then
            per_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            Usu_Id = Usuarios.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios1(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios1 IsNot Nothing Then
            Usu_Id = Usuarios1.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios1") AndAlso
                ChangeTracker.OriginalValues("Usuarios1") Is Usuarios1 Then
                ChangeTracker.OriginalValues.Remove("Usuarios1")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios1", previousValue)
            End If
            If Usuarios1 IsNot Nothing AndAlso Not Usuarios1.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios2(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios2 IsNot Nothing Then
            Usu_Id = Usuarios2.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios2") AndAlso
                ChangeTracker.OriginalValues("Usuarios2") Is Usuarios2 Then
                ChangeTracker.OriginalValues.Remove("Usuarios2")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios2", previousValue)
            End If
            If Usuarios2 IsNot Nothing AndAlso Not Usuarios2.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios2.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios3(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios3 IsNot Nothing Then
            Usu_Id = Usuarios3.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios3") AndAlso
                ChangeTracker.OriginalValues("Usuarios3") Is Usuarios3 Then
                ChangeTracker.OriginalValues.Remove("Usuarios3")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios3", previousValue)
            End If
            If Usuarios3 IsNot Nothing AndAlso Not Usuarios3.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios3.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios4(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios4 IsNot Nothing Then
            Usu_Id = Usuarios4.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios4") AndAlso
                ChangeTracker.OriginalValues("Usuarios4") Is Usuarios4 Then
                ChangeTracker.OriginalValues.Remove("Usuarios4")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios4", previousValue)
            End If
            If Usuarios4 IsNot Nothing AndAlso Not Usuarios4.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios4.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios5(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios5 IsNot Nothing Then
            Usu_Id = Usuarios5.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios5") AndAlso
                ChangeTracker.OriginalValues("Usuarios5") Is Usuarios5 Then
                ChangeTracker.OriginalValues.Remove("Usuarios5")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios5", previousValue)
            End If
            If Usuarios5 IsNot Nothing AndAlso Not Usuarios5.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios5.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios6(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios6 IsNot Nothing Then
            Usu_Id = Usuarios6.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios6") AndAlso
                ChangeTracker.OriginalValues("Usuarios6") Is Usuarios6 Then
                ChangeTracker.OriginalValues.Remove("Usuarios6")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios6", previousValue)
            End If
            If Usuarios6 IsNot Nothing AndAlso Not Usuarios6.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios6.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios7(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios7 IsNot Nothing Then
            Usu_Id = Usuarios7.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios7") AndAlso
                ChangeTracker.OriginalValues("Usuarios7") Is Usuarios7 Then
                ChangeTracker.OriginalValues.Remove("Usuarios7")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios7", previousValue)
            End If
            If Usuarios7 IsNot Nothing AndAlso Not Usuarios7.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios7.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios8(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios8 IsNot Nothing Then
            Usu_Id = Usuarios8.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios8") AndAlso
                ChangeTracker.OriginalValues("Usuarios8") Is Usuarios8 Then
                ChangeTracker.OriginalValues.Remove("Usuarios8")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios8", previousValue)
            End If
            If Usuarios8 IsNot Nothing AndAlso Not Usuarios8.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios8.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios9(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios9 IsNot Nothing Then
            Usu_Id = Usuarios9.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios9") AndAlso
                ChangeTracker.OriginalValues("Usuarios9") Is Usuarios9 Then
                ChangeTracker.OriginalValues.Remove("Usuarios9")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios9", previousValue)
            End If
            If Usuarios9 IsNot Nothing AndAlso Not Usuarios9.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios9.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios10(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios10 IsNot Nothing Then
            Usu_Id = Usuarios10.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios10") AndAlso
                ChangeTracker.OriginalValues("Usuarios10") Is Usuarios10 Then
                ChangeTracker.OriginalValues.Remove("Usuarios10")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios10", previousValue)
            End If
            If Usuarios10 IsNot Nothing AndAlso Not Usuarios10.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios10.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios11(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios11 IsNot Nothing Then
            Usu_Id = Usuarios11.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios11") AndAlso
                ChangeTracker.OriginalValues("Usuarios11") Is Usuarios11 Then
                ChangeTracker.OriginalValues.Remove("Usuarios11")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios11", previousValue)
            End If
            If Usuarios11 IsNot Nothing AndAlso Not Usuarios11.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios11.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios12(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios12 IsNot Nothing Then
            Usu_Id = Usuarios12.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios12") AndAlso
                ChangeTracker.OriginalValues("Usuarios12") Is Usuarios12 Then
                ChangeTracker.OriginalValues.Remove("Usuarios12")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios12", previousValue)
            End If
            If Usuarios12 IsNot Nothing AndAlso Not Usuarios12.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios12.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios13(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios13 IsNot Nothing Then
            Usu_Id = Usuarios13.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios13") AndAlso
                ChangeTracker.OriginalValues("Usuarios13") Is Usuarios13 Then
                ChangeTracker.OriginalValues.Remove("Usuarios13")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios13", previousValue)
            End If
            If Usuarios13 IsNot Nothing AndAlso Not Usuarios13.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios13.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios14(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios14 IsNot Nothing Then
            Usu_Id = Usuarios14.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios14") AndAlso
                ChangeTracker.OriginalValues("Usuarios14") Is Usuarios14 Then
                ChangeTracker.OriginalValues.Remove("Usuarios14")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios14", previousValue)
            End If
            If Usuarios14 IsNot Nothing AndAlso Not Usuarios14.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios14.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios15(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios15 IsNot Nothing Then
            Usu_Id = Usuarios15.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios15") AndAlso
                ChangeTracker.OriginalValues("Usuarios15") Is Usuarios15 Then
                ChangeTracker.OriginalValues.Remove("Usuarios15")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios15", previousValue)
            End If
            If Usuarios15 IsNot Nothing AndAlso Not Usuarios15.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios15.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios16(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios16 IsNot Nothing Then
            Usu_Id = Usuarios16.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios16") AndAlso
                ChangeTracker.OriginalValues("Usuarios16") Is Usuarios16 Then
                ChangeTracker.OriginalValues.Remove("Usuarios16")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios16", previousValue)
            End If
            If Usuarios16 IsNot Nothing AndAlso Not Usuarios16.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios16.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios17(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios17 IsNot Nothing Then
            Usu_Id = Usuarios17.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios17") AndAlso
                ChangeTracker.OriginalValues("Usuarios17") Is Usuarios17 Then
                ChangeTracker.OriginalValues.Remove("Usuarios17")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios17", previousValue)
            End If
            If Usuarios17 IsNot Nothing AndAlso Not Usuarios17.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios17.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios18(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios18 IsNot Nothing Then
            Usu_Id = Usuarios18.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios18") AndAlso
                ChangeTracker.OriginalValues("Usuarios18") Is Usuarios18 Then
                ChangeTracker.OriginalValues.Remove("Usuarios18")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios18", previousValue)
            End If
            If Usuarios18 IsNot Nothing AndAlso Not Usuarios18.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios18.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios19(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios19 IsNot Nothing Then
            Usu_Id = Usuarios19.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios19") AndAlso
                ChangeTracker.OriginalValues("Usuarios19") Is Usuarios19 Then
                ChangeTracker.OriginalValues.Remove("Usuarios19")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios19", previousValue)
            End If
            If Usuarios19 IsNot Nothing AndAlso Not Usuarios19.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios19.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios20(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios20 IsNot Nothing Then
            Usu_Id = Usuarios20.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios20") AndAlso
                ChangeTracker.OriginalValues("Usuarios20") Is Usuarios20 Then
                ChangeTracker.OriginalValues.Remove("Usuarios20")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios20", previousValue)
            End If
            If Usuarios20 IsNot Nothing AndAlso Not Usuarios20.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios20.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios21(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios21 IsNot Nothing Then
            Usu_Id = Usuarios21.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios21") AndAlso
                ChangeTracker.OriginalValues("Usuarios21") Is Usuarios21 Then
                ChangeTracker.OriginalValues.Remove("Usuarios21")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios21", previousValue)
            End If
            If Usuarios21 IsNot Nothing AndAlso Not Usuarios21.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios21.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupRolOpeCtaCte(ByVal previousValue As RolOpeCtaCte)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Leasing.Contains(Me) Then
            previousValue.Leasing.Remove(Me)
        End If

        If RolOpeCtaCte IsNot Nothing Then
            If Not RolOpeCtaCte.Leasing.Contains(Me) Then
                RolOpeCtaCte.Leasing.Add(Me)
            End If

            cct_Id = RolOpeCtaCte.CCT_ID
            tdo_Id = RolOpeCtaCte.TDO_ID
            dtd_Id = RolOpeCtaCte.DTD_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("RolOpeCtaCte") AndAlso
                ChangeTracker.OriginalValues("RolOpeCtaCte") Is RolOpeCtaCte Then
                ChangeTracker.OriginalValues.Remove("RolOpeCtaCte")
            Else
                ChangeTracker.RecordOriginalValue("RolOpeCtaCte", previousValue)
            End If
            If RolOpeCtaCte IsNot Nothing AndAlso Not RolOpeCtaCte.ChangeTracker.ChangeTrackingEnabled Then
                RolOpeCtaCte.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleLeasing(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleLeasing In e.NewItems
                item.cct_Id = cct_Id
                item.tdo_Id = tdo_Id
                item.dtd_Id = dtd_Id
                item.lea_Serie = lea_Serie
                item.lea_Numero = lea_Numero
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleLeasing", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleLeasing In e.OldItems
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleLeasing", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupDetalleLeasingActivosFijos(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleLeasingActivosFijos In e.NewItems
                item.Leasing = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleLeasingActivosFijos", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleLeasingActivosFijos In e.OldItems
                If ReferenceEquals(item.Leasing, Me) Then
                    item.Leasing = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleLeasingActivosFijos", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

#End Region
End Class
