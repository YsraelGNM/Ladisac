'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Moneda))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(PagosCartaFianza))>
<KnownType(GetType(Personas))>
Partial Public Class CartaFianza
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared CAF_ID As string = "CAF_ID"
				public shared CAF_TIPO_DOC As string = "CAF_TIPO_DOC"
				public shared CAF_FECHA_EMI As string = "CAF_FECHA_EMI"
				public shared CAF_FECHA_VEN As string = "CAF_FECHA_VEN"
				public shared CAF_DIAS_VEN As string = "CAF_DIAS_VEN"
				public shared CAF_NUMERO As string = "CAF_NUMERO"
				public shared MON_ID As string = "MON_ID"
				public shared CAF_MONTO As string = "CAF_MONTO"
				public shared PER_ID As string = "PER_ID"
				public shared CAF_IX_NUMERO_PRO As string = "CAF_IX_NUMERO_PRO"
				public shared CAF_IX_ORDEN_COM As string = "CAF_IX_ORDEN_COM"
				public shared CAF_ESTADO_DOC As string = "CAF_ESTADO_DOC"
				public shared CAF_OBSERVACIONES As string = "CAF_OBSERVACIONES"
				public shared USU_ID As string = "USU_ID"
				public shared CAF_FEC_GRAB As string = "CAF_FEC_GRAB"
				public shared CAF_ESTADO As string = "CAF_ESTADO"
		    End Structure
	



    <DataMember()>
    Public Property CAF_ID() As String
        Get
            Return _cAF_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cAF_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'CAF_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _cAF_ID = value
                OnPropertyChanged("CAF_ID")
            End If
        End Set
    End Property

    Private _cAF_ID As String

    <DataMember()>
    Public Property CAF_TIPO_DOC() As Short
        Get
            Return _cAF_TIPO_DOC
        End Get
        Set(ByVal value As Short)
            If Not Equals(_cAF_TIPO_DOC, value) Then
                _cAF_TIPO_DOC = value
                OnPropertyChanged("CAF_TIPO_DOC")
            End If
        End Set
    End Property

    Private _cAF_TIPO_DOC As Short

    <DataMember()>
    Public Property CAF_FECHA_EMI() As Date
        Get
            Return _cAF_FECHA_EMI
        End Get
        Set(ByVal value As Date)
            If Not Equals(_cAF_FECHA_EMI, value) Then
                _cAF_FECHA_EMI = value
                OnPropertyChanged("CAF_FECHA_EMI")
            End If
        End Set
    End Property

    Private _cAF_FECHA_EMI As Date

    <DataMember()>
    Public Property CAF_FECHA_VEN() As Date
        Get
            Return _cAF_FECHA_VEN
        End Get
        Set(ByVal value As Date)
            If Not Equals(_cAF_FECHA_VEN, value) Then
                _cAF_FECHA_VEN = value
                OnPropertyChanged("CAF_FECHA_VEN")
            End If
        End Set
    End Property

    Private _cAF_FECHA_VEN As Date

    <DataMember()>
    Public Property CAF_DIAS_VEN() As Decimal
        Get
            Return _cAF_DIAS_VEN
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_cAF_DIAS_VEN, value) Then
                _cAF_DIAS_VEN = value
                OnPropertyChanged("CAF_DIAS_VEN")
            End If
        End Set
    End Property

    Private _cAF_DIAS_VEN As Decimal

    <DataMember()>
    Public Property CAF_NUMERO() As String
        Get
            Return _cAF_NUMERO
        End Get
        Set(ByVal value As String)
            If Not Equals(_cAF_NUMERO, value) Then
                _cAF_NUMERO = value
                OnPropertyChanged("CAF_NUMERO")
            End If
        End Set
    End Property

    Private _cAF_NUMERO As String

    <DataMember()>
    Public Property MON_ID() As String
        Get
            Return _mON_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_mON_ID, value) Then
                ChangeTracker.RecordOriginalValue("MON_ID", _mON_ID)
                If Not IsDeserializing Then
                    If Moneda IsNot Nothing AndAlso Not Equals(Moneda.MON_ID, value) Then
                        Moneda = Nothing
                    End If
                End If
                _mON_ID = value
                OnPropertyChanged("MON_ID")
            End If
        End Set
    End Property

    Private _mON_ID As String

    <DataMember()>
    Public Property CAF_MONTO() As Decimal
        Get
            Return _cAF_MONTO
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_cAF_MONTO, value) Then
                _cAF_MONTO = value
                OnPropertyChanged("CAF_MONTO")
            End If
        End Set
    End Property

    Private _cAF_MONTO As Decimal

    <DataMember()>
    Public Property PER_ID() As String
        Get
            Return _pER_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID", _pER_ID)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID = value
                OnPropertyChanged("PER_ID")
            End If
        End Set
    End Property

    Private _pER_ID As String

    <DataMember()>
    Public Property CAF_IX_NUMERO_PRO() As String
        Get
            Return _cAF_IX_NUMERO_PRO
        End Get
        Set(ByVal value As String)
            If Not Equals(_cAF_IX_NUMERO_PRO, value) Then
                _cAF_IX_NUMERO_PRO = value
                OnPropertyChanged("CAF_IX_NUMERO_PRO")
            End If
        End Set
    End Property

    Private _cAF_IX_NUMERO_PRO As String

    <DataMember()>
    Public Property CAF_IX_ORDEN_COM() As String
        Get
            Return _cAF_IX_ORDEN_COM
        End Get
        Set(ByVal value As String)
            If Not Equals(_cAF_IX_ORDEN_COM, value) Then
                _cAF_IX_ORDEN_COM = value
                OnPropertyChanged("CAF_IX_ORDEN_COM")
            End If
        End Set
    End Property

    Private _cAF_IX_ORDEN_COM As String

    <DataMember()>
    Public Property CAF_ESTADO_DOC() As Short
        Get
            Return _cAF_ESTADO_DOC
        End Get
        Set(ByVal value As Short)
            If Not Equals(_cAF_ESTADO_DOC, value) Then
                _cAF_ESTADO_DOC = value
                OnPropertyChanged("CAF_ESTADO_DOC")
            End If
        End Set
    End Property

    Private _cAF_ESTADO_DOC As Short

    <DataMember()>
    Public Property CAF_OBSERVACIONES() As String
        Get
            Return _cAF_OBSERVACIONES
        End Get
        Set(ByVal value As String)
            If Not Equals(_cAF_OBSERVACIONES, value) Then
                _cAF_OBSERVACIONES = value
                OnPropertyChanged("CAF_OBSERVACIONES")
            End If
        End Set
    End Property

    Private _cAF_OBSERVACIONES As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property CAF_FEC_GRAB() As Date
        Get
            Return _cAF_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_cAF_FEC_GRAB, value) Then
                _cAF_FEC_GRAB = value
                OnPropertyChanged("CAF_FEC_GRAB")
            End If
        End Set
    End Property

    Private _cAF_FEC_GRAB As Date

    <DataMember()>
    Public Property CAF_ESTADO() As Boolean
        Get
            Return _cAF_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_cAF_ESTADO, value) Then
                _cAF_ESTADO = value
                OnPropertyChanged("CAF_ESTADO")
            End If
        End Set
    End Property

    Private _cAF_ESTADO As Boolean

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Moneda() As Moneda
        Get
            Return _moneda
        End Get
        Set(ByVal value As Moneda)
            If _moneda IsNot value Then
                Dim previousValue As Moneda = _moneda
                _moneda = value
                FixupMoneda(previousValue)
                OnNavigationPropertyChanged("Moneda")
            End If
        End Set
    End Property

    Private _moneda As Moneda


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property PagosCartaFianza() As TrackableCollection(Of PagosCartaFianza)
        Get
            If _pagosCartaFianza Is Nothing Then
                _pagosCartaFianza = New TrackableCollection(Of PagosCartaFianza)
                AddHandler _pagosCartaFianza.CollectionChanged, AddressOf FixupPagosCartaFianza
            End If
            Return _pagosCartaFianza
        End Get
        Set(ByVal value As TrackableCollection(Of PagosCartaFianza))
            If Not Object.ReferenceEquals(_pagosCartaFianza, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _pagosCartaFianza IsNot Nothing Then
                    RemoveHandler _pagosCartaFianza.CollectionChanged, AddressOf FixupPagosCartaFianza
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminación en cascada para aquellas entidades de la colección actual.
                    For Each item As PagosCartaFianza In _pagosCartaFianza
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _pagosCartaFianza = value
                If _pagosCartaFianza IsNot Nothing Then
                    AddHandler _pagosCartaFianza.CollectionChanged, AddressOf FixupPagosCartaFianza
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                    For Each item As PagosCartaFianza In _pagosCartaFianza
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("PagosCartaFianza")
            End If
        End Set
    End Property

    Private _pagosCartaFianza As TrackableCollection(Of PagosCartaFianza)

    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Moneda = Nothing
        Usuarios = Nothing
        PagosCartaFianza.Clear()
        Personas = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupMoneda(ByVal previousValue As Moneda)
        If IsDeserializing Then
            Return
        End If

        If Moneda IsNot Nothing Then
            MON_ID = Moneda.MON_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Moneda") AndAlso
                ChangeTracker.OriginalValues("Moneda") Is Moneda Then
                ChangeTracker.OriginalValues.Remove("Moneda")
            Else
                ChangeTracker.RecordOriginalValue("Moneda", previousValue)
            End If
            If Moneda IsNot Nothing AndAlso Not Moneda.ChangeTracker.ChangeTrackingEnabled Then
                Moneda.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.CartaFianza.Contains(Me) Then
            previousValue.CartaFianza.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.CartaFianza.Contains(Me) Then
                Personas.CartaFianza.Add(Me)
            End If

            PER_ID = Personas.PER_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPagosCartaFianza(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PagosCartaFianza In e.NewItems
                item.CartaFianza = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PagosCartaFianza", item)
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PagosCartaFianza In e.OldItems
                If ReferenceEquals(item.CartaFianza, Me) Then
                    item.CartaFianza = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PagosCartaFianza", item)
                    ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                    ' permite que la relación se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

#End Region
End Class
