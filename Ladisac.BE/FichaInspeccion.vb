'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Personas))>
<KnownType(GetType(EntidadInspeccion))>
<KnownType(GetType(FichaInspeccionDetalle))>
Partial Public Class FichaInspeccion
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared FIN_ID As string = "FIN_ID"
				public shared EIN_ID As string = "EIN_ID"
				public shared FIN_FECHA As string = "FIN_FECHA"
				public shared PER_ID_INSPECTOR As string = "PER_ID_INSPECTOR"
				public shared USU_ID As string = "USU_ID"
				public shared FIN_FEC_GRAB As string = "FIN_FEC_GRAB"
				public shared FIN_ESTADO As string = "FIN_ESTADO"
		    End Structure
	



    <DataMember()>
    Public Property FIN_ID() As Integer
        Get
            Return _fIN_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_fIN_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'FIN_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _fIN_ID = value
                OnPropertyChanged("FIN_ID")
            End If
        End Set
    End Property

    Private _fIN_ID As Integer

    <DataMember()>
    Public Property EIN_ID() As Nullable(Of Integer)
        Get
            Return _eIN_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_eIN_ID, value) Then
                ChangeTracker.RecordOriginalValue("EIN_ID", _eIN_ID)
                If Not IsDeserializing Then
                    If EntidadInspeccion IsNot Nothing AndAlso Not Equals(EntidadInspeccion.EIN_ID, value) Then
                        EntidadInspeccion = Nothing
                    End If
                End If
                _eIN_ID = value
                OnPropertyChanged("EIN_ID")
            End If
        End Set
    End Property

    Private _eIN_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property FIN_FECHA() As Nullable(Of Date)
        Get
            Return _fIN_FECHA
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_fIN_FECHA, value) Then
                _fIN_FECHA = value
                OnPropertyChanged("FIN_FECHA")
            End If
        End Set
    End Property

    Private _fIN_FECHA As Nullable(Of Date)

    <DataMember()>
    Public Property PER_ID_INSPECTOR() As String
        Get
            Return _pER_ID_INSPECTOR
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_INSPECTOR, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_INSPECTOR", _pER_ID_INSPECTOR)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID_INSPECTOR = value
                OnPropertyChanged("PER_ID_INSPECTOR")
            End If
        End Set
    End Property

    Private _pER_ID_INSPECTOR As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property FIN_FEC_GRAB() As Nullable(Of Date)
        Get
            Return _fIN_FEC_GRAB
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_fIN_FEC_GRAB, value) Then
                _fIN_FEC_GRAB = value
                OnPropertyChanged("FIN_FEC_GRAB")
            End If
        End Set
    End Property

    Private _fIN_FEC_GRAB As Nullable(Of Date)

    <DataMember()>
    Public Property FIN_ESTADO() As Nullable(Of Boolean)
        Get
            Return _fIN_ESTADO
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_fIN_ESTADO, value) Then
                _fIN_ESTADO = value
                OnPropertyChanged("FIN_ESTADO")
            End If
        End Set
    End Property

    Private _fIN_ESTADO As Nullable(Of Boolean)

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property EntidadInspeccion() As EntidadInspeccion
        Get
            Return _entidadInspeccion
        End Get
        Set(ByVal value As EntidadInspeccion)
            If _entidadInspeccion IsNot value Then
                Dim previousValue As EntidadInspeccion = _entidadInspeccion
                _entidadInspeccion = value
                FixupEntidadInspeccion(previousValue)
                OnNavigationPropertyChanged("EntidadInspeccion")
            End If
        End Set
    End Property

    Private _entidadInspeccion As EntidadInspeccion


    <DataMember()>
    Public Property FichaInspeccionDetalle() As TrackableCollection(Of FichaInspeccionDetalle)
        Get
            If _fichaInspeccionDetalle Is Nothing Then
                _fichaInspeccionDetalle = New TrackableCollection(Of FichaInspeccionDetalle)
                AddHandler _fichaInspeccionDetalle.CollectionChanged, AddressOf FixupFichaInspeccionDetalle
            End If
            Return _fichaInspeccionDetalle
        End Get
        Set(ByVal value As TrackableCollection(Of FichaInspeccionDetalle))
            If Not Object.ReferenceEquals(_fichaInspeccionDetalle, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _fichaInspeccionDetalle IsNot Nothing Then
                    RemoveHandler _fichaInspeccionDetalle.CollectionChanged, AddressOf FixupFichaInspeccionDetalle
                End If
                _fichaInspeccionDetalle = value
                If _fichaInspeccionDetalle IsNot Nothing Then
                    AddHandler _fichaInspeccionDetalle.CollectionChanged, AddressOf FixupFichaInspeccionDetalle
                End If
                OnNavigationPropertyChanged("FichaInspeccionDetalle")
            End If
        End Set
    End Property

    Private _fichaInspeccionDetalle As TrackableCollection(Of FichaInspeccionDetalle)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Personas = Nothing
        EntidadInspeccion = Nothing
        FichaInspeccionDetalle.Clear()
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.FichaInspeccion.Contains(Me) Then
            previousValue.FichaInspeccion.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.FichaInspeccion.Contains(Me) Then
                Personas.FichaInspeccion.Add(Me)
            End If

            PER_ID_INSPECTOR = Personas.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_INSPECTOR = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupEntidadInspeccion(ByVal previousValue As EntidadInspeccion, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.FichaInspeccion.Contains(Me) Then
            previousValue.FichaInspeccion.Remove(Me)
        End If

        If EntidadInspeccion IsNot Nothing Then
            If Not EntidadInspeccion.FichaInspeccion.Contains(Me) Then
                EntidadInspeccion.FichaInspeccion.Add(Me)
            End If

            EIN_ID = EntidadInspeccion.EIN_ID
        ElseIf Not skipKeys Then
            EIN_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("EntidadInspeccion") AndAlso
                ChangeTracker.OriginalValues("EntidadInspeccion") Is EntidadInspeccion Then
                ChangeTracker.OriginalValues.Remove("EntidadInspeccion")
            Else
                ChangeTracker.RecordOriginalValue("EntidadInspeccion", previousValue)
            End If
            If EntidadInspeccion IsNot Nothing AndAlso Not EntidadInspeccion.ChangeTracker.ChangeTrackingEnabled Then
                EntidadInspeccion.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupFichaInspeccionDetalle(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As FichaInspeccionDetalle In e.NewItems
                item.FichaInspeccion = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("FichaInspeccionDetalle", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As FichaInspeccionDetalle In e.OldItems
                If ReferenceEquals(item.FichaInspeccion, Me) Then
                    item.FichaInspeccion = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("FichaInspeccionDetalle", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
