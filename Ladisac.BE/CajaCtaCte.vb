'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(CuentasContables))>
<KnownType(GetType(Moneda))>
<KnownType(GetType(PuntoVenta))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(Cheques))>
<KnownType(GetType(DetalleTesoreria))>
<KnownType(GetType(MedioPagoTesoreria))>
<KnownType(GetType(Tesoreria))>
<KnownType(GetType(Personas))>
<KnownType(GetType(PlanillaTrabajador))>
<KnownType(GetType(MovimientoCajaBanco))>
<KnownType(GetType(CajeroAnexo))>
<KnownType(GetType(DetallePrestamo))>
<KnownType(GetType(Prestamo))>
Partial Public Class CajaCtaCte
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared CCC_ID As string = "CCC_ID"
				public shared CCC_TIPO As string = "CCC_TIPO"
				public shared PER_ID_BAN As string = "PER_ID_BAN"
				public shared CCC_DESCRIPCION As string = "CCC_DESCRIPCION"
				public shared CCC_CUENTA_BANCARIA As string = "CCC_CUENTA_BANCARIA"
				public shared PER_ID_CAJ As string = "PER_ID_CAJ"
				public shared PVE_ID As string = "PVE_ID"
				public shared CCC_FECHA_SAL_INI As string = "CCC_FECHA_SAL_INI"
				public shared CCC_MONTO_SAL_INI As string = "CCC_MONTO_SAL_INI"
				public shared MON_ID As string = "MON_ID"
				public shared USU_ID As string = "USU_ID"
				public shared CCC_FEC_GRAB As string = "CCC_FEC_GRAB"
				public shared CCC_ESTADO As string = "CCC_ESTADO"
				public shared CUC_ID As string = "CUC_ID"
		    End Structure
	



    <DataMember()>
    Public Property CCC_ID() As String
        Get
            Return _cCC_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCC_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'CCC_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _cCC_ID = value
                OnPropertyChanged("CCC_ID")
            End If
        End Set
    End Property

    Private _cCC_ID As String

    <DataMember()>
    Public Property CCC_TIPO() As Short
        Get
            Return _cCC_TIPO
        End Get
        Set(ByVal value As Short)
            If Not Equals(_cCC_TIPO, value) Then
                _cCC_TIPO = value
                OnPropertyChanged("CCC_TIPO")
            End If
        End Set
    End Property

    Private _cCC_TIPO As Short

    <DataMember()>
    Public Property PER_ID_BAN() As String
        Get
            Return _pER_ID_BAN
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_BAN, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_BAN", _pER_ID_BAN)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID_BAN = value
                OnPropertyChanged("PER_ID_BAN")
            End If
        End Set
    End Property

    Private _pER_ID_BAN As String

    <DataMember()>
    Public Property CCC_DESCRIPCION() As String
        Get
            Return _cCC_DESCRIPCION
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCC_DESCRIPCION, value) Then
                _cCC_DESCRIPCION = value
                OnPropertyChanged("CCC_DESCRIPCION")
            End If
        End Set
    End Property

    Private _cCC_DESCRIPCION As String

    <DataMember()>
    Public Property CCC_CUENTA_BANCARIA() As String
        Get
            Return _cCC_CUENTA_BANCARIA
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCC_CUENTA_BANCARIA, value) Then
                _cCC_CUENTA_BANCARIA = value
                OnPropertyChanged("CCC_CUENTA_BANCARIA")
            End If
        End Set
    End Property

    Private _cCC_CUENTA_BANCARIA As String

    <DataMember()>
    Public Property PER_ID_CAJ() As String
        Get
            Return _pER_ID_CAJ
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_CAJ, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_CAJ", _pER_ID_CAJ)
                If Not IsDeserializing Then
                    If Personas1 IsNot Nothing AndAlso Not Equals(Personas1.PER_ID, value) Then
                        Personas1 = Nothing
                    End If
                End If
                _pER_ID_CAJ = value
                OnPropertyChanged("PER_ID_CAJ")
            End If
        End Set
    End Property

    Private _pER_ID_CAJ As String

    <DataMember()>
    Public Property PVE_ID() As String
        Get
            Return _pVE_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_pVE_ID, value) Then
                ChangeTracker.RecordOriginalValue("PVE_ID", _pVE_ID)
                If Not IsDeserializing Then
                    If PuntoVenta IsNot Nothing AndAlso Not Equals(PuntoVenta.PVE_ID, value) Then
                        PuntoVenta = Nothing
                    End If
                End If
                _pVE_ID = value
                OnPropertyChanged("PVE_ID")
            End If
        End Set
    End Property

    Private _pVE_ID As String

    <DataMember()>
    Public Property CCC_FECHA_SAL_INI() As Date
        Get
            Return _cCC_FECHA_SAL_INI
        End Get
        Set(ByVal value As Date)
            If Not Equals(_cCC_FECHA_SAL_INI, value) Then
                _cCC_FECHA_SAL_INI = value
                OnPropertyChanged("CCC_FECHA_SAL_INI")
            End If
        End Set
    End Property

    Private _cCC_FECHA_SAL_INI As Date

    <DataMember()>
    Public Property CCC_MONTO_SAL_INI() As Decimal
        Get
            Return _cCC_MONTO_SAL_INI
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_cCC_MONTO_SAL_INI, value) Then
                _cCC_MONTO_SAL_INI = value
                OnPropertyChanged("CCC_MONTO_SAL_INI")
            End If
        End Set
    End Property

    Private _cCC_MONTO_SAL_INI As Decimal

    <DataMember()>
    Public Property MON_ID() As String
        Get
            Return _mON_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_mON_ID, value) Then
                ChangeTracker.RecordOriginalValue("MON_ID", _mON_ID)
                If Not IsDeserializing Then
                    If Moneda IsNot Nothing AndAlso Not Equals(Moneda.MON_ID, value) Then
                        Moneda = Nothing
                    End If
                End If
                _mON_ID = value
                OnPropertyChanged("MON_ID")
            End If
        End Set
    End Property

    Private _mON_ID As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property CCC_FEC_GRAB() As Date
        Get
            Return _cCC_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_cCC_FEC_GRAB, value) Then
                _cCC_FEC_GRAB = value
                OnPropertyChanged("CCC_FEC_GRAB")
            End If
        End Set
    End Property

    Private _cCC_FEC_GRAB As Date

    <DataMember()>
    Public Property CCC_ESTADO() As Boolean
        Get
            Return _cCC_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_cCC_ESTADO, value) Then
                _cCC_ESTADO = value
                OnPropertyChanged("CCC_ESTADO")
            End If
        End Set
    End Property

    Private _cCC_ESTADO As Boolean

    <DataMember()>
    Public Property CUC_ID() As String
        Get
            Return _cUC_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cUC_ID, value) Then
                ChangeTracker.RecordOriginalValue("CUC_ID", _cUC_ID)
                If Not IsDeserializing Then
                    If CuentasContables IsNot Nothing AndAlso Not Equals(CuentasContables.CUC_ID, value) Then
                        CuentasContables = Nothing
                    End If
                End If
                _cUC_ID = value
                OnPropertyChanged("CUC_ID")
            End If
        End Set
    End Property

    Private _cUC_ID As String

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property CuentasContables() As CuentasContables
        Get
            Return _cuentasContables
        End Get
        Set(ByVal value As CuentasContables)
            If _cuentasContables IsNot value Then
                Dim previousValue As CuentasContables = _cuentasContables
                _cuentasContables = value
                FixupCuentasContables(previousValue)
                OnNavigationPropertyChanged("CuentasContables")
            End If
        End Set
    End Property

    Private _cuentasContables As CuentasContables


    <DataMember()>
    Public Property Moneda() As Moneda
        Get
            Return _moneda
        End Get
        Set(ByVal value As Moneda)
            If _moneda IsNot value Then
                Dim previousValue As Moneda = _moneda
                _moneda = value
                FixupMoneda(previousValue)
                OnNavigationPropertyChanged("Moneda")
            End If
        End Set
    End Property

    Private _moneda As Moneda


    <DataMember()>
    Public Property PuntoVenta() As PuntoVenta
        Get
            Return _puntoVenta
        End Get
        Set(ByVal value As PuntoVenta)
            If _puntoVenta IsNot value Then
                Dim previousValue As PuntoVenta = _puntoVenta
                _puntoVenta = value
                FixupPuntoVenta(previousValue)
                OnNavigationPropertyChanged("PuntoVenta")
            End If
        End Set
    End Property

    Private _puntoVenta As PuntoVenta


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property Cheques() As TrackableCollection(Of Cheques)
        Get
            If _cheques Is Nothing Then
                _cheques = New TrackableCollection(Of Cheques)
                AddHandler _cheques.CollectionChanged, AddressOf FixupCheques
            End If
            Return _cheques
        End Get
        Set(ByVal value As TrackableCollection(Of Cheques))
            If Not Object.ReferenceEquals(_cheques, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _cheques IsNot Nothing Then
                    RemoveHandler _cheques.CollectionChanged, AddressOf FixupCheques
                End If
                _cheques = value
                If _cheques IsNot Nothing Then
                    AddHandler _cheques.CollectionChanged, AddressOf FixupCheques
                End If
                OnNavigationPropertyChanged("Cheques")
            End If
        End Set
    End Property

    Private _cheques As TrackableCollection(Of Cheques)

    <DataMember()>
    Public Property DetalleTesoreria() As TrackableCollection(Of DetalleTesoreria)
        Get
            If _detalleTesoreria Is Nothing Then
                _detalleTesoreria = New TrackableCollection(Of DetalleTesoreria)
                AddHandler _detalleTesoreria.CollectionChanged, AddressOf FixupDetalleTesoreria
            End If
            Return _detalleTesoreria
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleTesoreria))
            If Not Object.ReferenceEquals(_detalleTesoreria, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleTesoreria IsNot Nothing Then
                    RemoveHandler _detalleTesoreria.CollectionChanged, AddressOf FixupDetalleTesoreria
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminación en cascada para aquellas entidades de la colección actual.
                    For Each item As DetalleTesoreria In _detalleTesoreria
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detalleTesoreria = value
                If _detalleTesoreria IsNot Nothing Then
                    AddHandler _detalleTesoreria.CollectionChanged, AddressOf FixupDetalleTesoreria
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                    For Each item As DetalleTesoreria In _detalleTesoreria
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetalleTesoreria")
            End If
        End Set
    End Property

    Private _detalleTesoreria As TrackableCollection(Of DetalleTesoreria)

    <DataMember()>
    Public Property DetalleTesoreria1() As TrackableCollection(Of DetalleTesoreria)
        Get
            If _detalleTesoreria1 Is Nothing Then
                _detalleTesoreria1 = New TrackableCollection(Of DetalleTesoreria)
                AddHandler _detalleTesoreria1.CollectionChanged, AddressOf FixupDetalleTesoreria1
            End If
            Return _detalleTesoreria1
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleTesoreria))
            If Not Object.ReferenceEquals(_detalleTesoreria1, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleTesoreria1 IsNot Nothing Then
                    RemoveHandler _detalleTesoreria1.CollectionChanged, AddressOf FixupDetalleTesoreria1
                End If
                _detalleTesoreria1 = value
                If _detalleTesoreria1 IsNot Nothing Then
                    AddHandler _detalleTesoreria1.CollectionChanged, AddressOf FixupDetalleTesoreria1
                End If
                OnNavigationPropertyChanged("DetalleTesoreria1")
            End If
        End Set
    End Property

    Private _detalleTesoreria1 As TrackableCollection(Of DetalleTesoreria)

    <DataMember()>
    Public Property MedioPagoTesoreria() As TrackableCollection(Of MedioPagoTesoreria)
        Get
            If _medioPagoTesoreria Is Nothing Then
                _medioPagoTesoreria = New TrackableCollection(Of MedioPagoTesoreria)
                AddHandler _medioPagoTesoreria.CollectionChanged, AddressOf FixupMedioPagoTesoreria
            End If
            Return _medioPagoTesoreria
        End Get
        Set(ByVal value As TrackableCollection(Of MedioPagoTesoreria))
            If Not Object.ReferenceEquals(_medioPagoTesoreria, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _medioPagoTesoreria IsNot Nothing Then
                    RemoveHandler _medioPagoTesoreria.CollectionChanged, AddressOf FixupMedioPagoTesoreria
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminación en cascada para aquellas entidades de la colección actual.
                    For Each item As MedioPagoTesoreria In _medioPagoTesoreria
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _medioPagoTesoreria = value
                If _medioPagoTesoreria IsNot Nothing Then
                    AddHandler _medioPagoTesoreria.CollectionChanged, AddressOf FixupMedioPagoTesoreria
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                    For Each item As MedioPagoTesoreria In _medioPagoTesoreria
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("MedioPagoTesoreria")
            End If
        End Set
    End Property

    Private _medioPagoTesoreria As TrackableCollection(Of MedioPagoTesoreria)

    <DataMember()>
    Public Property Tesoreria() As TrackableCollection(Of Tesoreria)
        Get
            If _tesoreria Is Nothing Then
                _tesoreria = New TrackableCollection(Of Tesoreria)
                AddHandler _tesoreria.CollectionChanged, AddressOf FixupTesoreria
            End If
            Return _tesoreria
        End Get
        Set(ByVal value As TrackableCollection(Of Tesoreria))
            If Not Object.ReferenceEquals(_tesoreria, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _tesoreria IsNot Nothing Then
                    RemoveHandler _tesoreria.CollectionChanged, AddressOf FixupTesoreria
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminación en cascada para aquellas entidades de la colección actual.
                    For Each item As Tesoreria In _tesoreria
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _tesoreria = value
                If _tesoreria IsNot Nothing Then
                    AddHandler _tesoreria.CollectionChanged, AddressOf FixupTesoreria
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                    For Each item As Tesoreria In _tesoreria
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("Tesoreria")
            End If
        End Set
    End Property

    Private _tesoreria As TrackableCollection(Of Tesoreria)

    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property Personas1() As Personas
        Get
            Return _personas1
        End Get
        Set(ByVal value As Personas)
            If _personas1 IsNot value Then
                Dim previousValue As Personas = _personas1
                _personas1 = value
                FixupPersonas1(previousValue)
                OnNavigationPropertyChanged("Personas1")
            End If
        End Set
    End Property

    Private _personas1 As Personas


    <DataMember()>
    Public Property Personas2() As TrackableCollection(Of Personas)
        Get
            If _personas2 Is Nothing Then
                _personas2 = New TrackableCollection(Of Personas)
                AddHandler _personas2.CollectionChanged, AddressOf FixupPersonas2
            End If
            Return _personas2
        End Get
        Set(ByVal value As TrackableCollection(Of Personas))
            If Not Object.ReferenceEquals(_personas2, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _personas2 IsNot Nothing Then
                    RemoveHandler _personas2.CollectionChanged, AddressOf FixupPersonas2
                End If
                _personas2 = value
                If _personas2 IsNot Nothing Then
                    AddHandler _personas2.CollectionChanged, AddressOf FixupPersonas2
                End If
                OnNavigationPropertyChanged("Personas2")
            End If
        End Set
    End Property

    Private _personas2 As TrackableCollection(Of Personas)

    <DataMember()>
    Public Property PlanillaTrabajador() As TrackableCollection(Of PlanillaTrabajador)
        Get
            If _planillaTrabajador Is Nothing Then
                _planillaTrabajador = New TrackableCollection(Of PlanillaTrabajador)
                AddHandler _planillaTrabajador.CollectionChanged, AddressOf FixupPlanillaTrabajador
            End If
            Return _planillaTrabajador
        End Get
        Set(ByVal value As TrackableCollection(Of PlanillaTrabajador))
            If Not Object.ReferenceEquals(_planillaTrabajador, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _planillaTrabajador IsNot Nothing Then
                    RemoveHandler _planillaTrabajador.CollectionChanged, AddressOf FixupPlanillaTrabajador
                End If
                _planillaTrabajador = value
                If _planillaTrabajador IsNot Nothing Then
                    AddHandler _planillaTrabajador.CollectionChanged, AddressOf FixupPlanillaTrabajador
                End If
                OnNavigationPropertyChanged("PlanillaTrabajador")
            End If
        End Set
    End Property

    Private _planillaTrabajador As TrackableCollection(Of PlanillaTrabajador)

    <DataMember()>
    Public Property MovimientoCajaBanco() As TrackableCollection(Of MovimientoCajaBanco)
        Get
            If _movimientoCajaBanco Is Nothing Then
                _movimientoCajaBanco = New TrackableCollection(Of MovimientoCajaBanco)
                AddHandler _movimientoCajaBanco.CollectionChanged, AddressOf FixupMovimientoCajaBanco
            End If
            Return _movimientoCajaBanco
        End Get
        Set(ByVal value As TrackableCollection(Of MovimientoCajaBanco))
            If Not Object.ReferenceEquals(_movimientoCajaBanco, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _movimientoCajaBanco IsNot Nothing Then
                    RemoveHandler _movimientoCajaBanco.CollectionChanged, AddressOf FixupMovimientoCajaBanco
                End If
                _movimientoCajaBanco = value
                If _movimientoCajaBanco IsNot Nothing Then
                    AddHandler _movimientoCajaBanco.CollectionChanged, AddressOf FixupMovimientoCajaBanco
                End If
                OnNavigationPropertyChanged("MovimientoCajaBanco")
            End If
        End Set
    End Property

    Private _movimientoCajaBanco As TrackableCollection(Of MovimientoCajaBanco)

    <DataMember()>
    Public Property MovimientoCajaBanco1() As TrackableCollection(Of MovimientoCajaBanco)
        Get
            If _movimientoCajaBanco1 Is Nothing Then
                _movimientoCajaBanco1 = New TrackableCollection(Of MovimientoCajaBanco)
                AddHandler _movimientoCajaBanco1.CollectionChanged, AddressOf FixupMovimientoCajaBanco1
            End If
            Return _movimientoCajaBanco1
        End Get
        Set(ByVal value As TrackableCollection(Of MovimientoCajaBanco))
            If Not Object.ReferenceEquals(_movimientoCajaBanco1, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _movimientoCajaBanco1 IsNot Nothing Then
                    RemoveHandler _movimientoCajaBanco1.CollectionChanged, AddressOf FixupMovimientoCajaBanco1
                End If
                _movimientoCajaBanco1 = value
                If _movimientoCajaBanco1 IsNot Nothing Then
                    AddHandler _movimientoCajaBanco1.CollectionChanged, AddressOf FixupMovimientoCajaBanco1
                End If
                OnNavigationPropertyChanged("MovimientoCajaBanco1")
            End If
        End Set
    End Property

    Private _movimientoCajaBanco1 As TrackableCollection(Of MovimientoCajaBanco)

    <DataMember()>
    Public Property CajeroAnexo() As TrackableCollection(Of CajeroAnexo)
        Get
            If _cajeroAnexo Is Nothing Then
                _cajeroAnexo = New TrackableCollection(Of CajeroAnexo)
                AddHandler _cajeroAnexo.CollectionChanged, AddressOf FixupCajeroAnexo
            End If
            Return _cajeroAnexo
        End Get
        Set(ByVal value As TrackableCollection(Of CajeroAnexo))
            If Not Object.ReferenceEquals(_cajeroAnexo, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _cajeroAnexo IsNot Nothing Then
                    RemoveHandler _cajeroAnexo.CollectionChanged, AddressOf FixupCajeroAnexo
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminación en cascada para aquellas entidades de la colección actual.
                    For Each item As CajeroAnexo In _cajeroAnexo
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _cajeroAnexo = value
                If _cajeroAnexo IsNot Nothing Then
                    AddHandler _cajeroAnexo.CollectionChanged, AddressOf FixupCajeroAnexo
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                    For Each item As CajeroAnexo In _cajeroAnexo
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("CajeroAnexo")
            End If
        End Set
    End Property

    Private _cajeroAnexo As TrackableCollection(Of CajeroAnexo)

    <DataMember()>
    Public Property DetallePrestamo() As TrackableCollection(Of DetallePrestamo)
        Get
            If _detallePrestamo Is Nothing Then
                _detallePrestamo = New TrackableCollection(Of DetallePrestamo)
                AddHandler _detallePrestamo.CollectionChanged, AddressOf FixupDetallePrestamo
            End If
            Return _detallePrestamo
        End Get
        Set(ByVal value As TrackableCollection(Of DetallePrestamo))
            If Not Object.ReferenceEquals(_detallePrestamo, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detallePrestamo IsNot Nothing Then
                    RemoveHandler _detallePrestamo.CollectionChanged, AddressOf FixupDetallePrestamo
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminación en cascada para aquellas entidades de la colección actual.
                    For Each item As DetallePrestamo In _detallePrestamo
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detallePrestamo = value
                If _detallePrestamo IsNot Nothing Then
                    AddHandler _detallePrestamo.CollectionChanged, AddressOf FixupDetallePrestamo
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                    For Each item As DetallePrestamo In _detallePrestamo
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetallePrestamo")
            End If
        End Set
    End Property

    Private _detallePrestamo As TrackableCollection(Of DetallePrestamo)

    <DataMember()>
    Public Property Prestamo() As TrackableCollection(Of Prestamo)
        Get
            If _prestamo Is Nothing Then
                _prestamo = New TrackableCollection(Of Prestamo)
                AddHandler _prestamo.CollectionChanged, AddressOf FixupPrestamo
            End If
            Return _prestamo
        End Get
        Set(ByVal value As TrackableCollection(Of Prestamo))
            If Not Object.ReferenceEquals(_prestamo, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _prestamo IsNot Nothing Then
                    RemoveHandler _prestamo.CollectionChanged, AddressOf FixupPrestamo
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminación en cascada para aquellas entidades de la colección actual.
                    For Each item As Prestamo In _prestamo
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _prestamo = value
                If _prestamo IsNot Nothing Then
                    AddHandler _prestamo.CollectionChanged, AddressOf FixupPrestamo
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                    For Each item As Prestamo In _prestamo
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("Prestamo")
            End If
        End Set
    End Property

    Private _prestamo As TrackableCollection(Of Prestamo)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        CuentasContables = Nothing
        Moneda = Nothing
        PuntoVenta = Nothing
        Usuarios = Nothing
        Cheques.Clear()
        DetalleTesoreria.Clear()
        DetalleTesoreria1.Clear()
        MedioPagoTesoreria.Clear()
        Tesoreria.Clear()
        Personas = Nothing
        Personas1 = Nothing
        Personas2.Clear()
        PlanillaTrabajador.Clear()
        MovimientoCajaBanco.Clear()
        MovimientoCajaBanco1.Clear()
        CajeroAnexo.Clear()
        DetallePrestamo.Clear()
        Prestamo.Clear()
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupCuentasContables(ByVal previousValue As CuentasContables, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.CajaCtaCte.Contains(Me) Then
            previousValue.CajaCtaCte.Remove(Me)
        End If

        If CuentasContables IsNot Nothing Then
            If Not CuentasContables.CajaCtaCte.Contains(Me) Then
                CuentasContables.CajaCtaCte.Add(Me)
            End If

            CUC_ID = CuentasContables.CUC_ID
        ElseIf Not skipKeys Then
            CUC_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CuentasContables") AndAlso
                ChangeTracker.OriginalValues("CuentasContables") Is CuentasContables Then
                ChangeTracker.OriginalValues.Remove("CuentasContables")
            Else
                ChangeTracker.RecordOriginalValue("CuentasContables", previousValue)
            End If
            If CuentasContables IsNot Nothing AndAlso Not CuentasContables.ChangeTracker.ChangeTrackingEnabled Then
                CuentasContables.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupMoneda(ByVal previousValue As Moneda)
        If IsDeserializing Then
            Return
        End If

        If Moneda IsNot Nothing Then
            MON_ID = Moneda.MON_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Moneda") AndAlso
                ChangeTracker.OriginalValues("Moneda") Is Moneda Then
                ChangeTracker.OriginalValues.Remove("Moneda")
            Else
                ChangeTracker.RecordOriginalValue("Moneda", previousValue)
            End If
            If Moneda IsNot Nothing AndAlso Not Moneda.ChangeTracker.ChangeTrackingEnabled Then
                Moneda.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPuntoVenta(ByVal previousValue As PuntoVenta, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.CajaCtaCte.Contains(Me) Then
            previousValue.CajaCtaCte.Remove(Me)
        End If

        If PuntoVenta IsNot Nothing Then
            If Not PuntoVenta.CajaCtaCte.Contains(Me) Then
                PuntoVenta.CajaCtaCte.Add(Me)
            End If

            PVE_ID = PuntoVenta.PVE_ID
        ElseIf Not skipKeys Then
            PVE_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("PuntoVenta") AndAlso
                ChangeTracker.OriginalValues("PuntoVenta") Is PuntoVenta Then
                ChangeTracker.OriginalValues.Remove("PuntoVenta")
            Else
                ChangeTracker.RecordOriginalValue("PuntoVenta", previousValue)
            End If
            If PuntoVenta IsNot Nothing AndAlso Not PuntoVenta.ChangeTracker.ChangeTrackingEnabled Then
                PuntoVenta.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.CajaCtaCte.Contains(Me) Then
            previousValue.CajaCtaCte.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.CajaCtaCte.Contains(Me) Then
                Personas.CajaCtaCte.Add(Me)
            End If

            PER_ID_BAN = Personas.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_BAN = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas1(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.CajaCtaCte1.Contains(Me) Then
            previousValue.CajaCtaCte1.Remove(Me)
        End If

        If Personas1 IsNot Nothing Then
            If Not Personas1.CajaCtaCte1.Contains(Me) Then
                Personas1.CajaCtaCte1.Add(Me)
            End If

            PER_ID_CAJ = Personas1.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_CAJ = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas1") AndAlso
                ChangeTracker.OriginalValues("Personas1") Is Personas1 Then
                ChangeTracker.OriginalValues.Remove("Personas1")
            Else
                ChangeTracker.RecordOriginalValue("Personas1", previousValue)
            End If
            If Personas1 IsNot Nothing AndAlso Not Personas1.ChangeTracker.ChangeTrackingEnabled Then
                Personas1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCheques(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As Cheques In e.NewItems
                item.CajaCtaCte = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("Cheques", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As Cheques In e.OldItems
                If ReferenceEquals(item.CajaCtaCte, Me) Then
                    item.CajaCtaCte = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("Cheques", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupDetalleTesoreria(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleTesoreria In e.NewItems
                item.CajaCtaCte = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleTesoreria", item)
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleTesoreria In e.OldItems
                If ReferenceEquals(item.CajaCtaCte, Me) Then
                    item.CajaCtaCte = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleTesoreria", item)
                    ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                    ' permite que la relación se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupDetalleTesoreria1(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleTesoreria In e.NewItems
                item.CajaCtaCte1 = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleTesoreria1", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleTesoreria In e.OldItems
                If ReferenceEquals(item.CajaCtaCte1, Me) Then
                    item.CajaCtaCte1 = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleTesoreria1", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupMedioPagoTesoreria(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As MedioPagoTesoreria In e.NewItems
                item.CajaCtaCte = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("MedioPagoTesoreria", item)
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As MedioPagoTesoreria In e.OldItems
                If ReferenceEquals(item.CajaCtaCte, Me) Then
                    item.CajaCtaCte = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("MedioPagoTesoreria", item)
                    ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                    ' permite que la relación se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupTesoreria(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As Tesoreria In e.NewItems
                item.CajaCtaCte = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("Tesoreria", item)
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As Tesoreria In e.OldItems
                If ReferenceEquals(item.CajaCtaCte, Me) Then
                    item.CajaCtaCte = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("Tesoreria", item)
                    ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                    ' permite que la relación se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupPersonas2(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As Personas In e.NewItems
                item.CajaCtaCte2 = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("Personas2", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As Personas In e.OldItems
                If ReferenceEquals(item.CajaCtaCte2, Me) Then
                    item.CajaCtaCte2 = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("Personas2", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupPlanillaTrabajador(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PlanillaTrabajador In e.NewItems
                item.CajaCtaCte = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PlanillaTrabajador", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PlanillaTrabajador In e.OldItems
                If ReferenceEquals(item.CajaCtaCte, Me) Then
                    item.CajaCtaCte = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PlanillaTrabajador", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupMovimientoCajaBanco(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As MovimientoCajaBanco In e.NewItems
                item.CajaCtaCte = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("MovimientoCajaBanco", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As MovimientoCajaBanco In e.OldItems
                If ReferenceEquals(item.CajaCtaCte, Me) Then
                    item.CajaCtaCte = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("MovimientoCajaBanco", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupMovimientoCajaBanco1(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As MovimientoCajaBanco In e.NewItems
                item.CajaCtaCte1 = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("MovimientoCajaBanco1", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As MovimientoCajaBanco In e.OldItems
                If ReferenceEquals(item.CajaCtaCte1, Me) Then
                    item.CajaCtaCte1 = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("MovimientoCajaBanco1", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupCajeroAnexo(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As CajeroAnexo In e.NewItems
                item.CajaCtaCte = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("CajeroAnexo", item)
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As CajeroAnexo In e.OldItems
                If ReferenceEquals(item.CajaCtaCte, Me) Then
                    item.CajaCtaCte = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("CajeroAnexo", item)
                    ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                    ' permite que la relación se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupDetallePrestamo(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetallePrestamo In e.NewItems
                item.CajaCtaCte = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetallePrestamo", item)
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetallePrestamo In e.OldItems
                If ReferenceEquals(item.CajaCtaCte, Me) Then
                    item.CajaCtaCte = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetallePrestamo", item)
                    ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                    ' permite que la relación se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupPrestamo(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As Prestamo In e.NewItems
                item.CajaCtaCte = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("Prestamo", item)
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As Prestamo In e.OldItems
                If ReferenceEquals(item.CajaCtaCte, Me) Then
                    item.CajaCtaCte = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("Prestamo", item)
                    ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                    ' permite que la relación se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

#End Region
End Class
