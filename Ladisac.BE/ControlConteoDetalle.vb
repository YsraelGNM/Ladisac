'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Cancha))>
<KnownType(GetType(ControlParada))>
Partial Public Class ControlConteoDetalle
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared DCC_ID As string = "DCC_ID"
				public shared CCO_ID As string = "CCO_ID"
				public shared CPA_ID As string = "CPA_ID"
				public shared CAN_ID As string = "CAN_ID"
				public shared DCC_FALTANTES As string = "DCC_FALTANTES"
				public shared DCC_MALOGRADOS As string = "DCC_MALOGRADOS"
				public shared DCC_CANTIDAD As string = "DCC_CANTIDAD"
		    End Structure
	



    <DataMember()>
    Public Property DCC_ID() As Integer
        Get
            Return _dCC_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_dCC_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DCC_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _dCC_ID = value
                OnPropertyChanged("DCC_ID")
            End If
        End Set
    End Property

    Private _dCC_ID As Integer

    <DataMember()>
    Public Property CCO_ID() As Nullable(Of Integer)
        Get
            Return _cCO_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_cCO_ID, value) Then
                ChangeTracker.RecordOriginalValue("CCO_ID", _cCO_ID)
                _cCO_ID = value
                OnPropertyChanged("CCO_ID")
            End If
        End Set
    End Property

    Private _cCO_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property CPA_ID() As Nullable(Of Integer)
        Get
            Return _cPA_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_cPA_ID, value) Then
                ChangeTracker.RecordOriginalValue("CPA_ID", _cPA_ID)
                If Not IsDeserializing Then
                    If ControlParada IsNot Nothing AndAlso Not Equals(ControlParada.CPA_ID, value) Then
                        ControlParada = Nothing
                    End If
                End If
                _cPA_ID = value
                OnPropertyChanged("CPA_ID")
            End If
        End Set
    End Property

    Private _cPA_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property CAN_ID() As Nullable(Of Integer)
        Get
            Return _cAN_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_cAN_ID, value) Then
                ChangeTracker.RecordOriginalValue("CAN_ID", _cAN_ID)
                If Not IsDeserializing Then
                    If Cancha IsNot Nothing AndAlso Not Equals(Cancha.CAN_ID, value) Then
                        Cancha = Nothing
                    End If
                End If
                _cAN_ID = value
                OnPropertyChanged("CAN_ID")
            End If
        End Set
    End Property

    Private _cAN_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property DCC_FALTANTES() As Nullable(Of Integer)
        Get
            Return _dCC_FALTANTES
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_dCC_FALTANTES, value) Then
                _dCC_FALTANTES = value
                OnPropertyChanged("DCC_FALTANTES")
            End If
        End Set
    End Property

    Private _dCC_FALTANTES As Nullable(Of Integer)

    <DataMember()>
    Public Property DCC_MALOGRADOS() As Nullable(Of Integer)
        Get
            Return _dCC_MALOGRADOS
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_dCC_MALOGRADOS, value) Then
                _dCC_MALOGRADOS = value
                OnPropertyChanged("DCC_MALOGRADOS")
            End If
        End Set
    End Property

    Private _dCC_MALOGRADOS As Nullable(Of Integer)

    <DataMember()>
    Public Property DCC_CANTIDAD() As Nullable(Of Integer)
        Get
            Return _dCC_CANTIDAD
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_dCC_CANTIDAD, value) Then
                _dCC_CANTIDAD = value
                OnPropertyChanged("DCC_CANTIDAD")
            End If
        End Set
    End Property

    Private _dCC_CANTIDAD As Nullable(Of Integer)

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Cancha() As Cancha
        Get
            Return _cancha
        End Get
        Set(ByVal value As Cancha)
            If _cancha IsNot value Then
                Dim previousValue As Cancha = _cancha
                _cancha = value
                FixupCancha(previousValue)
                OnNavigationPropertyChanged("Cancha")
            End If
        End Set
    End Property

    Private _cancha As Cancha


    <DataMember()>
    Public Property ControlParada() As ControlParada
        Get
            Return _controlParada
        End Get
        Set(ByVal value As ControlParada)
            If _controlParada IsNot value Then
                Dim previousValue As ControlParada = _controlParada
                _controlParada = value
                FixupControlParada(previousValue)
                OnNavigationPropertyChanged("ControlParada")
            End If
        End Set
    End Property

    Private _controlParada As ControlParada


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Cancha = Nothing
        ControlParada = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupCancha(ByVal previousValue As Cancha, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Cancha IsNot Nothing Then
            CAN_ID = Cancha.CAN_ID
        ElseIf Not skipKeys Then
            CAN_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Cancha") AndAlso
                ChangeTracker.OriginalValues("Cancha") Is Cancha Then
                ChangeTracker.OriginalValues.Remove("Cancha")
            Else
                ChangeTracker.RecordOriginalValue("Cancha", previousValue)
            End If
            If Cancha IsNot Nothing AndAlso Not Cancha.ChangeTracker.ChangeTrackingEnabled Then
                Cancha.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupControlParada(ByVal previousValue As ControlParada, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If ControlParada IsNot Nothing Then
            CPA_ID = ControlParada.CPA_ID
        ElseIf Not skipKeys Then
            CPA_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("ControlParada") AndAlso
                ChangeTracker.OriginalValues("ControlParada") Is ControlParada Then
                ChangeTracker.OriginalValues.Remove("ControlParada")
            Else
                ChangeTracker.RecordOriginalValue("ControlParada", previousValue)
            End If
            If ControlParada IsNot Nothing AndAlso Not ControlParada.ChangeTracker.ChangeTrackingEnabled Then
                ControlParada.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
