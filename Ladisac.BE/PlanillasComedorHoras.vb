'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Planillas))>
<KnownType(GetType(TrabajadorHoras))>
<KnownType(GetType(ComedorPLL))>
Partial Public Class PlanillasComedorHoras
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared pla_SeriePlani As string = "pla_SeriePlani"
				public shared pla_Numero As string = "pla_Numero"
				public shared tdo_Id As string = "tdo_Id"
				public shared item As string = "item"
				public shared esComedorOHora As string = "esComedorOHora"
				public shared com_Numero As string = "com_Numero"
				public shared tit_TipoTrab_Id As string = "tit_TipoTrab_Id"
				public shared trh_Numero As string = "trh_Numero"
		    End Structure
	



    <DataMember()>
    Public Property pla_SeriePlani() As String
        Get
            Return _pla_SeriePlani
        End Get
        Set(ByVal value As String)
            If Not Equals(_pla_SeriePlani, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'pla_SeriePlani' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If Planillas IsNot Nothing AndAlso Not Equals(Planillas.pla_SeriePlani, value) Then
                        Planillas = Nothing
                    End If
                End If
                _pla_SeriePlani = value
                OnPropertyChanged("pla_SeriePlani")
            End If
        End Set
    End Property

    Private _pla_SeriePlani As String

    <DataMember()>
    Public Property pla_Numero() As String
        Get
            Return _pla_Numero
        End Get
        Set(ByVal value As String)
            If Not Equals(_pla_Numero, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'pla_Numero' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If Planillas IsNot Nothing AndAlso Not Equals(Planillas.pla_Numero, value) Then
                        Planillas = Nothing
                    End If
                End If
                _pla_Numero = value
                OnPropertyChanged("pla_Numero")
            End If
        End Set
    End Property

    Private _pla_Numero As String

    <DataMember()>
    Public Property tdo_Id() As String
        Get
            Return _tdo_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tdo_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'tdo_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If Planillas IsNot Nothing AndAlso Not Equals(Planillas.tdo_Id, value) Then
                        Planillas = Nothing
                    End If
                End If
                _tdo_Id = value
                OnPropertyChanged("tdo_Id")
            End If
        End Set
    End Property

    Private _tdo_Id As String

    <DataMember()>
    Public Property item() As String
        Get
            Return _item
        End Get
        Set(ByVal value As String)
            If Not Equals(_item, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'item' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _item = value
                OnPropertyChanged("item")
            End If
        End Set
    End Property

    Private _item As String

    <DataMember()>
    Public Property esComedorOHora() As Boolean
        Get
            Return _esComedorOHora
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_esComedorOHora, value) Then
                _esComedorOHora = value
                OnPropertyChanged("esComedorOHora")
            End If
        End Set
    End Property

    Private _esComedorOHora As Boolean

    <DataMember()>
    Public Property com_Numero() As String
        Get
            Return _com_Numero
        End Get
        Set(ByVal value As String)
            If Not Equals(_com_Numero, value) Then
                ChangeTracker.RecordOriginalValue("com_Numero", _com_Numero)
                If Not IsDeserializing Then
                    If ComedorPLL IsNot Nothing AndAlso Not Equals(ComedorPLL.com_Numero, value) Then
                        ComedorPLL = Nothing
                    End If
                End If
                _com_Numero = value
                OnPropertyChanged("com_Numero")
            End If
        End Set
    End Property

    Private _com_Numero As String

    <DataMember()>
    Public Property tit_TipoTrab_Id() As String
        Get
            Return _tit_TipoTrab_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tit_TipoTrab_Id, value) Then
                ChangeTracker.RecordOriginalValue("tit_TipoTrab_Id", _tit_TipoTrab_Id)
                If Not IsDeserializing Then
                    If TrabajadorHoras IsNot Nothing AndAlso Not Equals(TrabajadorHoras.tit_TipoTrab_Id, value) Then
                        TrabajadorHoras = Nothing
                    End If
                End If
                _tit_TipoTrab_Id = value
                OnPropertyChanged("tit_TipoTrab_Id")
            End If
        End Set
    End Property

    Private _tit_TipoTrab_Id As String

    <DataMember()>
    Public Property trh_Numero() As String
        Get
            Return _trh_Numero
        End Get
        Set(ByVal value As String)
            If Not Equals(_trh_Numero, value) Then
                ChangeTracker.RecordOriginalValue("trh_Numero", _trh_Numero)
                If Not IsDeserializing Then
                    If TrabajadorHoras IsNot Nothing AndAlso Not Equals(TrabajadorHoras.trh_Numero, value) Then
                        TrabajadorHoras = Nothing
                    End If
                End If
                _trh_Numero = value
                OnPropertyChanged("trh_Numero")
            End If
        End Set
    End Property

    Private _trh_Numero As String

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Planillas() As Planillas
        Get
            Return _planillas
        End Get
        Set(ByVal value As Planillas)
            If _planillas IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(pla_SeriePlani, value.pla_SeriePlani) OrElse Not Equals(pla_Numero, value.pla_Numero) OrElse Not Equals(tdo_Id, value.tdo_Id) Then
                        Throw New InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As Planillas = _planillas
                _planillas = value
                FixupPlanillas(previousValue)
                OnNavigationPropertyChanged("Planillas")
            End If
        End Set
    End Property

    Private _planillas As Planillas


    <DataMember()>
    Public Property TrabajadorHoras() As TrabajadorHoras
        Get
            Return _trabajadorHoras
        End Get
        Set(ByVal value As TrabajadorHoras)
            If _trabajadorHoras IsNot value Then
                Dim previousValue As TrabajadorHoras = _trabajadorHoras
                _trabajadorHoras = value
                FixupTrabajadorHoras(previousValue)
                OnNavigationPropertyChanged("TrabajadorHoras")
            End If
        End Set
    End Property

    Private _trabajadorHoras As TrabajadorHoras


    <DataMember()>
    Public Property ComedorPLL() As ComedorPLL
        Get
            Return _comedorPLL
        End Get
        Set(ByVal value As ComedorPLL)
            If _comedorPLL IsNot value Then
                Dim previousValue As ComedorPLL = _comedorPLL
                _comedorPLL = value
                FixupComedorPLL(previousValue)
                OnNavigationPropertyChanged("ComedorPLL")
            End If
        End Set
    End Property

    Private _comedorPLL As ComedorPLL


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociación que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesará notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Planillas = Nothing
        TrabajadorHoras = Nothing
        ComedorPLL = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupPlanillas(ByVal previousValue As Planillas)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.PlanillasComedorHoras.Contains(Me) Then
            previousValue.PlanillasComedorHoras.Remove(Me)
        End If

        If Planillas IsNot Nothing Then
            If Not Planillas.PlanillasComedorHoras.Contains(Me) Then
                Planillas.PlanillasComedorHoras.Add(Me)
            End If

            pla_SeriePlani = Planillas.pla_SeriePlani
            pla_Numero = Planillas.pla_Numero
            tdo_Id = Planillas.tdo_Id
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Planillas") AndAlso
                ChangeTracker.OriginalValues("Planillas") Is Planillas Then
                ChangeTracker.OriginalValues.Remove("Planillas")
            Else
                ChangeTracker.RecordOriginalValue("Planillas", previousValue)
            End If
            If Planillas IsNot Nothing AndAlso Not Planillas.ChangeTracker.ChangeTrackingEnabled Then
                Planillas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTrabajadorHoras(ByVal previousValue As TrabajadorHoras)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.PlanillasComedorHoras.Contains(Me) Then
            previousValue.PlanillasComedorHoras.Remove(Me)
        End If

        If TrabajadorHoras IsNot Nothing Then
            If Not TrabajadorHoras.PlanillasComedorHoras.Contains(Me) Then
                TrabajadorHoras.PlanillasComedorHoras.Add(Me)
            End If

            tit_TipoTrab_Id = TrabajadorHoras.tit_TipoTrab_Id
            trh_Numero = TrabajadorHoras.trh_Numero
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TrabajadorHoras") AndAlso
                ChangeTracker.OriginalValues("TrabajadorHoras") Is TrabajadorHoras Then
                ChangeTracker.OriginalValues.Remove("TrabajadorHoras")
            Else
                ChangeTracker.RecordOriginalValue("TrabajadorHoras", previousValue)
            End If
            If TrabajadorHoras IsNot Nothing AndAlso Not TrabajadorHoras.ChangeTracker.ChangeTrackingEnabled Then
                TrabajadorHoras.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupComedorPLL(ByVal previousValue As ComedorPLL, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.PlanillasComedorHoras.Contains(Me) Then
            previousValue.PlanillasComedorHoras.Remove(Me)
        End If

        If ComedorPLL IsNot Nothing Then
            If Not ComedorPLL.PlanillasComedorHoras.Contains(Me) Then
                ComedorPLL.PlanillasComedorHoras.Add(Me)
            End If

            com_Numero = ComedorPLL.com_Numero
        ElseIf Not skipKeys Then
            com_Numero = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("ComedorPLL") AndAlso
                ChangeTracker.OriginalValues("ComedorPLL") Is ComedorPLL Then
                ChangeTracker.OriginalValues.Remove("ComedorPLL")
            Else
                ChangeTracker.RecordOriginalValue("ComedorPLL", previousValue)
            End If
            If ComedorPLL IsNot Nothing AndAlso Not ComedorPLL.ChangeTracker.ChangeTrackingEnabled Then
                ComedorPLL.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
