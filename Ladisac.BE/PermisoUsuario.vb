'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(DetallePermisoUsuario))>
<KnownType(GetType(PermisoCuentaCorriente))>
Partial Public Class PermisoUsuario
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared PEU_ID As string = "PEU_ID"
				public shared USU_ID As string = "USU_ID"
				public shared USU_ID_CODIGO As string = "USU_ID_CODIGO"
				public shared PEU_FEC_GRAB As string = "PEU_FEC_GRAB"
				public shared PEU_ESTADO As string = "PEU_ESTADO"
		    End Structure
	



    <DataMember()>
    Public Property PEU_ID() As String
        Get
            Return _pEU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_pEU_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'PEU_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _pEU_ID = value
                OnPropertyChanged("PEU_ID")
            End If
        End Set
    End Property

    Private _pEU_ID As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property USU_ID_CODIGO() As String
        Get
            Return _uSU_ID_CODIGO
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID_CODIGO, value) Then
                _uSU_ID_CODIGO = value
                OnPropertyChanged("USU_ID_CODIGO")
            End If
        End Set
    End Property

    Private _uSU_ID_CODIGO As String

    <DataMember()>
    Public Property PEU_FEC_GRAB() As Date
        Get
            Return _pEU_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_pEU_FEC_GRAB, value) Then
                _pEU_FEC_GRAB = value
                OnPropertyChanged("PEU_FEC_GRAB")
            End If
        End Set
    End Property

    Private _pEU_FEC_GRAB As Date

    <DataMember()>
    Public Property PEU_ESTADO() As Boolean
        Get
            Return _pEU_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_pEU_ESTADO, value) Then
                _pEU_ESTADO = value
                OnPropertyChanged("PEU_ESTADO")
            End If
        End Set
    End Property

    Private _pEU_ESTADO As Boolean

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property DetallePermisoUsuario() As TrackableCollection(Of DetallePermisoUsuario)
        Get
            If _detallePermisoUsuario Is Nothing Then
                _detallePermisoUsuario = New TrackableCollection(Of DetallePermisoUsuario)
                AddHandler _detallePermisoUsuario.CollectionChanged, AddressOf FixupDetallePermisoUsuario
            End If
            Return _detallePermisoUsuario
        End Get
        Set(ByVal value As TrackableCollection(Of DetallePermisoUsuario))
            If Not Object.ReferenceEquals(_detallePermisoUsuario, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detallePermisoUsuario IsNot Nothing Then
                    RemoveHandler _detallePermisoUsuario.CollectionChanged, AddressOf FixupDetallePermisoUsuario
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminación en cascada para aquellas entidades de la colección actual.
                    For Each item As DetallePermisoUsuario In _detallePermisoUsuario
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detallePermisoUsuario = value
                If _detallePermisoUsuario IsNot Nothing Then
                    AddHandler _detallePermisoUsuario.CollectionChanged, AddressOf FixupDetallePermisoUsuario
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                    For Each item As DetallePermisoUsuario In _detallePermisoUsuario
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetallePermisoUsuario")
            End If
        End Set
    End Property

    Private _detallePermisoUsuario As TrackableCollection(Of DetallePermisoUsuario)

    <DataMember()>
    Public Property PermisoCuentaCorriente() As PermisoCuentaCorriente
        Get
            Return _permisoCuentaCorriente
        End Get
        Set(ByVal value As PermisoCuentaCorriente)
            If _permisoCuentaCorriente IsNot value Then
                Dim previousValue As PermisoCuentaCorriente = _permisoCuentaCorriente
                _permisoCuentaCorriente = value
                FixupPermisoCuentaCorriente(previousValue)
                OnNavigationPropertyChanged("PermisoCuentaCorriente")
            End If
        End Set
    End Property

    Private _permisoCuentaCorriente As PermisoCuentaCorriente


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        DetallePermisoUsuario.Clear()
        PermisoCuentaCorriente = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupPermisoCuentaCorriente(ByVal previousValue As PermisoCuentaCorriente)
        If previousValue IsNot Nothing Then
            RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf previousValue.HandleCascadeDelete
        End If

        If PermisoCuentaCorriente IsNot Nothing Then
            AddHandler ChangeTracker.ObjectStateChanging, AddressOf PermisoCuentaCorriente.HandleCascadeDelete
        End If
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso ReferenceEquals(previousValue.PermisoUsuario, Me) Then
            previousValue.PermisoUsuario = Nothing
        End If

        If PermisoCuentaCorriente IsNot Nothing Then
            PermisoCuentaCorriente.PermisoUsuario = Me
        End If

        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("PermisoCuentaCorriente") AndAlso
                ChangeTracker.OriginalValues("PermisoCuentaCorriente") Is PermisoCuentaCorriente Then
                ChangeTracker.OriginalValues.Remove("PermisoCuentaCorriente")
            Else
                ChangeTracker.RecordOriginalValue("PermisoCuentaCorriente", previousValue)
                ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                ' permite que la relación se modifique sin eliminar el elemento dependiente.
                If previousValue IsNot Nothing AndAlso previousValue.ChangeTracker.State <> ObjectState.Added Then
                    previousValue.MarkAsDeleted()
                End If
            End If
            If PermisoCuentaCorriente IsNot Nothing AndAlso Not PermisoCuentaCorriente.ChangeTracker.ChangeTrackingEnabled Then
                PermisoCuentaCorriente.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetallePermisoUsuario(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetallePermisoUsuario In e.NewItems
                item.PEU_ID = PEU_ID
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetallePermisoUsuario", item)
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetallePermisoUsuario In e.OldItems
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetallePermisoUsuario", item)
                    ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                    ' permite que la relación se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

#End Region
End Class
