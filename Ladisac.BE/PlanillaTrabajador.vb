'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(CentroCostos))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(AreaTrabajos))>
<KnownType(GetType(DatosLaborales))>
<KnownType(GetType(Planillas))>
<KnownType(GetType(TiposCargos))>
<KnownType(GetType(RegimenPensionario))>
<KnownType(GetType(RegimenLaboral))>
<KnownType(GetType(CajaCtaCte))>
<KnownType(GetType(Periodo))>
Partial Public Class PlanillaTrabajador
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared pla_SeriePlani As string = "pla_SeriePlani"
				public shared pla_Numero As string = "pla_Numero"
				public shared tdo_Id As string = "tdo_Id"
				public shared per_Id As string = "per_Id"
				public shared cco_Id As string = "cco_Id"
				public shared tis_TipCargo_Id As string = "tis_TipCargo_Id"
				public shared rep_RegiPension_id As string = "rep_RegiPension_id"
				public shared art_AreaTrab_Id As string = "art_AreaTrab_Id"
				public shared plt_EsBancoCaja As string = "plt_EsBancoCaja"
				public shared plt_NuemroDeCuenta As string = "plt_NuemroDeCuenta"
				public shared rel_RegLaboral_Id As string = "rel_RegLaboral_Id"
				public shared plt_Observaciones As string = "plt_Observaciones"
				public shared ccc_IdCuenta As string = "ccc_IdCuenta"
				public shared plt_CodigoTrabajador As string = "plt_CodigoTrabajador"
				public shared Usu_Id As string = "Usu_Id"
				public shared ptr_FecGrab As string = "ptr_FecGrab"
				public shared prd_Periodo_idInicialIngresos As string = "prd_Periodo_idInicialIngresos"
				public shared prd_Periodo_idFinalIngresos As string = "prd_Periodo_idFinalIngresos"
				public shared prd_Periodo_idInicialDias As string = "prd_Periodo_idInicialDias"
				public shared prd_Periodo_idFinalDias As string = "prd_Periodo_idFinalDias"
		    End Structure
	



    <DataMember()>
    Public Property pla_SeriePlani() As String
        Get
            Return _pla_SeriePlani
        End Get
        Set(ByVal value As String)
            If Not Equals(_pla_SeriePlani, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'pla_SeriePlani' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If Planillas IsNot Nothing AndAlso Not Equals(Planillas.pla_SeriePlani, value) Then
                        Planillas = Nothing
                    End If
                End If
                _pla_SeriePlani = value
                OnPropertyChanged("pla_SeriePlani")
            End If
        End Set
    End Property

    Private _pla_SeriePlani As String

    <DataMember()>
    Public Property pla_Numero() As String
        Get
            Return _pla_Numero
        End Get
        Set(ByVal value As String)
            If Not Equals(_pla_Numero, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'pla_Numero' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If Planillas IsNot Nothing AndAlso Not Equals(Planillas.pla_Numero, value) Then
                        Planillas = Nothing
                    End If
                End If
                _pla_Numero = value
                OnPropertyChanged("pla_Numero")
            End If
        End Set
    End Property

    Private _pla_Numero As String

    <DataMember()>
    Public Property tdo_Id() As String
        Get
            Return _tdo_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tdo_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'tdo_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If Planillas IsNot Nothing AndAlso Not Equals(Planillas.tdo_Id, value) Then
                        Planillas = Nothing
                    End If
                End If
                _tdo_Id = value
                OnPropertyChanged("tdo_Id")
            End If
        End Set
    End Property

    Private _tdo_Id As String

    <DataMember()>
    Public Property per_Id() As String
        Get
            Return _per_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_per_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'per_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If DatosLaborales IsNot Nothing AndAlso Not Equals(DatosLaborales.per_Id, value) Then
                        DatosLaborales = Nothing
                    End If
                End If
                _per_Id = value
                OnPropertyChanged("per_Id")
            End If
        End Set
    End Property

    Private _per_Id As String

    <DataMember()>
    Public Property cco_Id() As String
        Get
            Return _cco_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_cco_Id, value) Then
                ChangeTracker.RecordOriginalValue("cco_Id", _cco_Id)
                If Not IsDeserializing Then
                    If CentroCostos IsNot Nothing AndAlso Not Equals(CentroCostos.CCO_ID, value) Then
                        CentroCostos = Nothing
                    End If
                End If
                _cco_Id = value
                OnPropertyChanged("cco_Id")
            End If
        End Set
    End Property

    Private _cco_Id As String

    <DataMember()>
    Public Property tis_TipCargo_Id() As String
        Get
            Return _tis_TipCargo_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tis_TipCargo_Id, value) Then
                ChangeTracker.RecordOriginalValue("tis_TipCargo_Id", _tis_TipCargo_Id)
                If Not IsDeserializing Then
                    If TiposCargos IsNot Nothing AndAlso Not Equals(TiposCargos.tis_TipCargo_Id, value) Then
                        TiposCargos = Nothing
                    End If
                End If
                _tis_TipCargo_Id = value
                OnPropertyChanged("tis_TipCargo_Id")
            End If
        End Set
    End Property

    Private _tis_TipCargo_Id As String

    <DataMember()>
    Public Property rep_RegiPension_id() As String
        Get
            Return _rep_RegiPension_id
        End Get
        Set(ByVal value As String)
            If Not Equals(_rep_RegiPension_id, value) Then
                ChangeTracker.RecordOriginalValue("rep_RegiPension_id", _rep_RegiPension_id)
                If Not IsDeserializing Then
                    If RegimenPensionario IsNot Nothing AndAlso Not Equals(RegimenPensionario.rep_RegiPension_id, value) Then
                        RegimenPensionario = Nothing
                    End If
                End If
                _rep_RegiPension_id = value
                OnPropertyChanged("rep_RegiPension_id")
            End If
        End Set
    End Property

    Private _rep_RegiPension_id As String

    <DataMember()>
    Public Property art_AreaTrab_Id() As String
        Get
            Return _art_AreaTrab_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_art_AreaTrab_Id, value) Then
                ChangeTracker.RecordOriginalValue("art_AreaTrab_Id", _art_AreaTrab_Id)
                If Not IsDeserializing Then
                    If AreaTrabajos IsNot Nothing AndAlso Not Equals(AreaTrabajos.art_AreaTrab_Id, value) Then
                        AreaTrabajos = Nothing
                    End If
                End If
                _art_AreaTrab_Id = value
                OnPropertyChanged("art_AreaTrab_Id")
            End If
        End Set
    End Property

    Private _art_AreaTrab_Id As String

    <DataMember()>
    Public Property plt_EsBancoCaja() As Nullable(Of Boolean)
        Get
            Return _plt_EsBancoCaja
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_plt_EsBancoCaja, value) Then
                _plt_EsBancoCaja = value
                OnPropertyChanged("plt_EsBancoCaja")
            End If
        End Set
    End Property

    Private _plt_EsBancoCaja As Nullable(Of Boolean)

    <DataMember()>
    Public Property plt_NuemroDeCuenta() As String
        Get
            Return _plt_NuemroDeCuenta
        End Get
        Set(ByVal value As String)
            If Not Equals(_plt_NuemroDeCuenta, value) Then
                _plt_NuemroDeCuenta = value
                OnPropertyChanged("plt_NuemroDeCuenta")
            End If
        End Set
    End Property

    Private _plt_NuemroDeCuenta As String

    <DataMember()>
    Public Property rel_RegLaboral_Id() As String
        Get
            Return _rel_RegLaboral_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_rel_RegLaboral_Id, value) Then
                ChangeTracker.RecordOriginalValue("rel_RegLaboral_Id", _rel_RegLaboral_Id)
                If Not IsDeserializing Then
                    If RegimenLaboral IsNot Nothing AndAlso Not Equals(RegimenLaboral.rel_RegLaboral_Id, value) Then
                        RegimenLaboral = Nothing
                    End If
                End If
                _rel_RegLaboral_Id = value
                OnPropertyChanged("rel_RegLaboral_Id")
            End If
        End Set
    End Property

    Private _rel_RegLaboral_Id As String

    <DataMember()>
    Public Property plt_Observaciones() As String
        Get
            Return _plt_Observaciones
        End Get
        Set(ByVal value As String)
            If Not Equals(_plt_Observaciones, value) Then
                _plt_Observaciones = value
                OnPropertyChanged("plt_Observaciones")
            End If
        End Set
    End Property

    Private _plt_Observaciones As String

    <DataMember()>
    Public Property ccc_IdCuenta() As String
        Get
            Return _ccc_IdCuenta
        End Get
        Set(ByVal value As String)
            If Not Equals(_ccc_IdCuenta, value) Then
                ChangeTracker.RecordOriginalValue("ccc_IdCuenta", _ccc_IdCuenta)
                If Not IsDeserializing Then
                    If CajaCtaCte IsNot Nothing AndAlso Not Equals(CajaCtaCte.CCC_ID, value) Then
                        CajaCtaCte = Nothing
                    End If
                End If
                _ccc_IdCuenta = value
                OnPropertyChanged("ccc_IdCuenta")
            End If
        End Set
    End Property

    Private _ccc_IdCuenta As String

    <DataMember()>
    Public Property plt_CodigoTrabajador() As String
        Get
            Return _plt_CodigoTrabajador
        End Get
        Set(ByVal value As String)
            If Not Equals(_plt_CodigoTrabajador, value) Then
                _plt_CodigoTrabajador = value
                OnPropertyChanged("plt_CodigoTrabajador")
            End If
        End Set
    End Property

    Private _plt_CodigoTrabajador As String

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                ChangeTracker.RecordOriginalValue("Usu_Id", _usu_Id)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property ptr_FecGrab() As Nullable(Of Date)
        Get
            Return _ptr_FecGrab
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_ptr_FecGrab, value) Then
                _ptr_FecGrab = value
                OnPropertyChanged("ptr_FecGrab")
            End If
        End Set
    End Property

    Private _ptr_FecGrab As Nullable(Of Date)

    <DataMember()>
    Public Property prd_Periodo_idInicialIngresos() As String
        Get
            Return _prd_Periodo_idInicialIngresos
        End Get
        Set(ByVal value As String)
            If Not Equals(_prd_Periodo_idInicialIngresos, value) Then
                ChangeTracker.RecordOriginalValue("prd_Periodo_idInicialIngresos", _prd_Periodo_idInicialIngresos)
                If Not IsDeserializing Then
                    If Periodo IsNot Nothing AndAlso Not Equals(Periodo.prd_Periodo_id, value) Then
                        Periodo = Nothing
                    End If
                End If
                _prd_Periodo_idInicialIngresos = value
                OnPropertyChanged("prd_Periodo_idInicialIngresos")
            End If
        End Set
    End Property

    Private _prd_Periodo_idInicialIngresos As String

    <DataMember()>
    Public Property prd_Periodo_idFinalIngresos() As String
        Get
            Return _prd_Periodo_idFinalIngresos
        End Get
        Set(ByVal value As String)
            If Not Equals(_prd_Periodo_idFinalIngresos, value) Then
                ChangeTracker.RecordOriginalValue("prd_Periodo_idFinalIngresos", _prd_Periodo_idFinalIngresos)
                If Not IsDeserializing Then
                    If Periodo1 IsNot Nothing AndAlso Not Equals(Periodo1.prd_Periodo_id, value) Then
                        Periodo1 = Nothing
                    End If
                End If
                _prd_Periodo_idFinalIngresos = value
                OnPropertyChanged("prd_Periodo_idFinalIngresos")
            End If
        End Set
    End Property

    Private _prd_Periodo_idFinalIngresos As String

    <DataMember()>
    Public Property prd_Periodo_idInicialDias() As String
        Get
            Return _prd_Periodo_idInicialDias
        End Get
        Set(ByVal value As String)
            If Not Equals(_prd_Periodo_idInicialDias, value) Then
                ChangeTracker.RecordOriginalValue("prd_Periodo_idInicialDias", _prd_Periodo_idInicialDias)
                If Not IsDeserializing Then
                    If Periodo2 IsNot Nothing AndAlso Not Equals(Periodo2.prd_Periodo_id, value) Then
                        Periodo2 = Nothing
                    End If
                End If
                _prd_Periodo_idInicialDias = value
                OnPropertyChanged("prd_Periodo_idInicialDias")
            End If
        End Set
    End Property

    Private _prd_Periodo_idInicialDias As String

    <DataMember()>
    Public Property prd_Periodo_idFinalDias() As String
        Get
            Return _prd_Periodo_idFinalDias
        End Get
        Set(ByVal value As String)
            If Not Equals(_prd_Periodo_idFinalDias, value) Then
                ChangeTracker.RecordOriginalValue("prd_Periodo_idFinalDias", _prd_Periodo_idFinalDias)
                If Not IsDeserializing Then
                    If Periodo3 IsNot Nothing AndAlso Not Equals(Periodo3.prd_Periodo_id, value) Then
                        Periodo3 = Nothing
                    End If
                End If
                _prd_Periodo_idFinalDias = value
                OnPropertyChanged("prd_Periodo_idFinalDias")
            End If
        End Set
    End Property

    Private _prd_Periodo_idFinalDias As String

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property CentroCostos() As CentroCostos
        Get
            Return _centroCostos
        End Get
        Set(ByVal value As CentroCostos)
            If _centroCostos IsNot value Then
                Dim previousValue As CentroCostos = _centroCostos
                _centroCostos = value
                FixupCentroCostos(previousValue)
                OnNavigationPropertyChanged("CentroCostos")
            End If
        End Set
    End Property

    Private _centroCostos As CentroCostos


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property AreaTrabajos() As AreaTrabajos
        Get
            Return _areaTrabajos
        End Get
        Set(ByVal value As AreaTrabajos)
            If _areaTrabajos IsNot value Then
                Dim previousValue As AreaTrabajos = _areaTrabajos
                _areaTrabajos = value
                FixupAreaTrabajos(previousValue)
                OnNavigationPropertyChanged("AreaTrabajos")
            End If
        End Set
    End Property

    Private _areaTrabajos As AreaTrabajos


    <DataMember()>
    Public Property DatosLaborales() As DatosLaborales
        Get
            Return _datosLaborales
        End Get
        Set(ByVal value As DatosLaborales)
            If _datosLaborales IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(per_Id, value.per_Id) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As DatosLaborales = _datosLaborales
                _datosLaborales = value
                FixupDatosLaborales(previousValue)
                OnNavigationPropertyChanged("DatosLaborales")
            End If
        End Set
    End Property

    Private _datosLaborales As DatosLaborales


    <DataMember()>
    Public Property Planillas() As Planillas
        Get
            Return _planillas
        End Get
        Set(ByVal value As Planillas)
            If _planillas IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(pla_SeriePlani, value.pla_SeriePlani) OrElse Not Equals(pla_Numero, value.pla_Numero) OrElse Not Equals(tdo_Id, value.tdo_Id) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As Planillas = _planillas
                _planillas = value
                FixupPlanillas(previousValue)
                OnNavigationPropertyChanged("Planillas")
            End If
        End Set
    End Property

    Private _planillas As Planillas


    <DataMember()>
    Public Property TiposCargos() As TiposCargos
        Get
            Return _tiposCargos
        End Get
        Set(ByVal value As TiposCargos)
            If _tiposCargos IsNot value Then
                Dim previousValue As TiposCargos = _tiposCargos
                _tiposCargos = value
                FixupTiposCargos(previousValue)
                OnNavigationPropertyChanged("TiposCargos")
            End If
        End Set
    End Property

    Private _tiposCargos As TiposCargos


    <DataMember()>
    Public Property RegimenPensionario() As RegimenPensionario
        Get
            Return _regimenPensionario
        End Get
        Set(ByVal value As RegimenPensionario)
            If _regimenPensionario IsNot value Then
                Dim previousValue As RegimenPensionario = _regimenPensionario
                _regimenPensionario = value
                FixupRegimenPensionario(previousValue)
                OnNavigationPropertyChanged("RegimenPensionario")
            End If
        End Set
    End Property

    Private _regimenPensionario As RegimenPensionario


    <DataMember()>
    Public Property RegimenLaboral() As RegimenLaboral
        Get
            Return _regimenLaboral
        End Get
        Set(ByVal value As RegimenLaboral)
            If _regimenLaboral IsNot value Then
                Dim previousValue As RegimenLaboral = _regimenLaboral
                _regimenLaboral = value
                FixupRegimenLaboral(previousValue)
                OnNavigationPropertyChanged("RegimenLaboral")
            End If
        End Set
    End Property

    Private _regimenLaboral As RegimenLaboral


    <DataMember()>
    Public Property CajaCtaCte() As CajaCtaCte
        Get
            Return _cajaCtaCte
        End Get
        Set(ByVal value As CajaCtaCte)
            If _cajaCtaCte IsNot value Then
                Dim previousValue As CajaCtaCte = _cajaCtaCte
                _cajaCtaCte = value
                FixupCajaCtaCte(previousValue)
                OnNavigationPropertyChanged("CajaCtaCte")
            End If
        End Set
    End Property

    Private _cajaCtaCte As CajaCtaCte


    <DataMember()>
    Public Property Periodo() As Periodo
        Get
            Return _periodo
        End Get
        Set(ByVal value As Periodo)
            If _periodo IsNot value Then
                Dim previousValue As Periodo = _periodo
                _periodo = value
                FixupPeriodo(previousValue)
                OnNavigationPropertyChanged("Periodo")
            End If
        End Set
    End Property

    Private _periodo As Periodo


    <DataMember()>
    Public Property Periodo1() As Periodo
        Get
            Return _periodo1
        End Get
        Set(ByVal value As Periodo)
            If _periodo1 IsNot value Then
                Dim previousValue As Periodo = _periodo1
                _periodo1 = value
                FixupPeriodo1(previousValue)
                OnNavigationPropertyChanged("Periodo1")
            End If
        End Set
    End Property

    Private _periodo1 As Periodo


    <DataMember()>
    Public Property Periodo2() As Periodo
        Get
            Return _periodo2
        End Get
        Set(ByVal value As Periodo)
            If _periodo2 IsNot value Then
                Dim previousValue As Periodo = _periodo2
                _periodo2 = value
                FixupPeriodo2(previousValue)
                OnNavigationPropertyChanged("Periodo2")
            End If
        End Set
    End Property

    Private _periodo2 As Periodo


    <DataMember()>
    Public Property Periodo3() As Periodo
        Get
            Return _periodo3
        End Get
        Set(ByVal value As Periodo)
            If _periodo3 IsNot value Then
                Dim previousValue As Periodo = _periodo3
                _periodo3 = value
                FixupPeriodo3(previousValue)
                OnNavigationPropertyChanged("Periodo3")
            End If
        End Set
    End Property

    Private _periodo3 As Periodo


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociaci칩n que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesar치 notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        CentroCostos = Nothing
        Usuarios = Nothing
        AreaTrabajos = Nothing
        DatosLaborales = Nothing
        Planillas = Nothing
        TiposCargos = Nothing
        RegimenPensionario = Nothing
        RegimenLaboral = Nothing
        CajaCtaCte = Nothing
        Periodo = Nothing
        Periodo1 = Nothing
        Periodo2 = Nothing
        Periodo3 = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupCentroCostos(ByVal previousValue As CentroCostos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.PlanillaTrabajador.Contains(Me) Then
            previousValue.PlanillaTrabajador.Remove(Me)
        End If

        If CentroCostos IsNot Nothing Then
            If Not CentroCostos.PlanillaTrabajador.Contains(Me) Then
                CentroCostos.PlanillaTrabajador.Add(Me)
            End If

            cco_Id = CentroCostos.CCO_ID
        ElseIf Not skipKeys Then
            cco_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CentroCostos") AndAlso
                ChangeTracker.OriginalValues("CentroCostos") Is CentroCostos Then
                ChangeTracker.OriginalValues.Remove("CentroCostos")
            Else
                ChangeTracker.RecordOriginalValue("CentroCostos", previousValue)
            End If
            If CentroCostos IsNot Nothing AndAlso Not CentroCostos.ChangeTracker.ChangeTrackingEnabled Then
                CentroCostos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            Usu_Id = Usuarios.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupAreaTrabajos(ByVal previousValue As AreaTrabajos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.PlanillaTrabajador.Contains(Me) Then
            previousValue.PlanillaTrabajador.Remove(Me)
        End If

        If AreaTrabajos IsNot Nothing Then
            If Not AreaTrabajos.PlanillaTrabajador.Contains(Me) Then
                AreaTrabajos.PlanillaTrabajador.Add(Me)
            End If

            art_AreaTrab_Id = AreaTrabajos.art_AreaTrab_Id
        ElseIf Not skipKeys Then
            art_AreaTrab_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("AreaTrabajos") AndAlso
                ChangeTracker.OriginalValues("AreaTrabajos") Is AreaTrabajos Then
                ChangeTracker.OriginalValues.Remove("AreaTrabajos")
            Else
                ChangeTracker.RecordOriginalValue("AreaTrabajos", previousValue)
            End If
            If AreaTrabajos IsNot Nothing AndAlso Not AreaTrabajos.ChangeTracker.ChangeTrackingEnabled Then
                AreaTrabajos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDatosLaborales(ByVal previousValue As DatosLaborales)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.PlanillaTrabajador.Contains(Me) Then
            previousValue.PlanillaTrabajador.Remove(Me)
        End If

        If DatosLaborales IsNot Nothing Then
            If Not DatosLaborales.PlanillaTrabajador.Contains(Me) Then
                DatosLaborales.PlanillaTrabajador.Add(Me)
            End If

            per_Id = DatosLaborales.per_Id
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DatosLaborales") AndAlso
                ChangeTracker.OriginalValues("DatosLaborales") Is DatosLaborales Then
                ChangeTracker.OriginalValues.Remove("DatosLaborales")
            Else
                ChangeTracker.RecordOriginalValue("DatosLaborales", previousValue)
            End If
            If DatosLaborales IsNot Nothing AndAlso Not DatosLaborales.ChangeTracker.ChangeTrackingEnabled Then
                DatosLaborales.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPlanillas(ByVal previousValue As Planillas)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.PlanillaTrabajador.Contains(Me) Then
            previousValue.PlanillaTrabajador.Remove(Me)
        End If

        If Planillas IsNot Nothing Then
            If Not Planillas.PlanillaTrabajador.Contains(Me) Then
                Planillas.PlanillaTrabajador.Add(Me)
            End If

            pla_SeriePlani = Planillas.pla_SeriePlani
            pla_Numero = Planillas.pla_Numero
            tdo_Id = Planillas.tdo_Id
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Planillas") AndAlso
                ChangeTracker.OriginalValues("Planillas") Is Planillas Then
                ChangeTracker.OriginalValues.Remove("Planillas")
            Else
                ChangeTracker.RecordOriginalValue("Planillas", previousValue)
            End If
            If Planillas IsNot Nothing AndAlso Not Planillas.ChangeTracker.ChangeTrackingEnabled Then
                Planillas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTiposCargos(ByVal previousValue As TiposCargos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.PlanillaTrabajador.Contains(Me) Then
            previousValue.PlanillaTrabajador.Remove(Me)
        End If

        If TiposCargos IsNot Nothing Then
            If Not TiposCargos.PlanillaTrabajador.Contains(Me) Then
                TiposCargos.PlanillaTrabajador.Add(Me)
            End If

            tis_TipCargo_Id = TiposCargos.tis_TipCargo_Id
        ElseIf Not skipKeys Then
            tis_TipCargo_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TiposCargos") AndAlso
                ChangeTracker.OriginalValues("TiposCargos") Is TiposCargos Then
                ChangeTracker.OriginalValues.Remove("TiposCargos")
            Else
                ChangeTracker.RecordOriginalValue("TiposCargos", previousValue)
            End If
            If TiposCargos IsNot Nothing AndAlso Not TiposCargos.ChangeTracker.ChangeTrackingEnabled Then
                TiposCargos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupRegimenPensionario(ByVal previousValue As RegimenPensionario, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.PlanillaTrabajador.Contains(Me) Then
            previousValue.PlanillaTrabajador.Remove(Me)
        End If

        If RegimenPensionario IsNot Nothing Then
            If Not RegimenPensionario.PlanillaTrabajador.Contains(Me) Then
                RegimenPensionario.PlanillaTrabajador.Add(Me)
            End If

            rep_RegiPension_id = RegimenPensionario.rep_RegiPension_id
        ElseIf Not skipKeys Then
            rep_RegiPension_id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("RegimenPensionario") AndAlso
                ChangeTracker.OriginalValues("RegimenPensionario") Is RegimenPensionario Then
                ChangeTracker.OriginalValues.Remove("RegimenPensionario")
            Else
                ChangeTracker.RecordOriginalValue("RegimenPensionario", previousValue)
            End If
            If RegimenPensionario IsNot Nothing AndAlso Not RegimenPensionario.ChangeTracker.ChangeTrackingEnabled Then
                RegimenPensionario.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupRegimenLaboral(ByVal previousValue As RegimenLaboral, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.PlanillaTrabajador.Contains(Me) Then
            previousValue.PlanillaTrabajador.Remove(Me)
        End If

        If RegimenLaboral IsNot Nothing Then
            If Not RegimenLaboral.PlanillaTrabajador.Contains(Me) Then
                RegimenLaboral.PlanillaTrabajador.Add(Me)
            End If

            rel_RegLaboral_Id = RegimenLaboral.rel_RegLaboral_Id
        ElseIf Not skipKeys Then
            rel_RegLaboral_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("RegimenLaboral") AndAlso
                ChangeTracker.OriginalValues("RegimenLaboral") Is RegimenLaboral Then
                ChangeTracker.OriginalValues.Remove("RegimenLaboral")
            Else
                ChangeTracker.RecordOriginalValue("RegimenLaboral", previousValue)
            End If
            If RegimenLaboral IsNot Nothing AndAlso Not RegimenLaboral.ChangeTracker.ChangeTrackingEnabled Then
                RegimenLaboral.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCajaCtaCte(ByVal previousValue As CajaCtaCte, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.PlanillaTrabajador.Contains(Me) Then
            previousValue.PlanillaTrabajador.Remove(Me)
        End If

        If CajaCtaCte IsNot Nothing Then
            If Not CajaCtaCte.PlanillaTrabajador.Contains(Me) Then
                CajaCtaCte.PlanillaTrabajador.Add(Me)
            End If

            ccc_IdCuenta = CajaCtaCte.CCC_ID
        ElseIf Not skipKeys Then
            ccc_IdCuenta = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CajaCtaCte") AndAlso
                ChangeTracker.OriginalValues("CajaCtaCte") Is CajaCtaCte Then
                ChangeTracker.OriginalValues.Remove("CajaCtaCte")
            Else
                ChangeTracker.RecordOriginalValue("CajaCtaCte", previousValue)
            End If
            If CajaCtaCte IsNot Nothing AndAlso Not CajaCtaCte.ChangeTracker.ChangeTrackingEnabled Then
                CajaCtaCte.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPeriodo(ByVal previousValue As Periodo, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Periodo IsNot Nothing Then
            prd_Periodo_idInicialIngresos = Periodo.prd_Periodo_id
        ElseIf Not skipKeys Then
            prd_Periodo_idInicialIngresos = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Periodo") AndAlso
                ChangeTracker.OriginalValues("Periodo") Is Periodo Then
                ChangeTracker.OriginalValues.Remove("Periodo")
            Else
                ChangeTracker.RecordOriginalValue("Periodo", previousValue)
            End If
            If Periodo IsNot Nothing AndAlso Not Periodo.ChangeTracker.ChangeTrackingEnabled Then
                Periodo.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPeriodo1(ByVal previousValue As Periodo, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Periodo1 IsNot Nothing Then
            prd_Periodo_idFinalIngresos = Periodo1.prd_Periodo_id
        ElseIf Not skipKeys Then
            prd_Periodo_idFinalIngresos = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Periodo1") AndAlso
                ChangeTracker.OriginalValues("Periodo1") Is Periodo1 Then
                ChangeTracker.OriginalValues.Remove("Periodo1")
            Else
                ChangeTracker.RecordOriginalValue("Periodo1", previousValue)
            End If
            If Periodo1 IsNot Nothing AndAlso Not Periodo1.ChangeTracker.ChangeTrackingEnabled Then
                Periodo1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPeriodo2(ByVal previousValue As Periodo, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Periodo2 IsNot Nothing Then
            prd_Periodo_idInicialDias = Periodo2.prd_Periodo_id
        ElseIf Not skipKeys Then
            prd_Periodo_idInicialDias = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Periodo2") AndAlso
                ChangeTracker.OriginalValues("Periodo2") Is Periodo2 Then
                ChangeTracker.OriginalValues.Remove("Periodo2")
            Else
                ChangeTracker.RecordOriginalValue("Periodo2", previousValue)
            End If
            If Periodo2 IsNot Nothing AndAlso Not Periodo2.ChangeTracker.ChangeTrackingEnabled Then
                Periodo2.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPeriodo3(ByVal previousValue As Periodo, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Periodo3 IsNot Nothing Then
            prd_Periodo_idFinalDias = Periodo3.prd_Periodo_id
        ElseIf Not skipKeys Then
            prd_Periodo_idFinalDias = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Periodo3") AndAlso
                ChangeTracker.OriginalValues("Periodo3") Is Periodo3 Then
                ChangeTracker.OriginalValues.Remove("Periodo3")
            Else
                ChangeTracker.RecordOriginalValue("Periodo3", previousValue)
            End If
            If Periodo3 IsNot Nothing AndAlso Not Periodo3.ChangeTracker.ChangeTrackingEnabled Then
                Periodo3.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
