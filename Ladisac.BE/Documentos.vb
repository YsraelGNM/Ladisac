'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(DetalleDocumentos))>
<KnownType(GetType(CtaCte))>
<KnownType(GetType(DireccionesPersonas))>
<KnownType(GetType(DocPersonas))>
<KnownType(GetType(DetalleTipoDocumentos))>
<KnownType(GetType(FletesTransporte))>
<KnownType(GetType(ListaPreciosArticulos))>
<KnownType(GetType(Moneda))>
<KnownType(GetType(Personas))>
<KnownType(GetType(PuntoVenta))>
<KnownType(GetType(TipoDocumentos))>
<KnownType(GetType(TipoDocPersonas))>
<KnownType(GetType(TipoVenta))>
<KnownType(GetType(Usuarios))>
Partial Public Class Documentos
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared TDO_ID As string = "TDO_ID"
				public shared DTD_ID As string = "DTD_ID"
				public shared CCT_ID As string = "CCT_ID"
				public shared DOC_SERIE As string = "DOC_SERIE"
				public shared DOC_NUMERO As string = "DOC_NUMERO"
				public shared DOC_ORDEN_COMPRA As string = "DOC_ORDEN_COMPRA"
				public shared DOC_TIPO_ORDEN_COMPRA As string = "DOC_TIPO_ORDEN_COMPRA"
				public shared PER_ID_REC As string = "PER_ID_REC"
				public shared TDP_ID_REC As string = "TDP_ID_REC"
				public shared DIR_ID_ENT_REC As string = "DIR_ID_ENT_REC"
				public shared PVE_ID As string = "PVE_ID"
				public shared PVE_ID_DES As string = "PVE_ID_DES"
				public shared MON_ID As string = "MON_ID"
				public shared TIV_ID As string = "TIV_ID"
				public shared PER_ID_CLI As string = "PER_ID_CLI"
				public shared TDP_ID_CLI As string = "TDP_ID_CLI"
				public shared PER_ID_CON As string = "PER_ID_CON"
				public shared DOC_FECHA_EMI As string = "DOC_FECHA_EMI"
				public shared DOC_FECHA_ENT As string = "DOC_FECHA_ENT"
				public shared DOC_FECHA_EXP As string = "DOC_FECHA_EXP"
				public shared DIR_ID_FIS As string = "DIR_ID_FIS"
				public shared DIR_ID_DOM As string = "DIR_ID_DOM"
				public shared DIR_ID_ENT As string = "DIR_ID_ENT"
				public shared DIR_ID_COB As string = "DIR_ID_COB"
				public shared PER_ID_VEN As string = "PER_ID_VEN"
				public shared PER_ID_COB As string = "PER_ID_COB"
				public shared PER_ID_PRO As string = "PER_ID_PRO"
				public shared PER_ID_GRU As string = "PER_ID_GRU"
				public shared DOC_TIPO_LISTA As string = "DOC_TIPO_LISTA"
				public shared DOC_MONTO_TOTAL As string = "DOC_MONTO_TOTAL"
				public shared DOC_CONTRAVALOR As string = "DOC_CONTRAVALOR"
				public shared DOC_IGV_POR As string = "DOC_IGV_POR"
				public shared DOC_ASIENTO As string = "DOC_ASIENTO"
				public shared DOC_CIERRE As string = "DOC_CIERRE"
				public shared FLE_ID As string = "FLE_ID"
				public shared DOC_MONTO_FLE As string = "DOC_MONTO_FLE"
				public shared DOC_REQUIERE_GUIA As string = "DOC_REQUIERE_GUIA"
				public shared TDO_ID_AFE As string = "TDO_ID_AFE"
				public shared DTD_ID_AFE As string = "DTD_ID_AFE"
				public shared CCT_ID_AFE As string = "CCT_ID_AFE"
				public shared DOC_SERIE_AFE As string = "DOC_SERIE_AFE"
				public shared DOC_NUMERO_AFE As string = "DOC_NUMERO_AFE"
				public shared DOC_MOT_EMI As string = "DOC_MOT_EMI"
				public shared DOC_NOMBRE_RECEP As string = "DOC_NOMBRE_RECEP"
				public shared DOC_DNI_RECEP As string = "DOC_DNI_RECEP"
				public shared DOC_FEC_RECEP As string = "DOC_FEC_RECEP"
				public shared DOC_ENTREGADO As string = "DOC_ENTREGADO"
				public shared CAF_IX_NUMERO_PRO As string = "CAF_IX_NUMERO_PRO"
				public shared CAF_IX_ORDEN_COM As string = "CAF_IX_ORDEN_COM"
				public shared LPR_ID As string = "LPR_ID"
				public shared USU_ID As string = "USU_ID"
				public shared DOC_FEC_GRAB As string = "DOC_FEC_GRAB"
				public shared DOC_ESTADO As string = "DOC_ESTADO"
				public shared DOC_MONTO_PERCEPCION As string = "DOC_MONTO_PERCEPCION"
				public shared TDO_ID_GEN As string = "TDO_ID_GEN"
				public shared DTD_ID_GEN As string = "DTD_ID_GEN"
				public shared CCT_ID_GEN As string = "CCT_ID_GEN"
				public shared DOC_SERIE_GEN As string = "DOC_SERIE_GEN"
				public shared DOC_NUMERO_GEN As string = "DOC_NUMERO_GEN"
				public shared DOC_OBSERVACIONES As string = "DOC_OBSERVACIONES"
				public shared DOC_ATENCION As string = "DOC_ATENCION"
				public shared DOC_FEC_ENTREGA As string = "DOC_FEC_ENTREGA"
				public shared CUC_ID As string = "CUC_ID"
				public shared PVE_ID_VEN As string = "PVE_ID_VEN"
				public shared DOC_HORA_INICIO As string = "DOC_HORA_INICIO"
				public shared DOC_HORA_FIN As string = "DOC_HORA_FIN"
				public shared DOC_SERIE_SUNAT As string = "DOC_SERIE_SUNAT"
				public shared DOC_SERIE_AFE_SUNAT As string = "DOC_SERIE_AFE_SUNAT"
				public shared DOC_LIC_DIRECTA As string = "DOC_LIC_DIRECTA"
				public shared DOC_TIPO_1 As string = "DOC_TIPO_1"
				public shared DOC_TIPO_2 As string = "DOC_TIPO_2"
		    End Structure
	



    <DataMember()>
    Public Property TDO_ID() As String
        Get
            Return _tDO_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'TDO_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If TipoDocumentos IsNot Nothing AndAlso Not Equals(TipoDocumentos.TDO_ID, value) Then
                        TipoDocumentos = Nothing
                    End If
                End If
                _tDO_ID = value
                OnPropertyChanged("TDO_ID")
            End If
        End Set
    End Property

    Private _tDO_ID As String

    <DataMember()>
    Public Property DTD_ID() As String
        Get
            Return _dTD_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DTD_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If DetalleTipoDocumentos IsNot Nothing AndAlso Not Equals(DetalleTipoDocumentos.DTD_ID, value) Then
                        DetalleTipoDocumentos = Nothing
                    End If
                End If
                _dTD_ID = value
                OnPropertyChanged("DTD_ID")
            End If
        End Set
    End Property

    Private _dTD_ID As String

    <DataMember()>
    Public Property CCT_ID() As String
        Get
            Return _cCT_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCT_ID, value) Then
                ChangeTracker.RecordOriginalValue("CCT_ID", _cCT_ID)
                If Not IsDeserializing Then
                    If CtaCte IsNot Nothing AndAlso Not Equals(CtaCte.CCT_ID, value) Then
                        CtaCte = Nothing
                    End If
                End If
                _cCT_ID = value
                OnPropertyChanged("CCT_ID")
            End If
        End Set
    End Property

    Private _cCT_ID As String

    <DataMember()>
    Public Property DOC_SERIE() As String
        Get
            Return _dOC_SERIE
        End Get
        Set(ByVal value As String)
            If Not Equals(_dOC_SERIE, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DOC_SERIE' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _dOC_SERIE = value
                OnPropertyChanged("DOC_SERIE")
            End If
        End Set
    End Property

    Private _dOC_SERIE As String

    <DataMember()>
    Public Property DOC_NUMERO() As String
        Get
            Return _dOC_NUMERO
        End Get
        Set(ByVal value As String)
            If Not Equals(_dOC_NUMERO, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DOC_NUMERO' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _dOC_NUMERO = value
                OnPropertyChanged("DOC_NUMERO")
            End If
        End Set
    End Property

    Private _dOC_NUMERO As String

    <DataMember()>
    Public Property DOC_ORDEN_COMPRA() As String
        Get
            Return _dOC_ORDEN_COMPRA
        End Get
        Set(ByVal value As String)
            If Not Equals(_dOC_ORDEN_COMPRA, value) Then
                _dOC_ORDEN_COMPRA = value
                OnPropertyChanged("DOC_ORDEN_COMPRA")
            End If
        End Set
    End Property

    Private _dOC_ORDEN_COMPRA As String

    <DataMember()>
    Public Property DOC_TIPO_ORDEN_COMPRA() As Short
        Get
            Return _dOC_TIPO_ORDEN_COMPRA
        End Get
        Set(ByVal value As Short)
            If Not Equals(_dOC_TIPO_ORDEN_COMPRA, value) Then
                _dOC_TIPO_ORDEN_COMPRA = value
                OnPropertyChanged("DOC_TIPO_ORDEN_COMPRA")
            End If
        End Set
    End Property

    Private _dOC_TIPO_ORDEN_COMPRA As Short

    <DataMember()>
    Public Property PER_ID_REC() As String
        Get
            Return _pER_ID_REC
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_REC, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_REC", _pER_ID_REC)
                If Not IsDeserializing Then
                    If DocPersonas1 IsNot Nothing AndAlso Not Equals(DocPersonas1.PER_ID, value) Then
                        Dim previousValue As DocPersonas = _docPersonas1
                        _docPersonas1 = Nothing
                        FixupDocPersonas1(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("DocPersonas1")
                    End If
                    If Personas4 IsNot Nothing AndAlso Not Equals(Personas4.PER_ID, value) Then
                        Personas4 = Nothing
                    End If
                End If
                _pER_ID_REC = value
                OnPropertyChanged("PER_ID_REC")
            End If
        End Set
    End Property

    Private _pER_ID_REC As String

    <DataMember()>
    Public Property TDP_ID_REC() As String
        Get
            Return _tDP_ID_REC
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDP_ID_REC, value) Then
                ChangeTracker.RecordOriginalValue("TDP_ID_REC", _tDP_ID_REC)
                If Not IsDeserializing Then
                    If DocPersonas1 IsNot Nothing AndAlso Not Equals(DocPersonas1.TDP_ID, value) Then
                        Dim previousValue As DocPersonas = _docPersonas1
                        _docPersonas1 = Nothing
                        FixupDocPersonas1(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("DocPersonas1")
                    End If
                    If TipoDocPersonas IsNot Nothing AndAlso Not Equals(TipoDocPersonas.TDP_ID, value) Then
                        TipoDocPersonas = Nothing
                    End If
                End If
                _tDP_ID_REC = value
                OnPropertyChanged("TDP_ID_REC")
            End If
        End Set
    End Property

    Private _tDP_ID_REC As String

    <DataMember()>
    Public Property DIR_ID_ENT_REC() As String
        Get
            Return _dIR_ID_ENT_REC
        End Get
        Set(ByVal value As String)
            If Not Equals(_dIR_ID_ENT_REC, value) Then
                ChangeTracker.RecordOriginalValue("DIR_ID_ENT_REC", _dIR_ID_ENT_REC)
                If Not IsDeserializing Then
                    If DireccionesPersonas IsNot Nothing AndAlso Not Equals(DireccionesPersonas.DIR_ID, value) Then
                        DireccionesPersonas = Nothing
                    End If
                End If
                _dIR_ID_ENT_REC = value
                OnPropertyChanged("DIR_ID_ENT_REC")
            End If
        End Set
    End Property

    Private _dIR_ID_ENT_REC As String

    <DataMember()>
    Public Property PVE_ID() As String
        Get
            Return _pVE_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_pVE_ID, value) Then
                ChangeTracker.RecordOriginalValue("PVE_ID", _pVE_ID)
                If Not IsDeserializing Then
                    If PuntoVenta IsNot Nothing AndAlso Not Equals(PuntoVenta.PVE_ID, value) Then
                        PuntoVenta = Nothing
                    End If
                End If
                _pVE_ID = value
                OnPropertyChanged("PVE_ID")
            End If
        End Set
    End Property

    Private _pVE_ID As String

    <DataMember()>
    Public Property PVE_ID_DES() As String
        Get
            Return _pVE_ID_DES
        End Get
        Set(ByVal value As String)
            If Not Equals(_pVE_ID_DES, value) Then
                ChangeTracker.RecordOriginalValue("PVE_ID_DES", _pVE_ID_DES)
                If Not IsDeserializing Then
                    If PuntoVenta1 IsNot Nothing AndAlso Not Equals(PuntoVenta1.PVE_ID, value) Then
                        PuntoVenta1 = Nothing
                    End If
                End If
                _pVE_ID_DES = value
                OnPropertyChanged("PVE_ID_DES")
            End If
        End Set
    End Property

    Private _pVE_ID_DES As String

    <DataMember()>
    Public Property MON_ID() As String
        Get
            Return _mON_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_mON_ID, value) Then
                ChangeTracker.RecordOriginalValue("MON_ID", _mON_ID)
                If Not IsDeserializing Then
                    If Moneda IsNot Nothing AndAlso Not Equals(Moneda.MON_ID, value) Then
                        Moneda = Nothing
                    End If
                End If
                _mON_ID = value
                OnPropertyChanged("MON_ID")
            End If
        End Set
    End Property

    Private _mON_ID As String

    <DataMember()>
    Public Property TIV_ID() As String
        Get
            Return _tIV_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_tIV_ID, value) Then
                ChangeTracker.RecordOriginalValue("TIV_ID", _tIV_ID)
                If Not IsDeserializing Then
                    If TipoVenta IsNot Nothing AndAlso Not Equals(TipoVenta.TIV_ID, value) Then
                        TipoVenta = Nothing
                    End If
                End If
                _tIV_ID = value
                OnPropertyChanged("TIV_ID")
            End If
        End Set
    End Property

    Private _tIV_ID As String

    <DataMember()>
    Public Property PER_ID_CLI() As String
        Get
            Return _pER_ID_CLI
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_CLI, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_CLI", _pER_ID_CLI)
                If Not IsDeserializing Then
                    If DocPersonas IsNot Nothing AndAlso Not Equals(DocPersonas.PER_ID, value) Then
                        DocPersonas = Nothing
                    End If
                    If Personas3 IsNot Nothing AndAlso Not Equals(Personas3.PER_ID, value) Then
                        Personas3 = Nothing
                    End If
                End If
                _pER_ID_CLI = value
                OnPropertyChanged("PER_ID_CLI")
            End If
        End Set
    End Property

    Private _pER_ID_CLI As String

    <DataMember()>
    Public Property TDP_ID_CLI() As String
        Get
            Return _tDP_ID_CLI
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDP_ID_CLI, value) Then
                ChangeTracker.RecordOriginalValue("TDP_ID_CLI", _tDP_ID_CLI)
                If Not IsDeserializing Then
                    If DocPersonas IsNot Nothing AndAlso Not Equals(DocPersonas.TDP_ID, value) Then
                        DocPersonas = Nothing
                    End If
                    If TipoDocPersonas1 IsNot Nothing AndAlso Not Equals(TipoDocPersonas1.TDP_ID, value) Then
                        TipoDocPersonas1 = Nothing
                    End If
                End If
                _tDP_ID_CLI = value
                OnPropertyChanged("TDP_ID_CLI")
            End If
        End Set
    End Property

    Private _tDP_ID_CLI As String

    <DataMember()>
    Public Property PER_ID_CON() As String
        Get
            Return _pER_ID_CON
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_CON, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_CON", _pER_ID_CON)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID_CON = value
                OnPropertyChanged("PER_ID_CON")
            End If
        End Set
    End Property

    Private _pER_ID_CON As String

    <DataMember()>
    Public Property DOC_FECHA_EMI() As Date
        Get
            Return _dOC_FECHA_EMI
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dOC_FECHA_EMI, value) Then
                _dOC_FECHA_EMI = value
                OnPropertyChanged("DOC_FECHA_EMI")
            End If
        End Set
    End Property

    Private _dOC_FECHA_EMI As Date

    <DataMember()>
    Public Property DOC_FECHA_ENT() As Date
        Get
            Return _dOC_FECHA_ENT
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dOC_FECHA_ENT, value) Then
                _dOC_FECHA_ENT = value
                OnPropertyChanged("DOC_FECHA_ENT")
            End If
        End Set
    End Property

    Private _dOC_FECHA_ENT As Date

    <DataMember()>
    Public Property DOC_FECHA_EXP() As Nullable(Of Date)
        Get
            Return _dOC_FECHA_EXP
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_dOC_FECHA_EXP, value) Then
                _dOC_FECHA_EXP = value
                OnPropertyChanged("DOC_FECHA_EXP")
            End If
        End Set
    End Property

    Private _dOC_FECHA_EXP As Nullable(Of Date)

    <DataMember()>
    Public Property DIR_ID_FIS() As String
        Get
            Return _dIR_ID_FIS
        End Get
        Set(ByVal value As String)
            If Not Equals(_dIR_ID_FIS, value) Then
                ChangeTracker.RecordOriginalValue("DIR_ID_FIS", _dIR_ID_FIS)
                If Not IsDeserializing Then
                    If DireccionesPersonas4 IsNot Nothing AndAlso Not Equals(DireccionesPersonas4.DIR_ID, value) Then
                        DireccionesPersonas4 = Nothing
                    End If
                End If
                _dIR_ID_FIS = value
                OnPropertyChanged("DIR_ID_FIS")
            End If
        End Set
    End Property

    Private _dIR_ID_FIS As String

    <DataMember()>
    Public Property DIR_ID_DOM() As String
        Get
            Return _dIR_ID_DOM
        End Get
        Set(ByVal value As String)
            If Not Equals(_dIR_ID_DOM, value) Then
                ChangeTracker.RecordOriginalValue("DIR_ID_DOM", _dIR_ID_DOM)
                If Not IsDeserializing Then
                    If DireccionesPersonas2 IsNot Nothing AndAlso Not Equals(DireccionesPersonas2.DIR_ID, value) Then
                        DireccionesPersonas2 = Nothing
                    End If
                End If
                _dIR_ID_DOM = value
                OnPropertyChanged("DIR_ID_DOM")
            End If
        End Set
    End Property

    Private _dIR_ID_DOM As String

    <DataMember()>
    Public Property DIR_ID_ENT() As String
        Get
            Return _dIR_ID_ENT
        End Get
        Set(ByVal value As String)
            If Not Equals(_dIR_ID_ENT, value) Then
                ChangeTracker.RecordOriginalValue("DIR_ID_ENT", _dIR_ID_ENT)
                If Not IsDeserializing Then
                    If DireccionesPersonas3 IsNot Nothing AndAlso Not Equals(DireccionesPersonas3.DIR_ID, value) Then
                        DireccionesPersonas3 = Nothing
                    End If
                End If
                _dIR_ID_ENT = value
                OnPropertyChanged("DIR_ID_ENT")
            End If
        End Set
    End Property

    Private _dIR_ID_ENT As String

    <DataMember()>
    Public Property DIR_ID_COB() As String
        Get
            Return _dIR_ID_COB
        End Get
        Set(ByVal value As String)
            If Not Equals(_dIR_ID_COB, value) Then
                ChangeTracker.RecordOriginalValue("DIR_ID_COB", _dIR_ID_COB)
                If Not IsDeserializing Then
                    If DireccionesPersonas1 IsNot Nothing AndAlso Not Equals(DireccionesPersonas1.DIR_ID, value) Then
                        DireccionesPersonas1 = Nothing
                    End If
                End If
                _dIR_ID_COB = value
                OnPropertyChanged("DIR_ID_COB")
            End If
        End Set
    End Property

    Private _dIR_ID_COB As String

    <DataMember()>
    Public Property PER_ID_VEN() As String
        Get
            Return _pER_ID_VEN
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_VEN, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_VEN", _pER_ID_VEN)
                If Not IsDeserializing Then
                    If Personas1 IsNot Nothing AndAlso Not Equals(Personas1.PER_ID, value) Then
                        Personas1 = Nothing
                    End If
                End If
                _pER_ID_VEN = value
                OnPropertyChanged("PER_ID_VEN")
            End If
        End Set
    End Property

    Private _pER_ID_VEN As String

    <DataMember()>
    Public Property PER_ID_COB() As String
        Get
            Return _pER_ID_COB
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_COB, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_COB", _pER_ID_COB)
                If Not IsDeserializing Then
                    If Personas5 IsNot Nothing AndAlso Not Equals(Personas5.PER_ID, value) Then
                        Personas5 = Nothing
                    End If
                End If
                _pER_ID_COB = value
                OnPropertyChanged("PER_ID_COB")
            End If
        End Set
    End Property

    Private _pER_ID_COB As String

    <DataMember()>
    Public Property PER_ID_PRO() As String
        Get
            Return _pER_ID_PRO
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_PRO, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_PRO", _pER_ID_PRO)
                If Not IsDeserializing Then
                    If Personas2 IsNot Nothing AndAlso Not Equals(Personas2.PER_ID, value) Then
                        Personas2 = Nothing
                    End If
                End If
                _pER_ID_PRO = value
                OnPropertyChanged("PER_ID_PRO")
            End If
        End Set
    End Property

    Private _pER_ID_PRO As String

    <DataMember()>
    Public Property PER_ID_GRU() As String
        Get
            Return _pER_ID_GRU
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_GRU, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_GRU", _pER_ID_GRU)
                If Not IsDeserializing Then
                    If Personas6 IsNot Nothing AndAlso Not Equals(Personas6.PER_ID, value) Then
                        Personas6 = Nothing
                    End If
                End If
                _pER_ID_GRU = value
                OnPropertyChanged("PER_ID_GRU")
            End If
        End Set
    End Property

    Private _pER_ID_GRU As String

    <DataMember()>
    Public Property DOC_TIPO_LISTA() As Short
        Get
            Return _dOC_TIPO_LISTA
        End Get
        Set(ByVal value As Short)
            If Not Equals(_dOC_TIPO_LISTA, value) Then
                _dOC_TIPO_LISTA = value
                OnPropertyChanged("DOC_TIPO_LISTA")
            End If
        End Set
    End Property

    Private _dOC_TIPO_LISTA As Short

    <DataMember()>
    Public Property DOC_MONTO_TOTAL() As Decimal
        Get
            Return _dOC_MONTO_TOTAL
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dOC_MONTO_TOTAL, value) Then
                _dOC_MONTO_TOTAL = value
                OnPropertyChanged("DOC_MONTO_TOTAL")
            End If
        End Set
    End Property

    Private _dOC_MONTO_TOTAL As Decimal

    <DataMember()>
    Public Property DOC_CONTRAVALOR() As Decimal
        Get
            Return _dOC_CONTRAVALOR
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dOC_CONTRAVALOR, value) Then
                _dOC_CONTRAVALOR = value
                OnPropertyChanged("DOC_CONTRAVALOR")
            End If
        End Set
    End Property

    Private _dOC_CONTRAVALOR As Decimal

    <DataMember()>
    Public Property DOC_IGV_POR() As Decimal
        Get
            Return _dOC_IGV_POR
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dOC_IGV_POR, value) Then
                _dOC_IGV_POR = value
                OnPropertyChanged("DOC_IGV_POR")
            End If
        End Set
    End Property

    Private _dOC_IGV_POR As Decimal

    <DataMember()>
    Public Property DOC_ASIENTO() As Boolean
        Get
            Return _dOC_ASIENTO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_dOC_ASIENTO, value) Then
                _dOC_ASIENTO = value
                OnPropertyChanged("DOC_ASIENTO")
            End If
        End Set
    End Property

    Private _dOC_ASIENTO As Boolean

    <DataMember()>
    Public Property DOC_CIERRE() As Short
        Get
            Return _dOC_CIERRE
        End Get
        Set(ByVal value As Short)
            If Not Equals(_dOC_CIERRE, value) Then
                _dOC_CIERRE = value
                OnPropertyChanged("DOC_CIERRE")
            End If
        End Set
    End Property

    Private _dOC_CIERRE As Short

    <DataMember()>
    Public Property FLE_ID() As String
        Get
            Return _fLE_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_fLE_ID, value) Then
                ChangeTracker.RecordOriginalValue("FLE_ID", _fLE_ID)
                If Not IsDeserializing Then
                    If FletesTransporte IsNot Nothing AndAlso Not Equals(FletesTransporte.FLE_ID, value) Then
                        FletesTransporte = Nothing
                    End If
                End If
                _fLE_ID = value
                OnPropertyChanged("FLE_ID")
            End If
        End Set
    End Property

    Private _fLE_ID As String

    <DataMember()>
    Public Property DOC_MONTO_FLE() As Decimal
        Get
            Return _dOC_MONTO_FLE
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dOC_MONTO_FLE, value) Then
                _dOC_MONTO_FLE = value
                OnPropertyChanged("DOC_MONTO_FLE")
            End If
        End Set
    End Property

    Private _dOC_MONTO_FLE As Decimal

    <DataMember()>
    Public Property DOC_REQUIERE_GUIA() As Boolean
        Get
            Return _dOC_REQUIERE_GUIA
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_dOC_REQUIERE_GUIA, value) Then
                _dOC_REQUIERE_GUIA = value
                OnPropertyChanged("DOC_REQUIERE_GUIA")
            End If
        End Set
    End Property

    Private _dOC_REQUIERE_GUIA As Boolean

    <DataMember()>
    Public Property TDO_ID_AFE() As String
        Get
            Return _tDO_ID_AFE
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID_AFE, value) Then
                ChangeTracker.RecordOriginalValue("TDO_ID_AFE", _tDO_ID_AFE)
                If Not IsDeserializing Then
                    If TipoDocumentos1 IsNot Nothing AndAlso Not Equals(TipoDocumentos1.TDO_ID, value) Then
                        TipoDocumentos1 = Nothing
                    End If
                End If
                _tDO_ID_AFE = value
                OnPropertyChanged("TDO_ID_AFE")
            End If
        End Set
    End Property

    Private _tDO_ID_AFE As String

    <DataMember()>
    Public Property DTD_ID_AFE() As String
        Get
            Return _dTD_ID_AFE
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID_AFE, value) Then
                ChangeTracker.RecordOriginalValue("DTD_ID_AFE", _dTD_ID_AFE)
                If Not IsDeserializing Then
                    If DetalleTipoDocumentos1 IsNot Nothing AndAlso Not Equals(DetalleTipoDocumentos1.DTD_ID, value) Then
                        DetalleTipoDocumentos1 = Nothing
                    End If
                End If
                _dTD_ID_AFE = value
                OnPropertyChanged("DTD_ID_AFE")
            End If
        End Set
    End Property

    Private _dTD_ID_AFE As String

    <DataMember()>
    Public Property CCT_ID_AFE() As String
        Get
            Return _cCT_ID_AFE
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCT_ID_AFE, value) Then
                ChangeTracker.RecordOriginalValue("CCT_ID_AFE", _cCT_ID_AFE)
                If Not IsDeserializing Then
                    If CtaCte1 IsNot Nothing AndAlso Not Equals(CtaCte1.CCT_ID, value) Then
                        CtaCte1 = Nothing
                    End If
                End If
                _cCT_ID_AFE = value
                OnPropertyChanged("CCT_ID_AFE")
            End If
        End Set
    End Property

    Private _cCT_ID_AFE As String

    <DataMember()>
    Public Property DOC_SERIE_AFE() As String
        Get
            Return _dOC_SERIE_AFE
        End Get
        Set(ByVal value As String)
            If Not Equals(_dOC_SERIE_AFE, value) Then
                _dOC_SERIE_AFE = value
                OnPropertyChanged("DOC_SERIE_AFE")
            End If
        End Set
    End Property

    Private _dOC_SERIE_AFE As String

    <DataMember()>
    Public Property DOC_NUMERO_AFE() As String
        Get
            Return _dOC_NUMERO_AFE
        End Get
        Set(ByVal value As String)
            If Not Equals(_dOC_NUMERO_AFE, value) Then
                _dOC_NUMERO_AFE = value
                OnPropertyChanged("DOC_NUMERO_AFE")
            End If
        End Set
    End Property

    Private _dOC_NUMERO_AFE As String

    <DataMember()>
    Public Property DOC_MOT_EMI() As Nullable(Of Short)
        Get
            Return _dOC_MOT_EMI
        End Get
        Set(ByVal value As Nullable(Of Short))
            If Not Equals(_dOC_MOT_EMI, value) Then
                _dOC_MOT_EMI = value
                OnPropertyChanged("DOC_MOT_EMI")
            End If
        End Set
    End Property

    Private _dOC_MOT_EMI As Nullable(Of Short)

    <DataMember()>
    Public Property DOC_NOMBRE_RECEP() As String
        Get
            Return _dOC_NOMBRE_RECEP
        End Get
        Set(ByVal value As String)
            If Not Equals(_dOC_NOMBRE_RECEP, value) Then
                _dOC_NOMBRE_RECEP = value
                OnPropertyChanged("DOC_NOMBRE_RECEP")
            End If
        End Set
    End Property

    Private _dOC_NOMBRE_RECEP As String

    <DataMember()>
    Public Property DOC_DNI_RECEP() As String
        Get
            Return _dOC_DNI_RECEP
        End Get
        Set(ByVal value As String)
            If Not Equals(_dOC_DNI_RECEP, value) Then
                _dOC_DNI_RECEP = value
                OnPropertyChanged("DOC_DNI_RECEP")
            End If
        End Set
    End Property

    Private _dOC_DNI_RECEP As String

    <DataMember()>
    Public Property DOC_FEC_RECEP() As Nullable(Of Date)
        Get
            Return _dOC_FEC_RECEP
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_dOC_FEC_RECEP, value) Then
                _dOC_FEC_RECEP = value
                OnPropertyChanged("DOC_FEC_RECEP")
            End If
        End Set
    End Property

    Private _dOC_FEC_RECEP As Nullable(Of Date)

    <DataMember()>
    Public Property DOC_ENTREGADO() As Boolean
        Get
            Return _dOC_ENTREGADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_dOC_ENTREGADO, value) Then
                _dOC_ENTREGADO = value
                OnPropertyChanged("DOC_ENTREGADO")
            End If
        End Set
    End Property

    Private _dOC_ENTREGADO As Boolean

    <DataMember()>
    Public Property CAF_IX_NUMERO_PRO() As String
        Get
            Return _cAF_IX_NUMERO_PRO
        End Get
        Set(ByVal value As String)
            If Not Equals(_cAF_IX_NUMERO_PRO, value) Then
                _cAF_IX_NUMERO_PRO = value
                OnPropertyChanged("CAF_IX_NUMERO_PRO")
            End If
        End Set
    End Property

    Private _cAF_IX_NUMERO_PRO As String

    <DataMember()>
    Public Property CAF_IX_ORDEN_COM() As String
        Get
            Return _cAF_IX_ORDEN_COM
        End Get
        Set(ByVal value As String)
            If Not Equals(_cAF_IX_ORDEN_COM, value) Then
                _cAF_IX_ORDEN_COM = value
                OnPropertyChanged("CAF_IX_ORDEN_COM")
            End If
        End Set
    End Property

    Private _cAF_IX_ORDEN_COM As String

    <DataMember()>
    Public Property LPR_ID() As String
        Get
            Return _lPR_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_lPR_ID, value) Then
                ChangeTracker.RecordOriginalValue("LPR_ID", _lPR_ID)
                If Not IsDeserializing Then
                    If ListaPreciosArticulos IsNot Nothing AndAlso Not Equals(ListaPreciosArticulos.LPR_ID, value) Then
                        ListaPreciosArticulos = Nothing
                    End If
                End If
                _lPR_ID = value
                OnPropertyChanged("LPR_ID")
            End If
        End Set
    End Property

    Private _lPR_ID As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property DOC_FEC_GRAB() As Date
        Get
            Return _dOC_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dOC_FEC_GRAB, value) Then
                _dOC_FEC_GRAB = value
                OnPropertyChanged("DOC_FEC_GRAB")
            End If
        End Set
    End Property

    Private _dOC_FEC_GRAB As Date

    <DataMember()>
    Public Property DOC_ESTADO() As Short
        Get
            Return _dOC_ESTADO
        End Get
        Set(ByVal value As Short)
            If Not Equals(_dOC_ESTADO, value) Then
                _dOC_ESTADO = value
                OnPropertyChanged("DOC_ESTADO")
            End If
        End Set
    End Property

    Private _dOC_ESTADO As Short

    <DataMember()>
    Public Property DOC_MONTO_PERCEPCION() As Decimal
        Get
            Return _dOC_MONTO_PERCEPCION
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dOC_MONTO_PERCEPCION, value) Then
                _dOC_MONTO_PERCEPCION = value
                OnPropertyChanged("DOC_MONTO_PERCEPCION")
            End If
        End Set
    End Property

    Private _dOC_MONTO_PERCEPCION As Decimal

    <DataMember()>
    Public Property TDO_ID_GEN() As String
        Get
            Return _tDO_ID_GEN
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID_GEN, value) Then
                _tDO_ID_GEN = value
                OnPropertyChanged("TDO_ID_GEN")
            End If
        End Set
    End Property

    Private _tDO_ID_GEN As String

    <DataMember()>
    Public Property DTD_ID_GEN() As String
        Get
            Return _dTD_ID_GEN
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID_GEN, value) Then
                _dTD_ID_GEN = value
                OnPropertyChanged("DTD_ID_GEN")
            End If
        End Set
    End Property

    Private _dTD_ID_GEN As String

    <DataMember()>
    Public Property CCT_ID_GEN() As String
        Get
            Return _cCT_ID_GEN
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCT_ID_GEN, value) Then
                _cCT_ID_GEN = value
                OnPropertyChanged("CCT_ID_GEN")
            End If
        End Set
    End Property

    Private _cCT_ID_GEN As String

    <DataMember()>
    Public Property DOC_SERIE_GEN() As String
        Get
            Return _dOC_SERIE_GEN
        End Get
        Set(ByVal value As String)
            If Not Equals(_dOC_SERIE_GEN, value) Then
                _dOC_SERIE_GEN = value
                OnPropertyChanged("DOC_SERIE_GEN")
            End If
        End Set
    End Property

    Private _dOC_SERIE_GEN As String

    <DataMember()>
    Public Property DOC_NUMERO_GEN() As String
        Get
            Return _dOC_NUMERO_GEN
        End Get
        Set(ByVal value As String)
            If Not Equals(_dOC_NUMERO_GEN, value) Then
                _dOC_NUMERO_GEN = value
                OnPropertyChanged("DOC_NUMERO_GEN")
            End If
        End Set
    End Property

    Private _dOC_NUMERO_GEN As String

    <DataMember()>
    Public Property DOC_OBSERVACIONES() As String
        Get
            Return _dOC_OBSERVACIONES
        End Get
        Set(ByVal value As String)
            If Not Equals(_dOC_OBSERVACIONES, value) Then
                _dOC_OBSERVACIONES = value
                OnPropertyChanged("DOC_OBSERVACIONES")
            End If
        End Set
    End Property

    Private _dOC_OBSERVACIONES As String

    <DataMember()>
    Public Property DOC_ATENCION() As String
        Get
            Return _dOC_ATENCION
        End Get
        Set(ByVal value As String)
            If Not Equals(_dOC_ATENCION, value) Then
                _dOC_ATENCION = value
                OnPropertyChanged("DOC_ATENCION")
            End If
        End Set
    End Property

    Private _dOC_ATENCION As String

    <DataMember()>
    Public Property DOC_FEC_ENTREGA() As Nullable(Of Date)
        Get
            Return _dOC_FEC_ENTREGA
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_dOC_FEC_ENTREGA, value) Then
                _dOC_FEC_ENTREGA = value
                OnPropertyChanged("DOC_FEC_ENTREGA")
            End If
        End Set
    End Property

    Private _dOC_FEC_ENTREGA As Nullable(Of Date)

    <DataMember()>
    Public Property CUC_ID() As String
        Get
            Return _cUC_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cUC_ID, value) Then
                _cUC_ID = value
                OnPropertyChanged("CUC_ID")
            End If
        End Set
    End Property

    Private _cUC_ID As String

    <DataMember()>
    Public Property PVE_ID_VEN() As String
        Get
            Return _pVE_ID_VEN
        End Get
        Set(ByVal value As String)
            If Not Equals(_pVE_ID_VEN, value) Then
                _pVE_ID_VEN = value
                OnPropertyChanged("PVE_ID_VEN")
            End If
        End Set
    End Property

    Private _pVE_ID_VEN As String

    <DataMember()>
    Public Property DOC_HORA_INICIO() As Nullable(Of Date)
        Get
            Return _dOC_HORA_INICIO
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_dOC_HORA_INICIO, value) Then
                _dOC_HORA_INICIO = value
                OnPropertyChanged("DOC_HORA_INICIO")
            End If
        End Set
    End Property

    Private _dOC_HORA_INICIO As Nullable(Of Date)

    <DataMember()>
    Public Property DOC_HORA_FIN() As Nullable(Of Date)
        Get
            Return _dOC_HORA_FIN
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_dOC_HORA_FIN, value) Then
                _dOC_HORA_FIN = value
                OnPropertyChanged("DOC_HORA_FIN")
            End If
        End Set
    End Property

    Private _dOC_HORA_FIN As Nullable(Of Date)

    <DataMember()>
    Public Property DOC_SERIE_SUNAT() As String
        Get
            Return _dOC_SERIE_SUNAT
        End Get
        Set(ByVal value As String)
            If Not Equals(_dOC_SERIE_SUNAT, value) Then
                _dOC_SERIE_SUNAT = value
                OnPropertyChanged("DOC_SERIE_SUNAT")
            End If
        End Set
    End Property

    Private _dOC_SERIE_SUNAT As String

    <DataMember()>
    Public Property DOC_SERIE_AFE_SUNAT() As String
        Get
            Return _dOC_SERIE_AFE_SUNAT
        End Get
        Set(ByVal value As String)
            If Not Equals(_dOC_SERIE_AFE_SUNAT, value) Then
                _dOC_SERIE_AFE_SUNAT = value
                OnPropertyChanged("DOC_SERIE_AFE_SUNAT")
            End If
        End Set
    End Property

    Private _dOC_SERIE_AFE_SUNAT As String

    <DataMember()>
    Public Property DOC_LIC_DIRECTA() As Boolean
        Get
            Return _dOC_LIC_DIRECTA
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_dOC_LIC_DIRECTA, value) Then
                _dOC_LIC_DIRECTA = value
                OnPropertyChanged("DOC_LIC_DIRECTA")
            End If
        End Set
    End Property

    Private _dOC_LIC_DIRECTA As Boolean

    <DataMember()>
    Public Property DOC_TIPO_1() As Boolean
        Get
            Return _dOC_TIPO_1
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_dOC_TIPO_1, value) Then
                _dOC_TIPO_1 = value
                OnPropertyChanged("DOC_TIPO_1")
            End If
        End Set
    End Property

    Private _dOC_TIPO_1 As Boolean

    <DataMember()>
    Public Property DOC_TIPO_2() As Boolean
        Get
            Return _dOC_TIPO_2
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_dOC_TIPO_2, value) Then
                _dOC_TIPO_2 = value
                OnPropertyChanged("DOC_TIPO_2")
            End If
        End Set
    End Property

    Private _dOC_TIPO_2 As Boolean

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property DetalleDocumentos() As TrackableCollection(Of DetalleDocumentos)
        Get
            If _detalleDocumentos Is Nothing Then
                _detalleDocumentos = New TrackableCollection(Of DetalleDocumentos)
                AddHandler _detalleDocumentos.CollectionChanged, AddressOf FixupDetalleDocumentos
            End If
            Return _detalleDocumentos
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleDocumentos))
            If Not Object.ReferenceEquals(_detalleDocumentos, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleDocumentos IsNot Nothing Then
                    RemoveHandler _detalleDocumentos.CollectionChanged, AddressOf FixupDetalleDocumentos
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As DetalleDocumentos In _detalleDocumentos
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detalleDocumentos = value
                If _detalleDocumentos IsNot Nothing Then
                    AddHandler _detalleDocumentos.CollectionChanged, AddressOf FixupDetalleDocumentos
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As DetalleDocumentos In _detalleDocumentos
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetalleDocumentos")
            End If
        End Set
    End Property

    Private _detalleDocumentos As TrackableCollection(Of DetalleDocumentos)

    <DataMember()>
    Public Property CtaCte() As CtaCte
        Get
            Return _ctaCte
        End Get
        Set(ByVal value As CtaCte)
            If _ctaCte IsNot value Then
                Dim previousValue As CtaCte = _ctaCte
                _ctaCte = value
                FixupCtaCte(previousValue)
                OnNavigationPropertyChanged("CtaCte")
            End If
        End Set
    End Property

    Private _ctaCte As CtaCte


    <DataMember()>
    Public Property CtaCte1() As CtaCte
        Get
            Return _ctaCte1
        End Get
        Set(ByVal value As CtaCte)
            If _ctaCte1 IsNot value Then
                Dim previousValue As CtaCte = _ctaCte1
                _ctaCte1 = value
                FixupCtaCte1(previousValue)
                OnNavigationPropertyChanged("CtaCte1")
            End If
        End Set
    End Property

    Private _ctaCte1 As CtaCte


    <DataMember()>
    Public Property DireccionesPersonas() As DireccionesPersonas
        Get
            Return _direccionesPersonas
        End Get
        Set(ByVal value As DireccionesPersonas)
            If _direccionesPersonas IsNot value Then
                Dim previousValue As DireccionesPersonas = _direccionesPersonas
                _direccionesPersonas = value
                FixupDireccionesPersonas(previousValue)
                OnNavigationPropertyChanged("DireccionesPersonas")
            End If
        End Set
    End Property

    Private _direccionesPersonas As DireccionesPersonas


    <DataMember()>
    Public Property DireccionesPersonas1() As DireccionesPersonas
        Get
            Return _direccionesPersonas1
        End Get
        Set(ByVal value As DireccionesPersonas)
            If _direccionesPersonas1 IsNot value Then
                Dim previousValue As DireccionesPersonas = _direccionesPersonas1
                _direccionesPersonas1 = value
                FixupDireccionesPersonas1(previousValue)
                OnNavigationPropertyChanged("DireccionesPersonas1")
            End If
        End Set
    End Property

    Private _direccionesPersonas1 As DireccionesPersonas


    <DataMember()>
    Public Property DireccionesPersonas2() As DireccionesPersonas
        Get
            Return _direccionesPersonas2
        End Get
        Set(ByVal value As DireccionesPersonas)
            If _direccionesPersonas2 IsNot value Then
                Dim previousValue As DireccionesPersonas = _direccionesPersonas2
                _direccionesPersonas2 = value
                FixupDireccionesPersonas2(previousValue)
                OnNavigationPropertyChanged("DireccionesPersonas2")
            End If
        End Set
    End Property

    Private _direccionesPersonas2 As DireccionesPersonas


    <DataMember()>
    Public Property DireccionesPersonas3() As DireccionesPersonas
        Get
            Return _direccionesPersonas3
        End Get
        Set(ByVal value As DireccionesPersonas)
            If _direccionesPersonas3 IsNot value Then
                Dim previousValue As DireccionesPersonas = _direccionesPersonas3
                _direccionesPersonas3 = value
                FixupDireccionesPersonas3(previousValue)
                OnNavigationPropertyChanged("DireccionesPersonas3")
            End If
        End Set
    End Property

    Private _direccionesPersonas3 As DireccionesPersonas


    <DataMember()>
    Public Property DireccionesPersonas4() As DireccionesPersonas
        Get
            Return _direccionesPersonas4
        End Get
        Set(ByVal value As DireccionesPersonas)
            If _direccionesPersonas4 IsNot value Then
                Dim previousValue As DireccionesPersonas = _direccionesPersonas4
                _direccionesPersonas4 = value
                FixupDireccionesPersonas4(previousValue)
                OnNavigationPropertyChanged("DireccionesPersonas4")
            End If
        End Set
    End Property

    Private _direccionesPersonas4 As DireccionesPersonas


    <DataMember()>
    Public Property DocPersonas() As DocPersonas
        Get
            Return _docPersonas
        End Get
        Set(ByVal value As DocPersonas)
            If _docPersonas IsNot value Then
                Dim previousValue As DocPersonas = _docPersonas
                _docPersonas = value
                FixupDocPersonas(previousValue)
                OnNavigationPropertyChanged("DocPersonas")
            End If
        End Set
    End Property

    Private _docPersonas As DocPersonas


    <DataMember()>
    Public Property DocPersonas1() As DocPersonas
        Get
            Return _docPersonas1
        End Get
        Set(ByVal value As DocPersonas)
            If _docPersonas1 IsNot value Then
                Dim previousValue As DocPersonas = _docPersonas1
                _docPersonas1 = value
                FixupDocPersonas1(previousValue)
                OnNavigationPropertyChanged("DocPersonas1")
            End If
        End Set
    End Property

    Private _docPersonas1 As DocPersonas


    <DataMember()>
    Public Property DetalleTipoDocumentos() As DetalleTipoDocumentos
        Get
            Return _detalleTipoDocumentos
        End Get
        Set(ByVal value As DetalleTipoDocumentos)
            If _detalleTipoDocumentos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(DTD_ID, value.DTD_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As DetalleTipoDocumentos = _detalleTipoDocumentos
                _detalleTipoDocumentos = value
                FixupDetalleTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("DetalleTipoDocumentos")
            End If
        End Set
    End Property

    Private _detalleTipoDocumentos As DetalleTipoDocumentos


    <DataMember()>
    Public Property DetalleTipoDocumentos1() As DetalleTipoDocumentos
        Get
            Return _detalleTipoDocumentos1
        End Get
        Set(ByVal value As DetalleTipoDocumentos)
            If _detalleTipoDocumentos1 IsNot value Then
                Dim previousValue As DetalleTipoDocumentos = _detalleTipoDocumentos1
                _detalleTipoDocumentos1 = value
                FixupDetalleTipoDocumentos1(previousValue)
                OnNavigationPropertyChanged("DetalleTipoDocumentos1")
            End If
        End Set
    End Property

    Private _detalleTipoDocumentos1 As DetalleTipoDocumentos


    <DataMember()>
    Public Property FletesTransporte() As FletesTransporte
        Get
            Return _fletesTransporte
        End Get
        Set(ByVal value As FletesTransporte)
            If _fletesTransporte IsNot value Then
                Dim previousValue As FletesTransporte = _fletesTransporte
                _fletesTransporte = value
                FixupFletesTransporte(previousValue)
                OnNavigationPropertyChanged("FletesTransporte")
            End If
        End Set
    End Property

    Private _fletesTransporte As FletesTransporte


    <DataMember()>
    Public Property ListaPreciosArticulos() As ListaPreciosArticulos
        Get
            Return _listaPreciosArticulos
        End Get
        Set(ByVal value As ListaPreciosArticulos)
            If _listaPreciosArticulos IsNot value Then
                Dim previousValue As ListaPreciosArticulos = _listaPreciosArticulos
                _listaPreciosArticulos = value
                FixupListaPreciosArticulos(previousValue)
                OnNavigationPropertyChanged("ListaPreciosArticulos")
            End If
        End Set
    End Property

    Private _listaPreciosArticulos As ListaPreciosArticulos


    <DataMember()>
    Public Property Moneda() As Moneda
        Get
            Return _moneda
        End Get
        Set(ByVal value As Moneda)
            If _moneda IsNot value Then
                Dim previousValue As Moneda = _moneda
                _moneda = value
                FixupMoneda(previousValue)
                OnNavigationPropertyChanged("Moneda")
            End If
        End Set
    End Property

    Private _moneda As Moneda


    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property Personas1() As Personas
        Get
            Return _personas1
        End Get
        Set(ByVal value As Personas)
            If _personas1 IsNot value Then
                Dim previousValue As Personas = _personas1
                _personas1 = value
                FixupPersonas1(previousValue)
                OnNavigationPropertyChanged("Personas1")
            End If
        End Set
    End Property

    Private _personas1 As Personas


    <DataMember()>
    Public Property Personas2() As Personas
        Get
            Return _personas2
        End Get
        Set(ByVal value As Personas)
            If _personas2 IsNot value Then
                Dim previousValue As Personas = _personas2
                _personas2 = value
                FixupPersonas2(previousValue)
                OnNavigationPropertyChanged("Personas2")
            End If
        End Set
    End Property

    Private _personas2 As Personas


    <DataMember()>
    Public Property Personas3() As Personas
        Get
            Return _personas3
        End Get
        Set(ByVal value As Personas)
            If _personas3 IsNot value Then
                Dim previousValue As Personas = _personas3
                _personas3 = value
                FixupPersonas3(previousValue)
                OnNavigationPropertyChanged("Personas3")
            End If
        End Set
    End Property

    Private _personas3 As Personas


    <DataMember()>
    Public Property Personas4() As Personas
        Get
            Return _personas4
        End Get
        Set(ByVal value As Personas)
            If _personas4 IsNot value Then
                Dim previousValue As Personas = _personas4
                _personas4 = value
                FixupPersonas4(previousValue)
                OnNavigationPropertyChanged("Personas4")
            End If
        End Set
    End Property

    Private _personas4 As Personas


    <DataMember()>
    Public Property Personas5() As Personas
        Get
            Return _personas5
        End Get
        Set(ByVal value As Personas)
            If _personas5 IsNot value Then
                Dim previousValue As Personas = _personas5
                _personas5 = value
                FixupPersonas5(previousValue)
                OnNavigationPropertyChanged("Personas5")
            End If
        End Set
    End Property

    Private _personas5 As Personas


    <DataMember()>
    Public Property Personas6() As Personas
        Get
            Return _personas6
        End Get
        Set(ByVal value As Personas)
            If _personas6 IsNot value Then
                Dim previousValue As Personas = _personas6
                _personas6 = value
                FixupPersonas6(previousValue)
                OnNavigationPropertyChanged("Personas6")
            End If
        End Set
    End Property

    Private _personas6 As Personas


    <DataMember()>
    Public Property PuntoVenta() As PuntoVenta
        Get
            Return _puntoVenta
        End Get
        Set(ByVal value As PuntoVenta)
            If _puntoVenta IsNot value Then
                Dim previousValue As PuntoVenta = _puntoVenta
                _puntoVenta = value
                FixupPuntoVenta(previousValue)
                OnNavigationPropertyChanged("PuntoVenta")
            End If
        End Set
    End Property

    Private _puntoVenta As PuntoVenta


    <DataMember()>
    Public Property PuntoVenta1() As PuntoVenta
        Get
            Return _puntoVenta1
        End Get
        Set(ByVal value As PuntoVenta)
            If _puntoVenta1 IsNot value Then
                Dim previousValue As PuntoVenta = _puntoVenta1
                _puntoVenta1 = value
                FixupPuntoVenta1(previousValue)
                OnNavigationPropertyChanged("PuntoVenta1")
            End If
        End Set
    End Property

    Private _puntoVenta1 As PuntoVenta


    <DataMember()>
    Public Property TipoDocumentos() As TipoDocumentos
        Get
            Return _tipoDocumentos
        End Get
        Set(ByVal value As TipoDocumentos)
            If _tipoDocumentos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(TDO_ID, value.TDO_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As TipoDocumentos = _tipoDocumentos
                _tipoDocumentos = value
                FixupTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("TipoDocumentos")
            End If
        End Set
    End Property

    Private _tipoDocumentos As TipoDocumentos


    <DataMember()>
    Public Property TipoDocumentos1() As TipoDocumentos
        Get
            Return _tipoDocumentos1
        End Get
        Set(ByVal value As TipoDocumentos)
            If _tipoDocumentos1 IsNot value Then
                Dim previousValue As TipoDocumentos = _tipoDocumentos1
                _tipoDocumentos1 = value
                FixupTipoDocumentos1(previousValue)
                OnNavigationPropertyChanged("TipoDocumentos1")
            End If
        End Set
    End Property

    Private _tipoDocumentos1 As TipoDocumentos


    <DataMember()>
    Public Property TipoDocPersonas() As TipoDocPersonas
        Get
            Return _tipoDocPersonas
        End Get
        Set(ByVal value As TipoDocPersonas)
            If _tipoDocPersonas IsNot value Then
                Dim previousValue As TipoDocPersonas = _tipoDocPersonas
                _tipoDocPersonas = value
                FixupTipoDocPersonas(previousValue)
                OnNavigationPropertyChanged("TipoDocPersonas")
            End If
        End Set
    End Property

    Private _tipoDocPersonas As TipoDocPersonas


    <DataMember()>
    Public Property TipoDocPersonas1() As TipoDocPersonas
        Get
            Return _tipoDocPersonas1
        End Get
        Set(ByVal value As TipoDocPersonas)
            If _tipoDocPersonas1 IsNot value Then
                Dim previousValue As TipoDocPersonas = _tipoDocPersonas1
                _tipoDocPersonas1 = value
                FixupTipoDocPersonas1(previousValue)
                OnNavigationPropertyChanged("TipoDocPersonas1")
            End If
        End Set
    End Property

    Private _tipoDocPersonas1 As TipoDocPersonas


    <DataMember()>
    Public Property TipoVenta() As TipoVenta
        Get
            Return _tipoVenta
        End Get
        Set(ByVal value As TipoVenta)
            If _tipoVenta IsNot value Then
                Dim previousValue As TipoVenta = _tipoVenta
                _tipoVenta = value
                FixupTipoVenta(previousValue)
                OnNavigationPropertyChanged("TipoVenta")
            End If
        End Set
    End Property

    Private _tipoVenta As TipoVenta


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociaci칩n que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesar치 notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        DetalleDocumentos.Clear()
        CtaCte = Nothing
        CtaCte1 = Nothing
        DireccionesPersonas = Nothing
        DireccionesPersonas1 = Nothing
        DireccionesPersonas2 = Nothing
        DireccionesPersonas3 = Nothing
        DireccionesPersonas4 = Nothing
        DocPersonas = Nothing
        DocPersonas1 = Nothing
        DetalleTipoDocumentos = Nothing
        DetalleTipoDocumentos1 = Nothing
        FletesTransporte = Nothing
        ListaPreciosArticulos = Nothing
        Moneda = Nothing
        Personas = Nothing
        Personas1 = Nothing
        Personas2 = Nothing
        Personas3 = Nothing
        Personas4 = Nothing
        Personas5 = Nothing
        Personas6 = Nothing
        PuntoVenta = Nothing
        PuntoVenta1 = Nothing
        TipoDocumentos = Nothing
        TipoDocumentos1 = Nothing
        TipoDocPersonas = Nothing
        TipoDocPersonas1 = Nothing
        TipoVenta = Nothing
        Usuarios = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupCtaCte(ByVal previousValue As CtaCte, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos.Contains(Me) Then
            previousValue.Documentos.Remove(Me)
        End If

        If CtaCte IsNot Nothing Then
            If Not CtaCte.Documentos.Contains(Me) Then
                CtaCte.Documentos.Add(Me)
            End If

            CCT_ID = CtaCte.CCT_ID
        ElseIf Not skipKeys Then
            CCT_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CtaCte") AndAlso
                ChangeTracker.OriginalValues("CtaCte") Is CtaCte Then
                ChangeTracker.OriginalValues.Remove("CtaCte")
            Else
                ChangeTracker.RecordOriginalValue("CtaCte", previousValue)
            End If
            If CtaCte IsNot Nothing AndAlso Not CtaCte.ChangeTracker.ChangeTrackingEnabled Then
                CtaCte.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCtaCte1(ByVal previousValue As CtaCte, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos1.Contains(Me) Then
            previousValue.Documentos1.Remove(Me)
        End If

        If CtaCte1 IsNot Nothing Then
            If Not CtaCte1.Documentos1.Contains(Me) Then
                CtaCte1.Documentos1.Add(Me)
            End If

            CCT_ID_AFE = CtaCte1.CCT_ID
        ElseIf Not skipKeys Then
            CCT_ID_AFE = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CtaCte1") AndAlso
                ChangeTracker.OriginalValues("CtaCte1") Is CtaCte1 Then
                ChangeTracker.OriginalValues.Remove("CtaCte1")
            Else
                ChangeTracker.RecordOriginalValue("CtaCte1", previousValue)
            End If
            If CtaCte1 IsNot Nothing AndAlso Not CtaCte1.ChangeTracker.ChangeTrackingEnabled Then
                CtaCte1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDireccionesPersonas(ByVal previousValue As DireccionesPersonas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos.Contains(Me) Then
            previousValue.Documentos.Remove(Me)
        End If

        If DireccionesPersonas IsNot Nothing Then
            If Not DireccionesPersonas.Documentos.Contains(Me) Then
                DireccionesPersonas.Documentos.Add(Me)
            End If

            DIR_ID_ENT_REC = DireccionesPersonas.DIR_ID
        ElseIf Not skipKeys Then
            DIR_ID_ENT_REC = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DireccionesPersonas") AndAlso
                ChangeTracker.OriginalValues("DireccionesPersonas") Is DireccionesPersonas Then
                ChangeTracker.OriginalValues.Remove("DireccionesPersonas")
            Else
                ChangeTracker.RecordOriginalValue("DireccionesPersonas", previousValue)
            End If
            If DireccionesPersonas IsNot Nothing AndAlso Not DireccionesPersonas.ChangeTracker.ChangeTrackingEnabled Then
                DireccionesPersonas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDireccionesPersonas1(ByVal previousValue As DireccionesPersonas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos1.Contains(Me) Then
            previousValue.Documentos1.Remove(Me)
        End If

        If DireccionesPersonas1 IsNot Nothing Then
            If Not DireccionesPersonas1.Documentos1.Contains(Me) Then
                DireccionesPersonas1.Documentos1.Add(Me)
            End If

            DIR_ID_COB = DireccionesPersonas1.DIR_ID
        ElseIf Not skipKeys Then
            DIR_ID_COB = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DireccionesPersonas1") AndAlso
                ChangeTracker.OriginalValues("DireccionesPersonas1") Is DireccionesPersonas1 Then
                ChangeTracker.OriginalValues.Remove("DireccionesPersonas1")
            Else
                ChangeTracker.RecordOriginalValue("DireccionesPersonas1", previousValue)
            End If
            If DireccionesPersonas1 IsNot Nothing AndAlso Not DireccionesPersonas1.ChangeTracker.ChangeTrackingEnabled Then
                DireccionesPersonas1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDireccionesPersonas2(ByVal previousValue As DireccionesPersonas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos2.Contains(Me) Then
            previousValue.Documentos2.Remove(Me)
        End If

        If DireccionesPersonas2 IsNot Nothing Then
            If Not DireccionesPersonas2.Documentos2.Contains(Me) Then
                DireccionesPersonas2.Documentos2.Add(Me)
            End If

            DIR_ID_DOM = DireccionesPersonas2.DIR_ID
        ElseIf Not skipKeys Then
            DIR_ID_DOM = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DireccionesPersonas2") AndAlso
                ChangeTracker.OriginalValues("DireccionesPersonas2") Is DireccionesPersonas2 Then
                ChangeTracker.OriginalValues.Remove("DireccionesPersonas2")
            Else
                ChangeTracker.RecordOriginalValue("DireccionesPersonas2", previousValue)
            End If
            If DireccionesPersonas2 IsNot Nothing AndAlso Not DireccionesPersonas2.ChangeTracker.ChangeTrackingEnabled Then
                DireccionesPersonas2.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDireccionesPersonas3(ByVal previousValue As DireccionesPersonas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos3.Contains(Me) Then
            previousValue.Documentos3.Remove(Me)
        End If

        If DireccionesPersonas3 IsNot Nothing Then
            If Not DireccionesPersonas3.Documentos3.Contains(Me) Then
                DireccionesPersonas3.Documentos3.Add(Me)
            End If

            DIR_ID_ENT = DireccionesPersonas3.DIR_ID
        ElseIf Not skipKeys Then
            DIR_ID_ENT = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DireccionesPersonas3") AndAlso
                ChangeTracker.OriginalValues("DireccionesPersonas3") Is DireccionesPersonas3 Then
                ChangeTracker.OriginalValues.Remove("DireccionesPersonas3")
            Else
                ChangeTracker.RecordOriginalValue("DireccionesPersonas3", previousValue)
            End If
            If DireccionesPersonas3 IsNot Nothing AndAlso Not DireccionesPersonas3.ChangeTracker.ChangeTrackingEnabled Then
                DireccionesPersonas3.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDireccionesPersonas4(ByVal previousValue As DireccionesPersonas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos4.Contains(Me) Then
            previousValue.Documentos4.Remove(Me)
        End If

        If DireccionesPersonas4 IsNot Nothing Then
            If Not DireccionesPersonas4.Documentos4.Contains(Me) Then
                DireccionesPersonas4.Documentos4.Add(Me)
            End If

            DIR_ID_FIS = DireccionesPersonas4.DIR_ID
        ElseIf Not skipKeys Then
            DIR_ID_FIS = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DireccionesPersonas4") AndAlso
                ChangeTracker.OriginalValues("DireccionesPersonas4") Is DireccionesPersonas4 Then
                ChangeTracker.OriginalValues.Remove("DireccionesPersonas4")
            Else
                ChangeTracker.RecordOriginalValue("DireccionesPersonas4", previousValue)
            End If
            If DireccionesPersonas4 IsNot Nothing AndAlso Not DireccionesPersonas4.ChangeTracker.ChangeTrackingEnabled Then
                DireccionesPersonas4.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDocPersonas(ByVal previousValue As DocPersonas)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos.Contains(Me) Then
            previousValue.Documentos.Remove(Me)
        End If

        If DocPersonas IsNot Nothing Then
            If Not DocPersonas.Documentos.Contains(Me) Then
                DocPersonas.Documentos.Add(Me)
            End If

            PER_ID_CLI = DocPersonas.PER_ID
            TDP_ID_CLI = DocPersonas.TDP_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DocPersonas") AndAlso
                ChangeTracker.OriginalValues("DocPersonas") Is DocPersonas Then
                ChangeTracker.OriginalValues.Remove("DocPersonas")
            Else
                ChangeTracker.RecordOriginalValue("DocPersonas", previousValue)
            End If
            If DocPersonas IsNot Nothing AndAlso Not DocPersonas.ChangeTracker.ChangeTrackingEnabled Then
                DocPersonas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDocPersonas1(ByVal previousValue As DocPersonas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos1.Contains(Me) Then
            previousValue.Documentos1.Remove(Me)
        End If

        If DocPersonas1 IsNot Nothing Then
            If Not DocPersonas1.Documentos1.Contains(Me) Then
                DocPersonas1.Documentos1.Add(Me)
            End If

            PER_ID_REC = DocPersonas1.PER_ID
            TDP_ID_REC = DocPersonas1.TDP_ID
        ElseIf Not skipKeys Then
            PER_ID_REC = Nothing
            TDP_ID_REC = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DocPersonas1") AndAlso
                ChangeTracker.OriginalValues("DocPersonas1") Is DocPersonas1 Then
                ChangeTracker.OriginalValues.Remove("DocPersonas1")
            Else
                ChangeTracker.RecordOriginalValue("DocPersonas1", previousValue)
            End If
            If DocPersonas1 IsNot Nothing AndAlso Not DocPersonas1.ChangeTracker.ChangeTrackingEnabled Then
                DocPersonas1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleTipoDocumentos(ByVal previousValue As DetalleTipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos.Contains(Me) Then
            previousValue.Documentos.Remove(Me)
        End If

        If DetalleTipoDocumentos IsNot Nothing Then
            If Not DetalleTipoDocumentos.Documentos.Contains(Me) Then
                DetalleTipoDocumentos.Documentos.Add(Me)
            End If

            DTD_ID = DetalleTipoDocumentos.DTD_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("DetalleTipoDocumentos") Is DetalleTipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("DetalleTipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTipoDocumentos", previousValue)
            End If
            If DetalleTipoDocumentos IsNot Nothing AndAlso Not DetalleTipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleTipoDocumentos1(ByVal previousValue As DetalleTipoDocumentos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos1.Contains(Me) Then
            previousValue.Documentos1.Remove(Me)
        End If

        If DetalleTipoDocumentos1 IsNot Nothing Then
            If Not DetalleTipoDocumentos1.Documentos1.Contains(Me) Then
                DetalleTipoDocumentos1.Documentos1.Add(Me)
            End If

            DTD_ID_AFE = DetalleTipoDocumentos1.DTD_ID
        ElseIf Not skipKeys Then
            DTD_ID_AFE = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTipoDocumentos1") AndAlso
                ChangeTracker.OriginalValues("DetalleTipoDocumentos1") Is DetalleTipoDocumentos1 Then
                ChangeTracker.OriginalValues.Remove("DetalleTipoDocumentos1")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTipoDocumentos1", previousValue)
            End If
            If DetalleTipoDocumentos1 IsNot Nothing AndAlso Not DetalleTipoDocumentos1.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTipoDocumentos1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupFletesTransporte(ByVal previousValue As FletesTransporte, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos.Contains(Me) Then
            previousValue.Documentos.Remove(Me)
        End If

        If FletesTransporte IsNot Nothing Then
            If Not FletesTransporte.Documentos.Contains(Me) Then
                FletesTransporte.Documentos.Add(Me)
            End If

            FLE_ID = FletesTransporte.FLE_ID
        ElseIf Not skipKeys Then
            FLE_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("FletesTransporte") AndAlso
                ChangeTracker.OriginalValues("FletesTransporte") Is FletesTransporte Then
                ChangeTracker.OriginalValues.Remove("FletesTransporte")
            Else
                ChangeTracker.RecordOriginalValue("FletesTransporte", previousValue)
            End If
            If FletesTransporte IsNot Nothing AndAlso Not FletesTransporte.ChangeTracker.ChangeTrackingEnabled Then
                FletesTransporte.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupListaPreciosArticulos(ByVal previousValue As ListaPreciosArticulos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos.Contains(Me) Then
            previousValue.Documentos.Remove(Me)
        End If

        If ListaPreciosArticulos IsNot Nothing Then
            If Not ListaPreciosArticulos.Documentos.Contains(Me) Then
                ListaPreciosArticulos.Documentos.Add(Me)
            End If

            LPR_ID = ListaPreciosArticulos.LPR_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("ListaPreciosArticulos") AndAlso
                ChangeTracker.OriginalValues("ListaPreciosArticulos") Is ListaPreciosArticulos Then
                ChangeTracker.OriginalValues.Remove("ListaPreciosArticulos")
            Else
                ChangeTracker.RecordOriginalValue("ListaPreciosArticulos", previousValue)
            End If
            If ListaPreciosArticulos IsNot Nothing AndAlso Not ListaPreciosArticulos.ChangeTracker.ChangeTrackingEnabled Then
                ListaPreciosArticulos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupMoneda(ByVal previousValue As Moneda)
        If IsDeserializing Then
            Return
        End If

        If Moneda IsNot Nothing Then
            MON_ID = Moneda.MON_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Moneda") AndAlso
                ChangeTracker.OriginalValues("Moneda") Is Moneda Then
                ChangeTracker.OriginalValues.Remove("Moneda")
            Else
                ChangeTracker.RecordOriginalValue("Moneda", previousValue)
            End If
            If Moneda IsNot Nothing AndAlso Not Moneda.ChangeTracker.ChangeTrackingEnabled Then
                Moneda.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos.Contains(Me) Then
            previousValue.Documentos.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.Documentos.Contains(Me) Then
                Personas.Documentos.Add(Me)
            End If

            PER_ID_CON = Personas.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_CON = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas1(ByVal previousValue As Personas)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos1.Contains(Me) Then
            previousValue.Documentos1.Remove(Me)
        End If

        If Personas1 IsNot Nothing Then
            If Not Personas1.Documentos1.Contains(Me) Then
                Personas1.Documentos1.Add(Me)
            End If

            PER_ID_VEN = Personas1.PER_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas1") AndAlso
                ChangeTracker.OriginalValues("Personas1") Is Personas1 Then
                ChangeTracker.OriginalValues.Remove("Personas1")
            Else
                ChangeTracker.RecordOriginalValue("Personas1", previousValue)
            End If
            If Personas1 IsNot Nothing AndAlso Not Personas1.ChangeTracker.ChangeTrackingEnabled Then
                Personas1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas2(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos2.Contains(Me) Then
            previousValue.Documentos2.Remove(Me)
        End If

        If Personas2 IsNot Nothing Then
            If Not Personas2.Documentos2.Contains(Me) Then
                Personas2.Documentos2.Add(Me)
            End If

            PER_ID_PRO = Personas2.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_PRO = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas2") AndAlso
                ChangeTracker.OriginalValues("Personas2") Is Personas2 Then
                ChangeTracker.OriginalValues.Remove("Personas2")
            Else
                ChangeTracker.RecordOriginalValue("Personas2", previousValue)
            End If
            If Personas2 IsNot Nothing AndAlso Not Personas2.ChangeTracker.ChangeTrackingEnabled Then
                Personas2.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas3(ByVal previousValue As Personas)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos3.Contains(Me) Then
            previousValue.Documentos3.Remove(Me)
        End If

        If Personas3 IsNot Nothing Then
            If Not Personas3.Documentos3.Contains(Me) Then
                Personas3.Documentos3.Add(Me)
            End If

            PER_ID_CLI = Personas3.PER_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas3") AndAlso
                ChangeTracker.OriginalValues("Personas3") Is Personas3 Then
                ChangeTracker.OriginalValues.Remove("Personas3")
            Else
                ChangeTracker.RecordOriginalValue("Personas3", previousValue)
            End If
            If Personas3 IsNot Nothing AndAlso Not Personas3.ChangeTracker.ChangeTrackingEnabled Then
                Personas3.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas4(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos4.Contains(Me) Then
            previousValue.Documentos4.Remove(Me)
        End If

        If Personas4 IsNot Nothing Then
            If Not Personas4.Documentos4.Contains(Me) Then
                Personas4.Documentos4.Add(Me)
            End If

            PER_ID_REC = Personas4.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_REC = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas4") AndAlso
                ChangeTracker.OriginalValues("Personas4") Is Personas4 Then
                ChangeTracker.OriginalValues.Remove("Personas4")
            Else
                ChangeTracker.RecordOriginalValue("Personas4", previousValue)
            End If
            If Personas4 IsNot Nothing AndAlso Not Personas4.ChangeTracker.ChangeTrackingEnabled Then
                Personas4.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas5(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos5.Contains(Me) Then
            previousValue.Documentos5.Remove(Me)
        End If

        If Personas5 IsNot Nothing Then
            If Not Personas5.Documentos5.Contains(Me) Then
                Personas5.Documentos5.Add(Me)
            End If

            PER_ID_COB = Personas5.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_COB = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas5") AndAlso
                ChangeTracker.OriginalValues("Personas5") Is Personas5 Then
                ChangeTracker.OriginalValues.Remove("Personas5")
            Else
                ChangeTracker.RecordOriginalValue("Personas5", previousValue)
            End If
            If Personas5 IsNot Nothing AndAlso Not Personas5.ChangeTracker.ChangeTrackingEnabled Then
                Personas5.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas6(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos6.Contains(Me) Then
            previousValue.Documentos6.Remove(Me)
        End If

        If Personas6 IsNot Nothing Then
            If Not Personas6.Documentos6.Contains(Me) Then
                Personas6.Documentos6.Add(Me)
            End If

            PER_ID_GRU = Personas6.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_GRU = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas6") AndAlso
                ChangeTracker.OriginalValues("Personas6") Is Personas6 Then
                ChangeTracker.OriginalValues.Remove("Personas6")
            Else
                ChangeTracker.RecordOriginalValue("Personas6", previousValue)
            End If
            If Personas6 IsNot Nothing AndAlso Not Personas6.ChangeTracker.ChangeTrackingEnabled Then
                Personas6.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPuntoVenta(ByVal previousValue As PuntoVenta)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos.Contains(Me) Then
            previousValue.Documentos.Remove(Me)
        End If

        If PuntoVenta IsNot Nothing Then
            If Not PuntoVenta.Documentos.Contains(Me) Then
                PuntoVenta.Documentos.Add(Me)
            End If

            PVE_ID = PuntoVenta.PVE_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("PuntoVenta") AndAlso
                ChangeTracker.OriginalValues("PuntoVenta") Is PuntoVenta Then
                ChangeTracker.OriginalValues.Remove("PuntoVenta")
            Else
                ChangeTracker.RecordOriginalValue("PuntoVenta", previousValue)
            End If
            If PuntoVenta IsNot Nothing AndAlso Not PuntoVenta.ChangeTracker.ChangeTrackingEnabled Then
                PuntoVenta.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPuntoVenta1(ByVal previousValue As PuntoVenta)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos1.Contains(Me) Then
            previousValue.Documentos1.Remove(Me)
        End If

        If PuntoVenta1 IsNot Nothing Then
            If Not PuntoVenta1.Documentos1.Contains(Me) Then
                PuntoVenta1.Documentos1.Add(Me)
            End If

            PVE_ID_DES = PuntoVenta1.PVE_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("PuntoVenta1") AndAlso
                ChangeTracker.OriginalValues("PuntoVenta1") Is PuntoVenta1 Then
                ChangeTracker.OriginalValues.Remove("PuntoVenta1")
            Else
                ChangeTracker.RecordOriginalValue("PuntoVenta1", previousValue)
            End If
            If PuntoVenta1 IsNot Nothing AndAlso Not PuntoVenta1.ChangeTracker.ChangeTrackingEnabled Then
                PuntoVenta1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoDocumentos(ByVal previousValue As TipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos.Contains(Me) Then
            previousValue.Documentos.Remove(Me)
        End If

        If TipoDocumentos IsNot Nothing Then
            If Not TipoDocumentos.Documentos.Contains(Me) Then
                TipoDocumentos.Documentos.Add(Me)
            End If

            TDO_ID = TipoDocumentos.TDO_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("TipoDocumentos") Is TipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("TipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("TipoDocumentos", previousValue)
            End If
            If TipoDocumentos IsNot Nothing AndAlso Not TipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                TipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoDocumentos1(ByVal previousValue As TipoDocumentos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos1.Contains(Me) Then
            previousValue.Documentos1.Remove(Me)
        End If

        If TipoDocumentos1 IsNot Nothing Then
            If Not TipoDocumentos1.Documentos1.Contains(Me) Then
                TipoDocumentos1.Documentos1.Add(Me)
            End If

            TDO_ID_AFE = TipoDocumentos1.TDO_ID
        ElseIf Not skipKeys Then
            TDO_ID_AFE = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoDocumentos1") AndAlso
                ChangeTracker.OriginalValues("TipoDocumentos1") Is TipoDocumentos1 Then
                ChangeTracker.OriginalValues.Remove("TipoDocumentos1")
            Else
                ChangeTracker.RecordOriginalValue("TipoDocumentos1", previousValue)
            End If
            If TipoDocumentos1 IsNot Nothing AndAlso Not TipoDocumentos1.ChangeTracker.ChangeTrackingEnabled Then
                TipoDocumentos1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoDocPersonas(ByVal previousValue As TipoDocPersonas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos.Contains(Me) Then
            previousValue.Documentos.Remove(Me)
        End If

        If TipoDocPersonas IsNot Nothing Then
            If Not TipoDocPersonas.Documentos.Contains(Me) Then
                TipoDocPersonas.Documentos.Add(Me)
            End If

            TDP_ID_REC = TipoDocPersonas.TDP_ID
        ElseIf Not skipKeys Then
            TDP_ID_REC = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoDocPersonas") AndAlso
                ChangeTracker.OriginalValues("TipoDocPersonas") Is TipoDocPersonas Then
                ChangeTracker.OriginalValues.Remove("TipoDocPersonas")
            Else
                ChangeTracker.RecordOriginalValue("TipoDocPersonas", previousValue)
            End If
            If TipoDocPersonas IsNot Nothing AndAlso Not TipoDocPersonas.ChangeTracker.ChangeTrackingEnabled Then
                TipoDocPersonas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoDocPersonas1(ByVal previousValue As TipoDocPersonas)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos1.Contains(Me) Then
            previousValue.Documentos1.Remove(Me)
        End If

        If TipoDocPersonas1 IsNot Nothing Then
            If Not TipoDocPersonas1.Documentos1.Contains(Me) Then
                TipoDocPersonas1.Documentos1.Add(Me)
            End If

            TDP_ID_CLI = TipoDocPersonas1.TDP_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoDocPersonas1") AndAlso
                ChangeTracker.OriginalValues("TipoDocPersonas1") Is TipoDocPersonas1 Then
                ChangeTracker.OriginalValues.Remove("TipoDocPersonas1")
            Else
                ChangeTracker.RecordOriginalValue("TipoDocPersonas1", previousValue)
            End If
            If TipoDocPersonas1 IsNot Nothing AndAlso Not TipoDocPersonas1.ChangeTracker.ChangeTrackingEnabled Then
                TipoDocPersonas1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoVenta(ByVal previousValue As TipoVenta)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Documentos.Contains(Me) Then
            previousValue.Documentos.Remove(Me)
        End If

        If TipoVenta IsNot Nothing Then
            If Not TipoVenta.Documentos.Contains(Me) Then
                TipoVenta.Documentos.Add(Me)
            End If

            TIV_ID = TipoVenta.TIV_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoVenta") AndAlso
                ChangeTracker.OriginalValues("TipoVenta") Is TipoVenta Then
                ChangeTracker.OriginalValues.Remove("TipoVenta")
            Else
                ChangeTracker.RecordOriginalValue("TipoVenta", previousValue)
            End If
            If TipoVenta IsNot Nothing AndAlso Not TipoVenta.ChangeTracker.ChangeTrackingEnabled Then
                TipoVenta.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleDocumentos(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleDocumentos In e.NewItems
                item.Documentos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleDocumentos", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleDocumentos In e.OldItems
                If ReferenceEquals(item.Documentos, Me) Then
                    item.Documentos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleDocumentos", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

#End Region
End Class
