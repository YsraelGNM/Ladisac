'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(DetalleTipoDocumentos))>
<KnownType(GetType(Personas))>
<KnownType(GetType(OrdenServicio))>
<KnownType(GetType(OrdenCompra))>
Partial Public Class RecepcionDocumento
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared RDO_ID As string = "RDO_ID"
				public shared DTD_ID As string = "DTD_ID"
				public shared RDO_SERIE As string = "RDO_SERIE"
				public shared RDO_NUMERO As string = "RDO_NUMERO"
				public shared RDO_FECHA As string = "RDO_FECHA"
				public shared RDO_FECHA_DOCUMENTO As string = "RDO_FECHA_DOCUMENTO"
				public shared PER_ID_PROVEEDOR As string = "PER_ID_PROVEEDOR"
				public shared RDO_CONCEPTO As string = "RDO_CONCEPTO"
				public shared USU_ID As string = "USU_ID"
				public shared RDO_FEC_GRAB As string = "RDO_FEC_GRAB"
				public shared RDO_ESTADO As string = "RDO_ESTADO"
				public shared PER_ID_RECIBIDO As string = "PER_ID_RECIBIDO"
				public shared RDO_RECIBIDO As string = "RDO_RECIBIDO"
				public shared RDO_FECHA_RECIBIDO As string = "RDO_FECHA_RECIBIDO"
				public shared OCO_ID As string = "OCO_ID"
				public shared OSE_ID As string = "OSE_ID"
		    End Structure
	



    <DataMember()>
    Public Property RDO_ID() As Integer
        Get
            Return _rDO_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_rDO_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'RDO_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _rDO_ID = value
                OnPropertyChanged("RDO_ID")
            End If
        End Set
    End Property

    Private _rDO_ID As Integer

    <DataMember()>
    Public Property DTD_ID() As String
        Get
            Return _dTD_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID, value) Then
                ChangeTracker.RecordOriginalValue("DTD_ID", _dTD_ID)
                If Not IsDeserializing Then
                    If DetalleTipoDocumentos IsNot Nothing AndAlso Not Equals(DetalleTipoDocumentos.DTD_ID, value) Then
                        DetalleTipoDocumentos = Nothing
                    End If
                End If
                _dTD_ID = value
                OnPropertyChanged("DTD_ID")
            End If
        End Set
    End Property

    Private _dTD_ID As String

    <DataMember()>
    Public Property RDO_SERIE() As String
        Get
            Return _rDO_SERIE
        End Get
        Set(ByVal value As String)
            If Not Equals(_rDO_SERIE, value) Then
                _rDO_SERIE = value
                OnPropertyChanged("RDO_SERIE")
            End If
        End Set
    End Property

    Private _rDO_SERIE As String

    <DataMember()>
    Public Property RDO_NUMERO() As String
        Get
            Return _rDO_NUMERO
        End Get
        Set(ByVal value As String)
            If Not Equals(_rDO_NUMERO, value) Then
                _rDO_NUMERO = value
                OnPropertyChanged("RDO_NUMERO")
            End If
        End Set
    End Property

    Private _rDO_NUMERO As String

    <DataMember()>
    Public Property RDO_FECHA() As Nullable(Of Date)
        Get
            Return _rDO_FECHA
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_rDO_FECHA, value) Then
                _rDO_FECHA = value
                OnPropertyChanged("RDO_FECHA")
            End If
        End Set
    End Property

    Private _rDO_FECHA As Nullable(Of Date)

    <DataMember()>
    Public Property RDO_FECHA_DOCUMENTO() As Nullable(Of Date)
        Get
            Return _rDO_FECHA_DOCUMENTO
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_rDO_FECHA_DOCUMENTO, value) Then
                _rDO_FECHA_DOCUMENTO = value
                OnPropertyChanged("RDO_FECHA_DOCUMENTO")
            End If
        End Set
    End Property

    Private _rDO_FECHA_DOCUMENTO As Nullable(Of Date)

    <DataMember()>
    Public Property PER_ID_PROVEEDOR() As String
        Get
            Return _pER_ID_PROVEEDOR
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_PROVEEDOR, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_PROVEEDOR", _pER_ID_PROVEEDOR)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID_PROVEEDOR = value
                OnPropertyChanged("PER_ID_PROVEEDOR")
            End If
        End Set
    End Property

    Private _pER_ID_PROVEEDOR As String

    <DataMember()>
    Public Property RDO_CONCEPTO() As String
        Get
            Return _rDO_CONCEPTO
        End Get
        Set(ByVal value As String)
            If Not Equals(_rDO_CONCEPTO, value) Then
                _rDO_CONCEPTO = value
                OnPropertyChanged("RDO_CONCEPTO")
            End If
        End Set
    End Property

    Private _rDO_CONCEPTO As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property RDO_FEC_GRAB() As Nullable(Of Date)
        Get
            Return _rDO_FEC_GRAB
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_rDO_FEC_GRAB, value) Then
                _rDO_FEC_GRAB = value
                OnPropertyChanged("RDO_FEC_GRAB")
            End If
        End Set
    End Property

    Private _rDO_FEC_GRAB As Nullable(Of Date)

    <DataMember()>
    Public Property RDO_ESTADO() As Nullable(Of Boolean)
        Get
            Return _rDO_ESTADO
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_rDO_ESTADO, value) Then
                _rDO_ESTADO = value
                OnPropertyChanged("RDO_ESTADO")
            End If
        End Set
    End Property

    Private _rDO_ESTADO As Nullable(Of Boolean)

    <DataMember()>
    Public Property PER_ID_RECIBIDO() As String
        Get
            Return _pER_ID_RECIBIDO
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_RECIBIDO, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_RECIBIDO", _pER_ID_RECIBIDO)
                If Not IsDeserializing Then
                    If Personas1 IsNot Nothing AndAlso Not Equals(Personas1.PER_ID, value) Then
                        Personas1 = Nothing
                    End If
                End If
                _pER_ID_RECIBIDO = value
                OnPropertyChanged("PER_ID_RECIBIDO")
            End If
        End Set
    End Property

    Private _pER_ID_RECIBIDO As String

    <DataMember()>
    Public Property RDO_RECIBIDO() As Nullable(Of Integer)
        Get
            Return _rDO_RECIBIDO
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_rDO_RECIBIDO, value) Then
                _rDO_RECIBIDO = value
                OnPropertyChanged("RDO_RECIBIDO")
            End If
        End Set
    End Property

    Private _rDO_RECIBIDO As Nullable(Of Integer)

    <DataMember()>
    Public Property RDO_FECHA_RECIBIDO() As Nullable(Of Date)
        Get
            Return _rDO_FECHA_RECIBIDO
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_rDO_FECHA_RECIBIDO, value) Then
                _rDO_FECHA_RECIBIDO = value
                OnPropertyChanged("RDO_FECHA_RECIBIDO")
            End If
        End Set
    End Property

    Private _rDO_FECHA_RECIBIDO As Nullable(Of Date)

    <DataMember()>
    Public Property OCO_ID() As Nullable(Of Integer)
        Get
            Return _oCO_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_oCO_ID, value) Then
                ChangeTracker.RecordOriginalValue("OCO_ID", _oCO_ID)
                If Not IsDeserializing Then
                    If OrdenCompra IsNot Nothing AndAlso Not Equals(OrdenCompra.OCO_ID, value) Then
                        OrdenCompra = Nothing
                    End If
                End If
                _oCO_ID = value
                OnPropertyChanged("OCO_ID")
            End If
        End Set
    End Property

    Private _oCO_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property OSE_ID() As Nullable(Of Integer)
        Get
            Return _oSE_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_oSE_ID, value) Then
                ChangeTracker.RecordOriginalValue("OSE_ID", _oSE_ID)
                If Not IsDeserializing Then
                    If OrdenServicio IsNot Nothing AndAlso Not Equals(OrdenServicio.OSE_ID, value) Then
                        OrdenServicio = Nothing
                    End If
                End If
                _oSE_ID = value
                OnPropertyChanged("OSE_ID")
            End If
        End Set
    End Property

    Private _oSE_ID As Nullable(Of Integer)

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property DetalleTipoDocumentos() As DetalleTipoDocumentos
        Get
            Return _detalleTipoDocumentos
        End Get
        Set(ByVal value As DetalleTipoDocumentos)
            If _detalleTipoDocumentos IsNot value Then
                Dim previousValue As DetalleTipoDocumentos = _detalleTipoDocumentos
                _detalleTipoDocumentos = value
                FixupDetalleTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("DetalleTipoDocumentos")
            End If
        End Set
    End Property

    Private _detalleTipoDocumentos As DetalleTipoDocumentos


    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property Personas1() As Personas
        Get
            Return _personas1
        End Get
        Set(ByVal value As Personas)
            If _personas1 IsNot value Then
                Dim previousValue As Personas = _personas1
                _personas1 = value
                FixupPersonas1(previousValue)
                OnNavigationPropertyChanged("Personas1")
            End If
        End Set
    End Property

    Private _personas1 As Personas


    <DataMember()>
    Public Property OrdenServicio() As OrdenServicio
        Get
            Return _ordenServicio
        End Get
        Set(ByVal value As OrdenServicio)
            If _ordenServicio IsNot value Then
                Dim previousValue As OrdenServicio = _ordenServicio
                _ordenServicio = value
                FixupOrdenServicio(previousValue)
                OnNavigationPropertyChanged("OrdenServicio")
            End If
        End Set
    End Property

    Private _ordenServicio As OrdenServicio


    <DataMember()>
    Public Property OrdenCompra() As OrdenCompra
        Get
            Return _ordenCompra
        End Get
        Set(ByVal value As OrdenCompra)
            If _ordenCompra IsNot value Then
                Dim previousValue As OrdenCompra = _ordenCompra
                _ordenCompra = value
                FixupOrdenCompra(previousValue)
                OnNavigationPropertyChanged("OrdenCompra")
            End If
        End Set
    End Property

    Private _ordenCompra As OrdenCompra


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        DetalleTipoDocumentos = Nothing
        Personas = Nothing
        Personas1 = Nothing
        OrdenServicio = Nothing
        OrdenCompra = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupDetalleTipoDocumentos(ByVal previousValue As DetalleTipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.RecepcionDocumento.Contains(Me) Then
            previousValue.RecepcionDocumento.Remove(Me)
        End If

        If DetalleTipoDocumentos IsNot Nothing Then
            If Not DetalleTipoDocumentos.RecepcionDocumento.Contains(Me) Then
                DetalleTipoDocumentos.RecepcionDocumento.Add(Me)
            End If

            DTD_ID = DetalleTipoDocumentos.DTD_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("DetalleTipoDocumentos") Is DetalleTipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("DetalleTipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTipoDocumentos", previousValue)
            End If
            If DetalleTipoDocumentos IsNot Nothing AndAlso Not DetalleTipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.RecepcionDocumento.Contains(Me) Then
            previousValue.RecepcionDocumento.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.RecepcionDocumento.Contains(Me) Then
                Personas.RecepcionDocumento.Add(Me)
            End If

            PER_ID_PROVEEDOR = Personas.PER_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas1(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.RecepcionDocumento1.Contains(Me) Then
            previousValue.RecepcionDocumento1.Remove(Me)
        End If

        If Personas1 IsNot Nothing Then
            If Not Personas1.RecepcionDocumento1.Contains(Me) Then
                Personas1.RecepcionDocumento1.Add(Me)
            End If

            PER_ID_RECIBIDO = Personas1.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_RECIBIDO = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas1") AndAlso
                ChangeTracker.OriginalValues("Personas1") Is Personas1 Then
                ChangeTracker.OriginalValues.Remove("Personas1")
            Else
                ChangeTracker.RecordOriginalValue("Personas1", previousValue)
            End If
            If Personas1 IsNot Nothing AndAlso Not Personas1.ChangeTracker.ChangeTrackingEnabled Then
                Personas1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupOrdenServicio(ByVal previousValue As OrdenServicio, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.RecepcionDocumento.Contains(Me) Then
            previousValue.RecepcionDocumento.Remove(Me)
        End If

        If OrdenServicio IsNot Nothing Then
            If Not OrdenServicio.RecepcionDocumento.Contains(Me) Then
                OrdenServicio.RecepcionDocumento.Add(Me)
            End If

            OSE_ID = OrdenServicio.OSE_ID
        ElseIf Not skipKeys Then
            OSE_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("OrdenServicio") AndAlso
                ChangeTracker.OriginalValues("OrdenServicio") Is OrdenServicio Then
                ChangeTracker.OriginalValues.Remove("OrdenServicio")
            Else
                ChangeTracker.RecordOriginalValue("OrdenServicio", previousValue)
            End If
            If OrdenServicio IsNot Nothing AndAlso Not OrdenServicio.ChangeTracker.ChangeTrackingEnabled Then
                OrdenServicio.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupOrdenCompra(ByVal previousValue As OrdenCompra, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.RecepcionDocumento.Contains(Me) Then
            previousValue.RecepcionDocumento.Remove(Me)
        End If

        If OrdenCompra IsNot Nothing Then
            If Not OrdenCompra.RecepcionDocumento.Contains(Me) Then
                OrdenCompra.RecepcionDocumento.Add(Me)
            End If

            OCO_ID = OrdenCompra.OCO_ID
        ElseIf Not skipKeys Then
            OCO_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("OrdenCompra") AndAlso
                ChangeTracker.OriginalValues("OrdenCompra") Is OrdenCompra Then
                ChangeTracker.OriginalValues.Remove("OrdenCompra")
            Else
                ChangeTracker.RecordOriginalValue("OrdenCompra", previousValue)
            End If
            If OrdenCompra IsNot Nothing AndAlso Not OrdenCompra.ChangeTracker.ChangeTrackingEnabled Then
                OrdenCompra.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
