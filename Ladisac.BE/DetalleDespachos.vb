'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Articulos))>
<KnownType(GetType(DetalleTipoDocumentos))>
<KnownType(GetType(TipoDocumentos))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(Despachos))>
<KnownType(GetType(DespachoSalidaDetalle))>
Partial Public Class DetalleDespachos
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared TDO_ID As string = "TDO_ID"
				public shared DTD_ID As string = "DTD_ID"
				public shared DDE_SERIE As string = "DDE_SERIE"
				public shared DDE_NUMERO As string = "DDE_NUMERO"
				public shared DDE_ITEM As string = "DDE_ITEM"
				public shared ART_ID_IMP As string = "ART_ID_IMP"
				public shared ART_ID_KAR As string = "ART_ID_KAR"
				public shared DDE_CANTIDAD As string = "DDE_CANTIDAD"
				public shared USU_ID As string = "USU_ID"
				public shared DDE_FEC_GRAB As string = "DDE_FEC_GRAB"
				public shared DDE_ESTADO As string = "DDE_ESTADO"
		    End Structure
	



    <DataMember()>
    Public Property TDO_ID() As String
        Get
            Return _tDO_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'TDO_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If TipoDocumentos IsNot Nothing AndAlso Not Equals(TipoDocumentos.TDO_ID, value) Then
                        TipoDocumentos = Nothing
                    End If
                    If Despachos IsNot Nothing AndAlso Not Equals(Despachos.TDO_ID, value) Then
                        Despachos = Nothing
                    End If
                End If
                _tDO_ID = value
                OnPropertyChanged("TDO_ID")
            End If
        End Set
    End Property

    Private _tDO_ID As String

    <DataMember()>
    Public Property DTD_ID() As String
        Get
            Return _dTD_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DTD_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If DetalleTipoDocumentos IsNot Nothing AndAlso Not Equals(DetalleTipoDocumentos.DTD_ID, value) Then
                        DetalleTipoDocumentos = Nothing
                    End If
                    If Despachos IsNot Nothing AndAlso Not Equals(Despachos.DTD_ID, value) Then
                        Despachos = Nothing
                    End If
                End If
                _dTD_ID = value
                OnPropertyChanged("DTD_ID")
            End If
        End Set
    End Property

    Private _dTD_ID As String

    <DataMember()>
    Public Property DDE_SERIE() As String
        Get
            Return _dDE_SERIE
        End Get
        Set(ByVal value As String)
            If Not Equals(_dDE_SERIE, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DDE_SERIE' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If Despachos IsNot Nothing AndAlso Not Equals(Despachos.DES_SERIE, value) Then
                        Despachos = Nothing
                    End If
                End If
                _dDE_SERIE = value
                OnPropertyChanged("DDE_SERIE")
            End If
        End Set
    End Property

    Private _dDE_SERIE As String

    <DataMember()>
    Public Property DDE_NUMERO() As String
        Get
            Return _dDE_NUMERO
        End Get
        Set(ByVal value As String)
            If Not Equals(_dDE_NUMERO, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DDE_NUMERO' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If Despachos IsNot Nothing AndAlso Not Equals(Despachos.DES_NUMERO, value) Then
                        Despachos = Nothing
                    End If
                End If
                _dDE_NUMERO = value
                OnPropertyChanged("DDE_NUMERO")
            End If
        End Set
    End Property

    Private _dDE_NUMERO As String

    <DataMember()>
    Public Property DDE_ITEM() As Decimal
        Get
            Return _dDE_ITEM
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dDE_ITEM, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DDE_ITEM' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _dDE_ITEM = value
                OnPropertyChanged("DDE_ITEM")
            End If
        End Set
    End Property

    Private _dDE_ITEM As Decimal

    <DataMember()>
    Public Property ART_ID_IMP() As String
        Get
            Return _aRT_ID_IMP
        End Get
        Set(ByVal value As String)
            If Not Equals(_aRT_ID_IMP, value) Then
                ChangeTracker.RecordOriginalValue("ART_ID_IMP", _aRT_ID_IMP)
                If Not IsDeserializing Then
                    If Articulos IsNot Nothing AndAlso Not Equals(Articulos.ART_ID, value) Then
                        Articulos = Nothing
                    End If
                End If
                _aRT_ID_IMP = value
                OnPropertyChanged("ART_ID_IMP")
            End If
        End Set
    End Property

    Private _aRT_ID_IMP As String

    <DataMember()>
    Public Property ART_ID_KAR() As String
        Get
            Return _aRT_ID_KAR
        End Get
        Set(ByVal value As String)
            If Not Equals(_aRT_ID_KAR, value) Then
                ChangeTracker.RecordOriginalValue("ART_ID_KAR", _aRT_ID_KAR)
                If Not IsDeserializing Then
                    If Articulos1 IsNot Nothing AndAlso Not Equals(Articulos1.ART_ID, value) Then
                        Articulos1 = Nothing
                    End If
                End If
                _aRT_ID_KAR = value
                OnPropertyChanged("ART_ID_KAR")
            End If
        End Set
    End Property

    Private _aRT_ID_KAR As String

    <DataMember()>
    Public Property DDE_CANTIDAD() As Decimal
        Get
            Return _dDE_CANTIDAD
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dDE_CANTIDAD, value) Then
                _dDE_CANTIDAD = value
                OnPropertyChanged("DDE_CANTIDAD")
            End If
        End Set
    End Property

    Private _dDE_CANTIDAD As Decimal

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property DDE_FEC_GRAB() As Date
        Get
            Return _dDE_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dDE_FEC_GRAB, value) Then
                _dDE_FEC_GRAB = value
                OnPropertyChanged("DDE_FEC_GRAB")
            End If
        End Set
    End Property

    Private _dDE_FEC_GRAB As Date

    <DataMember()>
    Public Property DDE_ESTADO() As Boolean
        Get
            Return _dDE_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_dDE_ESTADO, value) Then
                _dDE_ESTADO = value
                OnPropertyChanged("DDE_ESTADO")
            End If
        End Set
    End Property

    Private _dDE_ESTADO As Boolean

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property Articulos() As Articulos
        Get
            Return _articulos
        End Get
        Set(ByVal value As Articulos)
            If _articulos IsNot value Then
                Dim previousValue As Articulos = _articulos
                _articulos = value
                FixupArticulos(previousValue)
                OnNavigationPropertyChanged("Articulos")
            End If
        End Set
    End Property

    Private _articulos As Articulos


    <DataMember()>
    Public Property Articulos1() As Articulos
        Get
            Return _articulos1
        End Get
        Set(ByVal value As Articulos)
            If _articulos1 IsNot value Then
                Dim previousValue As Articulos = _articulos1
                _articulos1 = value
                FixupArticulos1(previousValue)
                OnNavigationPropertyChanged("Articulos1")
            End If
        End Set
    End Property

    Private _articulos1 As Articulos


    <DataMember()>
    Public Property DetalleTipoDocumentos() As DetalleTipoDocumentos
        Get
            Return _detalleTipoDocumentos
        End Get
        Set(ByVal value As DetalleTipoDocumentos)
            If _detalleTipoDocumentos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(DTD_ID, value.DTD_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As DetalleTipoDocumentos = _detalleTipoDocumentos
                _detalleTipoDocumentos = value
                FixupDetalleTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("DetalleTipoDocumentos")
            End If
        End Set
    End Property

    Private _detalleTipoDocumentos As DetalleTipoDocumentos


    <DataMember()>
    Public Property TipoDocumentos() As TipoDocumentos
        Get
            Return _tipoDocumentos
        End Get
        Set(ByVal value As TipoDocumentos)
            If _tipoDocumentos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(TDO_ID, value.TDO_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As TipoDocumentos = _tipoDocumentos
                _tipoDocumentos = value
                FixupTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("TipoDocumentos")
            End If
        End Set
    End Property

    Private _tipoDocumentos As TipoDocumentos


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property Despachos() As Despachos
        Get
            Return _despachos
        End Get
        Set(ByVal value As Despachos)
            If _despachos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(TDO_ID, value.TDO_ID) OrElse Not Equals(DTD_ID, value.DTD_ID) OrElse Not Equals(DDE_SERIE, value.DES_SERIE) OrElse Not Equals(DDE_NUMERO, value.DES_NUMERO) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As Despachos = _despachos
                _despachos = value
                FixupDespachos(previousValue)
                OnNavigationPropertyChanged("Despachos")
            End If
        End Set
    End Property

    Private _despachos As Despachos


    <DataMember()>
    Public Property DespachoSalidaDetalle() As TrackableCollection(Of DespachoSalidaDetalle)
        Get
            If _despachoSalidaDetalle Is Nothing Then
                _despachoSalidaDetalle = New TrackableCollection(Of DespachoSalidaDetalle)
                AddHandler _despachoSalidaDetalle.CollectionChanged, AddressOf FixupDespachoSalidaDetalle
            End If
            Return _despachoSalidaDetalle
        End Get
        Set(ByVal value As TrackableCollection(Of DespachoSalidaDetalle))
            If Not Object.ReferenceEquals(_despachoSalidaDetalle, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _despachoSalidaDetalle IsNot Nothing Then
                    RemoveHandler _despachoSalidaDetalle.CollectionChanged, AddressOf FixupDespachoSalidaDetalle
                End If
                _despachoSalidaDetalle = value
                If _despachoSalidaDetalle IsNot Nothing Then
                    AddHandler _despachoSalidaDetalle.CollectionChanged, AddressOf FixupDespachoSalidaDetalle
                End If
                OnNavigationPropertyChanged("DespachoSalidaDetalle")
            End If
        End Set
    End Property

    Private _despachoSalidaDetalle As TrackableCollection(Of DespachoSalidaDetalle)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociaci칩n que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesar치 notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Articulos = Nothing
        Articulos1 = Nothing
        DetalleTipoDocumentos = Nothing
        TipoDocumentos = Nothing
        Usuarios = Nothing
        Despachos = Nothing
        DespachoSalidaDetalle.Clear()
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupArticulos(ByVal previousValue As Articulos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleDespachos.Contains(Me) Then
            previousValue.DetalleDespachos.Remove(Me)
        End If

        If Articulos IsNot Nothing Then
            If Not Articulos.DetalleDespachos.Contains(Me) Then
                Articulos.DetalleDespachos.Add(Me)
            End If

            ART_ID_IMP = Articulos.ART_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Articulos") AndAlso
                ChangeTracker.OriginalValues("Articulos") Is Articulos Then
                ChangeTracker.OriginalValues.Remove("Articulos")
            Else
                ChangeTracker.RecordOriginalValue("Articulos", previousValue)
            End If
            If Articulos IsNot Nothing AndAlso Not Articulos.ChangeTracker.ChangeTrackingEnabled Then
                Articulos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupArticulos1(ByVal previousValue As Articulos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleDespachos1.Contains(Me) Then
            previousValue.DetalleDespachos1.Remove(Me)
        End If

        If Articulos1 IsNot Nothing Then
            If Not Articulos1.DetalleDespachos1.Contains(Me) Then
                Articulos1.DetalleDespachos1.Add(Me)
            End If

            ART_ID_KAR = Articulos1.ART_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Articulos1") AndAlso
                ChangeTracker.OriginalValues("Articulos1") Is Articulos1 Then
                ChangeTracker.OriginalValues.Remove("Articulos1")
            Else
                ChangeTracker.RecordOriginalValue("Articulos1", previousValue)
            End If
            If Articulos1 IsNot Nothing AndAlso Not Articulos1.ChangeTracker.ChangeTrackingEnabled Then
                Articulos1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleTipoDocumentos(ByVal previousValue As DetalleTipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleDespachos.Contains(Me) Then
            previousValue.DetalleDespachos.Remove(Me)
        End If

        If DetalleTipoDocumentos IsNot Nothing Then
            If Not DetalleTipoDocumentos.DetalleDespachos.Contains(Me) Then
                DetalleTipoDocumentos.DetalleDespachos.Add(Me)
            End If

            DTD_ID = DetalleTipoDocumentos.DTD_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("DetalleTipoDocumentos") Is DetalleTipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("DetalleTipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTipoDocumentos", previousValue)
            End If
            If DetalleTipoDocumentos IsNot Nothing AndAlso Not DetalleTipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoDocumentos(ByVal previousValue As TipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleDespachos.Contains(Me) Then
            previousValue.DetalleDespachos.Remove(Me)
        End If

        If TipoDocumentos IsNot Nothing Then
            If Not TipoDocumentos.DetalleDespachos.Contains(Me) Then
                TipoDocumentos.DetalleDespachos.Add(Me)
            End If

            TDO_ID = TipoDocumentos.TDO_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("TipoDocumentos") Is TipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("TipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("TipoDocumentos", previousValue)
            End If
            If TipoDocumentos IsNot Nothing AndAlso Not TipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                TipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDespachos(ByVal previousValue As Despachos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleDespachos.Contains(Me) Then
            previousValue.DetalleDespachos.Remove(Me)
        End If

        If Despachos IsNot Nothing Then
            If Not Despachos.DetalleDespachos.Contains(Me) Then
                Despachos.DetalleDespachos.Add(Me)
            End If

            TDO_ID = Despachos.TDO_ID
            DTD_ID = Despachos.DTD_ID
            DDE_SERIE = Despachos.DES_SERIE
            DDE_NUMERO = Despachos.DES_NUMERO
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Despachos") AndAlso
                ChangeTracker.OriginalValues("Despachos") Is Despachos Then
                ChangeTracker.OriginalValues.Remove("Despachos")
            Else
                ChangeTracker.RecordOriginalValue("Despachos", previousValue)
            End If
            If Despachos IsNot Nothing AndAlso Not Despachos.ChangeTracker.ChangeTrackingEnabled Then
                Despachos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDespachoSalidaDetalle(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DespachoSalidaDetalle In e.NewItems
                item.DetalleDespachos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DespachoSalidaDetalle", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DespachoSalidaDetalle In e.OldItems
                If ReferenceEquals(item.DetalleDespachos, Me) Then
                    item.DetalleDespachos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DespachoSalidaDetalle", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
