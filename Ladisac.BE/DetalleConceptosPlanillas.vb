'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(Conceptos))>
<KnownType(GetType(RolOpeCtaCte))>
Partial Public Class DetalleConceptosPlanillas
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared tit_TipoTrab_Id As string = "tit_TipoTrab_Id"
				public shared tip_TipoPlan_Id As string = "tip_TipoPlan_Id"
				public shared con_Conceptos_Id As string = "con_Conceptos_Id"
				public shared tic_TipoConcep_Id As string = "tic_TipoConcep_Id"
				public shared dcp_EsVariable As string = "dcp_EsVariable"
				public shared dcp_Formula As string = "dcp_Formula"
				public shared dcp_EsImprimibleSiempre As string = "dcp_EsImprimibleSiempre"
				public shared dcp_ColumnaImprime As string = "dcp_ColumnaImprime"
				public shared dcp_FilaImprime As string = "dcp_FilaImprime"
				public shared dcp_EsImprimibleMayorCero As string = "dcp_EsImprimibleMayorCero"
				public shared dcp_Factor As string = "dcp_Factor"
				public shared ItemConceptoPlanilla As string = "ItemConceptoPlanilla"
				public shared cct_Id As string = "cct_Id"
				public shared tdo_Id As string = "tdo_Id"
				public shared dtd_Id As string = "dtd_Id"
				public shared dcp_Activa As string = "dcp_Activa"
				public shared cuc_IdPasivo As string = "cuc_IdPasivo"
				public shared cuc_IdGasto As string = "cuc_IdGasto"
				public shared dcp_ItemDetConcPlan As string = "dcp_ItemDetConcPlan"
				public shared Usu_Id As string = "Usu_Id"
				public shared dcp_FecGrab As string = "dcp_FecGrab"
				public shared dcp_EsNetoAPagar As string = "dcp_EsNetoAPagar"
				public shared dcp_OrdenVista As string = "dcp_OrdenVista"
				public shared dcp_OrdenFila As string = "dcp_OrdenFila"
				public shared con_Conceptos_IdInternoPrint As string = "con_Conceptos_IdInternoPrint"
				public shared tic_TipoConcep_IdInternoPrint As string = "tic_TipoConcep_IdInternoPrint"
		    End Structure
	



    <DataMember()>
    Public Property tit_TipoTrab_Id() As String
        Get
            Return _tit_TipoTrab_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tit_TipoTrab_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'tit_TipoTrab_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _tit_TipoTrab_Id = value
                OnPropertyChanged("tit_TipoTrab_Id")
            End If
        End Set
    End Property

    Private _tit_TipoTrab_Id As String

    <DataMember()>
    Public Property tip_TipoPlan_Id() As String
        Get
            Return _tip_TipoPlan_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tip_TipoPlan_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'tip_TipoPlan_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _tip_TipoPlan_Id = value
                OnPropertyChanged("tip_TipoPlan_Id")
            End If
        End Set
    End Property

    Private _tip_TipoPlan_Id As String

    <DataMember()>
    Public Property con_Conceptos_Id() As String
        Get
            Return _con_Conceptos_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_con_Conceptos_Id, value) Then
                ChangeTracker.RecordOriginalValue("con_Conceptos_Id", _con_Conceptos_Id)
                If Not IsDeserializing Then
                    If Conceptos1 IsNot Nothing AndAlso Not Equals(Conceptos1.con_Conceptos_Id, value) Then
                        Conceptos1 = Nothing
                    End If
                End If
                _con_Conceptos_Id = value
                OnPropertyChanged("con_Conceptos_Id")
            End If
        End Set
    End Property

    Private _con_Conceptos_Id As String

    <DataMember()>
    Public Property tic_TipoConcep_Id() As String
        Get
            Return _tic_TipoConcep_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tic_TipoConcep_Id, value) Then
                ChangeTracker.RecordOriginalValue("tic_TipoConcep_Id", _tic_TipoConcep_Id)
                If Not IsDeserializing Then
                    If Conceptos1 IsNot Nothing AndAlso Not Equals(Conceptos1.tic_TipoConcep_Id, value) Then
                        Conceptos1 = Nothing
                    End If
                End If
                _tic_TipoConcep_Id = value
                OnPropertyChanged("tic_TipoConcep_Id")
            End If
        End Set
    End Property

    Private _tic_TipoConcep_Id As String

    <DataMember()>
    Public Property dcp_EsVariable() As Boolean
        Get
            Return _dcp_EsVariable
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_dcp_EsVariable, value) Then
                _dcp_EsVariable = value
                OnPropertyChanged("dcp_EsVariable")
            End If
        End Set
    End Property

    Private _dcp_EsVariable As Boolean

    <DataMember()>
    Public Property dcp_Formula() As String
        Get
            Return _dcp_Formula
        End Get
        Set(ByVal value As String)
            If Not Equals(_dcp_Formula, value) Then
                _dcp_Formula = value
                OnPropertyChanged("dcp_Formula")
            End If
        End Set
    End Property

    Private _dcp_Formula As String

    <DataMember()>
    Public Property dcp_EsImprimibleSiempre() As Boolean
        Get
            Return _dcp_EsImprimibleSiempre
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_dcp_EsImprimibleSiempre, value) Then
                _dcp_EsImprimibleSiempre = value
                OnPropertyChanged("dcp_EsImprimibleSiempre")
            End If
        End Set
    End Property

    Private _dcp_EsImprimibleSiempre As Boolean

    <DataMember()>
    Public Property dcp_ColumnaImprime() As Decimal
        Get
            Return _dcp_ColumnaImprime
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dcp_ColumnaImprime, value) Then
                _dcp_ColumnaImprime = value
                OnPropertyChanged("dcp_ColumnaImprime")
            End If
        End Set
    End Property

    Private _dcp_ColumnaImprime As Decimal

    <DataMember()>
    Public Property dcp_FilaImprime() As Decimal
        Get
            Return _dcp_FilaImprime
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dcp_FilaImprime, value) Then
                _dcp_FilaImprime = value
                OnPropertyChanged("dcp_FilaImprime")
            End If
        End Set
    End Property

    Private _dcp_FilaImprime As Decimal

    <DataMember()>
    Public Property dcp_EsImprimibleMayorCero() As Boolean
        Get
            Return _dcp_EsImprimibleMayorCero
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_dcp_EsImprimibleMayorCero, value) Then
                _dcp_EsImprimibleMayorCero = value
                OnPropertyChanged("dcp_EsImprimibleMayorCero")
            End If
        End Set
    End Property

    Private _dcp_EsImprimibleMayorCero As Boolean

    <DataMember()>
    Public Property dcp_Factor() As Decimal
        Get
            Return _dcp_Factor
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dcp_Factor, value) Then
                _dcp_Factor = value
                OnPropertyChanged("dcp_Factor")
            End If
        End Set
    End Property

    Private _dcp_Factor As Decimal

    <DataMember()>
    Public Property ItemConceptoPlanilla() As String
        Get
            Return _itemConceptoPlanilla
        End Get
        Set(ByVal value As String)
            If Not Equals(_itemConceptoPlanilla, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'ItemConceptoPlanilla' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _itemConceptoPlanilla = value
                OnPropertyChanged("ItemConceptoPlanilla")
            End If
        End Set
    End Property

    Private _itemConceptoPlanilla As String

    <DataMember()>
    Public Property cct_Id() As String
        Get
            Return _cct_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_cct_Id, value) Then
                ChangeTracker.RecordOriginalValue("cct_Id", _cct_Id)
                If Not IsDeserializing Then
                    If RolOpeCtaCte IsNot Nothing AndAlso Not Equals(RolOpeCtaCte.CCT_ID, value) Then
                        Dim previousValue As RolOpeCtaCte = _rolOpeCtaCte
                        _rolOpeCtaCte = Nothing
                        FixupRolOpeCtaCte(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("RolOpeCtaCte")
                    End If
                End If
                _cct_Id = value
                OnPropertyChanged("cct_Id")
            End If
        End Set
    End Property

    Private _cct_Id As String

    <DataMember()>
    Public Property tdo_Id() As String
        Get
            Return _tdo_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tdo_Id, value) Then
                ChangeTracker.RecordOriginalValue("tdo_Id", _tdo_Id)
                If Not IsDeserializing Then
                    If RolOpeCtaCte IsNot Nothing AndAlso Not Equals(RolOpeCtaCte.TDO_ID, value) Then
                        Dim previousValue As RolOpeCtaCte = _rolOpeCtaCte
                        _rolOpeCtaCte = Nothing
                        FixupRolOpeCtaCte(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("RolOpeCtaCte")
                    End If
                End If
                _tdo_Id = value
                OnPropertyChanged("tdo_Id")
            End If
        End Set
    End Property

    Private _tdo_Id As String

    <DataMember()>
    Public Property dtd_Id() As String
        Get
            Return _dtd_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_dtd_Id, value) Then
                ChangeTracker.RecordOriginalValue("dtd_Id", _dtd_Id)
                If Not IsDeserializing Then
                    If RolOpeCtaCte IsNot Nothing AndAlso Not Equals(RolOpeCtaCte.DTD_ID, value) Then
                        Dim previousValue As RolOpeCtaCte = _rolOpeCtaCte
                        _rolOpeCtaCte = Nothing
                        FixupRolOpeCtaCte(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("RolOpeCtaCte")
                    End If
                End If
                _dtd_Id = value
                OnPropertyChanged("dtd_Id")
            End If
        End Set
    End Property

    Private _dtd_Id As String

    <DataMember()>
    Public Property dcp_Activa() As Boolean
        Get
            Return _dcp_Activa
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_dcp_Activa, value) Then
                _dcp_Activa = value
                OnPropertyChanged("dcp_Activa")
            End If
        End Set
    End Property

    Private _dcp_Activa As Boolean

    <DataMember()>
    Public Property cuc_IdPasivo() As String
        Get
            Return _cuc_IdPasivo
        End Get
        Set(ByVal value As String)
            If Not Equals(_cuc_IdPasivo, value) Then
                _cuc_IdPasivo = value
                OnPropertyChanged("cuc_IdPasivo")
            End If
        End Set
    End Property

    Private _cuc_IdPasivo As String

    <DataMember()>
    Public Property cuc_IdGasto() As String
        Get
            Return _cuc_IdGasto
        End Get
        Set(ByVal value As String)
            If Not Equals(_cuc_IdGasto, value) Then
                _cuc_IdGasto = value
                OnPropertyChanged("cuc_IdGasto")
            End If
        End Set
    End Property

    Private _cuc_IdGasto As String

    '<DataMember()>
    'Public Property dcp_ItemDetConcPlan() As String
    '    Get
    '        Return _dcp_ItemDetConcPlan
    '    End Get
    '    Set(ByVal value As String)
    '        If Not Equals(_dcp_ItemDetConcPlan, value) Then
    '            If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
    '                Throw New InvalidOperationException("La propiedad 'dcp_ItemDetConcPlan' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
    '            End If
    '            _dcp_ItemDetConcPlan = value
    '            OnPropertyChanged("dcp_ItemDetConcPlan")
    '        End If
    '    End Set
    'End Property

    Private _dcp_ItemDetConcPlan As String

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                ChangeTracker.RecordOriginalValue("Usu_Id", _usu_Id)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property dcp_FecGrab() As Date
        Get
            Return _dcp_FecGrab
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dcp_FecGrab, value) Then
                _dcp_FecGrab = value
                OnPropertyChanged("dcp_FecGrab")
            End If
        End Set
    End Property

    Private _dcp_FecGrab As Date

    <DataMember()>
    Public Property dcp_EsNetoAPagar() As Nullable(Of Boolean)
        Get
            Return _dcp_EsNetoAPagar
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_dcp_EsNetoAPagar, value) Then
                _dcp_EsNetoAPagar = value
                OnPropertyChanged("dcp_EsNetoAPagar")
            End If
        End Set
    End Property

    Private _dcp_EsNetoAPagar As Nullable(Of Boolean)

    <DataMember()>
    Public Property dcp_OrdenVista() As Nullable(Of Integer)
        Get
            Return _dcp_OrdenVista
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_dcp_OrdenVista, value) Then
                _dcp_OrdenVista = value
                OnPropertyChanged("dcp_OrdenVista")
            End If
        End Set
    End Property

    Private _dcp_OrdenVista As Nullable(Of Integer)

    <DataMember()>
    Public Property dcp_OrdenFila() As Nullable(Of Integer)
        Get
            Return _dcp_OrdenFila
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_dcp_OrdenFila, value) Then
                _dcp_OrdenFila = value
                OnPropertyChanged("dcp_OrdenFila")
            End If
        End Set
    End Property

    Private _dcp_OrdenFila As Nullable(Of Integer)

    <DataMember()>
    Public Property con_Conceptos_IdInternoPrint() As String
        Get
            Return _con_Conceptos_IdInternoPrint
        End Get
        Set(ByVal value As String)
            If Not Equals(_con_Conceptos_IdInternoPrint, value) Then
                ChangeTracker.RecordOriginalValue("con_Conceptos_IdInternoPrint", _con_Conceptos_IdInternoPrint)
                If Not IsDeserializing Then
                    If Conceptos IsNot Nothing AndAlso Not Equals(Conceptos.con_Conceptos_Id, value) Then
                        Dim previousValue As Conceptos = _conceptos
                        _conceptos = Nothing
                        FixupConceptos(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("Conceptos")
                    End If
                End If
                _con_Conceptos_IdInternoPrint = value
                OnPropertyChanged("con_Conceptos_IdInternoPrint")
            End If
        End Set
    End Property

    Private _con_Conceptos_IdInternoPrint As String

    <DataMember()>
    Public Property tic_TipoConcep_IdInternoPrint() As String
        Get
            Return _tic_TipoConcep_IdInternoPrint
        End Get
        Set(ByVal value As String)
            If Not Equals(_tic_TipoConcep_IdInternoPrint, value) Then
                ChangeTracker.RecordOriginalValue("tic_TipoConcep_IdInternoPrint", _tic_TipoConcep_IdInternoPrint)
                If Not IsDeserializing Then
                    If Conceptos IsNot Nothing AndAlso Not Equals(Conceptos.tic_TipoConcep_Id, value) Then
                        Dim previousValue As Conceptos = _conceptos
                        _conceptos = Nothing
                        FixupConceptos(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("Conceptos")
                    End If
                End If
                _tic_TipoConcep_IdInternoPrint = value
                OnPropertyChanged("tic_TipoConcep_IdInternoPrint")
            End If
        End Set
    End Property

    Private _tic_TipoConcep_IdInternoPrint As String

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property Conceptos() As Conceptos
        Get
            Return _conceptos
        End Get
        Set(ByVal value As Conceptos)
            If _conceptos IsNot value Then
                Dim previousValue As Conceptos = _conceptos
                _conceptos = value
                FixupConceptos(previousValue)
                OnNavigationPropertyChanged("Conceptos")
            End If
        End Set
    End Property

    Private _conceptos As Conceptos


    <DataMember()>
    Public Property Conceptos1() As Conceptos
        Get
            Return _conceptos1
        End Get
        Set(ByVal value As Conceptos)
            If _conceptos1 IsNot value Then
                Dim previousValue As Conceptos = _conceptos1
                _conceptos1 = value
                FixupConceptos1(previousValue)
                OnNavigationPropertyChanged("Conceptos1")
            End If
        End Set
    End Property

    Private _conceptos1 As Conceptos


    <DataMember()>
    Public Property RolOpeCtaCte() As RolOpeCtaCte
        Get
            Return _rolOpeCtaCte
        End Get
        Set(ByVal value As RolOpeCtaCte)
            If _rolOpeCtaCte IsNot value Then
                Dim previousValue As RolOpeCtaCte = _rolOpeCtaCte
                _rolOpeCtaCte = value
                FixupRolOpeCtaCte(previousValue)
                OnNavigationPropertyChanged("RolOpeCtaCte")
            End If
        End Set
    End Property

    Private _rolOpeCtaCte As RolOpeCtaCte


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociaci칩n que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesar치 notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Usuarios = Nothing
        Conceptos = Nothing
        Conceptos1 = Nothing
        RolOpeCtaCte = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleConceptosPlanillas.Contains(Me) Then
            previousValue.DetalleConceptosPlanillas.Remove(Me)
        End If

        If Usuarios IsNot Nothing Then
            If Not Usuarios.DetalleConceptosPlanillas.Contains(Me) Then
                Usuarios.DetalleConceptosPlanillas.Add(Me)
            End If

            Usu_Id = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupConceptos(ByVal previousValue As Conceptos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleConceptosPlanillas.Contains(Me) Then
            previousValue.DetalleConceptosPlanillas.Remove(Me)
        End If

        If Conceptos IsNot Nothing Then
            If Not Conceptos.DetalleConceptosPlanillas.Contains(Me) Then
                Conceptos.DetalleConceptosPlanillas.Add(Me)
            End If

            con_Conceptos_IdInternoPrint = Conceptos.con_Conceptos_Id
            tic_TipoConcep_IdInternoPrint = Conceptos.tic_TipoConcep_Id
        ElseIf Not skipKeys Then
            con_Conceptos_IdInternoPrint = Nothing
            tic_TipoConcep_IdInternoPrint = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Conceptos") AndAlso
                ChangeTracker.OriginalValues("Conceptos") Is Conceptos Then
                ChangeTracker.OriginalValues.Remove("Conceptos")
            Else
                ChangeTracker.RecordOriginalValue("Conceptos", previousValue)
            End If
            If Conceptos IsNot Nothing AndAlso Not Conceptos.ChangeTracker.ChangeTrackingEnabled Then
                Conceptos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupConceptos1(ByVal previousValue As Conceptos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleConceptosPlanillas1.Contains(Me) Then
            previousValue.DetalleConceptosPlanillas1.Remove(Me)
        End If

        If Conceptos1 IsNot Nothing Then
            If Not Conceptos1.DetalleConceptosPlanillas1.Contains(Me) Then
                Conceptos1.DetalleConceptosPlanillas1.Add(Me)
            End If

            con_Conceptos_Id = Conceptos1.con_Conceptos_Id
            tic_TipoConcep_Id = Conceptos1.tic_TipoConcep_Id
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Conceptos1") AndAlso
                ChangeTracker.OriginalValues("Conceptos1") Is Conceptos1 Then
                ChangeTracker.OriginalValues.Remove("Conceptos1")
            Else
                ChangeTracker.RecordOriginalValue("Conceptos1", previousValue)
            End If
            If Conceptos1 IsNot Nothing AndAlso Not Conceptos1.ChangeTracker.ChangeTrackingEnabled Then
                Conceptos1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupRolOpeCtaCte(ByVal previousValue As RolOpeCtaCte, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleConceptosPlanillas.Contains(Me) Then
            previousValue.DetalleConceptosPlanillas.Remove(Me)
        End If

        If RolOpeCtaCte IsNot Nothing Then
            If Not RolOpeCtaCte.DetalleConceptosPlanillas.Contains(Me) Then
                RolOpeCtaCte.DetalleConceptosPlanillas.Add(Me)
            End If

            cct_Id = RolOpeCtaCte.CCT_ID
            tdo_Id = RolOpeCtaCte.TDO_ID
            dtd_Id = RolOpeCtaCte.DTD_ID
        ElseIf Not skipKeys Then
            cct_Id = Nothing
            tdo_Id = Nothing
            dtd_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("RolOpeCtaCte") AndAlso
                ChangeTracker.OriginalValues("RolOpeCtaCte") Is RolOpeCtaCte Then
                ChangeTracker.OriginalValues.Remove("RolOpeCtaCte")
            Else
                ChangeTracker.RecordOriginalValue("RolOpeCtaCte", previousValue)
            End If
            If RolOpeCtaCte IsNot Nothing AndAlso Not RolOpeCtaCte.ChangeTracker.ChangeTrackingEnabled Then
                RolOpeCtaCte.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
