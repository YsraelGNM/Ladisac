'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(TipoParada))>
Partial Public Class ParadasTipos
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared PAT_ID As string = "PAT_ID"
				public shared PAR_ID As string = "PAR_ID"
				public shared TPA_ID As string = "TPA_ID"
				public shared USU_ID As string = "USU_ID"
				public shared PAT_FEC_GRAB As string = "PAT_FEC_GRAB"
				public shared PAT_ESTADO As string = "PAT_ESTADO"
		    End Structure
	



    <DataMember()>
    Public Property PAT_ID() As Integer
        Get
            Return _pAT_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_pAT_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'PAT_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _pAT_ID = value
                OnPropertyChanged("PAT_ID")
            End If
        End Set
    End Property

    Private _pAT_ID As Integer

    <DataMember()>
    Public Property PAR_ID() As Nullable(Of Integer)
        Get
            Return _pAR_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_pAR_ID, value) Then
                ChangeTracker.RecordOriginalValue("PAR_ID", _pAR_ID)
                _pAR_ID = value
                OnPropertyChanged("PAR_ID")
            End If
        End Set
    End Property

    Private _pAR_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property TPA_ID() As Nullable(Of Integer)
        Get
            Return _tPA_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_tPA_ID, value) Then
                ChangeTracker.RecordOriginalValue("TPA_ID", _tPA_ID)
                If Not IsDeserializing Then
                    If TipoParada IsNot Nothing AndAlso Not Equals(TipoParada.TPA_ID, value) Then
                        TipoParada = Nothing
                    End If
                End If
                _tPA_ID = value
                OnPropertyChanged("TPA_ID")
            End If
        End Set
    End Property

    Private _tPA_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property PAT_FEC_GRAB() As Nullable(Of Date)
        Get
            Return _pAT_FEC_GRAB
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_pAT_FEC_GRAB, value) Then
                _pAT_FEC_GRAB = value
                OnPropertyChanged("PAT_FEC_GRAB")
            End If
        End Set
    End Property

    Private _pAT_FEC_GRAB As Nullable(Of Date)

    <DataMember()>
    Public Property PAT_ESTADO() As Nullable(Of Boolean)
        Get
            Return _pAT_ESTADO
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_pAT_ESTADO, value) Then
                _pAT_ESTADO = value
                OnPropertyChanged("PAT_ESTADO")
            End If
        End Set
    End Property

    Private _pAT_ESTADO As Nullable(Of Boolean)

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property TipoParada() As TipoParada
        Get
            Return _tipoParada
        End Get
        Set(ByVal value As TipoParada)
            If _tipoParada IsNot value Then
                Dim previousValue As TipoParada = _tipoParada
                _tipoParada = value
                FixupTipoParada(previousValue)
                OnNavigationPropertyChanged("TipoParada")
            End If
        End Set
    End Property

    Private _tipoParada As TipoParada


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        TipoParada = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupTipoParada(ByVal previousValue As TipoParada, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If TipoParada IsNot Nothing Then
            TPA_ID = TipoParada.TPA_ID
        ElseIf Not skipKeys Then
            TPA_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoParada") AndAlso
                ChangeTracker.OriginalValues("TipoParada") Is TipoParada Then
                ChangeTracker.OriginalValues.Remove("TipoParada")
            Else
                ChangeTracker.RecordOriginalValue("TipoParada", previousValue)
            End If
            If TipoParada IsNot Nothing AndAlso Not TipoParada.ChangeTracker.ChangeTrackingEnabled Then
                TipoParada.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
