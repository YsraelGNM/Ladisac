'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Planta))>
<KnownType(GetType(ControlPlantaDetalle))>
Partial Public Class ControlPlanta
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared CPL_ID As string = "CPL_ID"
				public shared CPL_FECHA As string = "CPL_FECHA"
				public shared PLA_ID As string = "PLA_ID"
				public shared USU_ID As string = "USU_ID"
				public shared CPL_FEC_GRAB As string = "CPL_FEC_GRAB"
				public shared CPL_ESTADO As string = "CPL_ESTADO"
		    End Structure
	



    <DataMember()>
    Public Property CPL_ID() As Integer
        Get
            Return _cPL_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_cPL_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'CPL_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _cPL_ID = value
                OnPropertyChanged("CPL_ID")
            End If
        End Set
    End Property

    Private _cPL_ID As Integer

    <DataMember()>
    Public Property CPL_FECHA() As Nullable(Of Date)
        Get
            Return _cPL_FECHA
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_cPL_FECHA, value) Then
                _cPL_FECHA = value
                OnPropertyChanged("CPL_FECHA")
            End If
        End Set
    End Property

    Private _cPL_FECHA As Nullable(Of Date)

    <DataMember()>
    Public Property PLA_ID() As Nullable(Of Integer)
        Get
            Return _pLA_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_pLA_ID, value) Then
                ChangeTracker.RecordOriginalValue("PLA_ID", _pLA_ID)
                If Not IsDeserializing Then
                    If Planta IsNot Nothing AndAlso Not Equals(Planta.PLA_ID, value) Then
                        Planta = Nothing
                    End If
                End If
                _pLA_ID = value
                OnPropertyChanged("PLA_ID")
            End If
        End Set
    End Property

    Private _pLA_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property CPL_FEC_GRAB() As Nullable(Of Date)
        Get
            Return _cPL_FEC_GRAB
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_cPL_FEC_GRAB, value) Then
                _cPL_FEC_GRAB = value
                OnPropertyChanged("CPL_FEC_GRAB")
            End If
        End Set
    End Property

    Private _cPL_FEC_GRAB As Nullable(Of Date)

    <DataMember()>
    Public Property CPL_ESTADO() As Nullable(Of Boolean)
        Get
            Return _cPL_ESTADO
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_cPL_ESTADO, value) Then
                _cPL_ESTADO = value
                OnPropertyChanged("CPL_ESTADO")
            End If
        End Set
    End Property

    Private _cPL_ESTADO As Nullable(Of Boolean)

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Planta() As Planta
        Get
            Return _planta
        End Get
        Set(ByVal value As Planta)
            If _planta IsNot value Then
                Dim previousValue As Planta = _planta
                _planta = value
                FixupPlanta(previousValue)
                OnNavigationPropertyChanged("Planta")
            End If
        End Set
    End Property

    Private _planta As Planta


    <DataMember()>
    Public Property ControlPlantaDetalle() As TrackableCollection(Of ControlPlantaDetalle)
        Get
            If _controlPlantaDetalle Is Nothing Then
                _controlPlantaDetalle = New TrackableCollection(Of ControlPlantaDetalle)
                AddHandler _controlPlantaDetalle.CollectionChanged, AddressOf FixupControlPlantaDetalle
            End If
            Return _controlPlantaDetalle
        End Get
        Set(ByVal value As TrackableCollection(Of ControlPlantaDetalle))
            If Not Object.ReferenceEquals(_controlPlantaDetalle, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _controlPlantaDetalle IsNot Nothing Then
                    RemoveHandler _controlPlantaDetalle.CollectionChanged, AddressOf FixupControlPlantaDetalle
                End If
                _controlPlantaDetalle = value
                If _controlPlantaDetalle IsNot Nothing Then
                    AddHandler _controlPlantaDetalle.CollectionChanged, AddressOf FixupControlPlantaDetalle
                End If
                OnNavigationPropertyChanged("ControlPlantaDetalle")
            End If
        End Set
    End Property

    Private _controlPlantaDetalle As TrackableCollection(Of ControlPlantaDetalle)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Planta = Nothing
        ControlPlantaDetalle.Clear()
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupPlanta(ByVal previousValue As Planta, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ControlPlanta.Contains(Me) Then
            previousValue.ControlPlanta.Remove(Me)
        End If

        If Planta IsNot Nothing Then
            If Not Planta.ControlPlanta.Contains(Me) Then
                Planta.ControlPlanta.Add(Me)
            End If

            PLA_ID = Planta.PLA_ID
        ElseIf Not skipKeys Then
            PLA_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Planta") AndAlso
                ChangeTracker.OriginalValues("Planta") Is Planta Then
                ChangeTracker.OriginalValues.Remove("Planta")
            Else
                ChangeTracker.RecordOriginalValue("Planta", previousValue)
            End If
            If Planta IsNot Nothing AndAlso Not Planta.ChangeTracker.ChangeTrackingEnabled Then
                Planta.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupControlPlantaDetalle(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As ControlPlantaDetalle In e.NewItems
                item.ControlPlanta = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("ControlPlantaDetalle", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As ControlPlantaDetalle In e.OldItems
                If ReferenceEquals(item.ControlPlanta, Me) Then
                    item.ControlPlanta = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("ControlPlantaDetalle", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
