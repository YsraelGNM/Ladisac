'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Articulos))>
<KnownType(GetType(DetalleListaPrecios))>
<KnownType(GetType(ListaPreciosArticulos))>
<KnownType(GetType(TipoVenta))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(Personas))>
<KnownType(GetType(DetalleDescuentoIncrementoTipoVentaPersonas))>
Partial Public Class DescuentoIncrementoTipoVentaPersonas
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared DTP_ID As string = "DTP_ID"
				public shared DTP_DESCRIPCION As string = "DTP_DESCRIPCION"
				public shared LPR_ID As string = "LPR_ID"
				public shared ART_ID As string = "ART_ID"
				public shared TIV_ID As string = "TIV_ID"
				public shared DTP_MONTO_TIV As string = "DTP_MONTO_TIV"
				public shared PER_ID As string = "PER_ID"
				public shared DTP_MONTO_PER As string = "DTP_MONTO_PER"
				public shared DTP_CRITERIO As string = "DTP_CRITERIO"
				public shared DTP_SUB_CRITERIO As string = "DTP_SUB_CRITERIO"
				public shared DTP_MONTO_MINIMO As string = "DTP_MONTO_MINIMO"
				public shared DTP_MONTO_MAXIMO As string = "DTP_MONTO_MAXIMO"
				public shared DTP_CANT_MINIMA As string = "DTP_CANT_MINIMA"
				public shared DTP_CANT_MAXIMA As string = "DTP_CANT_MAXIMA"
				public shared DTP_FEC_INI As string = "DTP_FEC_INI"
				public shared DTP_FEC_FIN As string = "DTP_FEC_FIN"
				public shared USU_ID As string = "USU_ID"
				public shared DTP_FEC_GRAB As string = "DTP_FEC_GRAB"
				public shared DTP_ESTADO As string = "DTP_ESTADO"
				public shared DTP_TIPO_DESC_INC As string = "DTP_TIPO_DESC_INC"
		    End Structure
	



    <DataMember()>
    Public Property DTP_ID() As String
        Get
            Return _dTP_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTP_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DTP_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _dTP_ID = value
                OnPropertyChanged("DTP_ID")
            End If
        End Set
    End Property

    Private _dTP_ID As String

    <DataMember()>
    Public Property DTP_DESCRIPCION() As String
        Get
            Return _dTP_DESCRIPCION
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTP_DESCRIPCION, value) Then
                _dTP_DESCRIPCION = value
                OnPropertyChanged("DTP_DESCRIPCION")
            End If
        End Set
    End Property

    Private _dTP_DESCRIPCION As String

    <DataMember()>
    Public Property LPR_ID() As String
        Get
            Return _lPR_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_lPR_ID, value) Then
                ChangeTracker.RecordOriginalValue("LPR_ID", _lPR_ID)
                If Not IsDeserializing Then
                    If DetalleListaPrecios IsNot Nothing AndAlso Not Equals(DetalleListaPrecios.LPR_ID, value) Then
                        Dim previousValue As DetalleListaPrecios = _detalleListaPrecios
                        _detalleListaPrecios = Nothing
                        FixupDetalleListaPrecios(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("DetalleListaPrecios")
                    End If
                    If ListaPreciosArticulos IsNot Nothing AndAlso Not Equals(ListaPreciosArticulos.LPR_ID, value) Then
                        ListaPreciosArticulos = Nothing
                    End If
                End If
                _lPR_ID = value
                OnPropertyChanged("LPR_ID")
            End If
        End Set
    End Property

    Private _lPR_ID As String

    <DataMember()>
    Public Property ART_ID() As String
        Get
            Return _aRT_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_aRT_ID, value) Then
                ChangeTracker.RecordOriginalValue("ART_ID", _aRT_ID)
                If Not IsDeserializing Then
                    If Articulos IsNot Nothing AndAlso Not Equals(Articulos.ART_ID, value) Then
                        Articulos = Nothing
                    End If
                    If DetalleListaPrecios IsNot Nothing AndAlso Not Equals(DetalleListaPrecios.ART_ID, value) Then
                        Dim previousValue As DetalleListaPrecios = _detalleListaPrecios
                        _detalleListaPrecios = Nothing
                        FixupDetalleListaPrecios(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("DetalleListaPrecios")
                    End If
                End If
                _aRT_ID = value
                OnPropertyChanged("ART_ID")
            End If
        End Set
    End Property

    Private _aRT_ID As String

    <DataMember()>
    Public Property TIV_ID() As String
        Get
            Return _tIV_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_tIV_ID, value) Then
                ChangeTracker.RecordOriginalValue("TIV_ID", _tIV_ID)
                If Not IsDeserializing Then
                    If TipoVenta IsNot Nothing AndAlso Not Equals(TipoVenta.TIV_ID, value) Then
                        TipoVenta = Nothing
                    End If
                End If
                _tIV_ID = value
                OnPropertyChanged("TIV_ID")
            End If
        End Set
    End Property

    Private _tIV_ID As String

    <DataMember()>
    Public Property DTP_MONTO_TIV() As Decimal
        Get
            Return _dTP_MONTO_TIV
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dTP_MONTO_TIV, value) Then
                _dTP_MONTO_TIV = value
                OnPropertyChanged("DTP_MONTO_TIV")
            End If
        End Set
    End Property

    Private _dTP_MONTO_TIV As Decimal

    <DataMember()>
    Public Property PER_ID() As String
        Get
            Return _pER_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID", _pER_ID)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID = value
                OnPropertyChanged("PER_ID")
            End If
        End Set
    End Property

    Private _pER_ID As String

    <DataMember()>
    Public Property DTP_MONTO_PER() As Nullable(Of Decimal)
        Get
            Return _dTP_MONTO_PER
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dTP_MONTO_PER, value) Then
                _dTP_MONTO_PER = value
                OnPropertyChanged("DTP_MONTO_PER")
            End If
        End Set
    End Property

    Private _dTP_MONTO_PER As Nullable(Of Decimal)

    <DataMember()>
    Public Property DTP_CRITERIO() As Boolean
        Get
            Return _dTP_CRITERIO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_dTP_CRITERIO, value) Then
                _dTP_CRITERIO = value
                OnPropertyChanged("DTP_CRITERIO")
            End If
        End Set
    End Property

    Private _dTP_CRITERIO As Boolean

    <DataMember()>
    Public Property DTP_SUB_CRITERIO() As Boolean
        Get
            Return _dTP_SUB_CRITERIO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_dTP_SUB_CRITERIO, value) Then
                _dTP_SUB_CRITERIO = value
                OnPropertyChanged("DTP_SUB_CRITERIO")
            End If
        End Set
    End Property

    Private _dTP_SUB_CRITERIO As Boolean

    <DataMember()>
    Public Property DTP_MONTO_MINIMO() As Decimal
        Get
            Return _dTP_MONTO_MINIMO
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dTP_MONTO_MINIMO, value) Then
                _dTP_MONTO_MINIMO = value
                OnPropertyChanged("DTP_MONTO_MINIMO")
            End If
        End Set
    End Property

    Private _dTP_MONTO_MINIMO As Decimal

    <DataMember()>
    Public Property DTP_MONTO_MAXIMO() As Decimal
        Get
            Return _dTP_MONTO_MAXIMO
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dTP_MONTO_MAXIMO, value) Then
                _dTP_MONTO_MAXIMO = value
                OnPropertyChanged("DTP_MONTO_MAXIMO")
            End If
        End Set
    End Property

    Private _dTP_MONTO_MAXIMO As Decimal

    <DataMember()>
    Public Property DTP_CANT_MINIMA() As Decimal
        Get
            Return _dTP_CANT_MINIMA
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dTP_CANT_MINIMA, value) Then
                _dTP_CANT_MINIMA = value
                OnPropertyChanged("DTP_CANT_MINIMA")
            End If
        End Set
    End Property

    Private _dTP_CANT_MINIMA As Decimal

    <DataMember()>
    Public Property DTP_CANT_MAXIMA() As Decimal
        Get
            Return _dTP_CANT_MAXIMA
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dTP_CANT_MAXIMA, value) Then
                _dTP_CANT_MAXIMA = value
                OnPropertyChanged("DTP_CANT_MAXIMA")
            End If
        End Set
    End Property

    Private _dTP_CANT_MAXIMA As Decimal

    <DataMember()>
    Public Property DTP_FEC_INI() As Nullable(Of Date)
        Get
            Return _dTP_FEC_INI
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_dTP_FEC_INI, value) Then
                _dTP_FEC_INI = value
                OnPropertyChanged("DTP_FEC_INI")
            End If
        End Set
    End Property

    Private _dTP_FEC_INI As Nullable(Of Date)

    <DataMember()>
    Public Property DTP_FEC_FIN() As Nullable(Of Date)
        Get
            Return _dTP_FEC_FIN
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_dTP_FEC_FIN, value) Then
                _dTP_FEC_FIN = value
                OnPropertyChanged("DTP_FEC_FIN")
            End If
        End Set
    End Property

    Private _dTP_FEC_FIN As Nullable(Of Date)

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property DTP_FEC_GRAB() As Date
        Get
            Return _dTP_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dTP_FEC_GRAB, value) Then
                _dTP_FEC_GRAB = value
                OnPropertyChanged("DTP_FEC_GRAB")
            End If
        End Set
    End Property

    Private _dTP_FEC_GRAB As Date

    <DataMember()>
    Public Property DTP_ESTADO() As Boolean
        Get
            Return _dTP_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_dTP_ESTADO, value) Then
                _dTP_ESTADO = value
                OnPropertyChanged("DTP_ESTADO")
            End If
        End Set
    End Property

    Private _dTP_ESTADO As Boolean

    <DataMember()>
    Public Property DTP_TIPO_DESC_INC() As Short
        Get
            Return _dTP_TIPO_DESC_INC
        End Get
        Set(ByVal value As Short)
            If Not Equals(_dTP_TIPO_DESC_INC, value) Then
                _dTP_TIPO_DESC_INC = value
                OnPropertyChanged("DTP_TIPO_DESC_INC")
            End If
        End Set
    End Property

    Private _dTP_TIPO_DESC_INC As Short

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property Articulos() As Articulos
        Get
            Return _articulos
        End Get
        Set(ByVal value As Articulos)
            If _articulos IsNot value Then
                Dim previousValue As Articulos = _articulos
                _articulos = value
                FixupArticulos(previousValue)
                OnNavigationPropertyChanged("Articulos")
            End If
        End Set
    End Property

    Private _articulos As Articulos


    <DataMember()>
    Public Property DetalleListaPrecios() As DetalleListaPrecios
        Get
            Return _detalleListaPrecios
        End Get
        Set(ByVal value As DetalleListaPrecios)
            If _detalleListaPrecios IsNot value Then
                Dim previousValue As DetalleListaPrecios = _detalleListaPrecios
                _detalleListaPrecios = value
                FixupDetalleListaPrecios(previousValue)
                OnNavigationPropertyChanged("DetalleListaPrecios")
            End If
        End Set
    End Property

    Private _detalleListaPrecios As DetalleListaPrecios


    <DataMember()>
    Public Property ListaPreciosArticulos() As ListaPreciosArticulos
        Get
            Return _listaPreciosArticulos
        End Get
        Set(ByVal value As ListaPreciosArticulos)
            If _listaPreciosArticulos IsNot value Then
                Dim previousValue As ListaPreciosArticulos = _listaPreciosArticulos
                _listaPreciosArticulos = value
                FixupListaPreciosArticulos(previousValue)
                OnNavigationPropertyChanged("ListaPreciosArticulos")
            End If
        End Set
    End Property

    Private _listaPreciosArticulos As ListaPreciosArticulos


    <DataMember()>
    Public Property TipoVenta() As TipoVenta
        Get
            Return _tipoVenta
        End Get
        Set(ByVal value As TipoVenta)
            If _tipoVenta IsNot value Then
                Dim previousValue As TipoVenta = _tipoVenta
                _tipoVenta = value
                FixupTipoVenta(previousValue)
                OnNavigationPropertyChanged("TipoVenta")
            End If
        End Set
    End Property

    Private _tipoVenta As TipoVenta


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property DetalleDescuentoIncrementoTipoVentaPersonas() As TrackableCollection(Of DetalleDescuentoIncrementoTipoVentaPersonas)
        Get
            If _detalleDescuentoIncrementoTipoVentaPersonas Is Nothing Then
                _detalleDescuentoIncrementoTipoVentaPersonas = New TrackableCollection(Of DetalleDescuentoIncrementoTipoVentaPersonas)
                AddHandler _detalleDescuentoIncrementoTipoVentaPersonas.CollectionChanged, AddressOf FixupDetalleDescuentoIncrementoTipoVentaPersonas
            End If
            Return _detalleDescuentoIncrementoTipoVentaPersonas
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleDescuentoIncrementoTipoVentaPersonas))
            If Not Object.ReferenceEquals(_detalleDescuentoIncrementoTipoVentaPersonas, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleDescuentoIncrementoTipoVentaPersonas IsNot Nothing Then
                    RemoveHandler _detalleDescuentoIncrementoTipoVentaPersonas.CollectionChanged, AddressOf FixupDetalleDescuentoIncrementoTipoVentaPersonas
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As DetalleDescuentoIncrementoTipoVentaPersonas In _detalleDescuentoIncrementoTipoVentaPersonas
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detalleDescuentoIncrementoTipoVentaPersonas = value
                If _detalleDescuentoIncrementoTipoVentaPersonas IsNot Nothing Then
                    AddHandler _detalleDescuentoIncrementoTipoVentaPersonas.CollectionChanged, AddressOf FixupDetalleDescuentoIncrementoTipoVentaPersonas
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As DetalleDescuentoIncrementoTipoVentaPersonas In _detalleDescuentoIncrementoTipoVentaPersonas
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetalleDescuentoIncrementoTipoVentaPersonas")
            End If
        End Set
    End Property

    Private _detalleDescuentoIncrementoTipoVentaPersonas As TrackableCollection(Of DetalleDescuentoIncrementoTipoVentaPersonas)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Articulos = Nothing
        DetalleListaPrecios = Nothing
        ListaPreciosArticulos = Nothing
        TipoVenta = Nothing
        Usuarios = Nothing
        Personas = Nothing
        DetalleDescuentoIncrementoTipoVentaPersonas.Clear()
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupArticulos(ByVal previousValue As Articulos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DescuentoIncrementoTipoVentaPersonas.Contains(Me) Then
            previousValue.DescuentoIncrementoTipoVentaPersonas.Remove(Me)
        End If

        If Articulos IsNot Nothing Then
            If Not Articulos.DescuentoIncrementoTipoVentaPersonas.Contains(Me) Then
                Articulos.DescuentoIncrementoTipoVentaPersonas.Add(Me)
            End If

            ART_ID = Articulos.ART_ID
        ElseIf Not skipKeys Then
            ART_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Articulos") AndAlso
                ChangeTracker.OriginalValues("Articulos") Is Articulos Then
                ChangeTracker.OriginalValues.Remove("Articulos")
            Else
                ChangeTracker.RecordOriginalValue("Articulos", previousValue)
            End If
            If Articulos IsNot Nothing AndAlso Not Articulos.ChangeTracker.ChangeTrackingEnabled Then
                Articulos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleListaPrecios(ByVal previousValue As DetalleListaPrecios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DescuentoIncrementoTipoVentaPersonas.Contains(Me) Then
            previousValue.DescuentoIncrementoTipoVentaPersonas.Remove(Me)
        End If

        If DetalleListaPrecios IsNot Nothing Then
            If Not DetalleListaPrecios.DescuentoIncrementoTipoVentaPersonas.Contains(Me) Then
                DetalleListaPrecios.DescuentoIncrementoTipoVentaPersonas.Add(Me)
            End If

            LPR_ID = DetalleListaPrecios.LPR_ID
            ART_ID = DetalleListaPrecios.ART_ID
        ElseIf Not skipKeys Then
            ART_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleListaPrecios") AndAlso
                ChangeTracker.OriginalValues("DetalleListaPrecios") Is DetalleListaPrecios Then
                ChangeTracker.OriginalValues.Remove("DetalleListaPrecios")
            Else
                ChangeTracker.RecordOriginalValue("DetalleListaPrecios", previousValue)
            End If
            If DetalleListaPrecios IsNot Nothing AndAlso Not DetalleListaPrecios.ChangeTracker.ChangeTrackingEnabled Then
                DetalleListaPrecios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupListaPreciosArticulos(ByVal previousValue As ListaPreciosArticulos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DescuentoIncrementoTipoVentaPersonas.Contains(Me) Then
            previousValue.DescuentoIncrementoTipoVentaPersonas.Remove(Me)
        End If

        If ListaPreciosArticulos IsNot Nothing Then
            If Not ListaPreciosArticulos.DescuentoIncrementoTipoVentaPersonas.Contains(Me) Then
                ListaPreciosArticulos.DescuentoIncrementoTipoVentaPersonas.Add(Me)
            End If

            LPR_ID = ListaPreciosArticulos.LPR_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("ListaPreciosArticulos") AndAlso
                ChangeTracker.OriginalValues("ListaPreciosArticulos") Is ListaPreciosArticulos Then
                ChangeTracker.OriginalValues.Remove("ListaPreciosArticulos")
            Else
                ChangeTracker.RecordOriginalValue("ListaPreciosArticulos", previousValue)
            End If
            If ListaPreciosArticulos IsNot Nothing AndAlso Not ListaPreciosArticulos.ChangeTracker.ChangeTrackingEnabled Then
                ListaPreciosArticulos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoVenta(ByVal previousValue As TipoVenta)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DescuentoIncrementoTipoVentaPersonas.Contains(Me) Then
            previousValue.DescuentoIncrementoTipoVentaPersonas.Remove(Me)
        End If

        If TipoVenta IsNot Nothing Then
            If Not TipoVenta.DescuentoIncrementoTipoVentaPersonas.Contains(Me) Then
                TipoVenta.DescuentoIncrementoTipoVentaPersonas.Add(Me)
            End If

            TIV_ID = TipoVenta.TIV_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoVenta") AndAlso
                ChangeTracker.OriginalValues("TipoVenta") Is TipoVenta Then
                ChangeTracker.OriginalValues.Remove("TipoVenta")
            Else
                ChangeTracker.RecordOriginalValue("TipoVenta", previousValue)
            End If
            If TipoVenta IsNot Nothing AndAlso Not TipoVenta.ChangeTracker.ChangeTrackingEnabled Then
                TipoVenta.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DescuentoIncrementoTipoVentaPersonas.Contains(Me) Then
            previousValue.DescuentoIncrementoTipoVentaPersonas.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.DescuentoIncrementoTipoVentaPersonas.Contains(Me) Then
                Personas.DescuentoIncrementoTipoVentaPersonas.Add(Me)
            End If

            PER_ID = Personas.PER_ID
        ElseIf Not skipKeys Then
            PER_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleDescuentoIncrementoTipoVentaPersonas(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleDescuentoIncrementoTipoVentaPersonas In e.NewItems
                item.DescuentoIncrementoTipoVentaPersonas = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleDescuentoIncrementoTipoVentaPersonas", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleDescuentoIncrementoTipoVentaPersonas In e.OldItems
                If ReferenceEquals(item.DescuentoIncrementoTipoVentaPersonas, Me) Then
                    item.DescuentoIncrementoTipoVentaPersonas = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleDescuentoIncrementoTipoVentaPersonas", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

#End Region
End Class
