'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(CentroCostos))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(AreaTrabajos))>
<KnownType(GetType(CentroRiesgo))>
<KnownType(GetType(ConceptosTrabajador))>
<KnownType(GetType(ConvenioDobleTributacion))>
<KnownType(GetType(CronogramaVacaciones))>
<KnownType(GetType(NivelEducacion))>
<KnownType(GetType(Periodisidad))>
<KnownType(GetType(RegimenPensionario))>
<KnownType(GetType(SituacionEspecialTrabajador))>
<KnownType(GetType(SituacionTrabajador))>
<KnownType(GetType(TiposCargos))>
<KnownType(GetType(TiposContratos))>
<KnownType(GetType(TiposTrabajador))>
<KnownType(GetType(DetallePlanillas))>
<KnownType(GetType(TesoreriaPlanillas))>
<KnownType(GetType(PeriodoLaboral))>
<KnownType(GetType(EstadoCivil))>
<KnownType(GetType(Personas))>
<KnownType(GetType(PlanillaTrabajador))>
<KnownType(GetType(DatosLaboralesHorario))>
Partial Public Class DatosLaborales
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared tis_TipCargo_Id As string = "tis_TipCargo_Id"
				public shared rel_RegLaboral_Id As string = "rel_RegLaboral_Id"
				public shared art_AreaTrab_Id As string = "art_AreaTrab_Id"
				public shared nie_NiveEduc_Id As string = "nie_NiveEduc_Id"
				public shared sit_SituaTrab_Id As string = "sit_SituaTrab_Id"
				public shared set_SituEspe_Id As string = "set_SituEspe_Id"
				public shared pec_Periodisidad_Id As string = "pec_Periodisidad_Id"
				public shared cod_DobleTribu_Id As string = "cod_DobleTribu_Id"
				public shared cco_Id As string = "cco_Id"
				public shared tit_TipoTrab_Id As string = "tit_TipoTrab_Id"
				public shared rep_RegiPension_id As string = "rep_RegiPension_id"
				public shared dal_Sexo As string = "dal_Sexo"
				public shared dal_FechaNacimiento As string = "dal_FechaNacimiento"
				public shared dal_FechaInscripcionRegimen As string = "dal_FechaInscripcionRegimen"
				public shared dal_Cuspp As string = "dal_Cuspp"
				public shared dal_CodigoGeneradoEssalud As string = "dal_CodigoGeneradoEssalud"
				public shared dal_NumeroCuentabancoRenumeracion As string = "dal_NumeroCuentabancoRenumeracion"
				public shared dal_NumeroCuentaBancoCTS As string = "dal_NumeroCuentaBancoCTS"
				public shared dal_EsAsignacionFamiliar As string = "dal_EsAsignacionFamiliar"
				public shared per_Id As string = "per_Id"
				public shared dal_Observaciones As string = "dal_Observaciones"
				public shared ccc_IdCuentaCorrienteRenumeracion As string = "ccc_IdCuentaCorrienteRenumeracion"
				public shared ccc_IdCuentaCorrienteCTs As string = "ccc_IdCuentaCorrienteCTs"
				public shared tic_TipoCont_Id As string = "tic_TipoCont_Id"
				public shared dal_EsTrabajadorPlanillas As string = "dal_EsTrabajadorPlanillas"
				public shared dal_CodigoTrabajador As string = "dal_CodigoTrabajador"
				public shared dal_EsExportadoPDT As string = "dal_EsExportadoPDT"
				public shared Usu_Id As string = "Usu_Id"
				public shared dal_FecGrab As string = "dal_FecGrab"
				public shared dal_AfectoQuinta As string = "dal_AfectoQuinta"
				public shared cer_ID As string = "cer_ID"
				public shared dal_FechaIngreso As string = "dal_FechaIngreso"
				public shared dal_FechaCese As string = "dal_FechaCese"
				public shared dal_EstadoCivil As string = "dal_EstadoCivil"
				public shared dal_HoraMes As string = "dal_HoraMes"
				public shared dal_HoraRrefrigerio As string = "dal_HoraRrefrigerio"
				public shared dal_HoraFijaExtra As string = "dal_HoraFijaExtra"
				public shared dal_Imagen As string = "dal_Imagen"
				public shared ttr_DestajoTrabajadorPll As string = "ttr_DestajoTrabajadorPll"
		    End Structure
	



    <DataMember()>
    Public Property tis_TipCargo_Id() As String
        Get
            Return _tis_TipCargo_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tis_TipCargo_Id, value) Then
                ChangeTracker.RecordOriginalValue("tis_TipCargo_Id", _tis_TipCargo_Id)
                If Not IsDeserializing Then
                    If TiposCargos IsNot Nothing AndAlso Not Equals(TiposCargos.tis_TipCargo_Id, value) Then
                        TiposCargos = Nothing
                    End If
                End If
                _tis_TipCargo_Id = value
                OnPropertyChanged("tis_TipCargo_Id")
            End If
        End Set
    End Property

    Private _tis_TipCargo_Id As String

    <DataMember()>
    Public Property rel_RegLaboral_Id() As String
        Get
            Return _rel_RegLaboral_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_rel_RegLaboral_Id, value) Then
                _rel_RegLaboral_Id = value
                OnPropertyChanged("rel_RegLaboral_Id")
            End If
        End Set
    End Property

    Private _rel_RegLaboral_Id As String

    <DataMember()>
    Public Property art_AreaTrab_Id() As String
        Get
            Return _art_AreaTrab_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_art_AreaTrab_Id, value) Then
                ChangeTracker.RecordOriginalValue("art_AreaTrab_Id", _art_AreaTrab_Id)
                If Not IsDeserializing Then
                    If AreaTrabajos IsNot Nothing AndAlso Not Equals(AreaTrabajos.art_AreaTrab_Id, value) Then
                        AreaTrabajos = Nothing
                    End If
                End If
                _art_AreaTrab_Id = value
                OnPropertyChanged("art_AreaTrab_Id")
            End If
        End Set
    End Property

    Private _art_AreaTrab_Id As String

    <DataMember()>
    Public Property nie_NiveEduc_Id() As String
        Get
            Return _nie_NiveEduc_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_nie_NiveEduc_Id, value) Then
                ChangeTracker.RecordOriginalValue("nie_NiveEduc_Id", _nie_NiveEduc_Id)
                If Not IsDeserializing Then
                    If NivelEducacion IsNot Nothing AndAlso Not Equals(NivelEducacion.nie_NiveEduc_Id, value) Then
                        NivelEducacion = Nothing
                    End If
                End If
                _nie_NiveEduc_Id = value
                OnPropertyChanged("nie_NiveEduc_Id")
            End If
        End Set
    End Property

    Private _nie_NiveEduc_Id As String

    <DataMember()>
    Public Property sit_SituaTrab_Id() As String
        Get
            Return _sit_SituaTrab_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_sit_SituaTrab_Id, value) Then
                ChangeTracker.RecordOriginalValue("sit_SituaTrab_Id", _sit_SituaTrab_Id)
                If Not IsDeserializing Then
                    If SituacionTrabajador IsNot Nothing AndAlso Not Equals(SituacionTrabajador.sit_SituaTrab_Id, value) Then
                        SituacionTrabajador = Nothing
                    End If
                End If
                _sit_SituaTrab_Id = value
                OnPropertyChanged("sit_SituaTrab_Id")
            End If
        End Set
    End Property

    Private _sit_SituaTrab_Id As String

    <DataMember()>
    Public Property set_SituEspe_Id() As String
        Get
            Return _set_SituEspe_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_set_SituEspe_Id, value) Then
                ChangeTracker.RecordOriginalValue("set_SituEspe_Id", _set_SituEspe_Id)
                If Not IsDeserializing Then
                    If SituacionEspecialTrabajador IsNot Nothing AndAlso Not Equals(SituacionEspecialTrabajador.set_SituEspe_Id, value) Then
                        SituacionEspecialTrabajador = Nothing
                    End If
                End If
                _set_SituEspe_Id = value
                OnPropertyChanged("set_SituEspe_Id")
            End If
        End Set
    End Property

    Private _set_SituEspe_Id As String

    <DataMember()>
    Public Property pec_Periodisidad_Id() As String
        Get
            Return _pec_Periodisidad_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_pec_Periodisidad_Id, value) Then
                ChangeTracker.RecordOriginalValue("pec_Periodisidad_Id", _pec_Periodisidad_Id)
                If Not IsDeserializing Then
                    If Periodisidad IsNot Nothing AndAlso Not Equals(Periodisidad.pec_Periodisidad_Id, value) Then
                        Periodisidad = Nothing
                    End If
                End If
                _pec_Periodisidad_Id = value
                OnPropertyChanged("pec_Periodisidad_Id")
            End If
        End Set
    End Property

    Private _pec_Periodisidad_Id As String

    <DataMember()>
    Public Property cod_DobleTribu_Id() As String
        Get
            Return _cod_DobleTribu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_cod_DobleTribu_Id, value) Then
                ChangeTracker.RecordOriginalValue("cod_DobleTribu_Id", _cod_DobleTribu_Id)
                If Not IsDeserializing Then
                    If ConvenioDobleTributacion IsNot Nothing AndAlso Not Equals(ConvenioDobleTributacion.cod_DobleTribu_Id, value) Then
                        ConvenioDobleTributacion = Nothing
                    End If
                End If
                _cod_DobleTribu_Id = value
                OnPropertyChanged("cod_DobleTribu_Id")
            End If
        End Set
    End Property

    Private _cod_DobleTribu_Id As String

    <DataMember()>
    Public Property cco_Id() As String
        Get
            Return _cco_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_cco_Id, value) Then
                ChangeTracker.RecordOriginalValue("cco_Id", _cco_Id)
                If Not IsDeserializing Then
                    If CentroCostos IsNot Nothing AndAlso Not Equals(CentroCostos.CCO_ID, value) Then
                        CentroCostos = Nothing
                    End If
                End If
                _cco_Id = value
                OnPropertyChanged("cco_Id")
            End If
        End Set
    End Property

    Private _cco_Id As String

    <DataMember()>
    Public Property tit_TipoTrab_Id() As String
        Get
            Return _tit_TipoTrab_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tit_TipoTrab_Id, value) Then
                ChangeTracker.RecordOriginalValue("tit_TipoTrab_Id", _tit_TipoTrab_Id)
                If Not IsDeserializing Then
                    If TiposTrabajador IsNot Nothing AndAlso Not Equals(TiposTrabajador.tit_TipoTrab_Id, value) Then
                        TiposTrabajador = Nothing
                    End If
                End If
                _tit_TipoTrab_Id = value
                OnPropertyChanged("tit_TipoTrab_Id")
            End If
        End Set
    End Property

    Private _tit_TipoTrab_Id As String

    <DataMember()>
    Public Property rep_RegiPension_id() As String
        Get
            Return _rep_RegiPension_id
        End Get
        Set(ByVal value As String)
            If Not Equals(_rep_RegiPension_id, value) Then
                ChangeTracker.RecordOriginalValue("rep_RegiPension_id", _rep_RegiPension_id)
                If Not IsDeserializing Then
                    If RegimenPensionario IsNot Nothing AndAlso Not Equals(RegimenPensionario.rep_RegiPension_id, value) Then
                        RegimenPensionario = Nothing
                    End If
                End If
                _rep_RegiPension_id = value
                OnPropertyChanged("rep_RegiPension_id")
            End If
        End Set
    End Property

    Private _rep_RegiPension_id As String

    <DataMember()>
    Public Property dal_Sexo() As String
        Get
            Return _dal_Sexo
        End Get
        Set(ByVal value As String)
            If Not Equals(_dal_Sexo, value) Then
                _dal_Sexo = value
                OnPropertyChanged("dal_Sexo")
            End If
        End Set
    End Property

    Private _dal_Sexo As String

    <DataMember()>
    Public Property dal_FechaNacimiento() As Date
        Get
            Return _dal_FechaNacimiento
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dal_FechaNacimiento, value) Then
                _dal_FechaNacimiento = value
                OnPropertyChanged("dal_FechaNacimiento")
            End If
        End Set
    End Property

    Private _dal_FechaNacimiento As Date

    <DataMember()>
    Public Property dal_FechaInscripcionRegimen() As Date
        Get
            Return _dal_FechaInscripcionRegimen
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dal_FechaInscripcionRegimen, value) Then
                _dal_FechaInscripcionRegimen = value
                OnPropertyChanged("dal_FechaInscripcionRegimen")
            End If
        End Set
    End Property

    Private _dal_FechaInscripcionRegimen As Date

    <DataMember()>
    Public Property dal_Cuspp() As String
        Get
            Return _dal_Cuspp
        End Get
        Set(ByVal value As String)
            If Not Equals(_dal_Cuspp, value) Then
                _dal_Cuspp = value
                OnPropertyChanged("dal_Cuspp")
            End If
        End Set
    End Property

    Private _dal_Cuspp As String

    <DataMember()>
    Public Property dal_CodigoGeneradoEssalud() As String
        Get
            Return _dal_CodigoGeneradoEssalud
        End Get
        Set(ByVal value As String)
            If Not Equals(_dal_CodigoGeneradoEssalud, value) Then
                _dal_CodigoGeneradoEssalud = value
                OnPropertyChanged("dal_CodigoGeneradoEssalud")
            End If
        End Set
    End Property

    Private _dal_CodigoGeneradoEssalud As String

    <DataMember()>
    Public Property dal_NumeroCuentabancoRenumeracion() As String
        Get
            Return _dal_NumeroCuentabancoRenumeracion
        End Get
        Set(ByVal value As String)
            If Not Equals(_dal_NumeroCuentabancoRenumeracion, value) Then
                _dal_NumeroCuentabancoRenumeracion = value
                OnPropertyChanged("dal_NumeroCuentabancoRenumeracion")
            End If
        End Set
    End Property

    Private _dal_NumeroCuentabancoRenumeracion As String

    <DataMember()>
    Public Property dal_NumeroCuentaBancoCTS() As String
        Get
            Return _dal_NumeroCuentaBancoCTS
        End Get
        Set(ByVal value As String)
            If Not Equals(_dal_NumeroCuentaBancoCTS, value) Then
                _dal_NumeroCuentaBancoCTS = value
                OnPropertyChanged("dal_NumeroCuentaBancoCTS")
            End If
        End Set
    End Property

    Private _dal_NumeroCuentaBancoCTS As String

    <DataMember()>
    Public Property dal_EsAsignacionFamiliar() As Boolean
        Get
            Return _dal_EsAsignacionFamiliar
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_dal_EsAsignacionFamiliar, value) Then
                _dal_EsAsignacionFamiliar = value
                OnPropertyChanged("dal_EsAsignacionFamiliar")
            End If
        End Set
    End Property

    Private _dal_EsAsignacionFamiliar As Boolean

    <DataMember()>
    Public Property per_Id() As String
        Get
            Return _per_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_per_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'per_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _per_Id = value
                OnPropertyChanged("per_Id")
            End If
        End Set
    End Property

    Private _per_Id As String

    <DataMember()>
    Public Property dal_Observaciones() As String
        Get
            Return _dal_Observaciones
        End Get
        Set(ByVal value As String)
            If Not Equals(_dal_Observaciones, value) Then
                _dal_Observaciones = value
                OnPropertyChanged("dal_Observaciones")
            End If
        End Set
    End Property

    Private _dal_Observaciones As String

    <DataMember()>
    Public Property ccc_IdCuentaCorrienteRenumeracion() As String
        Get
            Return _ccc_IdCuentaCorrienteRenumeracion
        End Get
        Set(ByVal value As String)
            If Not Equals(_ccc_IdCuentaCorrienteRenumeracion, value) Then
                ChangeTracker.RecordOriginalValue("ccc_IdCuentaCorrienteRenumeracion", _ccc_IdCuentaCorrienteRenumeracion)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _ccc_IdCuentaCorrienteRenumeracion = value
                OnPropertyChanged("ccc_IdCuentaCorrienteRenumeracion")
            End If
        End Set
    End Property

    Private _ccc_IdCuentaCorrienteRenumeracion As String

    <DataMember()>
    Public Property ccc_IdCuentaCorrienteCTs() As String
        Get
            Return _ccc_IdCuentaCorrienteCTs
        End Get
        Set(ByVal value As String)
            If Not Equals(_ccc_IdCuentaCorrienteCTs, value) Then
                ChangeTracker.RecordOriginalValue("ccc_IdCuentaCorrienteCTs", _ccc_IdCuentaCorrienteCTs)
                If Not IsDeserializing Then
                    If Personas1 IsNot Nothing AndAlso Not Equals(Personas1.PER_ID, value) Then
                        Personas1 = Nothing
                    End If
                End If
                _ccc_IdCuentaCorrienteCTs = value
                OnPropertyChanged("ccc_IdCuentaCorrienteCTs")
            End If
        End Set
    End Property

    Private _ccc_IdCuentaCorrienteCTs As String

    <DataMember()>
    Public Property tic_TipoCont_Id() As String
        Get
            Return _tic_TipoCont_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tic_TipoCont_Id, value) Then
                ChangeTracker.RecordOriginalValue("tic_TipoCont_Id", _tic_TipoCont_Id)
                If Not IsDeserializing Then
                    If TiposContratos IsNot Nothing AndAlso Not Equals(TiposContratos.tic_TipoCont_Id, value) Then
                        TiposContratos = Nothing
                    End If
                End If
                _tic_TipoCont_Id = value
                OnPropertyChanged("tic_TipoCont_Id")
            End If
        End Set
    End Property

    Private _tic_TipoCont_Id As String

    <DataMember()>
    Public Property dal_EsTrabajadorPlanillas() As Boolean
        Get
            Return _dal_EsTrabajadorPlanillas
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_dal_EsTrabajadorPlanillas, value) Then
                _dal_EsTrabajadorPlanillas = value
                OnPropertyChanged("dal_EsTrabajadorPlanillas")
            End If
        End Set
    End Property

    Private _dal_EsTrabajadorPlanillas As Boolean

    <DataMember()>
    Public Property dal_CodigoTrabajador() As String
        Get
            Return _dal_CodigoTrabajador
        End Get
        Set(ByVal value As String)
            If Not Equals(_dal_CodigoTrabajador, value) Then
                _dal_CodigoTrabajador = value
                OnPropertyChanged("dal_CodigoTrabajador")
            End If
        End Set
    End Property

    Private _dal_CodigoTrabajador As String

    <DataMember()>
    Public Property dal_EsExportadoPDT() As Nullable(Of Boolean)
        Get
            Return _dal_EsExportadoPDT
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_dal_EsExportadoPDT, value) Then
                _dal_EsExportadoPDT = value
                OnPropertyChanged("dal_EsExportadoPDT")
            End If
        End Set
    End Property

    Private _dal_EsExportadoPDT As Nullable(Of Boolean)

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                ChangeTracker.RecordOriginalValue("Usu_Id", _usu_Id)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property dal_FecGrab() As Date
        Get
            Return _dal_FecGrab
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dal_FecGrab, value) Then
                _dal_FecGrab = value
                OnPropertyChanged("dal_FecGrab")
            End If
        End Set
    End Property

    Private _dal_FecGrab As Date

    <DataMember()>
    Public Property dal_AfectoQuinta() As Nullable(Of Boolean)
        Get
            Return _dal_AfectoQuinta
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_dal_AfectoQuinta, value) Then
                _dal_AfectoQuinta = value
                OnPropertyChanged("dal_AfectoQuinta")
            End If
        End Set
    End Property

    Private _dal_AfectoQuinta As Nullable(Of Boolean)

    <DataMember()>
    Public Property cer_ID() As String
        Get
            Return _cer_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cer_ID, value) Then
                ChangeTracker.RecordOriginalValue("cer_ID", _cer_ID)
                If Not IsDeserializing Then
                    If CentroRiesgo IsNot Nothing AndAlso Not Equals(CentroRiesgo.cer_ID, value) Then
                        CentroRiesgo = Nothing
                    End If
                End If
                _cer_ID = value
                OnPropertyChanged("cer_ID")
            End If
        End Set
    End Property

    Private _cer_ID As String

    <DataMember()>
    Public Property dal_FechaIngreso() As Nullable(Of Date)
        Get
            Return _dal_FechaIngreso
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_dal_FechaIngreso, value) Then
                _dal_FechaIngreso = value
                OnPropertyChanged("dal_FechaIngreso")
            End If
        End Set
    End Property

    Private _dal_FechaIngreso As Nullable(Of Date)

    <DataMember()>
    Public Property dal_FechaCese() As Nullable(Of Date)
        Get
            Return _dal_FechaCese
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_dal_FechaCese, value) Then
                _dal_FechaCese = value
                OnPropertyChanged("dal_FechaCese")
            End If
        End Set
    End Property

    Private _dal_FechaCese As Nullable(Of Date)

    <DataMember()>
    Public Property dal_EstadoCivil() As String
        Get
            Return _dal_EstadoCivil
        End Get
        Set(ByVal value As String)
            If Not Equals(_dal_EstadoCivil, value) Then
                ChangeTracker.RecordOriginalValue("dal_EstadoCivil", _dal_EstadoCivil)
                If Not IsDeserializing Then
                    If EstadoCivil IsNot Nothing AndAlso Not Equals(EstadoCivil.ecv_Id, value) Then
                        EstadoCivil = Nothing
                    End If
                End If
                _dal_EstadoCivil = value
                OnPropertyChanged("dal_EstadoCivil")
            End If
        End Set
    End Property

    Private _dal_EstadoCivil As String

    <DataMember()>
    Public Property dal_HoraMes() As Nullable(Of Decimal)
        Get
            Return _dal_HoraMes
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dal_HoraMes, value) Then
                _dal_HoraMes = value
                OnPropertyChanged("dal_HoraMes")
            End If
        End Set
    End Property

    Private _dal_HoraMes As Nullable(Of Decimal)

    <DataMember()>
    Public Property dal_HoraRrefrigerio() As Nullable(Of Decimal)
        Get
            Return _dal_HoraRrefrigerio
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dal_HoraRrefrigerio, value) Then
                _dal_HoraRrefrigerio = value
                OnPropertyChanged("dal_HoraRrefrigerio")
            End If
        End Set
    End Property

    Private _dal_HoraRrefrigerio As Nullable(Of Decimal)

    <DataMember()>
    Public Property dal_HoraFijaExtra() As Nullable(Of Decimal)
        Get
            Return _dal_HoraFijaExtra
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dal_HoraFijaExtra, value) Then
                _dal_HoraFijaExtra = value
                OnPropertyChanged("dal_HoraFijaExtra")
            End If
        End Set
    End Property

    Private _dal_HoraFijaExtra As Nullable(Of Decimal)

    <DataMember()>
    Public Property dal_Imagen() As Byte()
        Get
            Return _dal_Imagen
        End Get
        Set(ByVal value As Byte())
            If _dal_Imagen IsNot value Then
                _dal_Imagen = value
                OnPropertyChanged("dal_Imagen")
            End If
        End Set
    End Property

    Private _dal_Imagen As Byte()

    <DataMember()>
    Public Property ttr_DestajoTrabajadorPll() As Nullable(Of Boolean)
        Get
            Return _ttr_DestajoTrabajadorPll
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_ttr_DestajoTrabajadorPll, value) Then
                _ttr_DestajoTrabajadorPll = value
                OnPropertyChanged("ttr_DestajoTrabajadorPll")
            End If
        End Set
    End Property

    Private _ttr_DestajoTrabajadorPll As Nullable(Of Boolean)

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property CentroCostos() As CentroCostos
        Get
            Return _centroCostos
        End Get
        Set(ByVal value As CentroCostos)
            If _centroCostos IsNot value Then
                Dim previousValue As CentroCostos = _centroCostos
                _centroCostos = value
                FixupCentroCostos(previousValue)
                OnNavigationPropertyChanged("CentroCostos")
            End If
        End Set
    End Property

    Private _centroCostos As CentroCostos


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property AreaTrabajos() As AreaTrabajos
        Get
            Return _areaTrabajos
        End Get
        Set(ByVal value As AreaTrabajos)
            If _areaTrabajos IsNot value Then
                Dim previousValue As AreaTrabajos = _areaTrabajos
                _areaTrabajos = value
                FixupAreaTrabajos(previousValue)
                OnNavigationPropertyChanged("AreaTrabajos")
            End If
        End Set
    End Property

    Private _areaTrabajos As AreaTrabajos


    <DataMember()>
    Public Property CentroRiesgo() As CentroRiesgo
        Get
            Return _centroRiesgo
        End Get
        Set(ByVal value As CentroRiesgo)
            If _centroRiesgo IsNot value Then
                Dim previousValue As CentroRiesgo = _centroRiesgo
                _centroRiesgo = value
                FixupCentroRiesgo(previousValue)
                OnNavigationPropertyChanged("CentroRiesgo")
            End If
        End Set
    End Property

    Private _centroRiesgo As CentroRiesgo


    <DataMember()>
    Public Property ConceptosTrabajador() As TrackableCollection(Of ConceptosTrabajador)
        Get
            If _conceptosTrabajador Is Nothing Then
                _conceptosTrabajador = New TrackableCollection(Of ConceptosTrabajador)
                AddHandler _conceptosTrabajador.CollectionChanged, AddressOf FixupConceptosTrabajador
            End If
            Return _conceptosTrabajador
        End Get
        Set(ByVal value As TrackableCollection(Of ConceptosTrabajador))
            If Not Object.ReferenceEquals(_conceptosTrabajador, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _conceptosTrabajador IsNot Nothing Then
                    RemoveHandler _conceptosTrabajador.CollectionChanged, AddressOf FixupConceptosTrabajador
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As ConceptosTrabajador In _conceptosTrabajador
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _conceptosTrabajador = value
                If _conceptosTrabajador IsNot Nothing Then
                    AddHandler _conceptosTrabajador.CollectionChanged, AddressOf FixupConceptosTrabajador
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As ConceptosTrabajador In _conceptosTrabajador
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("ConceptosTrabajador")
            End If
        End Set
    End Property

    Private _conceptosTrabajador As TrackableCollection(Of ConceptosTrabajador)

    <DataMember()>
    Public Property ConvenioDobleTributacion() As ConvenioDobleTributacion
        Get
            Return _convenioDobleTributacion
        End Get
        Set(ByVal value As ConvenioDobleTributacion)
            If _convenioDobleTributacion IsNot value Then
                Dim previousValue As ConvenioDobleTributacion = _convenioDobleTributacion
                _convenioDobleTributacion = value
                FixupConvenioDobleTributacion(previousValue)
                OnNavigationPropertyChanged("ConvenioDobleTributacion")
            End If
        End Set
    End Property

    Private _convenioDobleTributacion As ConvenioDobleTributacion


    <DataMember()>
    Public Property CronogramaVacaciones() As TrackableCollection(Of CronogramaVacaciones)
        Get
            If _cronogramaVacaciones Is Nothing Then
                _cronogramaVacaciones = New TrackableCollection(Of CronogramaVacaciones)
                AddHandler _cronogramaVacaciones.CollectionChanged, AddressOf FixupCronogramaVacaciones
            End If
            Return _cronogramaVacaciones
        End Get
        Set(ByVal value As TrackableCollection(Of CronogramaVacaciones))
            If Not Object.ReferenceEquals(_cronogramaVacaciones, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _cronogramaVacaciones IsNot Nothing Then
                    RemoveHandler _cronogramaVacaciones.CollectionChanged, AddressOf FixupCronogramaVacaciones
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As CronogramaVacaciones In _cronogramaVacaciones
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _cronogramaVacaciones = value
                If _cronogramaVacaciones IsNot Nothing Then
                    AddHandler _cronogramaVacaciones.CollectionChanged, AddressOf FixupCronogramaVacaciones
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As CronogramaVacaciones In _cronogramaVacaciones
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("CronogramaVacaciones")
            End If
        End Set
    End Property

    Private _cronogramaVacaciones As TrackableCollection(Of CronogramaVacaciones)

    <DataMember()>
    Public Property NivelEducacion() As NivelEducacion
        Get
            Return _nivelEducacion
        End Get
        Set(ByVal value As NivelEducacion)
            If _nivelEducacion IsNot value Then
                Dim previousValue As NivelEducacion = _nivelEducacion
                _nivelEducacion = value
                FixupNivelEducacion(previousValue)
                OnNavigationPropertyChanged("NivelEducacion")
            End If
        End Set
    End Property

    Private _nivelEducacion As NivelEducacion


    <DataMember()>
    Public Property Periodisidad() As Periodisidad
        Get
            Return _periodisidad
        End Get
        Set(ByVal value As Periodisidad)
            If _periodisidad IsNot value Then
                Dim previousValue As Periodisidad = _periodisidad
                _periodisidad = value
                FixupPeriodisidad(previousValue)
                OnNavigationPropertyChanged("Periodisidad")
            End If
        End Set
    End Property

    Private _periodisidad As Periodisidad


    <DataMember()>
    Public Property RegimenPensionario() As RegimenPensionario
        Get
            Return _regimenPensionario
        End Get
        Set(ByVal value As RegimenPensionario)
            If _regimenPensionario IsNot value Then
                Dim previousValue As RegimenPensionario = _regimenPensionario
                _regimenPensionario = value
                FixupRegimenPensionario(previousValue)
                OnNavigationPropertyChanged("RegimenPensionario")
            End If
        End Set
    End Property

    Private _regimenPensionario As RegimenPensionario


    <DataMember()>
    Public Property SituacionEspecialTrabajador() As SituacionEspecialTrabajador
        Get
            Return _situacionEspecialTrabajador
        End Get
        Set(ByVal value As SituacionEspecialTrabajador)
            If _situacionEspecialTrabajador IsNot value Then
                Dim previousValue As SituacionEspecialTrabajador = _situacionEspecialTrabajador
                _situacionEspecialTrabajador = value
                FixupSituacionEspecialTrabajador(previousValue)
                OnNavigationPropertyChanged("SituacionEspecialTrabajador")
            End If
        End Set
    End Property

    Private _situacionEspecialTrabajador As SituacionEspecialTrabajador


    <DataMember()>
    Public Property SituacionTrabajador() As SituacionTrabajador
        Get
            Return _situacionTrabajador
        End Get
        Set(ByVal value As SituacionTrabajador)
            If _situacionTrabajador IsNot value Then
                Dim previousValue As SituacionTrabajador = _situacionTrabajador
                _situacionTrabajador = value
                FixupSituacionTrabajador(previousValue)
                OnNavigationPropertyChanged("SituacionTrabajador")
            End If
        End Set
    End Property

    Private _situacionTrabajador As SituacionTrabajador


    <DataMember()>
    Public Property TiposCargos() As TiposCargos
        Get
            Return _tiposCargos
        End Get
        Set(ByVal value As TiposCargos)
            If _tiposCargos IsNot value Then
                Dim previousValue As TiposCargos = _tiposCargos
                _tiposCargos = value
                FixupTiposCargos(previousValue)
                OnNavigationPropertyChanged("TiposCargos")
            End If
        End Set
    End Property

    Private _tiposCargos As TiposCargos


    <DataMember()>
    Public Property TiposContratos() As TiposContratos
        Get
            Return _tiposContratos
        End Get
        Set(ByVal value As TiposContratos)
            If _tiposContratos IsNot value Then
                Dim previousValue As TiposContratos = _tiposContratos
                _tiposContratos = value
                FixupTiposContratos(previousValue)
                OnNavigationPropertyChanged("TiposContratos")
            End If
        End Set
    End Property

    Private _tiposContratos As TiposContratos


    <DataMember()>
    Public Property TiposTrabajador() As TiposTrabajador
        Get
            Return _tiposTrabajador
        End Get
        Set(ByVal value As TiposTrabajador)
            If _tiposTrabajador IsNot value Then
                Dim previousValue As TiposTrabajador = _tiposTrabajador
                _tiposTrabajador = value
                FixupTiposTrabajador(previousValue)
                OnNavigationPropertyChanged("TiposTrabajador")
            End If
        End Set
    End Property

    Private _tiposTrabajador As TiposTrabajador


    <DataMember()>
    Public Property DetallePlanillas() As TrackableCollection(Of DetallePlanillas)
        Get
            If _detallePlanillas Is Nothing Then
                _detallePlanillas = New TrackableCollection(Of DetallePlanillas)
                AddHandler _detallePlanillas.CollectionChanged, AddressOf FixupDetallePlanillas
            End If
            Return _detallePlanillas
        End Get
        Set(ByVal value As TrackableCollection(Of DetallePlanillas))
            If Not Object.ReferenceEquals(_detallePlanillas, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detallePlanillas IsNot Nothing Then
                    RemoveHandler _detallePlanillas.CollectionChanged, AddressOf FixupDetallePlanillas
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As DetallePlanillas In _detallePlanillas
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detallePlanillas = value
                If _detallePlanillas IsNot Nothing Then
                    AddHandler _detallePlanillas.CollectionChanged, AddressOf FixupDetallePlanillas
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As DetallePlanillas In _detallePlanillas
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetallePlanillas")
            End If
        End Set
    End Property

    Private _detallePlanillas As TrackableCollection(Of DetallePlanillas)

    <DataMember()>
    Public Property TesoreriaPlanillas() As TrackableCollection(Of TesoreriaPlanillas)
        Get
            If _tesoreriaPlanillas Is Nothing Then
                _tesoreriaPlanillas = New TrackableCollection(Of TesoreriaPlanillas)
                AddHandler _tesoreriaPlanillas.CollectionChanged, AddressOf FixupTesoreriaPlanillas
            End If
            Return _tesoreriaPlanillas
        End Get
        Set(ByVal value As TrackableCollection(Of TesoreriaPlanillas))
            If Not Object.ReferenceEquals(_tesoreriaPlanillas, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _tesoreriaPlanillas IsNot Nothing Then
                    RemoveHandler _tesoreriaPlanillas.CollectionChanged, AddressOf FixupTesoreriaPlanillas
                End If
                _tesoreriaPlanillas = value
                If _tesoreriaPlanillas IsNot Nothing Then
                    AddHandler _tesoreriaPlanillas.CollectionChanged, AddressOf FixupTesoreriaPlanillas
                End If
                OnNavigationPropertyChanged("TesoreriaPlanillas")
            End If
        End Set
    End Property

    Private _tesoreriaPlanillas As TrackableCollection(Of TesoreriaPlanillas)

    <DataMember()>
    Public Property PeriodoLaboral() As TrackableCollection(Of PeriodoLaboral)
        Get
            If _periodoLaboral Is Nothing Then
                _periodoLaboral = New TrackableCollection(Of PeriodoLaboral)
                AddHandler _periodoLaboral.CollectionChanged, AddressOf FixupPeriodoLaboral
            End If
            Return _periodoLaboral
        End Get
        Set(ByVal value As TrackableCollection(Of PeriodoLaboral))
            If Not Object.ReferenceEquals(_periodoLaboral, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _periodoLaboral IsNot Nothing Then
                    RemoveHandler _periodoLaboral.CollectionChanged, AddressOf FixupPeriodoLaboral
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As PeriodoLaboral In _periodoLaboral
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _periodoLaboral = value
                If _periodoLaboral IsNot Nothing Then
                    AddHandler _periodoLaboral.CollectionChanged, AddressOf FixupPeriodoLaboral
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As PeriodoLaboral In _periodoLaboral
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("PeriodoLaboral")
            End If
        End Set
    End Property

    Private _periodoLaboral As TrackableCollection(Of PeriodoLaboral)

    <DataMember()>
    Public Property EstadoCivil() As EstadoCivil
        Get
            Return _estadoCivil
        End Get
        Set(ByVal value As EstadoCivil)
            If _estadoCivil IsNot value Then
                Dim previousValue As EstadoCivil = _estadoCivil
                _estadoCivil = value
                FixupEstadoCivil(previousValue)
                OnNavigationPropertyChanged("EstadoCivil")
            End If
        End Set
    End Property

    Private _estadoCivil As EstadoCivil


    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property Personas1() As Personas
        Get
            Return _personas1
        End Get
        Set(ByVal value As Personas)
            If _personas1 IsNot value Then
                Dim previousValue As Personas = _personas1
                _personas1 = value
                FixupPersonas1(previousValue)
                OnNavigationPropertyChanged("Personas1")
            End If
        End Set
    End Property

    Private _personas1 As Personas


    <DataMember()>
    Public Property PlanillaTrabajador() As TrackableCollection(Of PlanillaTrabajador)
        Get
            If _planillaTrabajador Is Nothing Then
                _planillaTrabajador = New TrackableCollection(Of PlanillaTrabajador)
                AddHandler _planillaTrabajador.CollectionChanged, AddressOf FixupPlanillaTrabajador
            End If
            Return _planillaTrabajador
        End Get
        Set(ByVal value As TrackableCollection(Of PlanillaTrabajador))
            If Not Object.ReferenceEquals(_planillaTrabajador, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _planillaTrabajador IsNot Nothing Then
                    RemoveHandler _planillaTrabajador.CollectionChanged, AddressOf FixupPlanillaTrabajador
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As PlanillaTrabajador In _planillaTrabajador
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _planillaTrabajador = value
                If _planillaTrabajador IsNot Nothing Then
                    AddHandler _planillaTrabajador.CollectionChanged, AddressOf FixupPlanillaTrabajador
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As PlanillaTrabajador In _planillaTrabajador
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("PlanillaTrabajador")
            End If
        End Set
    End Property

    Private _planillaTrabajador As TrackableCollection(Of PlanillaTrabajador)

    <DataMember()>
    Public Property DatosLaboralesHorario() As TrackableCollection(Of DatosLaboralesHorario)
        Get
            If _datosLaboralesHorario Is Nothing Then
                _datosLaboralesHorario = New TrackableCollection(Of DatosLaboralesHorario)
                AddHandler _datosLaboralesHorario.CollectionChanged, AddressOf FixupDatosLaboralesHorario
            End If
            Return _datosLaboralesHorario
        End Get
        Set(ByVal value As TrackableCollection(Of DatosLaboralesHorario))
            If Not Object.ReferenceEquals(_datosLaboralesHorario, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _datosLaboralesHorario IsNot Nothing Then
                    RemoveHandler _datosLaboralesHorario.CollectionChanged, AddressOf FixupDatosLaboralesHorario
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As DatosLaboralesHorario In _datosLaboralesHorario
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _datosLaboralesHorario = value
                If _datosLaboralesHorario IsNot Nothing Then
                    AddHandler _datosLaboralesHorario.CollectionChanged, AddressOf FixupDatosLaboralesHorario
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As DatosLaboralesHorario In _datosLaboralesHorario
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DatosLaboralesHorario")
            End If
        End Set
    End Property

    Private _datosLaboralesHorario As TrackableCollection(Of DatosLaboralesHorario)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        CentroCostos = Nothing
        Usuarios = Nothing
        AreaTrabajos = Nothing
        CentroRiesgo = Nothing
        ConceptosTrabajador.Clear()
        ConvenioDobleTributacion = Nothing
        CronogramaVacaciones.Clear()
        NivelEducacion = Nothing
        Periodisidad = Nothing
        RegimenPensionario = Nothing
        SituacionEspecialTrabajador = Nothing
        SituacionTrabajador = Nothing
        TiposCargos = Nothing
        TiposContratos = Nothing
        TiposTrabajador = Nothing
        DetallePlanillas.Clear()
        TesoreriaPlanillas.Clear()
        PeriodoLaboral.Clear()
        EstadoCivil = Nothing
        Personas = Nothing
        Personas1 = Nothing
        PlanillaTrabajador.Clear()
        DatosLaboralesHorario.Clear()
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupCentroCostos(ByVal previousValue As CentroCostos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DatosLaborales.Contains(Me) Then
            previousValue.DatosLaborales.Remove(Me)
        End If

        If CentroCostos IsNot Nothing Then
            If Not CentroCostos.DatosLaborales.Contains(Me) Then
                CentroCostos.DatosLaborales.Add(Me)
            End If

            cco_Id = CentroCostos.CCO_ID
        ElseIf Not skipKeys Then
            cco_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CentroCostos") AndAlso
                ChangeTracker.OriginalValues("CentroCostos") Is CentroCostos Then
                ChangeTracker.OriginalValues.Remove("CentroCostos")
            Else
                ChangeTracker.RecordOriginalValue("CentroCostos", previousValue)
            End If
            If CentroCostos IsNot Nothing AndAlso Not CentroCostos.ChangeTracker.ChangeTrackingEnabled Then
                CentroCostos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            Usu_Id = Usuarios.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupAreaTrabajos(ByVal previousValue As AreaTrabajos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DatosLaborales.Contains(Me) Then
            previousValue.DatosLaborales.Remove(Me)
        End If

        If AreaTrabajos IsNot Nothing Then
            If Not AreaTrabajos.DatosLaborales.Contains(Me) Then
                AreaTrabajos.DatosLaborales.Add(Me)
            End If

            art_AreaTrab_Id = AreaTrabajos.art_AreaTrab_Id
        ElseIf Not skipKeys Then
            art_AreaTrab_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("AreaTrabajos") AndAlso
                ChangeTracker.OriginalValues("AreaTrabajos") Is AreaTrabajos Then
                ChangeTracker.OriginalValues.Remove("AreaTrabajos")
            Else
                ChangeTracker.RecordOriginalValue("AreaTrabajos", previousValue)
            End If
            If AreaTrabajos IsNot Nothing AndAlso Not AreaTrabajos.ChangeTracker.ChangeTrackingEnabled Then
                AreaTrabajos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCentroRiesgo(ByVal previousValue As CentroRiesgo, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DatosLaborales.Contains(Me) Then
            previousValue.DatosLaborales.Remove(Me)
        End If

        If CentroRiesgo IsNot Nothing Then
            If Not CentroRiesgo.DatosLaborales.Contains(Me) Then
                CentroRiesgo.DatosLaborales.Add(Me)
            End If

            cer_ID = CentroRiesgo.cer_ID
        ElseIf Not skipKeys Then
            cer_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CentroRiesgo") AndAlso
                ChangeTracker.OriginalValues("CentroRiesgo") Is CentroRiesgo Then
                ChangeTracker.OriginalValues.Remove("CentroRiesgo")
            Else
                ChangeTracker.RecordOriginalValue("CentroRiesgo", previousValue)
            End If
            If CentroRiesgo IsNot Nothing AndAlso Not CentroRiesgo.ChangeTracker.ChangeTrackingEnabled Then
                CentroRiesgo.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupConvenioDobleTributacion(ByVal previousValue As ConvenioDobleTributacion, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DatosLaborales.Contains(Me) Then
            previousValue.DatosLaborales.Remove(Me)
        End If

        If ConvenioDobleTributacion IsNot Nothing Then
            If Not ConvenioDobleTributacion.DatosLaborales.Contains(Me) Then
                ConvenioDobleTributacion.DatosLaborales.Add(Me)
            End If

            cod_DobleTribu_Id = ConvenioDobleTributacion.cod_DobleTribu_Id
        ElseIf Not skipKeys Then
            cod_DobleTribu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("ConvenioDobleTributacion") AndAlso
                ChangeTracker.OriginalValues("ConvenioDobleTributacion") Is ConvenioDobleTributacion Then
                ChangeTracker.OriginalValues.Remove("ConvenioDobleTributacion")
            Else
                ChangeTracker.RecordOriginalValue("ConvenioDobleTributacion", previousValue)
            End If
            If ConvenioDobleTributacion IsNot Nothing AndAlso Not ConvenioDobleTributacion.ChangeTracker.ChangeTrackingEnabled Then
                ConvenioDobleTributacion.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupNivelEducacion(ByVal previousValue As NivelEducacion, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DatosLaborales.Contains(Me) Then
            previousValue.DatosLaborales.Remove(Me)
        End If

        If NivelEducacion IsNot Nothing Then
            If Not NivelEducacion.DatosLaborales.Contains(Me) Then
                NivelEducacion.DatosLaborales.Add(Me)
            End If

            nie_NiveEduc_Id = NivelEducacion.nie_NiveEduc_Id
        ElseIf Not skipKeys Then
            nie_NiveEduc_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("NivelEducacion") AndAlso
                ChangeTracker.OriginalValues("NivelEducacion") Is NivelEducacion Then
                ChangeTracker.OriginalValues.Remove("NivelEducacion")
            Else
                ChangeTracker.RecordOriginalValue("NivelEducacion", previousValue)
            End If
            If NivelEducacion IsNot Nothing AndAlso Not NivelEducacion.ChangeTracker.ChangeTrackingEnabled Then
                NivelEducacion.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPeriodisidad(ByVal previousValue As Periodisidad, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DatosLaborales.Contains(Me) Then
            previousValue.DatosLaborales.Remove(Me)
        End If

        If Periodisidad IsNot Nothing Then
            If Not Periodisidad.DatosLaborales.Contains(Me) Then
                Periodisidad.DatosLaborales.Add(Me)
            End If

            pec_Periodisidad_Id = Periodisidad.pec_Periodisidad_Id
        ElseIf Not skipKeys Then
            pec_Periodisidad_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Periodisidad") AndAlso
                ChangeTracker.OriginalValues("Periodisidad") Is Periodisidad Then
                ChangeTracker.OriginalValues.Remove("Periodisidad")
            Else
                ChangeTracker.RecordOriginalValue("Periodisidad", previousValue)
            End If
            If Periodisidad IsNot Nothing AndAlso Not Periodisidad.ChangeTracker.ChangeTrackingEnabled Then
                Periodisidad.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupRegimenPensionario(ByVal previousValue As RegimenPensionario, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DatosLaborales.Contains(Me) Then
            previousValue.DatosLaborales.Remove(Me)
        End If

        If RegimenPensionario IsNot Nothing Then
            If Not RegimenPensionario.DatosLaborales.Contains(Me) Then
                RegimenPensionario.DatosLaborales.Add(Me)
            End If

            rep_RegiPension_id = RegimenPensionario.rep_RegiPension_id
        ElseIf Not skipKeys Then
            rep_RegiPension_id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("RegimenPensionario") AndAlso
                ChangeTracker.OriginalValues("RegimenPensionario") Is RegimenPensionario Then
                ChangeTracker.OriginalValues.Remove("RegimenPensionario")
            Else
                ChangeTracker.RecordOriginalValue("RegimenPensionario", previousValue)
            End If
            If RegimenPensionario IsNot Nothing AndAlso Not RegimenPensionario.ChangeTracker.ChangeTrackingEnabled Then
                RegimenPensionario.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupSituacionEspecialTrabajador(ByVal previousValue As SituacionEspecialTrabajador, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DatosLaborales.Contains(Me) Then
            previousValue.DatosLaborales.Remove(Me)
        End If

        If SituacionEspecialTrabajador IsNot Nothing Then
            If Not SituacionEspecialTrabajador.DatosLaborales.Contains(Me) Then
                SituacionEspecialTrabajador.DatosLaborales.Add(Me)
            End If

            set_SituEspe_Id = SituacionEspecialTrabajador.set_SituEspe_Id
        ElseIf Not skipKeys Then
            set_SituEspe_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("SituacionEspecialTrabajador") AndAlso
                ChangeTracker.OriginalValues("SituacionEspecialTrabajador") Is SituacionEspecialTrabajador Then
                ChangeTracker.OriginalValues.Remove("SituacionEspecialTrabajador")
            Else
                ChangeTracker.RecordOriginalValue("SituacionEspecialTrabajador", previousValue)
            End If
            If SituacionEspecialTrabajador IsNot Nothing AndAlso Not SituacionEspecialTrabajador.ChangeTracker.ChangeTrackingEnabled Then
                SituacionEspecialTrabajador.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupSituacionTrabajador(ByVal previousValue As SituacionTrabajador, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DatosLaborales.Contains(Me) Then
            previousValue.DatosLaborales.Remove(Me)
        End If

        If SituacionTrabajador IsNot Nothing Then
            If Not SituacionTrabajador.DatosLaborales.Contains(Me) Then
                SituacionTrabajador.DatosLaborales.Add(Me)
            End If

            sit_SituaTrab_Id = SituacionTrabajador.sit_SituaTrab_Id
        ElseIf Not skipKeys Then
            sit_SituaTrab_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("SituacionTrabajador") AndAlso
                ChangeTracker.OriginalValues("SituacionTrabajador") Is SituacionTrabajador Then
                ChangeTracker.OriginalValues.Remove("SituacionTrabajador")
            Else
                ChangeTracker.RecordOriginalValue("SituacionTrabajador", previousValue)
            End If
            If SituacionTrabajador IsNot Nothing AndAlso Not SituacionTrabajador.ChangeTracker.ChangeTrackingEnabled Then
                SituacionTrabajador.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTiposCargos(ByVal previousValue As TiposCargos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DatosLaborales.Contains(Me) Then
            previousValue.DatosLaborales.Remove(Me)
        End If

        If TiposCargos IsNot Nothing Then
            If Not TiposCargos.DatosLaborales.Contains(Me) Then
                TiposCargos.DatosLaborales.Add(Me)
            End If

            tis_TipCargo_Id = TiposCargos.tis_TipCargo_Id
        ElseIf Not skipKeys Then
            tis_TipCargo_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TiposCargos") AndAlso
                ChangeTracker.OriginalValues("TiposCargos") Is TiposCargos Then
                ChangeTracker.OriginalValues.Remove("TiposCargos")
            Else
                ChangeTracker.RecordOriginalValue("TiposCargos", previousValue)
            End If
            If TiposCargos IsNot Nothing AndAlso Not TiposCargos.ChangeTracker.ChangeTrackingEnabled Then
                TiposCargos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTiposContratos(ByVal previousValue As TiposContratos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DatosLaborales.Contains(Me) Then
            previousValue.DatosLaborales.Remove(Me)
        End If

        If TiposContratos IsNot Nothing Then
            If Not TiposContratos.DatosLaborales.Contains(Me) Then
                TiposContratos.DatosLaborales.Add(Me)
            End If

            tic_TipoCont_Id = TiposContratos.tic_TipoCont_Id
        ElseIf Not skipKeys Then
            tic_TipoCont_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TiposContratos") AndAlso
                ChangeTracker.OriginalValues("TiposContratos") Is TiposContratos Then
                ChangeTracker.OriginalValues.Remove("TiposContratos")
            Else
                ChangeTracker.RecordOriginalValue("TiposContratos", previousValue)
            End If
            If TiposContratos IsNot Nothing AndAlso Not TiposContratos.ChangeTracker.ChangeTrackingEnabled Then
                TiposContratos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTiposTrabajador(ByVal previousValue As TiposTrabajador, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DatosLaborales.Contains(Me) Then
            previousValue.DatosLaborales.Remove(Me)
        End If

        If TiposTrabajador IsNot Nothing Then
            If Not TiposTrabajador.DatosLaborales.Contains(Me) Then
                TiposTrabajador.DatosLaborales.Add(Me)
            End If

            tit_TipoTrab_Id = TiposTrabajador.tit_TipoTrab_Id
        ElseIf Not skipKeys Then
            tit_TipoTrab_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TiposTrabajador") AndAlso
                ChangeTracker.OriginalValues("TiposTrabajador") Is TiposTrabajador Then
                ChangeTracker.OriginalValues.Remove("TiposTrabajador")
            Else
                ChangeTracker.RecordOriginalValue("TiposTrabajador", previousValue)
            End If
            If TiposTrabajador IsNot Nothing AndAlso Not TiposTrabajador.ChangeTracker.ChangeTrackingEnabled Then
                TiposTrabajador.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupEstadoCivil(ByVal previousValue As EstadoCivil, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DatosLaborales.Contains(Me) Then
            previousValue.DatosLaborales.Remove(Me)
        End If

        If EstadoCivil IsNot Nothing Then
            If Not EstadoCivil.DatosLaborales.Contains(Me) Then
                EstadoCivil.DatosLaborales.Add(Me)
            End If

            dal_EstadoCivil = EstadoCivil.ecv_Id
        ElseIf Not skipKeys Then
            dal_EstadoCivil = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("EstadoCivil") AndAlso
                ChangeTracker.OriginalValues("EstadoCivil") Is EstadoCivil Then
                ChangeTracker.OriginalValues.Remove("EstadoCivil")
            Else
                ChangeTracker.RecordOriginalValue("EstadoCivil", previousValue)
            End If
            If EstadoCivil IsNot Nothing AndAlso Not EstadoCivil.ChangeTracker.ChangeTrackingEnabled Then
                EstadoCivil.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DatosLaborales.Contains(Me) Then
            previousValue.DatosLaborales.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.DatosLaborales.Contains(Me) Then
                Personas.DatosLaborales.Add(Me)
            End If

            ccc_IdCuentaCorrienteRenumeracion = Personas.PER_ID
        ElseIf Not skipKeys Then
            ccc_IdCuentaCorrienteRenumeracion = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas1(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DatosLaborales1.Contains(Me) Then
            previousValue.DatosLaborales1.Remove(Me)
        End If

        If Personas1 IsNot Nothing Then
            If Not Personas1.DatosLaborales1.Contains(Me) Then
                Personas1.DatosLaborales1.Add(Me)
            End If

            ccc_IdCuentaCorrienteCTs = Personas1.PER_ID
        ElseIf Not skipKeys Then
            ccc_IdCuentaCorrienteCTs = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas1") AndAlso
                ChangeTracker.OriginalValues("Personas1") Is Personas1 Then
                ChangeTracker.OriginalValues.Remove("Personas1")
            Else
                ChangeTracker.RecordOriginalValue("Personas1", previousValue)
            End If
            If Personas1 IsNot Nothing AndAlso Not Personas1.ChangeTracker.ChangeTrackingEnabled Then
                Personas1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupConceptosTrabajador(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As ConceptosTrabajador In e.NewItems
                item.DatosLaborales = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("ConceptosTrabajador", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As ConceptosTrabajador In e.OldItems
                If ReferenceEquals(item.DatosLaborales, Me) Then
                    item.DatosLaborales = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("ConceptosTrabajador", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupCronogramaVacaciones(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As CronogramaVacaciones In e.NewItems
                item.per_Id = per_Id
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("CronogramaVacaciones", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As CronogramaVacaciones In e.OldItems
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("CronogramaVacaciones", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupDetallePlanillas(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetallePlanillas In e.NewItems
                item.DatosLaborales = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetallePlanillas", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetallePlanillas In e.OldItems
                If ReferenceEquals(item.DatosLaborales, Me) Then
                    item.DatosLaborales = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetallePlanillas", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupTesoreriaPlanillas(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As TesoreriaPlanillas In e.NewItems
                item.DatosLaborales = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("TesoreriaPlanillas", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As TesoreriaPlanillas In e.OldItems
                If ReferenceEquals(item.DatosLaborales, Me) Then
                    item.DatosLaborales = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("TesoreriaPlanillas", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupPeriodoLaboral(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PeriodoLaboral In e.NewItems
                item.DatosLaborales = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PeriodoLaboral", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PeriodoLaboral In e.OldItems
                If ReferenceEquals(item.DatosLaborales, Me) Then
                    item.DatosLaborales = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PeriodoLaboral", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupPlanillaTrabajador(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PlanillaTrabajador In e.NewItems
                item.DatosLaborales = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PlanillaTrabajador", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PlanillaTrabajador In e.OldItems
                If ReferenceEquals(item.DatosLaborales, Me) Then
                    item.DatosLaborales = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PlanillaTrabajador", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupDatosLaboralesHorario(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DatosLaboralesHorario In e.NewItems
                item.DatosLaborales = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DatosLaboralesHorario", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DatosLaboralesHorario In e.OldItems
                If ReferenceEquals(item.DatosLaborales, Me) Then
                    item.DatosLaborales = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DatosLaboralesHorario", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

#End Region
End Class
