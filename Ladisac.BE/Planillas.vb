'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Periodo))>
<KnownType(GetType(TipoDocumentos))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(ConceptosPlanilla))>
<KnownType(GetType(TrabajadorHoras))>
<KnownType(GetType(DetallePlanillas))>
<KnownType(GetType(PlanillasComedorHoras))>
<KnownType(GetType(ComedorPLL))>
<KnownType(GetType(PlanillaTrabajador))>
<KnownType(GetType(CronogramaVacaciones))>
Partial Public Class Planillas
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared tit_TipoTrab_Id As string = "tit_TipoTrab_Id"
				public shared tip_TipoPlan_Id As string = "tip_TipoPlan_Id"
				public shared pla_SeriePlani As string = "pla_SeriePlani"
				public shared pla_Numero As string = "pla_Numero"
				public shared tdo_Id As string = "tdo_Id"
				public shared pla_Descripcion As string = "pla_Descripcion"
				public shared pla_FechaInicio As string = "pla_FechaInicio"
				public shared pla_FechaFin As string = "pla_FechaFin"
				public shared ItemConceptoPlanilla As string = "ItemConceptoPlanilla"
				public shared prd_Periodo_id As string = "prd_Periodo_id"
				public shared Usu_Id As string = "Usu_Id"
				public shared pla_FecGrab As string = "pla_FecGrab"
				public shared pla_GenerarTesoreria As string = "pla_GenerarTesoreria"
		    End Structure
	



    <DataMember()>
    Public Property tit_TipoTrab_Id() As String
        Get
            Return _tit_TipoTrab_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tit_TipoTrab_Id, value) Then
                ChangeTracker.RecordOriginalValue("tit_TipoTrab_Id", _tit_TipoTrab_Id)
                If Not IsDeserializing Then
                    If ConceptosPlanilla IsNot Nothing AndAlso Not Equals(ConceptosPlanilla.tit_TipoTrab_Id, value) Then
                        ConceptosPlanilla = Nothing
                    End If
                End If
                _tit_TipoTrab_Id = value
                OnPropertyChanged("tit_TipoTrab_Id")
            End If
        End Set
    End Property

    Private _tit_TipoTrab_Id As String

    <DataMember()>
    Public Property tip_TipoPlan_Id() As String
        Get
            Return _tip_TipoPlan_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tip_TipoPlan_Id, value) Then
                ChangeTracker.RecordOriginalValue("tip_TipoPlan_Id", _tip_TipoPlan_Id)
                If Not IsDeserializing Then
                    If ConceptosPlanilla IsNot Nothing AndAlso Not Equals(ConceptosPlanilla.tip_TipoPlan_Id, value) Then
                        ConceptosPlanilla = Nothing
                    End If
                End If
                _tip_TipoPlan_Id = value
                OnPropertyChanged("tip_TipoPlan_Id")
            End If
        End Set
    End Property

    Private _tip_TipoPlan_Id As String

    <DataMember()>
    Public Property pla_SeriePlani() As String
        Get
            Return _pla_SeriePlani
        End Get
        Set(ByVal value As String)
            If Not Equals(_pla_SeriePlani, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'pla_SeriePlani' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _pla_SeriePlani = value
                OnPropertyChanged("pla_SeriePlani")
            End If
        End Set
    End Property

    Private _pla_SeriePlani As String

    <DataMember()>
    Public Property pla_Numero() As String
        Get
            Return _pla_Numero
        End Get
        Set(ByVal value As String)
            If Not Equals(_pla_Numero, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'pla_Numero' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _pla_Numero = value
                OnPropertyChanged("pla_Numero")
            End If
        End Set
    End Property

    Private _pla_Numero As String

    <DataMember()>
    Public Property tdo_Id() As String
        Get
            Return _tdo_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tdo_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'tdo_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If TipoDocumentos IsNot Nothing AndAlso Not Equals(TipoDocumentos.TDO_ID, value) Then
                        TipoDocumentos = Nothing
                    End If
                End If
                _tdo_Id = value
                OnPropertyChanged("tdo_Id")
            End If
        End Set
    End Property

    Private _tdo_Id As String

    <DataMember()>
    Public Property pla_Descripcion() As String
        Get
            Return _pla_Descripcion
        End Get
        Set(ByVal value As String)
            If Not Equals(_pla_Descripcion, value) Then
                _pla_Descripcion = value
                OnPropertyChanged("pla_Descripcion")
            End If
        End Set
    End Property

    Private _pla_Descripcion As String

    <DataMember()>
    Public Property pla_FechaInicio() As Date
        Get
            Return _pla_FechaInicio
        End Get
        Set(ByVal value As Date)
            If Not Equals(_pla_FechaInicio, value) Then
                _pla_FechaInicio = value
                OnPropertyChanged("pla_FechaInicio")
            End If
        End Set
    End Property

    Private _pla_FechaInicio As Date

    <DataMember()>
    Public Property pla_FechaFin() As Date
        Get
            Return _pla_FechaFin
        End Get
        Set(ByVal value As Date)
            If Not Equals(_pla_FechaFin, value) Then
                _pla_FechaFin = value
                OnPropertyChanged("pla_FechaFin")
            End If
        End Set
    End Property

    Private _pla_FechaFin As Date

    <DataMember()>
    Public Property ItemConceptoPlanilla() As String
        Get
            Return _itemConceptoPlanilla
        End Get
        Set(ByVal value As String)
            If Not Equals(_itemConceptoPlanilla, value) Then
                ChangeTracker.RecordOriginalValue("ItemConceptoPlanilla", _itemConceptoPlanilla)
                If Not IsDeserializing Then
                    If ConceptosPlanilla IsNot Nothing AndAlso Not Equals(ConceptosPlanilla.ItemConceptoPlanilla, value) Then
                        ConceptosPlanilla = Nothing
                    End If
                End If
                _itemConceptoPlanilla = value
                OnPropertyChanged("ItemConceptoPlanilla")
            End If
        End Set
    End Property

    Private _itemConceptoPlanilla As String

    <DataMember()>
    Public Property prd_Periodo_id() As String
        Get
            Return _prd_Periodo_id
        End Get
        Set(ByVal value As String)
            If Not Equals(_prd_Periodo_id, value) Then
                ChangeTracker.RecordOriginalValue("prd_Periodo_id", _prd_Periodo_id)
                If Not IsDeserializing Then
                    If Periodo IsNot Nothing AndAlso Not Equals(Periodo.prd_Periodo_id, value) Then
                        Periodo = Nothing
                    End If
                    If Periodo1 IsNot Nothing AndAlso Not Equals(Periodo1.prd_Periodo_id, value) Then
                        Periodo1 = Nothing
                    End If
                End If
                _prd_Periodo_id = value
                OnPropertyChanged("prd_Periodo_id")
            End If
        End Set
    End Property

    Private _prd_Periodo_id As String

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                ChangeTracker.RecordOriginalValue("Usu_Id", _usu_Id)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property pla_FecGrab() As Date
        Get
            Return _pla_FecGrab
        End Get
        Set(ByVal value As Date)
            If Not Equals(_pla_FecGrab, value) Then
                _pla_FecGrab = value
                OnPropertyChanged("pla_FecGrab")
            End If
        End Set
    End Property

    Private _pla_FecGrab As Date

    <DataMember()>
    Public Property pla_GenerarTesoreria() As Nullable(Of Boolean)
        Get
            Return _pla_GenerarTesoreria
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_pla_GenerarTesoreria, value) Then
                _pla_GenerarTesoreria = value
                OnPropertyChanged("pla_GenerarTesoreria")
            End If
        End Set
    End Property

    Private _pla_GenerarTesoreria As Nullable(Of Boolean)

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property Periodo() As Periodo
        Get
            Return _periodo
        End Get
        Set(ByVal value As Periodo)
            If _periodo IsNot value Then
                Dim previousValue As Periodo = _periodo
                _periodo = value
                FixupPeriodo(previousValue)
                OnNavigationPropertyChanged("Periodo")
            End If
        End Set
    End Property

    Private _periodo As Periodo


    <DataMember()>
    Public Property Periodo1() As Periodo
        Get
            Return _periodo1
        End Get
        Set(ByVal value As Periodo)
            If _periodo1 IsNot value Then
                Dim previousValue As Periodo = _periodo1
                _periodo1 = value
                FixupPeriodo1(previousValue)
                OnNavigationPropertyChanged("Periodo1")
            End If
        End Set
    End Property

    Private _periodo1 As Periodo


    <DataMember()>
    Public Property TipoDocumentos() As TipoDocumentos
        Get
            Return _tipoDocumentos
        End Get
        Set(ByVal value As TipoDocumentos)
            If _tipoDocumentos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(tdo_Id, value.TDO_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As TipoDocumentos = _tipoDocumentos
                _tipoDocumentos = value
                FixupTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("TipoDocumentos")
            End If
        End Set
    End Property

    Private _tipoDocumentos As TipoDocumentos


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property ConceptosPlanilla() As ConceptosPlanilla
        Get
            Return _conceptosPlanilla
        End Get
        Set(ByVal value As ConceptosPlanilla)
            If _conceptosPlanilla IsNot value Then
                Dim previousValue As ConceptosPlanilla = _conceptosPlanilla
                _conceptosPlanilla = value
                FixupConceptosPlanilla(previousValue)
                OnNavigationPropertyChanged("ConceptosPlanilla")
            End If
        End Set
    End Property

    Private _conceptosPlanilla As ConceptosPlanilla


    <DataMember()>
    Public Property TrabajadorHoras() As TrackableCollection(Of TrabajadorHoras)
        Get
            If _trabajadorHoras Is Nothing Then
                _trabajadorHoras = New TrackableCollection(Of TrabajadorHoras)
                AddHandler _trabajadorHoras.CollectionChanged, AddressOf FixupTrabajadorHoras
            End If
            Return _trabajadorHoras
        End Get
        Set(ByVal value As TrackableCollection(Of TrabajadorHoras))
            If Not Object.ReferenceEquals(_trabajadorHoras, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _trabajadorHoras IsNot Nothing Then
                    RemoveHandler _trabajadorHoras.CollectionChanged, AddressOf FixupTrabajadorHoras
                End If
                _trabajadorHoras = value
                If _trabajadorHoras IsNot Nothing Then
                    AddHandler _trabajadorHoras.CollectionChanged, AddressOf FixupTrabajadorHoras
                End If
                OnNavigationPropertyChanged("TrabajadorHoras")
            End If
        End Set
    End Property

    Private _trabajadorHoras As TrackableCollection(Of TrabajadorHoras)

    <DataMember()>
    Public Property DetallePlanillas() As TrackableCollection(Of DetallePlanillas)
        Get
            If _detallePlanillas Is Nothing Then
                _detallePlanillas = New TrackableCollection(Of DetallePlanillas)
                AddHandler _detallePlanillas.CollectionChanged, AddressOf FixupDetallePlanillas
            End If
            Return _detallePlanillas
        End Get
        Set(ByVal value As TrackableCollection(Of DetallePlanillas))
            If Not Object.ReferenceEquals(_detallePlanillas, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detallePlanillas IsNot Nothing Then
                    RemoveHandler _detallePlanillas.CollectionChanged, AddressOf FixupDetallePlanillas
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As DetallePlanillas In _detallePlanillas
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detallePlanillas = value
                If _detallePlanillas IsNot Nothing Then
                    AddHandler _detallePlanillas.CollectionChanged, AddressOf FixupDetallePlanillas
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As DetallePlanillas In _detallePlanillas
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetallePlanillas")
            End If
        End Set
    End Property

    Private _detallePlanillas As TrackableCollection(Of DetallePlanillas)

    <DataMember()>
    Public Property PlanillasComedorHoras() As TrackableCollection(Of PlanillasComedorHoras)
        Get
            If _planillasComedorHoras Is Nothing Then
                _planillasComedorHoras = New TrackableCollection(Of PlanillasComedorHoras)
                AddHandler _planillasComedorHoras.CollectionChanged, AddressOf FixupPlanillasComedorHoras
            End If
            Return _planillasComedorHoras
        End Get
        Set(ByVal value As TrackableCollection(Of PlanillasComedorHoras))
            If Not Object.ReferenceEquals(_planillasComedorHoras, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _planillasComedorHoras IsNot Nothing Then
                    RemoveHandler _planillasComedorHoras.CollectionChanged, AddressOf FixupPlanillasComedorHoras
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As PlanillasComedorHoras In _planillasComedorHoras
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _planillasComedorHoras = value
                If _planillasComedorHoras IsNot Nothing Then
                    AddHandler _planillasComedorHoras.CollectionChanged, AddressOf FixupPlanillasComedorHoras
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As PlanillasComedorHoras In _planillasComedorHoras
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("PlanillasComedorHoras")
            End If
        End Set
    End Property

    Private _planillasComedorHoras As TrackableCollection(Of PlanillasComedorHoras)

    <DataMember()>
    Public Property ComedorPLL() As TrackableCollection(Of ComedorPLL)
        Get
            If _comedorPLL Is Nothing Then
                _comedorPLL = New TrackableCollection(Of ComedorPLL)
                AddHandler _comedorPLL.CollectionChanged, AddressOf FixupComedorPLL
            End If
            Return _comedorPLL
        End Get
        Set(ByVal value As TrackableCollection(Of ComedorPLL))
            If Not Object.ReferenceEquals(_comedorPLL, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _comedorPLL IsNot Nothing Then
                    RemoveHandler _comedorPLL.CollectionChanged, AddressOf FixupComedorPLL
                End If
                _comedorPLL = value
                If _comedorPLL IsNot Nothing Then
                    AddHandler _comedorPLL.CollectionChanged, AddressOf FixupComedorPLL
                End If
                OnNavigationPropertyChanged("ComedorPLL")
            End If
        End Set
    End Property

    Private _comedorPLL As TrackableCollection(Of ComedorPLL)

    <DataMember()>
    Public Property PlanillaTrabajador() As TrackableCollection(Of PlanillaTrabajador)
        Get
            If _planillaTrabajador Is Nothing Then
                _planillaTrabajador = New TrackableCollection(Of PlanillaTrabajador)
                AddHandler _planillaTrabajador.CollectionChanged, AddressOf FixupPlanillaTrabajador
            End If
            Return _planillaTrabajador
        End Get
        Set(ByVal value As TrackableCollection(Of PlanillaTrabajador))
            If Not Object.ReferenceEquals(_planillaTrabajador, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _planillaTrabajador IsNot Nothing Then
                    RemoveHandler _planillaTrabajador.CollectionChanged, AddressOf FixupPlanillaTrabajador
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As PlanillaTrabajador In _planillaTrabajador
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _planillaTrabajador = value
                If _planillaTrabajador IsNot Nothing Then
                    AddHandler _planillaTrabajador.CollectionChanged, AddressOf FixupPlanillaTrabajador
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As PlanillaTrabajador In _planillaTrabajador
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("PlanillaTrabajador")
            End If
        End Set
    End Property

    Private _planillaTrabajador As TrackableCollection(Of PlanillaTrabajador)

    <DataMember()>
    Public Property CronogramaVacaciones() As TrackableCollection(Of CronogramaVacaciones)
        Get
            If _cronogramaVacaciones Is Nothing Then
                _cronogramaVacaciones = New TrackableCollection(Of CronogramaVacaciones)
                AddHandler _cronogramaVacaciones.CollectionChanged, AddressOf FixupCronogramaVacaciones
            End If
            Return _cronogramaVacaciones
        End Get
        Set(ByVal value As TrackableCollection(Of CronogramaVacaciones))
            If Not Object.ReferenceEquals(_cronogramaVacaciones, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _cronogramaVacaciones IsNot Nothing Then
                    RemoveHandler _cronogramaVacaciones.CollectionChanged, AddressOf FixupCronogramaVacaciones
                End If
                _cronogramaVacaciones = value
                If _cronogramaVacaciones IsNot Nothing Then
                    AddHandler _cronogramaVacaciones.CollectionChanged, AddressOf FixupCronogramaVacaciones
                End If
                OnNavigationPropertyChanged("CronogramaVacaciones")
            End If
        End Set
    End Property

    Private _cronogramaVacaciones As TrackableCollection(Of CronogramaVacaciones)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociaci칩n que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesar치 notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Periodo = Nothing
        Periodo1 = Nothing
        TipoDocumentos = Nothing
        Usuarios = Nothing
        ConceptosPlanilla = Nothing
        TrabajadorHoras.Clear()
        DetallePlanillas.Clear()
        PlanillasComedorHoras.Clear()
        ComedorPLL.Clear()
        PlanillaTrabajador.Clear()
        CronogramaVacaciones.Clear()
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupPeriodo(ByVal previousValue As Periodo)
        If IsDeserializing Then
            Return
        End If

        If Periodo IsNot Nothing Then
            prd_Periodo_id = Periodo.prd_Periodo_id
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Periodo") AndAlso
                ChangeTracker.OriginalValues("Periodo") Is Periodo Then
                ChangeTracker.OriginalValues.Remove("Periodo")
            Else
                ChangeTracker.RecordOriginalValue("Periodo", previousValue)
            End If
            If Periodo IsNot Nothing AndAlso Not Periodo.ChangeTracker.ChangeTrackingEnabled Then
                Periodo.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPeriodo1(ByVal previousValue As Periodo)
        If IsDeserializing Then
            Return
        End If

        If Periodo1 IsNot Nothing Then
            prd_Periodo_id = Periodo1.prd_Periodo_id
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Periodo1") AndAlso
                ChangeTracker.OriginalValues("Periodo1") Is Periodo1 Then
                ChangeTracker.OriginalValues.Remove("Periodo1")
            Else
                ChangeTracker.RecordOriginalValue("Periodo1", previousValue)
            End If
            If Periodo1 IsNot Nothing AndAlso Not Periodo1.ChangeTracker.ChangeTrackingEnabled Then
                Periodo1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoDocumentos(ByVal previousValue As TipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Planillas.Contains(Me) Then
            previousValue.Planillas.Remove(Me)
        End If

        If TipoDocumentos IsNot Nothing Then
            If Not TipoDocumentos.Planillas.Contains(Me) Then
                TipoDocumentos.Planillas.Add(Me)
            End If

            tdo_Id = TipoDocumentos.TDO_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("TipoDocumentos") Is TipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("TipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("TipoDocumentos", previousValue)
            End If
            If TipoDocumentos IsNot Nothing AndAlso Not TipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                TipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            Usu_Id = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupConceptosPlanilla(ByVal previousValue As ConceptosPlanilla)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Planillas.Contains(Me) Then
            previousValue.Planillas.Remove(Me)
        End If

        If ConceptosPlanilla IsNot Nothing Then
            If Not ConceptosPlanilla.Planillas.Contains(Me) Then
                ConceptosPlanilla.Planillas.Add(Me)
            End If

            tit_TipoTrab_Id = ConceptosPlanilla.tit_TipoTrab_Id
            tip_TipoPlan_Id = ConceptosPlanilla.tip_TipoPlan_Id
            ItemConceptoPlanilla = ConceptosPlanilla.ItemConceptoPlanilla
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("ConceptosPlanilla") AndAlso
                ChangeTracker.OriginalValues("ConceptosPlanilla") Is ConceptosPlanilla Then
                ChangeTracker.OriginalValues.Remove("ConceptosPlanilla")
            Else
                ChangeTracker.RecordOriginalValue("ConceptosPlanilla", previousValue)
            End If
            If ConceptosPlanilla IsNot Nothing AndAlso Not ConceptosPlanilla.ChangeTracker.ChangeTrackingEnabled Then
                ConceptosPlanilla.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTrabajadorHoras(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As TrabajadorHoras In e.NewItems
                item.pla_SeriePlaniRef = pla_SeriePlani
                item.pla_NumeroRef = pla_Numero
                item.tdo_IdRef = tdo_Id
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("TrabajadorHoras", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As TrabajadorHoras In e.OldItems
                item.pla_SeriePlaniRef = Nothing
                item.pla_NumeroRef = Nothing
                item.tdo_IdRef = Nothing
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("TrabajadorHoras", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupDetallePlanillas(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetallePlanillas In e.NewItems
                item.pla_SeriePlani = pla_SeriePlani
                item.pla_Numero = pla_Numero
                item.tdo_Id = tdo_Id
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetallePlanillas", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetallePlanillas In e.OldItems
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetallePlanillas", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupPlanillasComedorHoras(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PlanillasComedorHoras In e.NewItems
                item.Planillas = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PlanillasComedorHoras", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PlanillasComedorHoras In e.OldItems
                If ReferenceEquals(item.Planillas, Me) Then
                    item.Planillas = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PlanillasComedorHoras", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupComedorPLL(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As ComedorPLL In e.NewItems
                item.Planillas = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("ComedorPLL", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As ComedorPLL In e.OldItems
                If ReferenceEquals(item.Planillas, Me) Then
                    item.Planillas = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("ComedorPLL", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupPlanillaTrabajador(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PlanillaTrabajador In e.NewItems
                item.Planillas = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PlanillaTrabajador", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PlanillaTrabajador In e.OldItems
                If ReferenceEquals(item.Planillas, Me) Then
                    item.Planillas = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PlanillaTrabajador", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupCronogramaVacaciones(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As CronogramaVacaciones In e.NewItems
                item.Planillas = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("CronogramaVacaciones", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As CronogramaVacaciones In e.OldItems
                If ReferenceEquals(item.Planillas, Me) Then
                    item.Planillas = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("CronogramaVacaciones", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
