'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(Personas))>
<KnownType(GetType(UnidadesTransporte))>
<KnownType(GetType(Despachos))>
Partial Public Class Placas
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared PLA_ID As string = "PLA_ID"
				public shared UNT_ID_1 As string = "UNT_ID_1"
				public shared UNT_ID_2 As string = "UNT_ID_2"
				public shared PER_ID As string = "PER_ID"
				public shared USU_ID As string = "USU_ID"
				public shared PLA_FEC_GRAB As string = "PLA_FEC_GRAB"
				public shared PLA_ESTADO As string = "PLA_ESTADO"
		    End Structure
	



    <DataMember()>
    Public Property PLA_ID() As String
        Get
            Return _pLA_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_pLA_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'PLA_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _pLA_ID = value
                OnPropertyChanged("PLA_ID")
            End If
        End Set
    End Property

    Private _pLA_ID As String

    <DataMember()>
    Public Property UNT_ID_1() As String
        Get
            Return _uNT_ID_1
        End Get
        Set(ByVal value As String)
            If Not Equals(_uNT_ID_1, value) Then
                ChangeTracker.RecordOriginalValue("UNT_ID_1", _uNT_ID_1)
                If Not IsDeserializing Then
                    If UnidadesTransporte IsNot Nothing AndAlso Not Equals(UnidadesTransporte.UNT_ID, value) Then
                        UnidadesTransporte = Nothing
                    End If
                End If
                _uNT_ID_1 = value
                OnPropertyChanged("UNT_ID_1")
            End If
        End Set
    End Property

    Private _uNT_ID_1 As String

    <DataMember()>
    Public Property UNT_ID_2() As String
        Get
            Return _uNT_ID_2
        End Get
        Set(ByVal value As String)
            If Not Equals(_uNT_ID_2, value) Then
                ChangeTracker.RecordOriginalValue("UNT_ID_2", _uNT_ID_2)
                If Not IsDeserializing Then
                    If UnidadesTransporte1 IsNot Nothing AndAlso Not Equals(UnidadesTransporte1.UNT_ID, value) Then
                        UnidadesTransporte1 = Nothing
                    End If
                End If
                _uNT_ID_2 = value
                OnPropertyChanged("UNT_ID_2")
            End If
        End Set
    End Property

    Private _uNT_ID_2 As String

    <DataMember()>
    Public Property PER_ID() As String
        Get
            Return _pER_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID", _pER_ID)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID = value
                OnPropertyChanged("PER_ID")
            End If
        End Set
    End Property

    Private _pER_ID As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property PLA_FEC_GRAB() As Date
        Get
            Return _pLA_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_pLA_FEC_GRAB, value) Then
                _pLA_FEC_GRAB = value
                OnPropertyChanged("PLA_FEC_GRAB")
            End If
        End Set
    End Property

    Private _pLA_FEC_GRAB As Date

    <DataMember()>
    Public Property PLA_ESTADO() As Boolean
        Get
            Return _pLA_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_pLA_ESTADO, value) Then
                _pLA_ESTADO = value
                OnPropertyChanged("PLA_ESTADO")
            End If
        End Set
    End Property

    Private _pLA_ESTADO As Boolean

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property UnidadesTransporte() As UnidadesTransporte
        Get
            Return _unidadesTransporte
        End Get
        Set(ByVal value As UnidadesTransporte)
            If _unidadesTransporte IsNot value Then
                Dim previousValue As UnidadesTransporte = _unidadesTransporte
                _unidadesTransporte = value
                FixupUnidadesTransporte(previousValue)
                OnNavigationPropertyChanged("UnidadesTransporte")
            End If
        End Set
    End Property

    Private _unidadesTransporte As UnidadesTransporte


    <DataMember()>
    Public Property UnidadesTransporte1() As UnidadesTransporte
        Get
            Return _unidadesTransporte1
        End Get
        Set(ByVal value As UnidadesTransporte)
            If _unidadesTransporte1 IsNot value Then
                Dim previousValue As UnidadesTransporte = _unidadesTransporte1
                _unidadesTransporte1 = value
                FixupUnidadesTransporte1(previousValue)
                OnNavigationPropertyChanged("UnidadesTransporte1")
            End If
        End Set
    End Property

    Private _unidadesTransporte1 As UnidadesTransporte


    <DataMember()>
    Public Property Despachos() As TrackableCollection(Of Despachos)
        Get
            If _despachos Is Nothing Then
                _despachos = New TrackableCollection(Of Despachos)
                AddHandler _despachos.CollectionChanged, AddressOf FixupDespachos
            End If
            Return _despachos
        End Get
        Set(ByVal value As TrackableCollection(Of Despachos))
            If Not Object.ReferenceEquals(_despachos, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _despachos IsNot Nothing Then
                    RemoveHandler _despachos.CollectionChanged, AddressOf FixupDespachos
                End If
                _despachos = value
                If _despachos IsNot Nothing Then
                    AddHandler _despachos.CollectionChanged, AddressOf FixupDespachos
                End If
                OnNavigationPropertyChanged("Despachos")
            End If
        End Set
    End Property

    Private _despachos As TrackableCollection(Of Despachos)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Usuarios = Nothing
        Personas = Nothing
        UnidadesTransporte = Nothing
        UnidadesTransporte1 = Nothing
        Despachos.Clear()
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas)
        If IsDeserializing Then
            Return
        End If

        If Personas IsNot Nothing Then
            PER_ID = Personas.PER_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUnidadesTransporte(ByVal previousValue As UnidadesTransporte)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Placas.Contains(Me) Then
            previousValue.Placas.Remove(Me)
        End If

        If UnidadesTransporte IsNot Nothing Then
            If Not UnidadesTransporte.Placas.Contains(Me) Then
                UnidadesTransporte.Placas.Add(Me)
            End If

            UNT_ID_1 = UnidadesTransporte.UNT_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("UnidadesTransporte") AndAlso
                ChangeTracker.OriginalValues("UnidadesTransporte") Is UnidadesTransporte Then
                ChangeTracker.OriginalValues.Remove("UnidadesTransporte")
            Else
                ChangeTracker.RecordOriginalValue("UnidadesTransporte", previousValue)
            End If
            If UnidadesTransporte IsNot Nothing AndAlso Not UnidadesTransporte.ChangeTracker.ChangeTrackingEnabled Then
                UnidadesTransporte.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUnidadesTransporte1(ByVal previousValue As UnidadesTransporte, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Placas1.Contains(Me) Then
            previousValue.Placas1.Remove(Me)
        End If

        If UnidadesTransporte1 IsNot Nothing Then
            If Not UnidadesTransporte1.Placas1.Contains(Me) Then
                UnidadesTransporte1.Placas1.Add(Me)
            End If

            UNT_ID_2 = UnidadesTransporte1.UNT_ID
        ElseIf Not skipKeys Then
            UNT_ID_2 = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("UnidadesTransporte1") AndAlso
                ChangeTracker.OriginalValues("UnidadesTransporte1") Is UnidadesTransporte1 Then
                ChangeTracker.OriginalValues.Remove("UnidadesTransporte1")
            Else
                ChangeTracker.RecordOriginalValue("UnidadesTransporte1", previousValue)
            End If
            If UnidadesTransporte1 IsNot Nothing AndAlso Not UnidadesTransporte1.ChangeTracker.ChangeTrackingEnabled Then
                UnidadesTransporte1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDespachos(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As Despachos In e.NewItems
                item.Placas = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("Despachos", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As Despachos In e.OldItems
                If ReferenceEquals(item.Placas, Me) Then
                    item.Placas = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("Despachos", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
