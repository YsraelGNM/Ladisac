'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(CuentasActivos))>
<KnownType(GetType(Incidencias))>
<KnownType(GetType(MarcaArticulos))>
<KnownType(GetType(ModeloArticulos))>
<KnownType(GetType(Moneda))>
<KnownType(GetType(Pais))>
<KnownType(GetType(CentroCostos))>
<KnownType(GetType(Asignaciones))>
<KnownType(GetType(DetalleActivosFijos))>
<KnownType(GetType(DetalleLeasingActivosFijos))>
<KnownType(GetType(Personas))>
<KnownType(GetType(UnidadesTransporte))>
<KnownType(GetType(DocuMovimiento))>
Partial Public Class ActivosFijos
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared ACF_ID As string = "ACF_ID"
				public shared ACF_COR_INCIDENCIA As string = "ACF_COR_INCIDENCIA"
				public shared INC_ID As string = "INC_ID"
				public shared ACF_DESCRIPCION As string = "ACF_DESCRIPCION"
				public shared CUA_ID As string = "CUA_ID"
				public shared CCT_ID As string = "CCT_ID"
				public shared CCO_ID As string = "CCO_ID"
				public shared PER_ID As string = "PER_ID"
				public shared UNT_ID As string = "UNT_ID"
				public shared MAR_ID As string = "MAR_ID"
				public shared MOD_ID As string = "MOD_ID"
				public shared ACF_COLOR As string = "ACF_COLOR"
				public shared ACF_ANIO_FAB As string = "ACF_ANIO_FAB"
				public shared ACF_NRO_PARTE As string = "ACF_NRO_PARTE"
				public shared ACF_SERIE_FAB As string = "ACF_SERIE_FAB"
				public shared PAI_ID As string = "PAI_ID"
				public shared ACF_FEC_ADQ As string = "ACF_FEC_ADQ"
				public shared DMO_ID As string = "DMO_ID"
				public shared PRC_VOUCHER As string = "PRC_VOUCHER"
				public shared PRD_PERIODO_ID As string = "PRD_PERIODO_ID"
				public shared LIB_ID As string = "LIB_ID"
				public shared TIV_ID As string = "TIV_ID"
				public shared MON_ID As string = "MON_ID"
				public shared ACF_VALOR_COMPRA As string = "ACF_VALOR_COMPRA"
				public shared ACF_CONTRAVALOR As string = "ACF_CONTRAVALOR"
				public shared ACF_COSTO_ADQ As string = "ACF_COSTO_ADQ"
				public shared ACF_ESTADO_BIEN As string = "ACF_ESTADO_BIEN"
				public shared ACF_FECHA_ACT As string = "ACF_FECHA_ACT"
				public shared ACF_MODO_ADQ As string = "ACF_MODO_ADQ"
				public shared ACF_CALCULAR_DEP As string = "ACF_CALCULAR_DEP"
				public shared ACF_OBSERVACIONES As string = "ACF_OBSERVACIONES"
				public shared ACF_VALOR_ACTUALIZADO As string = "ACF_VALOR_ACTUALIZADO"
				public shared ACF_DEPRECIACION_ACU As string = "ACF_DEPRECIACION_ACU"
				public shared USU_ID As string = "USU_ID"
				public shared ACF_FEC_GRAB As string = "ACF_FEC_GRAB"
				public shared ACF_ESTADO As string = "ACF_ESTADO"
		    End Structure
	



    <DataMember()>
    Public Property ACF_ID() As String
        Get
            Return _aCF_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_aCF_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'ACF_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _aCF_ID = value
                OnPropertyChanged("ACF_ID")
            End If
        End Set
    End Property

    Private _aCF_ID As String

    <DataMember()>
    Public Property ACF_COR_INCIDENCIA() As Decimal
        Get
            Return _aCF_COR_INCIDENCIA
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_aCF_COR_INCIDENCIA, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'ACF_COR_INCIDENCIA' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _aCF_COR_INCIDENCIA = value
                OnPropertyChanged("ACF_COR_INCIDENCIA")
            End If
        End Set
    End Property

    Private _aCF_COR_INCIDENCIA As Decimal

    <DataMember()>
    Public Property INC_ID() As String
        Get
            Return _iNC_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_iNC_ID, value) Then
                ChangeTracker.RecordOriginalValue("INC_ID", _iNC_ID)
                If Not IsDeserializing Then
                    If Incidencias IsNot Nothing AndAlso Not Equals(Incidencias.INC_ID, value) Then
                        Incidencias = Nothing
                    End If
                End If
                _iNC_ID = value
                OnPropertyChanged("INC_ID")
            End If
        End Set
    End Property

    Private _iNC_ID As String

    <DataMember()>
    Public Property ACF_DESCRIPCION() As String
        Get
            Return _aCF_DESCRIPCION
        End Get
        Set(ByVal value As String)
            If Not Equals(_aCF_DESCRIPCION, value) Then
                _aCF_DESCRIPCION = value
                OnPropertyChanged("ACF_DESCRIPCION")
            End If
        End Set
    End Property

    Private _aCF_DESCRIPCION As String

    <DataMember()>
    Public Property CUA_ID() As String
        Get
            Return _cUA_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cUA_ID, value) Then
                ChangeTracker.RecordOriginalValue("CUA_ID", _cUA_ID)
                If Not IsDeserializing Then
                    If CuentasActivos IsNot Nothing AndAlso Not Equals(CuentasActivos.CUA_ID, value) Then
                        CuentasActivos = Nothing
                    End If
                End If
                _cUA_ID = value
                OnPropertyChanged("CUA_ID")
            End If
        End Set
    End Property

    Private _cUA_ID As String

    <DataMember()>
    Public Property CCT_ID() As String
        Get
            Return _cCT_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCT_ID, value) Then
                _cCT_ID = value
                OnPropertyChanged("CCT_ID")
            End If
        End Set
    End Property

    Private _cCT_ID As String

    <DataMember()>
    Public Property CCO_ID() As String
        Get
            Return _cCO_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCO_ID, value) Then
                ChangeTracker.RecordOriginalValue("CCO_ID", _cCO_ID)
                If Not IsDeserializing Then
                    If CentroCostos IsNot Nothing AndAlso Not Equals(CentroCostos.CCO_ID, value) Then
                        CentroCostos = Nothing
                    End If
                End If
                _cCO_ID = value
                OnPropertyChanged("CCO_ID")
            End If
        End Set
    End Property

    Private _cCO_ID As String

    <DataMember()>
    Public Property PER_ID() As String
        Get
            Return _pER_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID", _pER_ID)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID = value
                OnPropertyChanged("PER_ID")
            End If
        End Set
    End Property

    Private _pER_ID As String

    <DataMember()>
    Public Property UNT_ID() As String
        Get
            Return _uNT_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uNT_ID, value) Then
                ChangeTracker.RecordOriginalValue("UNT_ID", _uNT_ID)
                If Not IsDeserializing Then
                    If UnidadesTransporte IsNot Nothing AndAlso Not Equals(UnidadesTransporte.UNT_ID, value) Then
                        UnidadesTransporte = Nothing
                    End If
                End If
                _uNT_ID = value
                OnPropertyChanged("UNT_ID")
            End If
        End Set
    End Property

    Private _uNT_ID As String

    <DataMember()>
    Public Property MAR_ID() As String
        Get
            Return _mAR_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_mAR_ID, value) Then
                ChangeTracker.RecordOriginalValue("MAR_ID", _mAR_ID)
                If Not IsDeserializing Then
                    If MarcaArticulos IsNot Nothing AndAlso Not Equals(MarcaArticulos.MAR_ID, value) Then
                        MarcaArticulos = Nothing
                    End If
                End If
                _mAR_ID = value
                OnPropertyChanged("MAR_ID")
            End If
        End Set
    End Property

    Private _mAR_ID As String

    <DataMember()>
    Public Property MOD_ID() As String
        Get
            Return _mOD_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_mOD_ID, value) Then
                ChangeTracker.RecordOriginalValue("MOD_ID", _mOD_ID)
                If Not IsDeserializing Then
                    If ModeloArticulos IsNot Nothing AndAlso Not Equals(ModeloArticulos.MOD_ID, value) Then
                        ModeloArticulos = Nothing
                    End If
                End If
                _mOD_ID = value
                OnPropertyChanged("MOD_ID")
            End If
        End Set
    End Property

    Private _mOD_ID As String

    <DataMember()>
    Public Property ACF_COLOR() As String
        Get
            Return _aCF_COLOR
        End Get
        Set(ByVal value As String)
            If Not Equals(_aCF_COLOR, value) Then
                _aCF_COLOR = value
                OnPropertyChanged("ACF_COLOR")
            End If
        End Set
    End Property

    Private _aCF_COLOR As String

    <DataMember()>
    Public Property ACF_ANIO_FAB() As Nullable(Of Decimal)
        Get
            Return _aCF_ANIO_FAB
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_aCF_ANIO_FAB, value) Then
                _aCF_ANIO_FAB = value
                OnPropertyChanged("ACF_ANIO_FAB")
            End If
        End Set
    End Property

    Private _aCF_ANIO_FAB As Nullable(Of Decimal)

    <DataMember()>
    Public Property ACF_NRO_PARTE() As String
        Get
            Return _aCF_NRO_PARTE
        End Get
        Set(ByVal value As String)
            If Not Equals(_aCF_NRO_PARTE, value) Then
                _aCF_NRO_PARTE = value
                OnPropertyChanged("ACF_NRO_PARTE")
            End If
        End Set
    End Property

    Private _aCF_NRO_PARTE As String

    <DataMember()>
    Public Property ACF_SERIE_FAB() As String
        Get
            Return _aCF_SERIE_FAB
        End Get
        Set(ByVal value As String)
            If Not Equals(_aCF_SERIE_FAB, value) Then
                _aCF_SERIE_FAB = value
                OnPropertyChanged("ACF_SERIE_FAB")
            End If
        End Set
    End Property

    Private _aCF_SERIE_FAB As String

    <DataMember()>
    Public Property PAI_ID() As String
        Get
            Return _pAI_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_pAI_ID, value) Then
                ChangeTracker.RecordOriginalValue("PAI_ID", _pAI_ID)
                If Not IsDeserializing Then
                    If Pais IsNot Nothing AndAlso Not Equals(Pais.PAI_ID, value) Then
                        Pais = Nothing
                    End If
                End If
                _pAI_ID = value
                OnPropertyChanged("PAI_ID")
            End If
        End Set
    End Property

    Private _pAI_ID As String

    <DataMember()>
    Public Property ACF_FEC_ADQ() As Date
        Get
            Return _aCF_FEC_ADQ
        End Get
        Set(ByVal value As Date)
            If Not Equals(_aCF_FEC_ADQ, value) Then
                _aCF_FEC_ADQ = value
                OnPropertyChanged("ACF_FEC_ADQ")
            End If
        End Set
    End Property

    Private _aCF_FEC_ADQ As Date

    <DataMember()>
    Public Property DMO_ID() As Nullable(Of Integer)
        Get
            Return _dMO_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_dMO_ID, value) Then
                ChangeTracker.RecordOriginalValue("DMO_ID", _dMO_ID)
                If Not IsDeserializing Then
                    If DocuMovimiento IsNot Nothing AndAlso Not Equals(DocuMovimiento.DMO_ID, value) Then
                        DocuMovimiento = Nothing
                    End If
                End If
                _dMO_ID = value
                OnPropertyChanged("DMO_ID")
            End If
        End Set
    End Property

    Private _dMO_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property PRC_VOUCHER() As String
        Get
            Return _pRC_VOUCHER
        End Get
        Set(ByVal value As String)
            If Not Equals(_pRC_VOUCHER, value) Then
                _pRC_VOUCHER = value
                OnPropertyChanged("PRC_VOUCHER")
            End If
        End Set
    End Property

    Private _pRC_VOUCHER As String

    <DataMember()>
    Public Property PRD_PERIODO_ID() As String
        Get
            Return _pRD_PERIODO_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_pRD_PERIODO_ID, value) Then
                _pRD_PERIODO_ID = value
                OnPropertyChanged("PRD_PERIODO_ID")
            End If
        End Set
    End Property

    Private _pRD_PERIODO_ID As String

    <DataMember()>
    Public Property LIB_ID() As String
        Get
            Return _lIB_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_lIB_ID, value) Then
                _lIB_ID = value
                OnPropertyChanged("LIB_ID")
            End If
        End Set
    End Property

    Private _lIB_ID As String

    <DataMember()>
    Public Property TIV_ID() As String
        Get
            Return _tIV_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_tIV_ID, value) Then
                _tIV_ID = value
                OnPropertyChanged("TIV_ID")
            End If
        End Set
    End Property

    Private _tIV_ID As String

    <DataMember()>
    Public Property MON_ID() As String
        Get
            Return _mON_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_mON_ID, value) Then
                ChangeTracker.RecordOriginalValue("MON_ID", _mON_ID)
                If Not IsDeserializing Then
                    If Moneda IsNot Nothing AndAlso Not Equals(Moneda.MON_ID, value) Then
                        Moneda = Nothing
                    End If
                End If
                _mON_ID = value
                OnPropertyChanged("MON_ID")
            End If
        End Set
    End Property

    Private _mON_ID As String

    <DataMember()>
    Public Property ACF_VALOR_COMPRA() As Decimal
        Get
            Return _aCF_VALOR_COMPRA
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_aCF_VALOR_COMPRA, value) Then
                _aCF_VALOR_COMPRA = value
                OnPropertyChanged("ACF_VALOR_COMPRA")
            End If
        End Set
    End Property

    Private _aCF_VALOR_COMPRA As Decimal

    <DataMember()>
    Public Property ACF_CONTRAVALOR() As Decimal
        Get
            Return _aCF_CONTRAVALOR
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_aCF_CONTRAVALOR, value) Then
                _aCF_CONTRAVALOR = value
                OnPropertyChanged("ACF_CONTRAVALOR")
            End If
        End Set
    End Property

    Private _aCF_CONTRAVALOR As Decimal

    <DataMember()>
    Public Property ACF_COSTO_ADQ() As Nullable(Of Decimal)
        Get
            Return _aCF_COSTO_ADQ
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_aCF_COSTO_ADQ, value) Then
                _aCF_COSTO_ADQ = value
                OnPropertyChanged("ACF_COSTO_ADQ")
            End If
        End Set
    End Property

    Private _aCF_COSTO_ADQ As Nullable(Of Decimal)

    <DataMember()>
    Public Property ACF_ESTADO_BIEN() As Short
        Get
            Return _aCF_ESTADO_BIEN
        End Get
        Set(ByVal value As Short)
            If Not Equals(_aCF_ESTADO_BIEN, value) Then
                _aCF_ESTADO_BIEN = value
                OnPropertyChanged("ACF_ESTADO_BIEN")
            End If
        End Set
    End Property

    Private _aCF_ESTADO_BIEN As Short

    <DataMember()>
    Public Property ACF_FECHA_ACT() As Date
        Get
            Return _aCF_FECHA_ACT
        End Get
        Set(ByVal value As Date)
            If Not Equals(_aCF_FECHA_ACT, value) Then
                _aCF_FECHA_ACT = value
                OnPropertyChanged("ACF_FECHA_ACT")
            End If
        End Set
    End Property

    Private _aCF_FECHA_ACT As Date

    <DataMember()>
    Public Property ACF_MODO_ADQ() As Short
        Get
            Return _aCF_MODO_ADQ
        End Get
        Set(ByVal value As Short)
            If Not Equals(_aCF_MODO_ADQ, value) Then
                _aCF_MODO_ADQ = value
                OnPropertyChanged("ACF_MODO_ADQ")
            End If
        End Set
    End Property

    Private _aCF_MODO_ADQ As Short

    <DataMember()>
    Public Property ACF_CALCULAR_DEP() As Short
        Get
            Return _aCF_CALCULAR_DEP
        End Get
        Set(ByVal value As Short)
            If Not Equals(_aCF_CALCULAR_DEP, value) Then
                _aCF_CALCULAR_DEP = value
                OnPropertyChanged("ACF_CALCULAR_DEP")
            End If
        End Set
    End Property

    Private _aCF_CALCULAR_DEP As Short

    <DataMember()>
    Public Property ACF_OBSERVACIONES() As String
        Get
            Return _aCF_OBSERVACIONES
        End Get
        Set(ByVal value As String)
            If Not Equals(_aCF_OBSERVACIONES, value) Then
                _aCF_OBSERVACIONES = value
                OnPropertyChanged("ACF_OBSERVACIONES")
            End If
        End Set
    End Property

    Private _aCF_OBSERVACIONES As String

    <DataMember()>
    Public Property ACF_VALOR_ACTUALIZADO() As Decimal
        Get
            Return _aCF_VALOR_ACTUALIZADO
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_aCF_VALOR_ACTUALIZADO, value) Then
                _aCF_VALOR_ACTUALIZADO = value
                OnPropertyChanged("ACF_VALOR_ACTUALIZADO")
            End If
        End Set
    End Property

    Private _aCF_VALOR_ACTUALIZADO As Decimal

    <DataMember()>
    Public Property ACF_DEPRECIACION_ACU() As Decimal
        Get
            Return _aCF_DEPRECIACION_ACU
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_aCF_DEPRECIACION_ACU, value) Then
                _aCF_DEPRECIACION_ACU = value
                OnPropertyChanged("ACF_DEPRECIACION_ACU")
            End If
        End Set
    End Property

    Private _aCF_DEPRECIACION_ACU As Decimal

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property ACF_FEC_GRAB() As Date
        Get
            Return _aCF_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_aCF_FEC_GRAB, value) Then
                _aCF_FEC_GRAB = value
                OnPropertyChanged("ACF_FEC_GRAB")
            End If
        End Set
    End Property

    Private _aCF_FEC_GRAB As Date

    <DataMember()>
    Public Property ACF_ESTADO() As Boolean
        Get
            Return _aCF_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_aCF_ESTADO, value) Then
                _aCF_ESTADO = value
                OnPropertyChanged("ACF_ESTADO")
            End If
        End Set
    End Property

    Private _aCF_ESTADO As Boolean

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property CuentasActivos() As CuentasActivos
        Get
            Return _cuentasActivos
        End Get
        Set(ByVal value As CuentasActivos)
            If _cuentasActivos IsNot value Then
                Dim previousValue As CuentasActivos = _cuentasActivos
                _cuentasActivos = value
                FixupCuentasActivos(previousValue)
                OnNavigationPropertyChanged("CuentasActivos")
            End If
        End Set
    End Property

    Private _cuentasActivos As CuentasActivos


    <DataMember()>
    Public Property Incidencias() As Incidencias
        Get
            Return _incidencias
        End Get
        Set(ByVal value As Incidencias)
            If _incidencias IsNot value Then
                Dim previousValue As Incidencias = _incidencias
                _incidencias = value
                FixupIncidencias(previousValue)
                OnNavigationPropertyChanged("Incidencias")
            End If
        End Set
    End Property

    Private _incidencias As Incidencias


    <DataMember()>
    Public Property MarcaArticulos() As MarcaArticulos
        Get
            Return _marcaArticulos
        End Get
        Set(ByVal value As MarcaArticulos)
            If _marcaArticulos IsNot value Then
                Dim previousValue As MarcaArticulos = _marcaArticulos
                _marcaArticulos = value
                FixupMarcaArticulos(previousValue)
                OnNavigationPropertyChanged("MarcaArticulos")
            End If
        End Set
    End Property

    Private _marcaArticulos As MarcaArticulos


    <DataMember()>
    Public Property ModeloArticulos() As ModeloArticulos
        Get
            Return _modeloArticulos
        End Get
        Set(ByVal value As ModeloArticulos)
            If _modeloArticulos IsNot value Then
                Dim previousValue As ModeloArticulos = _modeloArticulos
                _modeloArticulos = value
                FixupModeloArticulos(previousValue)
                OnNavigationPropertyChanged("ModeloArticulos")
            End If
        End Set
    End Property

    Private _modeloArticulos As ModeloArticulos


    <DataMember()>
    Public Property Moneda() As Moneda
        Get
            Return _moneda
        End Get
        Set(ByVal value As Moneda)
            If _moneda IsNot value Then
                Dim previousValue As Moneda = _moneda
                _moneda = value
                FixupMoneda(previousValue)
                OnNavigationPropertyChanged("Moneda")
            End If
        End Set
    End Property

    Private _moneda As Moneda


    <DataMember()>
    Public Property Pais() As Pais
        Get
            Return _pais
        End Get
        Set(ByVal value As Pais)
            If _pais IsNot value Then
                Dim previousValue As Pais = _pais
                _pais = value
                FixupPais(previousValue)
                OnNavigationPropertyChanged("Pais")
            End If
        End Set
    End Property

    Private _pais As Pais


    <DataMember()>
    Public Property CentroCostos() As CentroCostos
        Get
            Return _centroCostos
        End Get
        Set(ByVal value As CentroCostos)
            If _centroCostos IsNot value Then
                Dim previousValue As CentroCostos = _centroCostos
                _centroCostos = value
                FixupCentroCostos(previousValue)
                OnNavigationPropertyChanged("CentroCostos")
            End If
        End Set
    End Property

    Private _centroCostos As CentroCostos


    <DataMember()>
    Public Property Asignaciones() As TrackableCollection(Of Asignaciones)
        Get
            If _asignaciones Is Nothing Then
                _asignaciones = New TrackableCollection(Of Asignaciones)
                AddHandler _asignaciones.CollectionChanged, AddressOf FixupAsignaciones
            End If
            Return _asignaciones
        End Get
        Set(ByVal value As TrackableCollection(Of Asignaciones))
            If Not Object.ReferenceEquals(_asignaciones, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _asignaciones IsNot Nothing Then
                    RemoveHandler _asignaciones.CollectionChanged, AddressOf FixupAsignaciones
                End If
                _asignaciones = value
                If _asignaciones IsNot Nothing Then
                    AddHandler _asignaciones.CollectionChanged, AddressOf FixupAsignaciones
                End If
                OnNavigationPropertyChanged("Asignaciones")
            End If
        End Set
    End Property

    Private _asignaciones As TrackableCollection(Of Asignaciones)

    <DataMember()>
    Public Property DetalleActivosFijos() As TrackableCollection(Of DetalleActivosFijos)
        Get
            If _detalleActivosFijos Is Nothing Then
                _detalleActivosFijos = New TrackableCollection(Of DetalleActivosFijos)
                AddHandler _detalleActivosFijos.CollectionChanged, AddressOf FixupDetalleActivosFijos
            End If
            Return _detalleActivosFijos
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleActivosFijos))
            If Not Object.ReferenceEquals(_detalleActivosFijos, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleActivosFijos IsNot Nothing Then
                    RemoveHandler _detalleActivosFijos.CollectionChanged, AddressOf FixupDetalleActivosFijos
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As DetalleActivosFijos In _detalleActivosFijos
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detalleActivosFijos = value
                If _detalleActivosFijos IsNot Nothing Then
                    AddHandler _detalleActivosFijos.CollectionChanged, AddressOf FixupDetalleActivosFijos
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As DetalleActivosFijos In _detalleActivosFijos
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetalleActivosFijos")
            End If
        End Set
    End Property

    Private _detalleActivosFijos As TrackableCollection(Of DetalleActivosFijos)

    <DataMember()>
    Public Property DetalleLeasingActivosFijos() As TrackableCollection(Of DetalleLeasingActivosFijos)
        Get
            If _detalleLeasingActivosFijos Is Nothing Then
                _detalleLeasingActivosFijos = New TrackableCollection(Of DetalleLeasingActivosFijos)
                AddHandler _detalleLeasingActivosFijos.CollectionChanged, AddressOf FixupDetalleLeasingActivosFijos
            End If
            Return _detalleLeasingActivosFijos
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleLeasingActivosFijos))
            If Not Object.ReferenceEquals(_detalleLeasingActivosFijos, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleLeasingActivosFijos IsNot Nothing Then
                    RemoveHandler _detalleLeasingActivosFijos.CollectionChanged, AddressOf FixupDetalleLeasingActivosFijos
                End If
                _detalleLeasingActivosFijos = value
                If _detalleLeasingActivosFijos IsNot Nothing Then
                    AddHandler _detalleLeasingActivosFijos.CollectionChanged, AddressOf FixupDetalleLeasingActivosFijos
                End If
                OnNavigationPropertyChanged("DetalleLeasingActivosFijos")
            End If
        End Set
    End Property

    Private _detalleLeasingActivosFijos As TrackableCollection(Of DetalleLeasingActivosFijos)

    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property UnidadesTransporte() As UnidadesTransporte
        Get
            Return _unidadesTransporte
        End Get
        Set(ByVal value As UnidadesTransporte)
            If _unidadesTransporte IsNot value Then
                Dim previousValue As UnidadesTransporte = _unidadesTransporte
                _unidadesTransporte = value
                FixupUnidadesTransporte(previousValue)
                OnNavigationPropertyChanged("UnidadesTransporte")
            End If
        End Set
    End Property

    Private _unidadesTransporte As UnidadesTransporte


    <DataMember()>
    Public Property DocuMovimiento() As DocuMovimiento
        Get
            Return _docuMovimiento
        End Get
        Set(ByVal value As DocuMovimiento)
            If _docuMovimiento IsNot value Then
                Dim previousValue As DocuMovimiento = _docuMovimiento
                _docuMovimiento = value
                FixupDocuMovimiento(previousValue)
                OnNavigationPropertyChanged("DocuMovimiento")
            End If
        End Set
    End Property

    Private _docuMovimiento As DocuMovimiento


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        CuentasActivos = Nothing
        Incidencias = Nothing
        MarcaArticulos = Nothing
        ModeloArticulos = Nothing
        Moneda = Nothing
        Pais = Nothing
        CentroCostos = Nothing
        Asignaciones.Clear()
        DetalleActivosFijos.Clear()
        DetalleLeasingActivosFijos.Clear()
        Personas = Nothing
        UnidadesTransporte = Nothing
        DocuMovimiento = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupCuentasActivos(ByVal previousValue As CuentasActivos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ActivosFijos.Contains(Me) Then
            previousValue.ActivosFijos.Remove(Me)
        End If

        If CuentasActivos IsNot Nothing Then
            If Not CuentasActivos.ActivosFijos.Contains(Me) Then
                CuentasActivos.ActivosFijos.Add(Me)
            End If

            CUA_ID = CuentasActivos.CUA_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CuentasActivos") AndAlso
                ChangeTracker.OriginalValues("CuentasActivos") Is CuentasActivos Then
                ChangeTracker.OriginalValues.Remove("CuentasActivos")
            Else
                ChangeTracker.RecordOriginalValue("CuentasActivos", previousValue)
            End If
            If CuentasActivos IsNot Nothing AndAlso Not CuentasActivos.ChangeTracker.ChangeTrackingEnabled Then
                CuentasActivos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupIncidencias(ByVal previousValue As Incidencias, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ActivosFijos.Contains(Me) Then
            previousValue.ActivosFijos.Remove(Me)
        End If

        If Incidencias IsNot Nothing Then
            If Not Incidencias.ActivosFijos.Contains(Me) Then
                Incidencias.ActivosFijos.Add(Me)
            End If

            INC_ID = Incidencias.INC_ID
        ElseIf Not skipKeys Then
            INC_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Incidencias") AndAlso
                ChangeTracker.OriginalValues("Incidencias") Is Incidencias Then
                ChangeTracker.OriginalValues.Remove("Incidencias")
            Else
                ChangeTracker.RecordOriginalValue("Incidencias", previousValue)
            End If
            If Incidencias IsNot Nothing AndAlso Not Incidencias.ChangeTracker.ChangeTrackingEnabled Then
                Incidencias.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupMarcaArticulos(ByVal previousValue As MarcaArticulos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ActivosFijos.Contains(Me) Then
            previousValue.ActivosFijos.Remove(Me)
        End If

        If MarcaArticulos IsNot Nothing Then
            If Not MarcaArticulos.ActivosFijos.Contains(Me) Then
                MarcaArticulos.ActivosFijos.Add(Me)
            End If

            MAR_ID = MarcaArticulos.MAR_ID
        ElseIf Not skipKeys Then
            MAR_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("MarcaArticulos") AndAlso
                ChangeTracker.OriginalValues("MarcaArticulos") Is MarcaArticulos Then
                ChangeTracker.OriginalValues.Remove("MarcaArticulos")
            Else
                ChangeTracker.RecordOriginalValue("MarcaArticulos", previousValue)
            End If
            If MarcaArticulos IsNot Nothing AndAlso Not MarcaArticulos.ChangeTracker.ChangeTrackingEnabled Then
                MarcaArticulos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupModeloArticulos(ByVal previousValue As ModeloArticulos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ActivosFijos.Contains(Me) Then
            previousValue.ActivosFijos.Remove(Me)
        End If

        If ModeloArticulos IsNot Nothing Then
            If Not ModeloArticulos.ActivosFijos.Contains(Me) Then
                ModeloArticulos.ActivosFijos.Add(Me)
            End If

            MOD_ID = ModeloArticulos.MOD_ID
        ElseIf Not skipKeys Then
            MOD_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("ModeloArticulos") AndAlso
                ChangeTracker.OriginalValues("ModeloArticulos") Is ModeloArticulos Then
                ChangeTracker.OriginalValues.Remove("ModeloArticulos")
            Else
                ChangeTracker.RecordOriginalValue("ModeloArticulos", previousValue)
            End If
            If ModeloArticulos IsNot Nothing AndAlso Not ModeloArticulos.ChangeTracker.ChangeTrackingEnabled Then
                ModeloArticulos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupMoneda(ByVal previousValue As Moneda, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Moneda IsNot Nothing Then
            MON_ID = Moneda.MON_ID
        ElseIf Not skipKeys Then
            MON_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Moneda") AndAlso
                ChangeTracker.OriginalValues("Moneda") Is Moneda Then
                ChangeTracker.OriginalValues.Remove("Moneda")
            Else
                ChangeTracker.RecordOriginalValue("Moneda", previousValue)
            End If
            If Moneda IsNot Nothing AndAlso Not Moneda.ChangeTracker.ChangeTrackingEnabled Then
                Moneda.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPais(ByVal previousValue As Pais)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ActivosFijos.Contains(Me) Then
            previousValue.ActivosFijos.Remove(Me)
        End If

        If Pais IsNot Nothing Then
            If Not Pais.ActivosFijos.Contains(Me) Then
                Pais.ActivosFijos.Add(Me)
            End If

            PAI_ID = Pais.PAI_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Pais") AndAlso
                ChangeTracker.OriginalValues("Pais") Is Pais Then
                ChangeTracker.OriginalValues.Remove("Pais")
            Else
                ChangeTracker.RecordOriginalValue("Pais", previousValue)
            End If
            If Pais IsNot Nothing AndAlso Not Pais.ChangeTracker.ChangeTrackingEnabled Then
                Pais.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCentroCostos(ByVal previousValue As CentroCostos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ActivosFijos.Contains(Me) Then
            previousValue.ActivosFijos.Remove(Me)
        End If

        If CentroCostos IsNot Nothing Then
            If Not CentroCostos.ActivosFijos.Contains(Me) Then
                CentroCostos.ActivosFijos.Add(Me)
            End If

            CCO_ID = CentroCostos.CCO_ID
        ElseIf Not skipKeys Then
            CCO_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CentroCostos") AndAlso
                ChangeTracker.OriginalValues("CentroCostos") Is CentroCostos Then
                ChangeTracker.OriginalValues.Remove("CentroCostos")
            Else
                ChangeTracker.RecordOriginalValue("CentroCostos", previousValue)
            End If
            If CentroCostos IsNot Nothing AndAlso Not CentroCostos.ChangeTracker.ChangeTrackingEnabled Then
                CentroCostos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ActivosFijos.Contains(Me) Then
            previousValue.ActivosFijos.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.ActivosFijos.Contains(Me) Then
                Personas.ActivosFijos.Add(Me)
            End If

            PER_ID = Personas.PER_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUnidadesTransporte(ByVal previousValue As UnidadesTransporte, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ActivosFijos.Contains(Me) Then
            previousValue.ActivosFijos.Remove(Me)
        End If

        If UnidadesTransporte IsNot Nothing Then
            If Not UnidadesTransporte.ActivosFijos.Contains(Me) Then
                UnidadesTransporte.ActivosFijos.Add(Me)
            End If

            UNT_ID = UnidadesTransporte.UNT_ID
        ElseIf Not skipKeys Then
            UNT_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("UnidadesTransporte") AndAlso
                ChangeTracker.OriginalValues("UnidadesTransporte") Is UnidadesTransporte Then
                ChangeTracker.OriginalValues.Remove("UnidadesTransporte")
            Else
                ChangeTracker.RecordOriginalValue("UnidadesTransporte", previousValue)
            End If
            If UnidadesTransporte IsNot Nothing AndAlso Not UnidadesTransporte.ChangeTracker.ChangeTrackingEnabled Then
                UnidadesTransporte.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDocuMovimiento(ByVal previousValue As DocuMovimiento, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If DocuMovimiento IsNot Nothing Then
            DMO_ID = DocuMovimiento.DMO_ID
        ElseIf Not skipKeys Then
            DMO_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DocuMovimiento") AndAlso
                ChangeTracker.OriginalValues("DocuMovimiento") Is DocuMovimiento Then
                ChangeTracker.OriginalValues.Remove("DocuMovimiento")
            Else
                ChangeTracker.RecordOriginalValue("DocuMovimiento", previousValue)
            End If
            If DocuMovimiento IsNot Nothing AndAlso Not DocuMovimiento.ChangeTracker.ChangeTrackingEnabled Then
                DocuMovimiento.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupAsignaciones(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As Asignaciones In e.NewItems
                item.ActivosFijos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("Asignaciones", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As Asignaciones In e.OldItems
                If ReferenceEquals(item.ActivosFijos, Me) Then
                    item.ActivosFijos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("Asignaciones", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupDetalleActivosFijos(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleActivosFijos In e.NewItems
                item.ActivosFijos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleActivosFijos", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleActivosFijos In e.OldItems
                If ReferenceEquals(item.ActivosFijos, Me) Then
                    item.ActivosFijos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleActivosFijos", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupDetalleLeasingActivosFijos(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleLeasingActivosFijos In e.NewItems
                item.ActivosFijos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleLeasingActivosFijos", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleLeasingActivosFijos In e.OldItems
                If ReferenceEquals(item.ActivosFijos, Me) Then
                    item.ActivosFijos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleLeasingActivosFijos", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
