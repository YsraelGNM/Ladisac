'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(DetalleTipoDocumentos))>
<KnownType(GetType(Personas))>
<KnownType(GetType(TipoVenta))>
<KnownType(GetType(OrdenServicioDetalle))>
<KnownType(GetType(RecepcionDocumento))>
<KnownType(GetType(OrdenServicioCuotas))>
<KnownType(GetType(DocumentoGuias))>
<KnownType(GetType(ProvisionCompras))>
Partial Public Class OrdenServicio
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared OSE_ID As string = "OSE_ID"
				public shared PER_ID_PROVEEDOR As string = "PER_ID_PROVEEDOR"
				public shared OSE_FECHA As string = "OSE_FECHA"
				public shared OSE_NRO_COTIZACION As string = "OSE_NRO_COTIZACION"
				public shared TIV_ID_PAGO As string = "TIV_ID_PAGO"
				public shared MON_ID As string = "MON_ID"
				public shared OSE_FECHAENTREGA As string = "OSE_FECHAENTREGA"
				public shared OSE_ENTREGA As string = "OSE_ENTREGA"
				public shared OSE_OBSERVACIONES As string = "OSE_OBSERVACIONES"
				public shared OSE_ANTICIPO As string = "OSE_ANTICIPO"
				public shared OSE_IMPORTANCIA As string = "OSE_IMPORTANCIA"
				public shared USU_ID As string = "USU_ID"
				public shared OSE_FEC_GRAB As string = "OSE_FEC_GRAB"
				public shared OSE_ESTADO As string = "OSE_ESTADO"
				public shared DTD_ID As string = "DTD_ID"
				public shared TDO_ID As string = "TDO_ID"
				public shared CCT_ID As string = "CCT_ID"
				public shared OSE_ADJUNTO As string = "OSE_ADJUNTO"
				public shared OSE_ADJUNTO_DESCRI As string = "OSE_ADJUNTO_DESCRI"
				public shared OSE_CONFORMIDAD As string = "OSE_CONFORMIDAD"
				public shared OSE_CERRADA As string = "OSE_CERRADA"
				public shared DGU_ID As string = "DGU_ID"
		    End Structure
	



    <DataMember()>
    Public Property OSE_ID() As Integer
        Get
            Return _oSE_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_oSE_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'OSE_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _oSE_ID = value
                OnPropertyChanged("OSE_ID")
            End If
        End Set
    End Property

    Private _oSE_ID As Integer

    <DataMember()>
    Public Property PER_ID_PROVEEDOR() As String
        Get
            Return _pER_ID_PROVEEDOR
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_PROVEEDOR, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_PROVEEDOR", _pER_ID_PROVEEDOR)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID_PROVEEDOR = value
                OnPropertyChanged("PER_ID_PROVEEDOR")
            End If
        End Set
    End Property

    Private _pER_ID_PROVEEDOR As String

    <DataMember()>
    Public Property OSE_FECHA() As Nullable(Of Date)
        Get
            Return _oSE_FECHA
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_oSE_FECHA, value) Then
                _oSE_FECHA = value
                OnPropertyChanged("OSE_FECHA")
            End If
        End Set
    End Property

    Private _oSE_FECHA As Nullable(Of Date)

    <DataMember()>
    Public Property OSE_NRO_COTIZACION() As String
        Get
            Return _oSE_NRO_COTIZACION
        End Get
        Set(ByVal value As String)
            If Not Equals(_oSE_NRO_COTIZACION, value) Then
                _oSE_NRO_COTIZACION = value
                OnPropertyChanged("OSE_NRO_COTIZACION")
            End If
        End Set
    End Property

    Private _oSE_NRO_COTIZACION As String

    <DataMember()>
    Public Property TIV_ID_PAGO() As String
        Get
            Return _tIV_ID_PAGO
        End Get
        Set(ByVal value As String)
            If Not Equals(_tIV_ID_PAGO, value) Then
                ChangeTracker.RecordOriginalValue("TIV_ID_PAGO", _tIV_ID_PAGO)
                If Not IsDeserializing Then
                    If TipoVenta IsNot Nothing AndAlso Not Equals(TipoVenta.TIV_ID, value) Then
                        TipoVenta = Nothing
                    End If
                End If
                _tIV_ID_PAGO = value
                OnPropertyChanged("TIV_ID_PAGO")
            End If
        End Set
    End Property

    Private _tIV_ID_PAGO As String

    <DataMember()>
    Public Property MON_ID() As String
        Get
            Return _mON_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_mON_ID, value) Then
                _mON_ID = value
                OnPropertyChanged("MON_ID")
            End If
        End Set
    End Property

    Private _mON_ID As String

    <DataMember()>
    Public Property OSE_FECHAENTREGA() As Nullable(Of Date)
        Get
            Return _oSE_FECHAENTREGA
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_oSE_FECHAENTREGA, value) Then
                _oSE_FECHAENTREGA = value
                OnPropertyChanged("OSE_FECHAENTREGA")
            End If
        End Set
    End Property

    Private _oSE_FECHAENTREGA As Nullable(Of Date)

    <DataMember()>
    Public Property OSE_ENTREGA() As String
        Get
            Return _oSE_ENTREGA
        End Get
        Set(ByVal value As String)
            If Not Equals(_oSE_ENTREGA, value) Then
                _oSE_ENTREGA = value
                OnPropertyChanged("OSE_ENTREGA")
            End If
        End Set
    End Property

    Private _oSE_ENTREGA As String

    <DataMember()>
    Public Property OSE_OBSERVACIONES() As String
        Get
            Return _oSE_OBSERVACIONES
        End Get
        Set(ByVal value As String)
            If Not Equals(_oSE_OBSERVACIONES, value) Then
                _oSE_OBSERVACIONES = value
                OnPropertyChanged("OSE_OBSERVACIONES")
            End If
        End Set
    End Property

    Private _oSE_OBSERVACIONES As String

    <DataMember()>
    Public Property OSE_ANTICIPO() As Nullable(Of Decimal)
        Get
            Return _oSE_ANTICIPO
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_oSE_ANTICIPO, value) Then
                _oSE_ANTICIPO = value
                OnPropertyChanged("OSE_ANTICIPO")
            End If
        End Set
    End Property

    Private _oSE_ANTICIPO As Nullable(Of Decimal)

    <DataMember()>
    Public Property OSE_IMPORTANCIA() As Nullable(Of Integer)
        Get
            Return _oSE_IMPORTANCIA
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_oSE_IMPORTANCIA, value) Then
                _oSE_IMPORTANCIA = value
                OnPropertyChanged("OSE_IMPORTANCIA")
            End If
        End Set
    End Property

    Private _oSE_IMPORTANCIA As Nullable(Of Integer)

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property OSE_FEC_GRAB() As Nullable(Of Date)
        Get
            Return _oSE_FEC_GRAB
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_oSE_FEC_GRAB, value) Then
                _oSE_FEC_GRAB = value
                OnPropertyChanged("OSE_FEC_GRAB")
            End If
        End Set
    End Property

    Private _oSE_FEC_GRAB As Nullable(Of Date)

    <DataMember()>
    Public Property OSE_ESTADO() As Nullable(Of Boolean)
        Get
            Return _oSE_ESTADO
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_oSE_ESTADO, value) Then
                _oSE_ESTADO = value
                OnPropertyChanged("OSE_ESTADO")
            End If
        End Set
    End Property

    Private _oSE_ESTADO As Nullable(Of Boolean)

    <DataMember()>
    Public Property DTD_ID() As String
        Get
            Return _dTD_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID, value) Then
                ChangeTracker.RecordOriginalValue("DTD_ID", _dTD_ID)
                If Not IsDeserializing Then
                    If DetalleTipoDocumentos IsNot Nothing AndAlso Not Equals(DetalleTipoDocumentos.DTD_ID, value) Then
                        DetalleTipoDocumentos = Nothing
                    End If
                End If
                _dTD_ID = value
                OnPropertyChanged("DTD_ID")
            End If
        End Set
    End Property

    Private _dTD_ID As String

    <DataMember()>
    Public Property TDO_ID() As String
        Get
            Return _tDO_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID, value) Then
                _tDO_ID = value
                OnPropertyChanged("TDO_ID")
            End If
        End Set
    End Property

    Private _tDO_ID As String

    <DataMember()>
    Public Property CCT_ID() As String
        Get
            Return _cCT_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCT_ID, value) Then
                _cCT_ID = value
                OnPropertyChanged("CCT_ID")
            End If
        End Set
    End Property

    Private _cCT_ID As String

    <DataMember()>
    Public Property OSE_ADJUNTO() As Byte()
        Get
            Return _oSE_ADJUNTO
        End Get
        Set(ByVal value As Byte())
            If _oSE_ADJUNTO IsNot value Then
                _oSE_ADJUNTO = value
                OnPropertyChanged("OSE_ADJUNTO")
            End If
        End Set
    End Property

    Private _oSE_ADJUNTO As Byte()

    <DataMember()>
    Public Property OSE_ADJUNTO_DESCRI() As String
        Get
            Return _oSE_ADJUNTO_DESCRI
        End Get
        Set(ByVal value As String)
            If Not Equals(_oSE_ADJUNTO_DESCRI, value) Then
                _oSE_ADJUNTO_DESCRI = value
                OnPropertyChanged("OSE_ADJUNTO_DESCRI")
            End If
        End Set
    End Property

    Private _oSE_ADJUNTO_DESCRI As String

    <DataMember()>
    Public Property OSE_CONFORMIDAD() As Nullable(Of Integer)
        Get
            Return _oSE_CONFORMIDAD
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_oSE_CONFORMIDAD, value) Then
                _oSE_CONFORMIDAD = value
                OnPropertyChanged("OSE_CONFORMIDAD")
            End If
        End Set
    End Property

    Private _oSE_CONFORMIDAD As Nullable(Of Integer)

    <DataMember()>
    Public Property OSE_CERRADA() As Integer
        Get
            Return _oSE_CERRADA
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_oSE_CERRADA, value) Then
                _oSE_CERRADA = value
                OnPropertyChanged("OSE_CERRADA")
            End If
        End Set
    End Property

    Private _oSE_CERRADA As Integer

    <DataMember()>
    Public Property DGU_ID() As Nullable(Of Integer)
        Get
            Return _dGU_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_dGU_ID, value) Then
                ChangeTracker.RecordOriginalValue("DGU_ID", _dGU_ID)
                If Not IsDeserializing Then
                    If DocumentoGuias IsNot Nothing AndAlso Not Equals(DocumentoGuias.DGU_ID, value) Then
                        DocumentoGuias = Nothing
                    End If
                End If
                _dGU_ID = value
                OnPropertyChanged("DGU_ID")
            End If
        End Set
    End Property

    Private _dGU_ID As Nullable(Of Integer)

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property DetalleTipoDocumentos() As DetalleTipoDocumentos
        Get
            Return _detalleTipoDocumentos
        End Get
        Set(ByVal value As DetalleTipoDocumentos)
            If _detalleTipoDocumentos IsNot value Then
                Dim previousValue As DetalleTipoDocumentos = _detalleTipoDocumentos
                _detalleTipoDocumentos = value
                FixupDetalleTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("DetalleTipoDocumentos")
            End If
        End Set
    End Property

    Private _detalleTipoDocumentos As DetalleTipoDocumentos


    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property TipoVenta() As TipoVenta
        Get
            Return _tipoVenta
        End Get
        Set(ByVal value As TipoVenta)
            If _tipoVenta IsNot value Then
                Dim previousValue As TipoVenta = _tipoVenta
                _tipoVenta = value
                FixupTipoVenta(previousValue)
                OnNavigationPropertyChanged("TipoVenta")
            End If
        End Set
    End Property

    Private _tipoVenta As TipoVenta


    <DataMember()>
    Public Property OrdenServicioDetalle() As TrackableCollection(Of OrdenServicioDetalle)
        Get
            If _ordenServicioDetalle Is Nothing Then
                _ordenServicioDetalle = New TrackableCollection(Of OrdenServicioDetalle)
                AddHandler _ordenServicioDetalle.CollectionChanged, AddressOf FixupOrdenServicioDetalle
            End If
            Return _ordenServicioDetalle
        End Get
        Set(ByVal value As TrackableCollection(Of OrdenServicioDetalle))
            If Not Object.ReferenceEquals(_ordenServicioDetalle, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _ordenServicioDetalle IsNot Nothing Then
                    RemoveHandler _ordenServicioDetalle.CollectionChanged, AddressOf FixupOrdenServicioDetalle
                End If
                _ordenServicioDetalle = value
                If _ordenServicioDetalle IsNot Nothing Then
                    AddHandler _ordenServicioDetalle.CollectionChanged, AddressOf FixupOrdenServicioDetalle
                End If
                OnNavigationPropertyChanged("OrdenServicioDetalle")
            End If
        End Set
    End Property

    Private _ordenServicioDetalle As TrackableCollection(Of OrdenServicioDetalle)

    <DataMember()>
    Public Property RecepcionDocumento() As TrackableCollection(Of RecepcionDocumento)
        Get
            If _recepcionDocumento Is Nothing Then
                _recepcionDocumento = New TrackableCollection(Of RecepcionDocumento)
                AddHandler _recepcionDocumento.CollectionChanged, AddressOf FixupRecepcionDocumento
            End If
            Return _recepcionDocumento
        End Get
        Set(ByVal value As TrackableCollection(Of RecepcionDocumento))
            If Not Object.ReferenceEquals(_recepcionDocumento, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _recepcionDocumento IsNot Nothing Then
                    RemoveHandler _recepcionDocumento.CollectionChanged, AddressOf FixupRecepcionDocumento
                End If
                _recepcionDocumento = value
                If _recepcionDocumento IsNot Nothing Then
                    AddHandler _recepcionDocumento.CollectionChanged, AddressOf FixupRecepcionDocumento
                End If
                OnNavigationPropertyChanged("RecepcionDocumento")
            End If
        End Set
    End Property

    Private _recepcionDocumento As TrackableCollection(Of RecepcionDocumento)

    <DataMember()>
    Public Property OrdenServicioCuotas() As TrackableCollection(Of OrdenServicioCuotas)
        Get
            If _ordenServicioCuotas Is Nothing Then
                _ordenServicioCuotas = New TrackableCollection(Of OrdenServicioCuotas)
                AddHandler _ordenServicioCuotas.CollectionChanged, AddressOf FixupOrdenServicioCuotas
            End If
            Return _ordenServicioCuotas
        End Get
        Set(ByVal value As TrackableCollection(Of OrdenServicioCuotas))
            If Not Object.ReferenceEquals(_ordenServicioCuotas, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _ordenServicioCuotas IsNot Nothing Then
                    RemoveHandler _ordenServicioCuotas.CollectionChanged, AddressOf FixupOrdenServicioCuotas
                End If
                _ordenServicioCuotas = value
                If _ordenServicioCuotas IsNot Nothing Then
                    AddHandler _ordenServicioCuotas.CollectionChanged, AddressOf FixupOrdenServicioCuotas
                End If
                OnNavigationPropertyChanged("OrdenServicioCuotas")
            End If
        End Set
    End Property

    Private _ordenServicioCuotas As TrackableCollection(Of OrdenServicioCuotas)

    <DataMember()>
    Public Property DocumentoGuias() As DocumentoGuias
        Get
            Return _documentoGuias
        End Get
        Set(ByVal value As DocumentoGuias)
            If _documentoGuias IsNot value Then
                Dim previousValue As DocumentoGuias = _documentoGuias
                _documentoGuias = value
                FixupDocumentoGuias(previousValue)
                OnNavigationPropertyChanged("DocumentoGuias")
            End If
        End Set
    End Property

    Private _documentoGuias As DocumentoGuias


    <DataMember()>
    Public Property ProvisionCompras() As TrackableCollection(Of ProvisionCompras)
        Get
            If _provisionCompras Is Nothing Then
                _provisionCompras = New TrackableCollection(Of ProvisionCompras)
                AddHandler _provisionCompras.CollectionChanged, AddressOf FixupProvisionCompras
            End If
            Return _provisionCompras
        End Get
        Set(ByVal value As TrackableCollection(Of ProvisionCompras))
            If Not Object.ReferenceEquals(_provisionCompras, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _provisionCompras IsNot Nothing Then
                    RemoveHandler _provisionCompras.CollectionChanged, AddressOf FixupProvisionCompras
                End If
                _provisionCompras = value
                If _provisionCompras IsNot Nothing Then
                    AddHandler _provisionCompras.CollectionChanged, AddressOf FixupProvisionCompras
                End If
                OnNavigationPropertyChanged("ProvisionCompras")
            End If
        End Set
    End Property

    Private _provisionCompras As TrackableCollection(Of ProvisionCompras)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        DetalleTipoDocumentos = Nothing
        Personas = Nothing
        TipoVenta = Nothing
        OrdenServicioDetalle.Clear()
        RecepcionDocumento.Clear()
        OrdenServicioCuotas.Clear()
        DocumentoGuias = Nothing
        ProvisionCompras.Clear()
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupDetalleTipoDocumentos(ByVal previousValue As DetalleTipoDocumentos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.OrdenServicio.Contains(Me) Then
            previousValue.OrdenServicio.Remove(Me)
        End If

        If DetalleTipoDocumentos IsNot Nothing Then
            If Not DetalleTipoDocumentos.OrdenServicio.Contains(Me) Then
                DetalleTipoDocumentos.OrdenServicio.Add(Me)
            End If

            DTD_ID = DetalleTipoDocumentos.DTD_ID
        ElseIf Not skipKeys Then
            DTD_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("DetalleTipoDocumentos") Is DetalleTipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("DetalleTipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTipoDocumentos", previousValue)
            End If
            If DetalleTipoDocumentos IsNot Nothing AndAlso Not DetalleTipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.OrdenServicio.Contains(Me) Then
            previousValue.OrdenServicio.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.OrdenServicio.Contains(Me) Then
                Personas.OrdenServicio.Add(Me)
            End If

            PER_ID_PROVEEDOR = Personas.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_PROVEEDOR = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoVenta(ByVal previousValue As TipoVenta, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.OrdenServicio.Contains(Me) Then
            previousValue.OrdenServicio.Remove(Me)
        End If

        If TipoVenta IsNot Nothing Then
            If Not TipoVenta.OrdenServicio.Contains(Me) Then
                TipoVenta.OrdenServicio.Add(Me)
            End If

            TIV_ID_PAGO = TipoVenta.TIV_ID
        ElseIf Not skipKeys Then
            TIV_ID_PAGO = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoVenta") AndAlso
                ChangeTracker.OriginalValues("TipoVenta") Is TipoVenta Then
                ChangeTracker.OriginalValues.Remove("TipoVenta")
            Else
                ChangeTracker.RecordOriginalValue("TipoVenta", previousValue)
            End If
            If TipoVenta IsNot Nothing AndAlso Not TipoVenta.ChangeTracker.ChangeTrackingEnabled Then
                TipoVenta.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDocumentoGuias(ByVal previousValue As DocumentoGuias, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.OrdenServicio.Contains(Me) Then
            previousValue.OrdenServicio.Remove(Me)
        End If

        If DocumentoGuias IsNot Nothing Then
            If Not DocumentoGuias.OrdenServicio.Contains(Me) Then
                DocumentoGuias.OrdenServicio.Add(Me)
            End If

            DGU_ID = DocumentoGuias.DGU_ID
        ElseIf Not skipKeys Then
            DGU_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DocumentoGuias") AndAlso
                ChangeTracker.OriginalValues("DocumentoGuias") Is DocumentoGuias Then
                ChangeTracker.OriginalValues.Remove("DocumentoGuias")
            Else
                ChangeTracker.RecordOriginalValue("DocumentoGuias", previousValue)
            End If
            If DocumentoGuias IsNot Nothing AndAlso Not DocumentoGuias.ChangeTracker.ChangeTrackingEnabled Then
                DocumentoGuias.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupOrdenServicioDetalle(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As OrdenServicioDetalle In e.NewItems
                item.OrdenServicio = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("OrdenServicioDetalle", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As OrdenServicioDetalle In e.OldItems
                If ReferenceEquals(item.OrdenServicio, Me) Then
                    item.OrdenServicio = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("OrdenServicioDetalle", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupRecepcionDocumento(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As RecepcionDocumento In e.NewItems
                item.OrdenServicio = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("RecepcionDocumento", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As RecepcionDocumento In e.OldItems
                If ReferenceEquals(item.OrdenServicio, Me) Then
                    item.OrdenServicio = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("RecepcionDocumento", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupOrdenServicioCuotas(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As OrdenServicioCuotas In e.NewItems
                item.OrdenServicio = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("OrdenServicioCuotas", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As OrdenServicioCuotas In e.OldItems
                If ReferenceEquals(item.OrdenServicio, Me) Then
                    item.OrdenServicio = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("OrdenServicioCuotas", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupProvisionCompras(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As ProvisionCompras In e.NewItems
                item.OrdenServicio = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("ProvisionCompras", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As ProvisionCompras In e.OldItems
                If ReferenceEquals(item.OrdenServicio, Me) Then
                    item.OrdenServicio = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("ProvisionCompras", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
