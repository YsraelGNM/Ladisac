'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(DetalleConceptosPensionarios))>
<KnownType(GetType(DatosLaborales))>
<KnownType(GetType(PlanillaTrabajador))>
Partial Public Class RegimenPensionario
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared rep_RegiPension_id As string = "rep_RegiPension_id"
				public shared rep_Descripcion As string = "rep_Descripcion"
				public shared rep_CodigoSunat As string = "rep_CodigoSunat"
				public shared Usu_Id As string = "Usu_Id"
				public shared rep_FecGrab As string = "rep_FecGrab"
		    End Structure
	



    <DataMember()>
    Public Property rep_RegiPension_id() As String
        Get
            Return _rep_RegiPension_id
        End Get
        Set(ByVal value As String)
            If Not Equals(_rep_RegiPension_id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'rep_RegiPension_id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _rep_RegiPension_id = value
                OnPropertyChanged("rep_RegiPension_id")
            End If
        End Set
    End Property

    Private _rep_RegiPension_id As String

    <DataMember()>
    Public Property rep_Descripcion() As String
        Get
            Return _rep_Descripcion
        End Get
        Set(ByVal value As String)
            If Not Equals(_rep_Descripcion, value) Then
                _rep_Descripcion = value
                OnPropertyChanged("rep_Descripcion")
            End If
        End Set
    End Property

    Private _rep_Descripcion As String

    <DataMember()>
    Public Property rep_CodigoSunat() As String
        Get
            Return _rep_CodigoSunat
        End Get
        Set(ByVal value As String)
            If Not Equals(_rep_CodigoSunat, value) Then
                _rep_CodigoSunat = value
                OnPropertyChanged("rep_CodigoSunat")
            End If
        End Set
    End Property

    Private _rep_CodigoSunat As String

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                ChangeTracker.RecordOriginalValue("Usu_Id", _usu_Id)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property rep_FecGrab() As Date
        Get
            Return _rep_FecGrab
        End Get
        Set(ByVal value As Date)
            If Not Equals(_rep_FecGrab, value) Then
                _rep_FecGrab = value
                OnPropertyChanged("rep_FecGrab")
            End If
        End Set
    End Property

    Private _rep_FecGrab As Date

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property DetalleConceptosPensionarios() As TrackableCollection(Of DetalleConceptosPensionarios)
        Get
            If _detalleConceptosPensionarios Is Nothing Then
                _detalleConceptosPensionarios = New TrackableCollection(Of DetalleConceptosPensionarios)
                AddHandler _detalleConceptosPensionarios.CollectionChanged, AddressOf FixupDetalleConceptosPensionarios
            End If
            Return _detalleConceptosPensionarios
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleConceptosPensionarios))
            If Not Object.ReferenceEquals(_detalleConceptosPensionarios, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleConceptosPensionarios IsNot Nothing Then
                    RemoveHandler _detalleConceptosPensionarios.CollectionChanged, AddressOf FixupDetalleConceptosPensionarios
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminación en cascada para aquellas entidades de la colección actual.
                    For Each item As DetalleConceptosPensionarios In _detalleConceptosPensionarios
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detalleConceptosPensionarios = value
                If _detalleConceptosPensionarios IsNot Nothing Then
                    AddHandler _detalleConceptosPensionarios.CollectionChanged, AddressOf FixupDetalleConceptosPensionarios
                    ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                    For Each item As DetalleConceptosPensionarios In _detalleConceptosPensionarios
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetalleConceptosPensionarios")
            End If
        End Set
    End Property

    Private _detalleConceptosPensionarios As TrackableCollection(Of DetalleConceptosPensionarios)

    <DataMember()>
    Public Property DatosLaborales() As TrackableCollection(Of DatosLaborales)
        Get
            If _datosLaborales Is Nothing Then
                _datosLaborales = New TrackableCollection(Of DatosLaborales)
                AddHandler _datosLaborales.CollectionChanged, AddressOf FixupDatosLaborales
            End If
            Return _datosLaborales
        End Get
        Set(ByVal value As TrackableCollection(Of DatosLaborales))
            If Not Object.ReferenceEquals(_datosLaborales, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _datosLaborales IsNot Nothing Then
                    RemoveHandler _datosLaborales.CollectionChanged, AddressOf FixupDatosLaborales
                End If
                _datosLaborales = value
                If _datosLaborales IsNot Nothing Then
                    AddHandler _datosLaborales.CollectionChanged, AddressOf FixupDatosLaborales
                End If
                OnNavigationPropertyChanged("DatosLaborales")
            End If
        End Set
    End Property

    Private _datosLaborales As TrackableCollection(Of DatosLaborales)

    <DataMember()>
    Public Property PlanillaTrabajador() As TrackableCollection(Of PlanillaTrabajador)
        Get
            If _planillaTrabajador Is Nothing Then
                _planillaTrabajador = New TrackableCollection(Of PlanillaTrabajador)
                AddHandler _planillaTrabajador.CollectionChanged, AddressOf FixupPlanillaTrabajador
            End If
            Return _planillaTrabajador
        End Get
        Set(ByVal value As TrackableCollection(Of PlanillaTrabajador))
            If Not Object.ReferenceEquals(_planillaTrabajador, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _planillaTrabajador IsNot Nothing Then
                    RemoveHandler _planillaTrabajador.CollectionChanged, AddressOf FixupPlanillaTrabajador
                End If
                _planillaTrabajador = value
                If _planillaTrabajador IsNot Nothing Then
                    AddHandler _planillaTrabajador.CollectionChanged, AddressOf FixupPlanillaTrabajador
                End If
                OnNavigationPropertyChanged("PlanillaTrabajador")
            End If
        End Set
    End Property

    Private _planillaTrabajador As TrackableCollection(Of PlanillaTrabajador)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Usuarios = Nothing
        DetalleConceptosPensionarios.Clear()
        DatosLaborales.Clear()
        PlanillaTrabajador.Clear()
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            Usu_Id = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleConceptosPensionarios(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleConceptosPensionarios In e.NewItems
                item.RegimenPensionario = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleConceptosPensionarios", item)
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleConceptosPensionarios In e.OldItems
                If ReferenceEquals(item.RegimenPensionario, Me) Then
                    item.RegimenPensionario = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleConceptosPensionarios", item)
                    ' Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                    ' permite que la relación se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupDatosLaborales(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DatosLaborales In e.NewItems
                item.RegimenPensionario = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DatosLaborales", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DatosLaborales In e.OldItems
                If ReferenceEquals(item.RegimenPensionario, Me) Then
                    item.RegimenPensionario = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DatosLaborales", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupPlanillaTrabajador(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PlanillaTrabajador In e.NewItems
                item.RegimenPensionario = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PlanillaTrabajador", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PlanillaTrabajador In e.OldItems
                If ReferenceEquals(item.RegimenPensionario, Me) Then
                    item.RegimenPensionario = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PlanillaTrabajador", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
