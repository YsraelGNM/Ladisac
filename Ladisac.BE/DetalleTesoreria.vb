'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(CentroCostos))>
<KnownType(GetType(CtaCte))>
<KnownType(GetType(CuentasContables))>
<KnownType(GetType(DetalleTipoDocumentos))>
<KnownType(GetType(Moneda))>
<KnownType(GetType(TipoDocumentos))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(CajaCtaCte))>
<KnownType(GetType(Tesoreria))>
<KnownType(GetType(MedioPagoTesoreria))>
<KnownType(GetType(Personas))>
Partial Public Class DetalleTesoreria
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared TDO_ID As string = "TDO_ID"
				public shared DTD_ID As string = "DTD_ID"
				public shared CCC_ID As string = "CCC_ID"
				public shared CCT_ID As string = "CCT_ID"
				public shared DTE_SERIE As string = "DTE_SERIE"
				public shared DTE_NUMERO As string = "DTE_NUMERO"
				public shared DTE_ITEM As string = "DTE_ITEM"
				public shared CCC_ID_CLI As string = "CCC_ID_CLI"
				public shared DTE_DESTINO As string = "DTE_DESTINO"
				public shared CCO_ID As string = "CCO_ID"
				public shared CUC_ID As string = "CUC_ID"
				public shared PER_ID_CLI As string = "PER_ID_CLI"
				public shared TDO_ID_DOC As string = "TDO_ID_DOC"
				public shared DTD_ID_DOC As string = "DTD_ID_DOC"
				public shared CCT_ID_DOC As string = "CCT_ID_DOC"
				public shared DTE_SERIE_DOC As string = "DTE_SERIE_DOC"
				public shared DTE_NUMERO_DOC As string = "DTE_NUMERO_DOC"
				public shared DTE_FEC_VEN As string = "DTE_FEC_VEN"
				public shared MON_ID_DOC As string = "MON_ID_DOC"
				public shared DTE_IMPORTE_DOC As string = "DTE_IMPORTE_DOC"
				public shared DTE_CONTRAVALOR_DOC As string = "DTE_CONTRAVALOR_DOC"
				public shared PER_ID_CLI_1 As string = "PER_ID_CLI_1"
				public shared TDO_ID_DOC_1 As string = "TDO_ID_DOC_1"
				public shared DTD_ID_DOC_1 As string = "DTD_ID_DOC_1"
				public shared CCT_ID_DOC_1 As string = "CCT_ID_DOC_1"
				public shared DTE_SERIE_DOC_1 As string = "DTE_SERIE_DOC_1"
				public shared DTE_NUMERO_DOC_1 As string = "DTE_NUMERO_DOC_1"
				public shared DTE_FEC_VEN_1 As string = "DTE_FEC_VEN_1"
				public shared MON_ID_DOC_1 As string = "MON_ID_DOC_1"
				public shared DTE_IMPORTE_DOC_1 As string = "DTE_IMPORTE_DOC_1"
				public shared DTE_CONTRAVALOR_DOC_1 As string = "DTE_CONTRAVALOR_DOC_1"
				public shared DTE_OBSERVACIONES As string = "DTE_OBSERVACIONES"
				public shared DTE_OPE_CONTABLE As string = "DTE_OPE_CONTABLE"
				public shared DTE_MOVIMIENTO As string = "DTE_MOVIMIENTO"
				public shared USU_ID As string = "USU_ID"
				public shared DTE_FEC_GRAB As string = "DTE_FEC_GRAB"
				public shared DTE_ESTADO As string = "DTE_ESTADO"
				public shared DTE_TIPO_RECIBO As string = "DTE_TIPO_RECIBO"
				public shared DTE_CAPITAL_DOC As string = "DTE_CAPITAL_DOC"
				public shared DTE_INTERES_DOC As string = "DTE_INTERES_DOC"
				public shared DTE_GASTOS_DOC As string = "DTE_GASTOS_DOC"
				public shared DTD_IDe As string = "DTD_IDe"
		    End Structure
	



    <DataMember()>
    Public Property TDO_ID() As String
        Get
            Return _tDO_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'TDO_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If TipoDocumentos IsNot Nothing AndAlso Not Equals(TipoDocumentos.TDO_ID, value) Then
                        TipoDocumentos = Nothing
                    End If
                    If Tesoreria IsNot Nothing AndAlso Not Equals(Tesoreria.TDO_ID, value) Then
                        Tesoreria = Nothing
                    End If
                End If
                _tDO_ID = value
                OnPropertyChanged("TDO_ID")
            End If
        End Set
    End Property

    Private _tDO_ID As String

    <DataMember()>
    Public Property DTD_ID() As String
        Get
            Return _dTD_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DTD_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If DetalleTipoDocumentos IsNot Nothing AndAlso Not Equals(DetalleTipoDocumentos.DTD_ID, value) Then
                        DetalleTipoDocumentos = Nothing
                    End If
                    If Tesoreria IsNot Nothing AndAlso Not Equals(Tesoreria.DTD_ID, value) Then
                        Tesoreria = Nothing
                    End If
                End If
                _dTD_ID = value
                OnPropertyChanged("DTD_ID")
            End If
        End Set
    End Property

    Private _dTD_ID As String

    <DataMember()>
    Public Property CCC_ID() As String
        Get
            Return _cCC_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCC_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'CCC_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If CajaCtaCte IsNot Nothing AndAlso Not Equals(CajaCtaCte.CCC_ID, value) Then
                        CajaCtaCte = Nothing
                    End If
                    If Tesoreria IsNot Nothing AndAlso Not Equals(Tesoreria.CCC_ID, value) Then
                        Tesoreria = Nothing
                    End If
                End If
                _cCC_ID = value
                OnPropertyChanged("CCC_ID")
            End If
        End Set
    End Property

    Private _cCC_ID As String

    <DataMember()>
    Public Property CCT_ID() As String
        Get
            Return _cCT_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCT_ID, value) Then
                ChangeTracker.RecordOriginalValue("CCT_ID", _cCT_ID)
                If Not IsDeserializing Then
                    If CtaCte IsNot Nothing AndAlso Not Equals(CtaCte.CCT_ID, value) Then
                        CtaCte = Nothing
                    End If
                End If
                _cCT_ID = value
                OnPropertyChanged("CCT_ID")
            End If
        End Set
    End Property

    Private _cCT_ID As String

    <DataMember()>
    Public Property DTE_SERIE() As String
        Get
            Return _dTE_SERIE
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTE_SERIE, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DTE_SERIE' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If Tesoreria IsNot Nothing AndAlso Not Equals(Tesoreria.TES_SERIE, value) Then
                        Tesoreria = Nothing
                    End If
                End If
                _dTE_SERIE = value
                OnPropertyChanged("DTE_SERIE")
            End If
        End Set
    End Property

    Private _dTE_SERIE As String

    <DataMember()>
    Public Property DTE_NUMERO() As String
        Get
            Return _dTE_NUMERO
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTE_NUMERO, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DTE_NUMERO' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If Tesoreria IsNot Nothing AndAlso Not Equals(Tesoreria.TES_NUMERO, value) Then
                        Tesoreria = Nothing
                    End If
                End If
                _dTE_NUMERO = value
                OnPropertyChanged("DTE_NUMERO")
            End If
        End Set
    End Property

    Private _dTE_NUMERO As String

    <DataMember()>
    Public Property DTE_ITEM() As Decimal
        Get
            Return _dTE_ITEM
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dTE_ITEM, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DTE_ITEM' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _dTE_ITEM = value
                OnPropertyChanged("DTE_ITEM")
            End If
        End Set
    End Property

    Private _dTE_ITEM As Decimal

    <DataMember()>
    Public Property CCC_ID_CLI() As String
        Get
            Return _cCC_ID_CLI
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCC_ID_CLI, value) Then
                ChangeTracker.RecordOriginalValue("CCC_ID_CLI", _cCC_ID_CLI)
                If Not IsDeserializing Then
                    If CajaCtaCte1 IsNot Nothing AndAlso Not Equals(CajaCtaCte1.CCC_ID, value) Then
                        CajaCtaCte1 = Nothing
                    End If
                End If
                _cCC_ID_CLI = value
                OnPropertyChanged("CCC_ID_CLI")
            End If
        End Set
    End Property

    Private _cCC_ID_CLI As String

    <DataMember()>
    Public Property DTE_DESTINO() As Short
        Get
            Return _dTE_DESTINO
        End Get
        Set(ByVal value As Short)
            If Not Equals(_dTE_DESTINO, value) Then
                _dTE_DESTINO = value
                OnPropertyChanged("DTE_DESTINO")
            End If
        End Set
    End Property

    Private _dTE_DESTINO As Short

    <DataMember()>
    Public Property CCO_ID() As String
        Get
            Return _cCO_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCO_ID, value) Then
                ChangeTracker.RecordOriginalValue("CCO_ID", _cCO_ID)
                If Not IsDeserializing Then
                    If CentroCostos IsNot Nothing AndAlso Not Equals(CentroCostos.CCO_ID, value) Then
                        CentroCostos = Nothing
                    End If
                End If
                _cCO_ID = value
                OnPropertyChanged("CCO_ID")
            End If
        End Set
    End Property

    Private _cCO_ID As String

    <DataMember()>
    Public Property CUC_ID() As String
        Get
            Return _cUC_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cUC_ID, value) Then
                ChangeTracker.RecordOriginalValue("CUC_ID", _cUC_ID)
                If Not IsDeserializing Then
                    If CuentasContables IsNot Nothing AndAlso Not Equals(CuentasContables.CUC_ID, value) Then
                        CuentasContables = Nothing
                    End If
                End If
                _cUC_ID = value
                OnPropertyChanged("CUC_ID")
            End If
        End Set
    End Property

    Private _cUC_ID As String

    <DataMember()>
    Public Property PER_ID_CLI() As String
        Get
            Return _pER_ID_CLI
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_CLI, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_CLI", _pER_ID_CLI)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID_CLI = value
                OnPropertyChanged("PER_ID_CLI")
            End If
        End Set
    End Property

    Private _pER_ID_CLI As String

    <DataMember()>
    Public Property TDO_ID_DOC() As String
        Get
            Return _tDO_ID_DOC
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID_DOC, value) Then
                ChangeTracker.RecordOriginalValue("TDO_ID_DOC", _tDO_ID_DOC)
                If Not IsDeserializing Then
                    If TipoDocumentos1 IsNot Nothing AndAlso Not Equals(TipoDocumentos1.TDO_ID, value) Then
                        TipoDocumentos1 = Nothing
                    End If
                End If
                _tDO_ID_DOC = value
                OnPropertyChanged("TDO_ID_DOC")
            End If
        End Set
    End Property

    Private _tDO_ID_DOC As String

    <DataMember()>
    Public Property DTD_ID_DOC() As String
        Get
            Return _dTD_ID_DOC
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID_DOC, value) Then
                ChangeTracker.RecordOriginalValue("DTD_ID_DOC", _dTD_ID_DOC)
                If Not IsDeserializing Then
                    If DetalleTipoDocumentos1 IsNot Nothing AndAlso Not Equals(DetalleTipoDocumentos1.DTD_ID, value) Then
                        DetalleTipoDocumentos1 = Nothing
                    End If
                End If
                _dTD_ID_DOC = value
                OnPropertyChanged("DTD_ID_DOC")
            End If
        End Set
    End Property

    Private _dTD_ID_DOC As String

    <DataMember()>
    Public Property CCT_ID_DOC() As String
        Get
            Return _cCT_ID_DOC
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCT_ID_DOC, value) Then
                ChangeTracker.RecordOriginalValue("CCT_ID_DOC", _cCT_ID_DOC)
                If Not IsDeserializing Then
                    If CtaCte1 IsNot Nothing AndAlso Not Equals(CtaCte1.CCT_ID, value) Then
                        CtaCte1 = Nothing
                    End If
                End If
                _cCT_ID_DOC = value
                OnPropertyChanged("CCT_ID_DOC")
            End If
        End Set
    End Property

    Private _cCT_ID_DOC As String

    <DataMember()>
    Public Property DTE_SERIE_DOC() As String
        Get
            Return _dTE_SERIE_DOC
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTE_SERIE_DOC, value) Then
                _dTE_SERIE_DOC = value
                OnPropertyChanged("DTE_SERIE_DOC")
            End If
        End Set
    End Property

    Private _dTE_SERIE_DOC As String

    <DataMember()>
    Public Property DTE_NUMERO_DOC() As String
        Get
            Return _dTE_NUMERO_DOC
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTE_NUMERO_DOC, value) Then
                _dTE_NUMERO_DOC = value
                OnPropertyChanged("DTE_NUMERO_DOC")
            End If
        End Set
    End Property

    Private _dTE_NUMERO_DOC As String

    <DataMember()>
    Public Property DTE_FEC_VEN() As Date
        Get
            Return _dTE_FEC_VEN
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dTE_FEC_VEN, value) Then
                _dTE_FEC_VEN = value
                OnPropertyChanged("DTE_FEC_VEN")
            End If
        End Set
    End Property

    Private _dTE_FEC_VEN As Date

    <DataMember()>
    Public Property MON_ID_DOC() As String
        Get
            Return _mON_ID_DOC
        End Get
        Set(ByVal value As String)
            If Not Equals(_mON_ID_DOC, value) Then
                ChangeTracker.RecordOriginalValue("MON_ID_DOC", _mON_ID_DOC)
                If Not IsDeserializing Then
                    If Moneda IsNot Nothing AndAlso Not Equals(Moneda.MON_ID, value) Then
                        Moneda = Nothing
                    End If
                End If
                _mON_ID_DOC = value
                OnPropertyChanged("MON_ID_DOC")
            End If
        End Set
    End Property

    Private _mON_ID_DOC As String

    <DataMember()>
    Public Property DTE_IMPORTE_DOC() As Decimal
        Get
            Return _dTE_IMPORTE_DOC
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dTE_IMPORTE_DOC, value) Then
                _dTE_IMPORTE_DOC = value
                OnPropertyChanged("DTE_IMPORTE_DOC")
            End If
        End Set
    End Property

    Private _dTE_IMPORTE_DOC As Decimal

    <DataMember()>
    Public Property DTE_CONTRAVALOR_DOC() As Decimal
        Get
            Return _dTE_CONTRAVALOR_DOC
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dTE_CONTRAVALOR_DOC, value) Then
                _dTE_CONTRAVALOR_DOC = value
                OnPropertyChanged("DTE_CONTRAVALOR_DOC")
            End If
        End Set
    End Property

    Private _dTE_CONTRAVALOR_DOC As Decimal

    <DataMember()>
    Public Property PER_ID_CLI_1() As String
        Get
            Return _pER_ID_CLI_1
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_CLI_1, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_CLI_1", _pER_ID_CLI_1)
                If Not IsDeserializing Then
                    If Personas1 IsNot Nothing AndAlso Not Equals(Personas1.PER_ID, value) Then
                        Personas1 = Nothing
                    End If
                End If
                _pER_ID_CLI_1 = value
                OnPropertyChanged("PER_ID_CLI_1")
            End If
        End Set
    End Property

    Private _pER_ID_CLI_1 As String

    <DataMember()>
    Public Property TDO_ID_DOC_1() As String
        Get
            Return _tDO_ID_DOC_1
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID_DOC_1, value) Then
                ChangeTracker.RecordOriginalValue("TDO_ID_DOC_1", _tDO_ID_DOC_1)
                If Not IsDeserializing Then
                    If TipoDocumentos2 IsNot Nothing AndAlso Not Equals(TipoDocumentos2.TDO_ID, value) Then
                        TipoDocumentos2 = Nothing
                    End If
                End If
                _tDO_ID_DOC_1 = value
                OnPropertyChanged("TDO_ID_DOC_1")
            End If
        End Set
    End Property

    Private _tDO_ID_DOC_1 As String

    <DataMember()>
    Public Property DTD_ID_DOC_1() As String
        Get
            Return _dTD_ID_DOC_1
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID_DOC_1, value) Then
                ChangeTracker.RecordOriginalValue("DTD_ID_DOC_1", _dTD_ID_DOC_1)
                If Not IsDeserializing Then
                    If DetalleTipoDocumentos2 IsNot Nothing AndAlso Not Equals(DetalleTipoDocumentos2.DTD_ID, value) Then
                        DetalleTipoDocumentos2 = Nothing
                    End If
                End If
                _dTD_ID_DOC_1 = value
                OnPropertyChanged("DTD_ID_DOC_1")
            End If
        End Set
    End Property

    Private _dTD_ID_DOC_1 As String

    <DataMember()>
    Public Property CCT_ID_DOC_1() As String
        Get
            Return _cCT_ID_DOC_1
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCT_ID_DOC_1, value) Then
                ChangeTracker.RecordOriginalValue("CCT_ID_DOC_1", _cCT_ID_DOC_1)
                If Not IsDeserializing Then
                    If CtaCte2 IsNot Nothing AndAlso Not Equals(CtaCte2.CCT_ID, value) Then
                        CtaCte2 = Nothing
                    End If
                End If
                _cCT_ID_DOC_1 = value
                OnPropertyChanged("CCT_ID_DOC_1")
            End If
        End Set
    End Property

    Private _cCT_ID_DOC_1 As String

    <DataMember()>
    Public Property DTE_SERIE_DOC_1() As String
        Get
            Return _dTE_SERIE_DOC_1
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTE_SERIE_DOC_1, value) Then
                _dTE_SERIE_DOC_1 = value
                OnPropertyChanged("DTE_SERIE_DOC_1")
            End If
        End Set
    End Property

    Private _dTE_SERIE_DOC_1 As String

    <DataMember()>
    Public Property DTE_NUMERO_DOC_1() As String
        Get
            Return _dTE_NUMERO_DOC_1
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTE_NUMERO_DOC_1, value) Then
                _dTE_NUMERO_DOC_1 = value
                OnPropertyChanged("DTE_NUMERO_DOC_1")
            End If
        End Set
    End Property

    Private _dTE_NUMERO_DOC_1 As String

    <DataMember()>
    Public Property DTE_FEC_VEN_1() As Nullable(Of Date)
        Get
            Return _dTE_FEC_VEN_1
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_dTE_FEC_VEN_1, value) Then
                _dTE_FEC_VEN_1 = value
                OnPropertyChanged("DTE_FEC_VEN_1")
            End If
        End Set
    End Property

    Private _dTE_FEC_VEN_1 As Nullable(Of Date)

    <DataMember()>
    Public Property MON_ID_DOC_1() As String
        Get
            Return _mON_ID_DOC_1
        End Get
        Set(ByVal value As String)
            If Not Equals(_mON_ID_DOC_1, value) Then
                ChangeTracker.RecordOriginalValue("MON_ID_DOC_1", _mON_ID_DOC_1)
                If Not IsDeserializing Then
                    If Moneda1 IsNot Nothing AndAlso Not Equals(Moneda1.MON_ID, value) Then
                        Moneda1 = Nothing
                    End If
                End If
                _mON_ID_DOC_1 = value
                OnPropertyChanged("MON_ID_DOC_1")
            End If
        End Set
    End Property

    Private _mON_ID_DOC_1 As String

    <DataMember()>
    Public Property DTE_IMPORTE_DOC_1() As Nullable(Of Decimal)
        Get
            Return _dTE_IMPORTE_DOC_1
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dTE_IMPORTE_DOC_1, value) Then
                _dTE_IMPORTE_DOC_1 = value
                OnPropertyChanged("DTE_IMPORTE_DOC_1")
            End If
        End Set
    End Property

    Private _dTE_IMPORTE_DOC_1 As Nullable(Of Decimal)

    <DataMember()>
    Public Property DTE_CONTRAVALOR_DOC_1() As Nullable(Of Decimal)
        Get
            Return _dTE_CONTRAVALOR_DOC_1
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dTE_CONTRAVALOR_DOC_1, value) Then
                _dTE_CONTRAVALOR_DOC_1 = value
                OnPropertyChanged("DTE_CONTRAVALOR_DOC_1")
            End If
        End Set
    End Property

    Private _dTE_CONTRAVALOR_DOC_1 As Nullable(Of Decimal)

    <DataMember()>
    Public Property DTE_OBSERVACIONES() As String
        Get
            Return _dTE_OBSERVACIONES
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTE_OBSERVACIONES, value) Then
                _dTE_OBSERVACIONES = value
                OnPropertyChanged("DTE_OBSERVACIONES")
            End If
        End Set
    End Property

    Private _dTE_OBSERVACIONES As String

    <DataMember()>
    Public Property DTE_OPE_CONTABLE() As Short
        Get
            Return _dTE_OPE_CONTABLE
        End Get
        Set(ByVal value As Short)
            If Not Equals(_dTE_OPE_CONTABLE, value) Then
                _dTE_OPE_CONTABLE = value
                OnPropertyChanged("DTE_OPE_CONTABLE")
            End If
        End Set
    End Property

    Private _dTE_OPE_CONTABLE As Short

    <DataMember()>
    Public Property DTE_MOVIMIENTO() As Short
        Get
            Return _dTE_MOVIMIENTO
        End Get
        Set(ByVal value As Short)
            If Not Equals(_dTE_MOVIMIENTO, value) Then
                _dTE_MOVIMIENTO = value
                OnPropertyChanged("DTE_MOVIMIENTO")
            End If
        End Set
    End Property

    Private _dTE_MOVIMIENTO As Short

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property DTE_FEC_GRAB() As Date
        Get
            Return _dTE_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dTE_FEC_GRAB, value) Then
                _dTE_FEC_GRAB = value
                OnPropertyChanged("DTE_FEC_GRAB")
            End If
        End Set
    End Property

    Private _dTE_FEC_GRAB As Date

    <DataMember()>
    Public Property DTE_ESTADO() As Boolean
        Get
            Return _dTE_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_dTE_ESTADO, value) Then
                _dTE_ESTADO = value
                OnPropertyChanged("DTE_ESTADO")
            End If
        End Set
    End Property

    Private _dTE_ESTADO As Boolean

    <DataMember()>
    Public Property DTE_TIPO_RECIBO() As Short
        Get
            Return _dTE_TIPO_RECIBO
        End Get
        Set(ByVal value As Short)
            If Not Equals(_dTE_TIPO_RECIBO, value) Then
                _dTE_TIPO_RECIBO = value
                OnPropertyChanged("DTE_TIPO_RECIBO")
            End If
        End Set
    End Property

    Private _dTE_TIPO_RECIBO As Short

    <DataMember()>
    Public Property DTE_CAPITAL_DOC() As Decimal
        Get
            Return _dTE_CAPITAL_DOC
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dTE_CAPITAL_DOC, value) Then
                _dTE_CAPITAL_DOC = value
                OnPropertyChanged("DTE_CAPITAL_DOC")
            End If
        End Set
    End Property

    Private _dTE_CAPITAL_DOC As Decimal

    <DataMember()>
    Public Property DTE_INTERES_DOC() As Decimal
        Get
            Return _dTE_INTERES_DOC
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dTE_INTERES_DOC, value) Then
                _dTE_INTERES_DOC = value
                OnPropertyChanged("DTE_INTERES_DOC")
            End If
        End Set
    End Property

    Private _dTE_INTERES_DOC As Decimal

    <DataMember()>
    Public Property DTE_GASTOS_DOC() As Decimal
        Get
            Return _dTE_GASTOS_DOC
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dTE_GASTOS_DOC, value) Then
                _dTE_GASTOS_DOC = value
                OnPropertyChanged("DTE_GASTOS_DOC")
            End If
        End Set
    End Property

    Private _dTE_GASTOS_DOC As Decimal

    <DataMember()>
    Public Property DTD_IDe() As String
        Get
            Return _dTD_IDe
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_IDe, value) Then
                _dTD_IDe = value
                OnPropertyChanged("DTD_IDe")
            End If
        End Set
    End Property

    Private _dTD_IDe As String

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property CentroCostos() As CentroCostos
        Get
            Return _centroCostos
        End Get
        Set(ByVal value As CentroCostos)
            If _centroCostos IsNot value Then
                Dim previousValue As CentroCostos = _centroCostos
                _centroCostos = value
                FixupCentroCostos(previousValue)
                OnNavigationPropertyChanged("CentroCostos")
            End If
        End Set
    End Property

    Private _centroCostos As CentroCostos


    <DataMember()>
    Public Property CtaCte() As CtaCte
        Get
            Return _ctaCte
        End Get
        Set(ByVal value As CtaCte)
            If _ctaCte IsNot value Then
                Dim previousValue As CtaCte = _ctaCte
                _ctaCte = value
                FixupCtaCte(previousValue)
                OnNavigationPropertyChanged("CtaCte")
            End If
        End Set
    End Property

    Private _ctaCte As CtaCte


    <DataMember()>
    Public Property CtaCte1() As CtaCte
        Get
            Return _ctaCte1
        End Get
        Set(ByVal value As CtaCte)
            If _ctaCte1 IsNot value Then
                Dim previousValue As CtaCte = _ctaCte1
                _ctaCte1 = value
                FixupCtaCte1(previousValue)
                OnNavigationPropertyChanged("CtaCte1")
            End If
        End Set
    End Property

    Private _ctaCte1 As CtaCte


    <DataMember()>
    Public Property CtaCte2() As CtaCte
        Get
            Return _ctaCte2
        End Get
        Set(ByVal value As CtaCte)
            If _ctaCte2 IsNot value Then
                Dim previousValue As CtaCte = _ctaCte2
                _ctaCte2 = value
                FixupCtaCte2(previousValue)
                OnNavigationPropertyChanged("CtaCte2")
            End If
        End Set
    End Property

    Private _ctaCte2 As CtaCte


    <DataMember()>
    Public Property CuentasContables() As CuentasContables
        Get
            Return _cuentasContables
        End Get
        Set(ByVal value As CuentasContables)
            If _cuentasContables IsNot value Then
                Dim previousValue As CuentasContables = _cuentasContables
                _cuentasContables = value
                FixupCuentasContables(previousValue)
                OnNavigationPropertyChanged("CuentasContables")
            End If
        End Set
    End Property

    Private _cuentasContables As CuentasContables


    <DataMember()>
    Public Property DetalleTipoDocumentos() As DetalleTipoDocumentos
        Get
            Return _detalleTipoDocumentos
        End Get
        Set(ByVal value As DetalleTipoDocumentos)
            If _detalleTipoDocumentos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(DTD_ID, value.DTD_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As DetalleTipoDocumentos = _detalleTipoDocumentos
                _detalleTipoDocumentos = value
                FixupDetalleTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("DetalleTipoDocumentos")
            End If
        End Set
    End Property

    Private _detalleTipoDocumentos As DetalleTipoDocumentos


    <DataMember()>
    Public Property DetalleTipoDocumentos1() As DetalleTipoDocumentos
        Get
            Return _detalleTipoDocumentos1
        End Get
        Set(ByVal value As DetalleTipoDocumentos)
            If _detalleTipoDocumentos1 IsNot value Then
                Dim previousValue As DetalleTipoDocumentos = _detalleTipoDocumentos1
                _detalleTipoDocumentos1 = value
                FixupDetalleTipoDocumentos1(previousValue)
                OnNavigationPropertyChanged("DetalleTipoDocumentos1")
            End If
        End Set
    End Property

    Private _detalleTipoDocumentos1 As DetalleTipoDocumentos


    <DataMember()>
    Public Property DetalleTipoDocumentos2() As DetalleTipoDocumentos
        Get
            Return _detalleTipoDocumentos2
        End Get
        Set(ByVal value As DetalleTipoDocumentos)
            If _detalleTipoDocumentos2 IsNot value Then
                Dim previousValue As DetalleTipoDocumentos = _detalleTipoDocumentos2
                _detalleTipoDocumentos2 = value
                FixupDetalleTipoDocumentos2(previousValue)
                OnNavigationPropertyChanged("DetalleTipoDocumentos2")
            End If
        End Set
    End Property

    Private _detalleTipoDocumentos2 As DetalleTipoDocumentos


    <DataMember()>
    Public Property Moneda() As Moneda
        Get
            Return _moneda
        End Get
        Set(ByVal value As Moneda)
            If _moneda IsNot value Then
                Dim previousValue As Moneda = _moneda
                _moneda = value
                FixupMoneda(previousValue)
                OnNavigationPropertyChanged("Moneda")
            End If
        End Set
    End Property

    Private _moneda As Moneda


    <DataMember()>
    Public Property Moneda1() As Moneda
        Get
            Return _moneda1
        End Get
        Set(ByVal value As Moneda)
            If _moneda1 IsNot value Then
                Dim previousValue As Moneda = _moneda1
                _moneda1 = value
                FixupMoneda1(previousValue)
                OnNavigationPropertyChanged("Moneda1")
            End If
        End Set
    End Property

    Private _moneda1 As Moneda


    <DataMember()>
    Public Property TipoDocumentos() As TipoDocumentos
        Get
            Return _tipoDocumentos
        End Get
        Set(ByVal value As TipoDocumentos)
            If _tipoDocumentos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(TDO_ID, value.TDO_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As TipoDocumentos = _tipoDocumentos
                _tipoDocumentos = value
                FixupTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("TipoDocumentos")
            End If
        End Set
    End Property

    Private _tipoDocumentos As TipoDocumentos


    <DataMember()>
    Public Property TipoDocumentos1() As TipoDocumentos
        Get
            Return _tipoDocumentos1
        End Get
        Set(ByVal value As TipoDocumentos)
            If _tipoDocumentos1 IsNot value Then
                Dim previousValue As TipoDocumentos = _tipoDocumentos1
                _tipoDocumentos1 = value
                FixupTipoDocumentos1(previousValue)
                OnNavigationPropertyChanged("TipoDocumentos1")
            End If
        End Set
    End Property

    Private _tipoDocumentos1 As TipoDocumentos


    <DataMember()>
    Public Property TipoDocumentos2() As TipoDocumentos
        Get
            Return _tipoDocumentos2
        End Get
        Set(ByVal value As TipoDocumentos)
            If _tipoDocumentos2 IsNot value Then
                Dim previousValue As TipoDocumentos = _tipoDocumentos2
                _tipoDocumentos2 = value
                FixupTipoDocumentos2(previousValue)
                OnNavigationPropertyChanged("TipoDocumentos2")
            End If
        End Set
    End Property

    Private _tipoDocumentos2 As TipoDocumentos


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property CajaCtaCte() As CajaCtaCte
        Get
            Return _cajaCtaCte
        End Get
        Set(ByVal value As CajaCtaCte)
            If _cajaCtaCte IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(CCC_ID, value.CCC_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As CajaCtaCte = _cajaCtaCte
                _cajaCtaCte = value
                FixupCajaCtaCte(previousValue)
                OnNavigationPropertyChanged("CajaCtaCte")
            End If
        End Set
    End Property

    Private _cajaCtaCte As CajaCtaCte


    <DataMember()>
    Public Property CajaCtaCte1() As CajaCtaCte
        Get
            Return _cajaCtaCte1
        End Get
        Set(ByVal value As CajaCtaCte)
            If _cajaCtaCte1 IsNot value Then
                Dim previousValue As CajaCtaCte = _cajaCtaCte1
                _cajaCtaCte1 = value
                FixupCajaCtaCte1(previousValue)
                OnNavigationPropertyChanged("CajaCtaCte1")
            End If
        End Set
    End Property

    Private _cajaCtaCte1 As CajaCtaCte


    <DataMember()>
    Public Property Tesoreria() As Tesoreria
        Get
            Return _tesoreria
        End Get
        Set(ByVal value As Tesoreria)
            If _tesoreria IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(TDO_ID, value.TDO_ID) OrElse Not Equals(DTD_ID, value.DTD_ID) OrElse Not Equals(CCC_ID, value.CCC_ID) OrElse Not Equals(DTE_SERIE, value.TES_SERIE) OrElse Not Equals(DTE_NUMERO, value.TES_NUMERO) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As Tesoreria = _tesoreria
                _tesoreria = value
                FixupTesoreria(previousValue)
                OnNavigationPropertyChanged("Tesoreria")
            End If
        End Set
    End Property

    Private _tesoreria As Tesoreria


    <DataMember()>
    Public Property MedioPagoTesoreria() As MedioPagoTesoreria
        Get
            Return _medioPagoTesoreria
        End Get
        Set(ByVal value As MedioPagoTesoreria)
            If _medioPagoTesoreria IsNot value Then
                Dim previousValue As MedioPagoTesoreria = _medioPagoTesoreria
                _medioPagoTesoreria = value
                FixupMedioPagoTesoreria(previousValue)
                OnNavigationPropertyChanged("MedioPagoTesoreria")
            End If
        End Set
    End Property

    Private _medioPagoTesoreria As MedioPagoTesoreria


    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property Personas1() As Personas
        Get
            Return _personas1
        End Get
        Set(ByVal value As Personas)
            If _personas1 IsNot value Then
                Dim previousValue As Personas = _personas1
                _personas1 = value
                FixupPersonas1(previousValue)
                OnNavigationPropertyChanged("Personas1")
            End If
        End Set
    End Property

    Private _personas1 As Personas


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociaci칩n que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesar치 notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        CentroCostos = Nothing
        CtaCte = Nothing
        CtaCte1 = Nothing
        CtaCte2 = Nothing
        CuentasContables = Nothing
        DetalleTipoDocumentos = Nothing
        DetalleTipoDocumentos1 = Nothing
        DetalleTipoDocumentos2 = Nothing
        Moneda = Nothing
        Moneda1 = Nothing
        TipoDocumentos = Nothing
        TipoDocumentos1 = Nothing
        TipoDocumentos2 = Nothing
        Usuarios = Nothing
        CajaCtaCte = Nothing
        CajaCtaCte1 = Nothing
        Tesoreria = Nothing
        MedioPagoTesoreria = Nothing
        Personas = Nothing
        Personas1 = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupCentroCostos(ByVal previousValue As CentroCostos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleTesoreria.Contains(Me) Then
            previousValue.DetalleTesoreria.Remove(Me)
        End If

        If CentroCostos IsNot Nothing Then
            If Not CentroCostos.DetalleTesoreria.Contains(Me) Then
                CentroCostos.DetalleTesoreria.Add(Me)
            End If

            CCO_ID = CentroCostos.CCO_ID
        ElseIf Not skipKeys Then
            CCO_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CentroCostos") AndAlso
                ChangeTracker.OriginalValues("CentroCostos") Is CentroCostos Then
                ChangeTracker.OriginalValues.Remove("CentroCostos")
            Else
                ChangeTracker.RecordOriginalValue("CentroCostos", previousValue)
            End If
            If CentroCostos IsNot Nothing AndAlso Not CentroCostos.ChangeTracker.ChangeTrackingEnabled Then
                CentroCostos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCtaCte(ByVal previousValue As CtaCte, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleTesoreria.Contains(Me) Then
            previousValue.DetalleTesoreria.Remove(Me)
        End If

        If CtaCte IsNot Nothing Then
            If Not CtaCte.DetalleTesoreria.Contains(Me) Then
                CtaCte.DetalleTesoreria.Add(Me)
            End If

            CCT_ID = CtaCte.CCT_ID
        ElseIf Not skipKeys Then
            CCT_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CtaCte") AndAlso
                ChangeTracker.OriginalValues("CtaCte") Is CtaCte Then
                ChangeTracker.OriginalValues.Remove("CtaCte")
            Else
                ChangeTracker.RecordOriginalValue("CtaCte", previousValue)
            End If
            If CtaCte IsNot Nothing AndAlso Not CtaCte.ChangeTracker.ChangeTrackingEnabled Then
                CtaCte.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCtaCte1(ByVal previousValue As CtaCte, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleTesoreria1.Contains(Me) Then
            previousValue.DetalleTesoreria1.Remove(Me)
        End If

        If CtaCte1 IsNot Nothing Then
            If Not CtaCte1.DetalleTesoreria1.Contains(Me) Then
                CtaCte1.DetalleTesoreria1.Add(Me)
            End If

            CCT_ID_DOC = CtaCte1.CCT_ID
        ElseIf Not skipKeys Then
            CCT_ID_DOC = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CtaCte1") AndAlso
                ChangeTracker.OriginalValues("CtaCte1") Is CtaCte1 Then
                ChangeTracker.OriginalValues.Remove("CtaCte1")
            Else
                ChangeTracker.RecordOriginalValue("CtaCte1", previousValue)
            End If
            If CtaCte1 IsNot Nothing AndAlso Not CtaCte1.ChangeTracker.ChangeTrackingEnabled Then
                CtaCte1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCtaCte2(ByVal previousValue As CtaCte, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleTesoreria2.Contains(Me) Then
            previousValue.DetalleTesoreria2.Remove(Me)
        End If

        If CtaCte2 IsNot Nothing Then
            If Not CtaCte2.DetalleTesoreria2.Contains(Me) Then
                CtaCte2.DetalleTesoreria2.Add(Me)
            End If

            CCT_ID_DOC_1 = CtaCte2.CCT_ID
        ElseIf Not skipKeys Then
            CCT_ID_DOC_1 = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CtaCte2") AndAlso
                ChangeTracker.OriginalValues("CtaCte2") Is CtaCte2 Then
                ChangeTracker.OriginalValues.Remove("CtaCte2")
            Else
                ChangeTracker.RecordOriginalValue("CtaCte2", previousValue)
            End If
            If CtaCte2 IsNot Nothing AndAlso Not CtaCte2.ChangeTracker.ChangeTrackingEnabled Then
                CtaCte2.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCuentasContables(ByVal previousValue As CuentasContables, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleTesoreria.Contains(Me) Then
            previousValue.DetalleTesoreria.Remove(Me)
        End If

        If CuentasContables IsNot Nothing Then
            If Not CuentasContables.DetalleTesoreria.Contains(Me) Then
                CuentasContables.DetalleTesoreria.Add(Me)
            End If

            CUC_ID = CuentasContables.CUC_ID
        ElseIf Not skipKeys Then
            CUC_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CuentasContables") AndAlso
                ChangeTracker.OriginalValues("CuentasContables") Is CuentasContables Then
                ChangeTracker.OriginalValues.Remove("CuentasContables")
            Else
                ChangeTracker.RecordOriginalValue("CuentasContables", previousValue)
            End If
            If CuentasContables IsNot Nothing AndAlso Not CuentasContables.ChangeTracker.ChangeTrackingEnabled Then
                CuentasContables.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleTipoDocumentos(ByVal previousValue As DetalleTipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleTesoreria.Contains(Me) Then
            previousValue.DetalleTesoreria.Remove(Me)
        End If

        If DetalleTipoDocumentos IsNot Nothing Then
            If Not DetalleTipoDocumentos.DetalleTesoreria.Contains(Me) Then
                DetalleTipoDocumentos.DetalleTesoreria.Add(Me)
            End If

            DTD_ID = DetalleTipoDocumentos.DTD_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("DetalleTipoDocumentos") Is DetalleTipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("DetalleTipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTipoDocumentos", previousValue)
            End If
            If DetalleTipoDocumentos IsNot Nothing AndAlso Not DetalleTipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleTipoDocumentos1(ByVal previousValue As DetalleTipoDocumentos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleTesoreria1.Contains(Me) Then
            previousValue.DetalleTesoreria1.Remove(Me)
        End If

        If DetalleTipoDocumentos1 IsNot Nothing Then
            If Not DetalleTipoDocumentos1.DetalleTesoreria1.Contains(Me) Then
                DetalleTipoDocumentos1.DetalleTesoreria1.Add(Me)
            End If

            DTD_ID_DOC = DetalleTipoDocumentos1.DTD_ID
        ElseIf Not skipKeys Then
            DTD_ID_DOC = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTipoDocumentos1") AndAlso
                ChangeTracker.OriginalValues("DetalleTipoDocumentos1") Is DetalleTipoDocumentos1 Then
                ChangeTracker.OriginalValues.Remove("DetalleTipoDocumentos1")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTipoDocumentos1", previousValue)
            End If
            If DetalleTipoDocumentos1 IsNot Nothing AndAlso Not DetalleTipoDocumentos1.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTipoDocumentos1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleTipoDocumentos2(ByVal previousValue As DetalleTipoDocumentos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleTesoreria2.Contains(Me) Then
            previousValue.DetalleTesoreria2.Remove(Me)
        End If

        If DetalleTipoDocumentos2 IsNot Nothing Then
            If Not DetalleTipoDocumentos2.DetalleTesoreria2.Contains(Me) Then
                DetalleTipoDocumentos2.DetalleTesoreria2.Add(Me)
            End If

            DTD_ID_DOC_1 = DetalleTipoDocumentos2.DTD_ID
        ElseIf Not skipKeys Then
            DTD_ID_DOC_1 = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTipoDocumentos2") AndAlso
                ChangeTracker.OriginalValues("DetalleTipoDocumentos2") Is DetalleTipoDocumentos2 Then
                ChangeTracker.OriginalValues.Remove("DetalleTipoDocumentos2")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTipoDocumentos2", previousValue)
            End If
            If DetalleTipoDocumentos2 IsNot Nothing AndAlso Not DetalleTipoDocumentos2.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTipoDocumentos2.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupMoneda(ByVal previousValue As Moneda)
        If IsDeserializing Then
            Return
        End If

        If Moneda IsNot Nothing Then
            MON_ID_DOC = Moneda.MON_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Moneda") AndAlso
                ChangeTracker.OriginalValues("Moneda") Is Moneda Then
                ChangeTracker.OriginalValues.Remove("Moneda")
            Else
                ChangeTracker.RecordOriginalValue("Moneda", previousValue)
            End If
            If Moneda IsNot Nothing AndAlso Not Moneda.ChangeTracker.ChangeTrackingEnabled Then
                Moneda.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupMoneda1(ByVal previousValue As Moneda, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Moneda1 IsNot Nothing Then
            MON_ID_DOC_1 = Moneda1.MON_ID
        ElseIf Not skipKeys Then
            MON_ID_DOC_1 = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Moneda1") AndAlso
                ChangeTracker.OriginalValues("Moneda1") Is Moneda1 Then
                ChangeTracker.OriginalValues.Remove("Moneda1")
            Else
                ChangeTracker.RecordOriginalValue("Moneda1", previousValue)
            End If
            If Moneda1 IsNot Nothing AndAlso Not Moneda1.ChangeTracker.ChangeTrackingEnabled Then
                Moneda1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoDocumentos(ByVal previousValue As TipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleTesoreria.Contains(Me) Then
            previousValue.DetalleTesoreria.Remove(Me)
        End If

        If TipoDocumentos IsNot Nothing Then
            If Not TipoDocumentos.DetalleTesoreria.Contains(Me) Then
                TipoDocumentos.DetalleTesoreria.Add(Me)
            End If

            TDO_ID = TipoDocumentos.TDO_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("TipoDocumentos") Is TipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("TipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("TipoDocumentos", previousValue)
            End If
            If TipoDocumentos IsNot Nothing AndAlso Not TipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                TipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoDocumentos1(ByVal previousValue As TipoDocumentos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleTesoreria1.Contains(Me) Then
            previousValue.DetalleTesoreria1.Remove(Me)
        End If

        If TipoDocumentos1 IsNot Nothing Then
            If Not TipoDocumentos1.DetalleTesoreria1.Contains(Me) Then
                TipoDocumentos1.DetalleTesoreria1.Add(Me)
            End If

            TDO_ID_DOC = TipoDocumentos1.TDO_ID
        ElseIf Not skipKeys Then
            TDO_ID_DOC = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoDocumentos1") AndAlso
                ChangeTracker.OriginalValues("TipoDocumentos1") Is TipoDocumentos1 Then
                ChangeTracker.OriginalValues.Remove("TipoDocumentos1")
            Else
                ChangeTracker.RecordOriginalValue("TipoDocumentos1", previousValue)
            End If
            If TipoDocumentos1 IsNot Nothing AndAlso Not TipoDocumentos1.ChangeTracker.ChangeTrackingEnabled Then
                TipoDocumentos1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoDocumentos2(ByVal previousValue As TipoDocumentos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleTesoreria2.Contains(Me) Then
            previousValue.DetalleTesoreria2.Remove(Me)
        End If

        If TipoDocumentos2 IsNot Nothing Then
            If Not TipoDocumentos2.DetalleTesoreria2.Contains(Me) Then
                TipoDocumentos2.DetalleTesoreria2.Add(Me)
            End If

            TDO_ID_DOC_1 = TipoDocumentos2.TDO_ID
        ElseIf Not skipKeys Then
            TDO_ID_DOC_1 = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoDocumentos2") AndAlso
                ChangeTracker.OriginalValues("TipoDocumentos2") Is TipoDocumentos2 Then
                ChangeTracker.OriginalValues.Remove("TipoDocumentos2")
            Else
                ChangeTracker.RecordOriginalValue("TipoDocumentos2", previousValue)
            End If
            If TipoDocumentos2 IsNot Nothing AndAlso Not TipoDocumentos2.ChangeTracker.ChangeTrackingEnabled Then
                TipoDocumentos2.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCajaCtaCte(ByVal previousValue As CajaCtaCte)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleTesoreria.Contains(Me) Then
            previousValue.DetalleTesoreria.Remove(Me)
        End If

        If CajaCtaCte IsNot Nothing Then
            If Not CajaCtaCte.DetalleTesoreria.Contains(Me) Then
                CajaCtaCte.DetalleTesoreria.Add(Me)
            End If

            CCC_ID = CajaCtaCte.CCC_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CajaCtaCte") AndAlso
                ChangeTracker.OriginalValues("CajaCtaCte") Is CajaCtaCte Then
                ChangeTracker.OriginalValues.Remove("CajaCtaCte")
            Else
                ChangeTracker.RecordOriginalValue("CajaCtaCte", previousValue)
            End If
            If CajaCtaCte IsNot Nothing AndAlso Not CajaCtaCte.ChangeTracker.ChangeTrackingEnabled Then
                CajaCtaCte.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCajaCtaCte1(ByVal previousValue As CajaCtaCte, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleTesoreria1.Contains(Me) Then
            previousValue.DetalleTesoreria1.Remove(Me)
        End If

        If CajaCtaCte1 IsNot Nothing Then
            If Not CajaCtaCte1.DetalleTesoreria1.Contains(Me) Then
                CajaCtaCte1.DetalleTesoreria1.Add(Me)
            End If

            CCC_ID_CLI = CajaCtaCte1.CCC_ID
        ElseIf Not skipKeys Then
            CCC_ID_CLI = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CajaCtaCte1") AndAlso
                ChangeTracker.OriginalValues("CajaCtaCte1") Is CajaCtaCte1 Then
                ChangeTracker.OriginalValues.Remove("CajaCtaCte1")
            Else
                ChangeTracker.RecordOriginalValue("CajaCtaCte1", previousValue)
            End If
            If CajaCtaCte1 IsNot Nothing AndAlso Not CajaCtaCte1.ChangeTracker.ChangeTrackingEnabled Then
                CajaCtaCte1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTesoreria(ByVal previousValue As Tesoreria)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleTesoreria.Contains(Me) Then
            previousValue.DetalleTesoreria.Remove(Me)
        End If

        If Tesoreria IsNot Nothing Then
            If Not Tesoreria.DetalleTesoreria.Contains(Me) Then
                Tesoreria.DetalleTesoreria.Add(Me)
            End If

            TDO_ID = Tesoreria.TDO_ID
            DTD_ID = Tesoreria.DTD_ID
            CCC_ID = Tesoreria.CCC_ID
            DTE_SERIE = Tesoreria.TES_SERIE
            DTE_NUMERO = Tesoreria.TES_NUMERO
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Tesoreria") AndAlso
                ChangeTracker.OriginalValues("Tesoreria") Is Tesoreria Then
                ChangeTracker.OriginalValues.Remove("Tesoreria")
            Else
                ChangeTracker.RecordOriginalValue("Tesoreria", previousValue)
            End If
            If Tesoreria IsNot Nothing AndAlso Not Tesoreria.ChangeTracker.ChangeTrackingEnabled Then
                Tesoreria.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupMedioPagoTesoreria(ByVal previousValue As MedioPagoTesoreria)
        If previousValue IsNot Nothing Then
            RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf previousValue.HandleCascadeDelete
        End If

        If MedioPagoTesoreria IsNot Nothing Then
            AddHandler ChangeTracker.ObjectStateChanging, AddressOf MedioPagoTesoreria.HandleCascadeDelete
        End If
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso ReferenceEquals(previousValue.DetalleTesoreria, Me) Then
            previousValue.DetalleTesoreria = Nothing
        End If

        If MedioPagoTesoreria IsNot Nothing Then
            MedioPagoTesoreria.DetalleTesoreria = Me
        End If

        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("MedioPagoTesoreria") AndAlso
                ChangeTracker.OriginalValues("MedioPagoTesoreria") Is MedioPagoTesoreria Then
                ChangeTracker.OriginalValues.Remove("MedioPagoTesoreria")
            Else
                ChangeTracker.RecordOriginalValue("MedioPagoTesoreria", previousValue)
                ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                If previousValue IsNot Nothing AndAlso previousValue.ChangeTracker.State <> ObjectState.Added Then
                    previousValue.MarkAsDeleted()
                End If
            End If
            If MedioPagoTesoreria IsNot Nothing AndAlso Not MedioPagoTesoreria.ChangeTracker.ChangeTrackingEnabled Then
                MedioPagoTesoreria.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleTesoreria.Contains(Me) Then
            previousValue.DetalleTesoreria.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.DetalleTesoreria.Contains(Me) Then
                Personas.DetalleTesoreria.Add(Me)
            End If

            PER_ID_CLI = Personas.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_CLI = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas1(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleTesoreria1.Contains(Me) Then
            previousValue.DetalleTesoreria1.Remove(Me)
        End If

        If Personas1 IsNot Nothing Then
            If Not Personas1.DetalleTesoreria1.Contains(Me) Then
                Personas1.DetalleTesoreria1.Add(Me)
            End If

            PER_ID_CLI_1 = Personas1.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_CLI_1 = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas1") AndAlso
                ChangeTracker.OriginalValues("Personas1") Is Personas1 Then
                ChangeTracker.OriginalValues.Remove("Personas1")
            Else
                ChangeTracker.RecordOriginalValue("Personas1", previousValue)
            End If
            If Personas1 IsNot Nothing AndAlso Not Personas1.ChangeTracker.ChangeTrackingEnabled Then
                Personas1.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
