'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Articulos))>
<KnownType(GetType(CtaCte))>
<KnownType(GetType(DetalleTipoDocumentos))>
<KnownType(GetType(TipoDocumentos))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(Documentos))>
Partial Public Class DetalleDocumentos
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared TDO_ID As string = "TDO_ID"
				public shared DTD_ID As string = "DTD_ID"
				public shared DDO_SERIE As string = "DDO_SERIE"
				public shared DDO_NUMERO As string = "DDO_NUMERO"
				public shared DDO_ITEM As string = "DDO_ITEM"
				public shared ART_ID_IMP As string = "ART_ID_IMP"
				public shared ART_ID_KAR As string = "ART_ID_KAR"
				public shared DDO_ART_FACTOR As string = "DDO_ART_FACTOR"
				public shared DDO_CANTIDAD As string = "DDO_CANTIDAD"
				public shared DDO_INC_IGV As string = "DDO_INC_IGV"
				public shared DDO_DES_INC_PRE As string = "DDO_DES_INC_PRE"
				public shared DDO_PRE_UNI As string = "DDO_PRE_UNI"
				public shared DDO_IGV_POR As string = "DDO_IGV_POR"
				public shared DDO_MONTO_IGV As string = "DDO_MONTO_IGV"
				public shared DDO_PRE_TOTAL As string = "DDO_PRE_TOTAL"
				public shared DDO_OBS_DSC_ART As string = "DDO_OBS_DSC_ART"
				public shared TDO_ID_ANT As string = "TDO_ID_ANT"
				public shared DTD_ID_ANT As string = "DTD_ID_ANT"
				public shared CCT_ID_ANT As string = "CCT_ID_ANT"
				public shared DDO_SERIE_ANT As string = "DDO_SERIE_ANT"
				public shared DDO_NUMERO_ANT As string = "DDO_NUMERO_ANT"
				public shared USU_ID As string = "USU_ID"
				public shared DDO_FEC_GRAB As string = "DDO_FEC_GRAB"
				public shared DDO_ESTADO As string = "DDO_ESTADO"
				public shared ART_AFE_PER As string = "ART_AFE_PER"
				public shared CUC_ID As string = "CUC_ID"
				public shared DDO_SERIE_ANT_SUNAT As string = "DDO_SERIE_ANT_SUNAT"
		    End Structure
	



    <DataMember()>
    Public Property TDO_ID() As String
        Get
            Return _tDO_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'TDO_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If TipoDocumentos IsNot Nothing AndAlso Not Equals(TipoDocumentos.TDO_ID, value) Then
                        TipoDocumentos = Nothing
                    End If
                    If Documentos IsNot Nothing AndAlso Not Equals(Documentos.TDO_ID, value) Then
                        Documentos = Nothing
                    End If
                End If
                _tDO_ID = value
                OnPropertyChanged("TDO_ID")
            End If
        End Set
    End Property

    Private _tDO_ID As String

    <DataMember()>
    Public Property DTD_ID() As String
        Get
            Return _dTD_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DTD_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If DetalleTipoDocumentos IsNot Nothing AndAlso Not Equals(DetalleTipoDocumentos.DTD_ID, value) Then
                        DetalleTipoDocumentos = Nothing
                    End If
                    If Documentos IsNot Nothing AndAlso Not Equals(Documentos.DTD_ID, value) Then
                        Documentos = Nothing
                    End If
                End If
                _dTD_ID = value
                OnPropertyChanged("DTD_ID")
            End If
        End Set
    End Property

    Private _dTD_ID As String

    <DataMember()>
    Public Property DDO_SERIE() As String
        Get
            Return _dDO_SERIE
        End Get
        Set(ByVal value As String)
            If Not Equals(_dDO_SERIE, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DDO_SERIE' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If Documentos IsNot Nothing AndAlso Not Equals(Documentos.DOC_SERIE, value) Then
                        Documentos = Nothing
                    End If
                End If
                _dDO_SERIE = value
                OnPropertyChanged("DDO_SERIE")
            End If
        End Set
    End Property

    Private _dDO_SERIE As String

    <DataMember()>
    Public Property DDO_NUMERO() As String
        Get
            Return _dDO_NUMERO
        End Get
        Set(ByVal value As String)
            If Not Equals(_dDO_NUMERO, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DDO_NUMERO' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If Documentos IsNot Nothing AndAlso Not Equals(Documentos.DOC_NUMERO, value) Then
                        Documentos = Nothing
                    End If
                End If
                _dDO_NUMERO = value
                OnPropertyChanged("DDO_NUMERO")
            End If
        End Set
    End Property

    Private _dDO_NUMERO As String

    <DataMember()>
    Public Property DDO_ITEM() As Decimal
        Get
            Return _dDO_ITEM
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dDO_ITEM, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DDO_ITEM' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _dDO_ITEM = value
                OnPropertyChanged("DDO_ITEM")
            End If
        End Set
    End Property

    Private _dDO_ITEM As Decimal

    <DataMember()>
    Public Property ART_ID_IMP() As String
        Get
            Return _aRT_ID_IMP
        End Get
        Set(ByVal value As String)
            If Not Equals(_aRT_ID_IMP, value) Then
                ChangeTracker.RecordOriginalValue("ART_ID_IMP", _aRT_ID_IMP)
                If Not IsDeserializing Then
                    If Articulos1 IsNot Nothing AndAlso Not Equals(Articulos1.ART_ID, value) Then
                        Articulos1 = Nothing
                    End If
                End If
                _aRT_ID_IMP = value
                OnPropertyChanged("ART_ID_IMP")
            End If
        End Set
    End Property

    Private _aRT_ID_IMP As String

    <DataMember()>
    Public Property ART_ID_KAR() As String
        Get
            Return _aRT_ID_KAR
        End Get
        Set(ByVal value As String)
            If Not Equals(_aRT_ID_KAR, value) Then
                ChangeTracker.RecordOriginalValue("ART_ID_KAR", _aRT_ID_KAR)
                If Not IsDeserializing Then
                    If Articulos IsNot Nothing AndAlso Not Equals(Articulos.ART_ID, value) Then
                        Articulos = Nothing
                    End If
                End If
                _aRT_ID_KAR = value
                OnPropertyChanged("ART_ID_KAR")
            End If
        End Set
    End Property

    Private _aRT_ID_KAR As String

    <DataMember()>
    Public Property DDO_ART_FACTOR() As Decimal
        Get
            Return _dDO_ART_FACTOR
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dDO_ART_FACTOR, value) Then
                _dDO_ART_FACTOR = value
                OnPropertyChanged("DDO_ART_FACTOR")
            End If
        End Set
    End Property

    Private _dDO_ART_FACTOR As Decimal

    <DataMember()>
    Public Property DDO_CANTIDAD() As Decimal
        Get
            Return _dDO_CANTIDAD
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dDO_CANTIDAD, value) Then
                _dDO_CANTIDAD = value
                OnPropertyChanged("DDO_CANTIDAD")
            End If
        End Set
    End Property

    Private _dDO_CANTIDAD As Decimal

    <DataMember()>
    Public Property DDO_INC_IGV() As Short
        Get
            Return _dDO_INC_IGV
        End Get
        Set(ByVal value As Short)
            If Not Equals(_dDO_INC_IGV, value) Then
                _dDO_INC_IGV = value
                OnPropertyChanged("DDO_INC_IGV")
            End If
        End Set
    End Property

    Private _dDO_INC_IGV As Short

    <DataMember()>
    Public Property DDO_DES_INC_PRE() As Decimal
        Get
            Return _dDO_DES_INC_PRE
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dDO_DES_INC_PRE, value) Then
                _dDO_DES_INC_PRE = value
                OnPropertyChanged("DDO_DES_INC_PRE")
            End If
        End Set
    End Property

    Private _dDO_DES_INC_PRE As Decimal

    <DataMember()>
    Public Property DDO_PRE_UNI() As Decimal
        Get
            Return _dDO_PRE_UNI
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dDO_PRE_UNI, value) Then
                _dDO_PRE_UNI = value
                OnPropertyChanged("DDO_PRE_UNI")
            End If
        End Set
    End Property

    Private _dDO_PRE_UNI As Decimal

    <DataMember()>
    Public Property DDO_IGV_POR() As Decimal
        Get
            Return _dDO_IGV_POR
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dDO_IGV_POR, value) Then
                _dDO_IGV_POR = value
                OnPropertyChanged("DDO_IGV_POR")
            End If
        End Set
    End Property

    Private _dDO_IGV_POR As Decimal

    <DataMember()>
    Public Property DDO_MONTO_IGV() As Decimal
        Get
            Return _dDO_MONTO_IGV
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dDO_MONTO_IGV, value) Then
                _dDO_MONTO_IGV = value
                OnPropertyChanged("DDO_MONTO_IGV")
            End If
        End Set
    End Property

    Private _dDO_MONTO_IGV As Decimal

    <DataMember()>
    Public Property DDO_PRE_TOTAL() As Decimal
        Get
            Return _dDO_PRE_TOTAL
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dDO_PRE_TOTAL, value) Then
                _dDO_PRE_TOTAL = value
                OnPropertyChanged("DDO_PRE_TOTAL")
            End If
        End Set
    End Property

    Private _dDO_PRE_TOTAL As Decimal

    <DataMember()>
    Public Property DDO_OBS_DSC_ART() As String
        Get
            Return _dDO_OBS_DSC_ART
        End Get
        Set(ByVal value As String)
            If Not Equals(_dDO_OBS_DSC_ART, value) Then
                _dDO_OBS_DSC_ART = value
                OnPropertyChanged("DDO_OBS_DSC_ART")
            End If
        End Set
    End Property

    Private _dDO_OBS_DSC_ART As String

    <DataMember()>
    Public Property TDO_ID_ANT() As String
        Get
            Return _tDO_ID_ANT
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID_ANT, value) Then
                ChangeTracker.RecordOriginalValue("TDO_ID_ANT", _tDO_ID_ANT)
                If Not IsDeserializing Then
                    If TipoDocumentos1 IsNot Nothing AndAlso Not Equals(TipoDocumentos1.TDO_ID, value) Then
                        TipoDocumentos1 = Nothing
                    End If
                End If
                _tDO_ID_ANT = value
                OnPropertyChanged("TDO_ID_ANT")
            End If
        End Set
    End Property

    Private _tDO_ID_ANT As String

    <DataMember()>
    Public Property DTD_ID_ANT() As String
        Get
            Return _dTD_ID_ANT
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID_ANT, value) Then
                ChangeTracker.RecordOriginalValue("DTD_ID_ANT", _dTD_ID_ANT)
                If Not IsDeserializing Then
                    If DetalleTipoDocumentos1 IsNot Nothing AndAlso Not Equals(DetalleTipoDocumentos1.DTD_ID, value) Then
                        DetalleTipoDocumentos1 = Nothing
                    End If
                End If
                _dTD_ID_ANT = value
                OnPropertyChanged("DTD_ID_ANT")
            End If
        End Set
    End Property

    Private _dTD_ID_ANT As String

    <DataMember()>
    Public Property CCT_ID_ANT() As String
        Get
            Return _cCT_ID_ANT
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCT_ID_ANT, value) Then
                ChangeTracker.RecordOriginalValue("CCT_ID_ANT", _cCT_ID_ANT)
                If Not IsDeserializing Then
                    If CtaCte IsNot Nothing AndAlso Not Equals(CtaCte.CCT_ID, value) Then
                        CtaCte = Nothing
                    End If
                End If
                _cCT_ID_ANT = value
                OnPropertyChanged("CCT_ID_ANT")
            End If
        End Set
    End Property

    Private _cCT_ID_ANT As String

    <DataMember()>
    Public Property DDO_SERIE_ANT() As String
        Get
            Return _dDO_SERIE_ANT
        End Get
        Set(ByVal value As String)
            If Not Equals(_dDO_SERIE_ANT, value) Then
                _dDO_SERIE_ANT = value
                OnPropertyChanged("DDO_SERIE_ANT")
            End If
        End Set
    End Property

    Private _dDO_SERIE_ANT As String

    <DataMember()>
    Public Property DDO_NUMERO_ANT() As String
        Get
            Return _dDO_NUMERO_ANT
        End Get
        Set(ByVal value As String)
            If Not Equals(_dDO_NUMERO_ANT, value) Then
                _dDO_NUMERO_ANT = value
                OnPropertyChanged("DDO_NUMERO_ANT")
            End If
        End Set
    End Property

    Private _dDO_NUMERO_ANT As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property DDO_FEC_GRAB() As Date
        Get
            Return _dDO_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dDO_FEC_GRAB, value) Then
                _dDO_FEC_GRAB = value
                OnPropertyChanged("DDO_FEC_GRAB")
            End If
        End Set
    End Property

    Private _dDO_FEC_GRAB As Date

    <DataMember()>
    Public Property DDO_ESTADO() As Boolean
        Get
            Return _dDO_ESTADO
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_dDO_ESTADO, value) Then
                _dDO_ESTADO = value
                OnPropertyChanged("DDO_ESTADO")
            End If
        End Set
    End Property

    Private _dDO_ESTADO As Boolean

    <DataMember()>
    Public Property ART_AFE_PER() As Boolean
        Get
            Return _aRT_AFE_PER
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_aRT_AFE_PER, value) Then
                _aRT_AFE_PER = value
                OnPropertyChanged("ART_AFE_PER")
            End If
        End Set
    End Property

    Private _aRT_AFE_PER As Boolean

    <DataMember()>
    Public Property CUC_ID() As String
        Get
            Return _cUC_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cUC_ID, value) Then
                _cUC_ID = value
                OnPropertyChanged("CUC_ID")
            End If
        End Set
    End Property

    Private _cUC_ID As String

    <DataMember()>
    Public Property DDO_SERIE_ANT_SUNAT() As String
        Get
            Return _dDO_SERIE_ANT_SUNAT
        End Get
        Set(ByVal value As String)
            If Not Equals(_dDO_SERIE_ANT_SUNAT, value) Then
                _dDO_SERIE_ANT_SUNAT = value
                OnPropertyChanged("DDO_SERIE_ANT_SUNAT")
            End If
        End Set
    End Property

    Private _dDO_SERIE_ANT_SUNAT As String

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property Articulos() As Articulos
        Get
            Return _articulos
        End Get
        Set(ByVal value As Articulos)
            If _articulos IsNot value Then
                Dim previousValue As Articulos = _articulos
                _articulos = value
                FixupArticulos(previousValue)
                OnNavigationPropertyChanged("Articulos")
            End If
        End Set
    End Property

    Private _articulos As Articulos


    <DataMember()>
    Public Property Articulos1() As Articulos
        Get
            Return _articulos1
        End Get
        Set(ByVal value As Articulos)
            If _articulos1 IsNot value Then
                Dim previousValue As Articulos = _articulos1
                _articulos1 = value
                FixupArticulos1(previousValue)
                OnNavigationPropertyChanged("Articulos1")
            End If
        End Set
    End Property

    Private _articulos1 As Articulos


    <DataMember()>
    Public Property CtaCte() As CtaCte
        Get
            Return _ctaCte
        End Get
        Set(ByVal value As CtaCte)
            If _ctaCte IsNot value Then
                Dim previousValue As CtaCte = _ctaCte
                _ctaCte = value
                FixupCtaCte(previousValue)
                OnNavigationPropertyChanged("CtaCte")
            End If
        End Set
    End Property

    Private _ctaCte As CtaCte


    <DataMember()>
    Public Property DetalleTipoDocumentos() As DetalleTipoDocumentos
        Get
            Return _detalleTipoDocumentos
        End Get
        Set(ByVal value As DetalleTipoDocumentos)
            If _detalleTipoDocumentos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(DTD_ID, value.DTD_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As DetalleTipoDocumentos = _detalleTipoDocumentos
                _detalleTipoDocumentos = value
                FixupDetalleTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("DetalleTipoDocumentos")
            End If
        End Set
    End Property

    Private _detalleTipoDocumentos As DetalleTipoDocumentos


    <DataMember()>
    Public Property DetalleTipoDocumentos1() As DetalleTipoDocumentos
        Get
            Return _detalleTipoDocumentos1
        End Get
        Set(ByVal value As DetalleTipoDocumentos)
            If _detalleTipoDocumentos1 IsNot value Then
                Dim previousValue As DetalleTipoDocumentos = _detalleTipoDocumentos1
                _detalleTipoDocumentos1 = value
                FixupDetalleTipoDocumentos1(previousValue)
                OnNavigationPropertyChanged("DetalleTipoDocumentos1")
            End If
        End Set
    End Property

    Private _detalleTipoDocumentos1 As DetalleTipoDocumentos


    <DataMember()>
    Public Property TipoDocumentos() As TipoDocumentos
        Get
            Return _tipoDocumentos
        End Get
        Set(ByVal value As TipoDocumentos)
            If _tipoDocumentos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(TDO_ID, value.TDO_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As TipoDocumentos = _tipoDocumentos
                _tipoDocumentos = value
                FixupTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("TipoDocumentos")
            End If
        End Set
    End Property

    Private _tipoDocumentos As TipoDocumentos


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property TipoDocumentos1() As TipoDocumentos
        Get
            Return _tipoDocumentos1
        End Get
        Set(ByVal value As TipoDocumentos)
            If _tipoDocumentos1 IsNot value Then
                Dim previousValue As TipoDocumentos = _tipoDocumentos1
                _tipoDocumentos1 = value
                FixupTipoDocumentos1(previousValue)
                OnNavigationPropertyChanged("TipoDocumentos1")
            End If
        End Set
    End Property

    Private _tipoDocumentos1 As TipoDocumentos


    <DataMember()>
    Public Property Documentos() As Documentos
        Get
            Return _documentos
        End Get
        Set(ByVal value As Documentos)
            If _documentos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(TDO_ID, value.TDO_ID) OrElse Not Equals(DTD_ID, value.DTD_ID) OrElse Not Equals(DDO_SERIE, value.DOC_SERIE) OrElse Not Equals(DDO_NUMERO, value.DOC_NUMERO) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As Documentos = _documentos
                _documentos = value
                FixupDocumentos(previousValue)
                OnNavigationPropertyChanged("Documentos")
            End If
        End Set
    End Property

    Private _documentos As Documentos


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociaci칩n que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesar치 notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Articulos = Nothing
        Articulos1 = Nothing
        CtaCte = Nothing
        DetalleTipoDocumentos = Nothing
        DetalleTipoDocumentos1 = Nothing
        TipoDocumentos = Nothing
        Usuarios = Nothing
        TipoDocumentos1 = Nothing
        Documentos = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupArticulos(ByVal previousValue As Articulos)
        If IsDeserializing Then
            Return
        End If

        If Articulos IsNot Nothing Then
            ART_ID_KAR = Articulos.ART_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Articulos") AndAlso
                ChangeTracker.OriginalValues("Articulos") Is Articulos Then
                ChangeTracker.OriginalValues.Remove("Articulos")
            Else
                ChangeTracker.RecordOriginalValue("Articulos", previousValue)
            End If
            If Articulos IsNot Nothing AndAlso Not Articulos.ChangeTracker.ChangeTrackingEnabled Then
                Articulos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupArticulos1(ByVal previousValue As Articulos)
        If IsDeserializing Then
            Return
        End If

        If Articulos1 IsNot Nothing Then
            ART_ID_IMP = Articulos1.ART_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Articulos1") AndAlso
                ChangeTracker.OriginalValues("Articulos1") Is Articulos1 Then
                ChangeTracker.OriginalValues.Remove("Articulos1")
            Else
                ChangeTracker.RecordOriginalValue("Articulos1", previousValue)
            End If
            If Articulos1 IsNot Nothing AndAlso Not Articulos1.ChangeTracker.ChangeTrackingEnabled Then
                Articulos1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCtaCte(ByVal previousValue As CtaCte, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleDocumentos.Contains(Me) Then
            previousValue.DetalleDocumentos.Remove(Me)
        End If

        If CtaCte IsNot Nothing Then
            If Not CtaCte.DetalleDocumentos.Contains(Me) Then
                CtaCte.DetalleDocumentos.Add(Me)
            End If

            CCT_ID_ANT = CtaCte.CCT_ID
        ElseIf Not skipKeys Then
            CCT_ID_ANT = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CtaCte") AndAlso
                ChangeTracker.OriginalValues("CtaCte") Is CtaCte Then
                ChangeTracker.OriginalValues.Remove("CtaCte")
            Else
                ChangeTracker.RecordOriginalValue("CtaCte", previousValue)
            End If
            If CtaCte IsNot Nothing AndAlso Not CtaCte.ChangeTracker.ChangeTrackingEnabled Then
                CtaCte.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleTipoDocumentos(ByVal previousValue As DetalleTipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleDocumentos.Contains(Me) Then
            previousValue.DetalleDocumentos.Remove(Me)
        End If

        If DetalleTipoDocumentos IsNot Nothing Then
            If Not DetalleTipoDocumentos.DetalleDocumentos.Contains(Me) Then
                DetalleTipoDocumentos.DetalleDocumentos.Add(Me)
            End If

            DTD_ID = DetalleTipoDocumentos.DTD_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("DetalleTipoDocumentos") Is DetalleTipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("DetalleTipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTipoDocumentos", previousValue)
            End If
            If DetalleTipoDocumentos IsNot Nothing AndAlso Not DetalleTipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleTipoDocumentos1(ByVal previousValue As DetalleTipoDocumentos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleDocumentos1.Contains(Me) Then
            previousValue.DetalleDocumentos1.Remove(Me)
        End If

        If DetalleTipoDocumentos1 IsNot Nothing Then
            If Not DetalleTipoDocumentos1.DetalleDocumentos1.Contains(Me) Then
                DetalleTipoDocumentos1.DetalleDocumentos1.Add(Me)
            End If

            DTD_ID_ANT = DetalleTipoDocumentos1.DTD_ID
        ElseIf Not skipKeys Then
            DTD_ID_ANT = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTipoDocumentos1") AndAlso
                ChangeTracker.OriginalValues("DetalleTipoDocumentos1") Is DetalleTipoDocumentos1 Then
                ChangeTracker.OriginalValues.Remove("DetalleTipoDocumentos1")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTipoDocumentos1", previousValue)
            End If
            If DetalleTipoDocumentos1 IsNot Nothing AndAlso Not DetalleTipoDocumentos1.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTipoDocumentos1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoDocumentos(ByVal previousValue As TipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleDocumentos.Contains(Me) Then
            previousValue.DetalleDocumentos.Remove(Me)
        End If

        If TipoDocumentos IsNot Nothing Then
            If Not TipoDocumentos.DetalleDocumentos.Contains(Me) Then
                TipoDocumentos.DetalleDocumentos.Add(Me)
            End If

            TDO_ID = TipoDocumentos.TDO_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("TipoDocumentos") Is TipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("TipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("TipoDocumentos", previousValue)
            End If
            If TipoDocumentos IsNot Nothing AndAlso Not TipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                TipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoDocumentos1(ByVal previousValue As TipoDocumentos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleDocumentos1.Contains(Me) Then
            previousValue.DetalleDocumentos1.Remove(Me)
        End If

        If TipoDocumentos1 IsNot Nothing Then
            If Not TipoDocumentos1.DetalleDocumentos1.Contains(Me) Then
                TipoDocumentos1.DetalleDocumentos1.Add(Me)
            End If

            TDO_ID_ANT = TipoDocumentos1.TDO_ID
        ElseIf Not skipKeys Then
            TDO_ID_ANT = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoDocumentos1") AndAlso
                ChangeTracker.OriginalValues("TipoDocumentos1") Is TipoDocumentos1 Then
                ChangeTracker.OriginalValues.Remove("TipoDocumentos1")
            Else
                ChangeTracker.RecordOriginalValue("TipoDocumentos1", previousValue)
            End If
            If TipoDocumentos1 IsNot Nothing AndAlso Not TipoDocumentos1.ChangeTracker.ChangeTrackingEnabled Then
                TipoDocumentos1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDocumentos(ByVal previousValue As Documentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleDocumentos.Contains(Me) Then
            previousValue.DetalleDocumentos.Remove(Me)
        End If

        If Documentos IsNot Nothing Then
            If Not Documentos.DetalleDocumentos.Contains(Me) Then
                Documentos.DetalleDocumentos.Add(Me)
            End If

            TDO_ID = Documentos.TDO_ID
            DTD_ID = Documentos.DTD_ID
            DDO_SERIE = Documentos.DOC_SERIE
            DDO_NUMERO = Documentos.DOC_NUMERO
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Documentos") AndAlso
                ChangeTracker.OriginalValues("Documentos") Is Documentos Then
                ChangeTracker.OriginalValues.Remove("Documentos")
            Else
                ChangeTracker.RecordOriginalValue("Documentos", previousValue)
            End If
            If Documentos IsNot Nothing AndAlso Not Documentos.ChangeTracker.ChangeTrackingEnabled Then
                Documentos.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
