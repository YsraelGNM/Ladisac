'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(LineasFamilia))>
<KnownType(GetType(CuentasContables))>
<KnownType(GetType(Usuarios))>
Partial Public Class CuentasArticulo
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared lin_Id As string = "lin_Id"
				public shared cuc_IdVenta As string = "cuc_IdVenta"
				public shared cuc_IdCompra As string = "cuc_IdCompra"
				public shared cuc_IdExistencias As string = "cuc_IdExistencias"
				public shared Usu_Id As string = "Usu_Id"
				public shared lin_FecGrab As string = "lin_FecGrab"
		    End Structure
	



    <DataMember()>
    Public Property lin_Id() As String
        Get
            Return _lin_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_lin_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'lin_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If LineasFamilia IsNot Nothing AndAlso Not Equals(LineasFamilia.LIN_ID, value) Then
                        LineasFamilia = Nothing
                    End If
                End If
                _lin_Id = value
                OnPropertyChanged("lin_Id")
            End If
        End Set
    End Property

    Private _lin_Id As String

    <DataMember()>
    Public Property cuc_IdVenta() As String
        Get
            Return _cuc_IdVenta
        End Get
        Set(ByVal value As String)
            If Not Equals(_cuc_IdVenta, value) Then
                ChangeTracker.RecordOriginalValue("cuc_IdVenta", _cuc_IdVenta)
                If Not IsDeserializing Then
                    If CuentasContables IsNot Nothing AndAlso Not Equals(CuentasContables.CUC_ID, value) Then
                        CuentasContables = Nothing
                    End If
                End If
                _cuc_IdVenta = value
                OnPropertyChanged("cuc_IdVenta")
            End If
        End Set
    End Property

    Private _cuc_IdVenta As String

    <DataMember()>
    Public Property cuc_IdCompra() As String
        Get
            Return _cuc_IdCompra
        End Get
        Set(ByVal value As String)
            If Not Equals(_cuc_IdCompra, value) Then
                ChangeTracker.RecordOriginalValue("cuc_IdCompra", _cuc_IdCompra)
                If Not IsDeserializing Then
                    If CuentasContables1 IsNot Nothing AndAlso Not Equals(CuentasContables1.CUC_ID, value) Then
                        CuentasContables1 = Nothing
                    End If
                End If
                _cuc_IdCompra = value
                OnPropertyChanged("cuc_IdCompra")
            End If
        End Set
    End Property

    Private _cuc_IdCompra As String

    <DataMember()>
    Public Property cuc_IdExistencias() As String
        Get
            Return _cuc_IdExistencias
        End Get
        Set(ByVal value As String)
            If Not Equals(_cuc_IdExistencias, value) Then
                ChangeTracker.RecordOriginalValue("cuc_IdExistencias", _cuc_IdExistencias)
                If Not IsDeserializing Then
                    If CuentasContables2 IsNot Nothing AndAlso Not Equals(CuentasContables2.CUC_ID, value) Then
                        CuentasContables2 = Nothing
                    End If
                End If
                _cuc_IdExistencias = value
                OnPropertyChanged("cuc_IdExistencias")
            End If
        End Set
    End Property

    Private _cuc_IdExistencias As String

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                ChangeTracker.RecordOriginalValue("Usu_Id", _usu_Id)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property lin_FecGrab() As Date
        Get
            Return _lin_FecGrab
        End Get
        Set(ByVal value As Date)
            If Not Equals(_lin_FecGrab, value) Then
                _lin_FecGrab = value
                OnPropertyChanged("lin_FecGrab")
            End If
        End Set
    End Property

    Private _lin_FecGrab As Date

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property LineasFamilia() As LineasFamilia
        Get
            Return _lineasFamilia
        End Get
        Set(ByVal value As LineasFamilia)
            If _lineasFamilia IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(lin_Id, value.LIN_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As LineasFamilia = _lineasFamilia
                _lineasFamilia = value
                FixupLineasFamilia(previousValue)
                OnNavigationPropertyChanged("LineasFamilia")
            End If
        End Set
    End Property

    Private _lineasFamilia As LineasFamilia


    <DataMember()>
    Public Property CuentasContables() As CuentasContables
        Get
            Return _cuentasContables
        End Get
        Set(ByVal value As CuentasContables)
            If _cuentasContables IsNot value Then
                Dim previousValue As CuentasContables = _cuentasContables
                _cuentasContables = value
                FixupCuentasContables(previousValue)
                OnNavigationPropertyChanged("CuentasContables")
            End If
        End Set
    End Property

    Private _cuentasContables As CuentasContables


    <DataMember()>
    Public Property CuentasContables1() As CuentasContables
        Get
            Return _cuentasContables1
        End Get
        Set(ByVal value As CuentasContables)
            If _cuentasContables1 IsNot value Then
                Dim previousValue As CuentasContables = _cuentasContables1
                _cuentasContables1 = value
                FixupCuentasContables1(previousValue)
                OnNavigationPropertyChanged("CuentasContables1")
            End If
        End Set
    End Property

    Private _cuentasContables1 As CuentasContables


    <DataMember()>
    Public Property CuentasContables2() As CuentasContables
        Get
            Return _cuentasContables2
        End Get
        Set(ByVal value As CuentasContables)
            If _cuentasContables2 IsNot value Then
                Dim previousValue As CuentasContables = _cuentasContables2
                _cuentasContables2 = value
                FixupCuentasContables2(previousValue)
                OnNavigationPropertyChanged("CuentasContables2")
            End If
        End Set
    End Property

    Private _cuentasContables2 As CuentasContables


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociación que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesará notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        LineasFamilia = Nothing
        CuentasContables = Nothing
        CuentasContables1 = Nothing
        CuentasContables2 = Nothing
        Usuarios = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupLineasFamilia(ByVal previousValue As LineasFamilia)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso ReferenceEquals(previousValue.CuentasArticulo, Me) Then
            previousValue.CuentasArticulo = Nothing
        End If

        If LineasFamilia IsNot Nothing Then
            LineasFamilia.CuentasArticulo = Me
            lin_Id = LineasFamilia.LIN_ID
        End If

        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("LineasFamilia") AndAlso
                ChangeTracker.OriginalValues("LineasFamilia") Is LineasFamilia Then
                ChangeTracker.OriginalValues.Remove("LineasFamilia")
            Else
                ChangeTracker.RecordOriginalValue("LineasFamilia", previousValue)
            End If
            If LineasFamilia IsNot Nothing AndAlso Not LineasFamilia.ChangeTracker.ChangeTrackingEnabled Then
                LineasFamilia.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCuentasContables(ByVal previousValue As CuentasContables, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.CuentasArticulo.Contains(Me) Then
            previousValue.CuentasArticulo.Remove(Me)
        End If

        If CuentasContables IsNot Nothing Then
            If Not CuentasContables.CuentasArticulo.Contains(Me) Then
                CuentasContables.CuentasArticulo.Add(Me)
            End If

            cuc_IdVenta = CuentasContables.CUC_ID
        ElseIf Not skipKeys Then
            cuc_IdVenta = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CuentasContables") AndAlso
                ChangeTracker.OriginalValues("CuentasContables") Is CuentasContables Then
                ChangeTracker.OriginalValues.Remove("CuentasContables")
            Else
                ChangeTracker.RecordOriginalValue("CuentasContables", previousValue)
            End If
            If CuentasContables IsNot Nothing AndAlso Not CuentasContables.ChangeTracker.ChangeTrackingEnabled Then
                CuentasContables.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCuentasContables1(ByVal previousValue As CuentasContables, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.CuentasArticulo1.Contains(Me) Then
            previousValue.CuentasArticulo1.Remove(Me)
        End If

        If CuentasContables1 IsNot Nothing Then
            If Not CuentasContables1.CuentasArticulo1.Contains(Me) Then
                CuentasContables1.CuentasArticulo1.Add(Me)
            End If

            cuc_IdCompra = CuentasContables1.CUC_ID
        ElseIf Not skipKeys Then
            cuc_IdCompra = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CuentasContables1") AndAlso
                ChangeTracker.OriginalValues("CuentasContables1") Is CuentasContables1 Then
                ChangeTracker.OriginalValues.Remove("CuentasContables1")
            Else
                ChangeTracker.RecordOriginalValue("CuentasContables1", previousValue)
            End If
            If CuentasContables1 IsNot Nothing AndAlso Not CuentasContables1.ChangeTracker.ChangeTrackingEnabled Then
                CuentasContables1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCuentasContables2(ByVal previousValue As CuentasContables, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.CuentasArticulo2.Contains(Me) Then
            previousValue.CuentasArticulo2.Remove(Me)
        End If

        If CuentasContables2 IsNot Nothing Then
            If Not CuentasContables2.CuentasArticulo2.Contains(Me) Then
                CuentasContables2.CuentasArticulo2.Add(Me)
            End If

            cuc_IdExistencias = CuentasContables2.CUC_ID
        ElseIf Not skipKeys Then
            cuc_IdExistencias = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CuentasContables2") AndAlso
                ChangeTracker.OriginalValues("CuentasContables2") Is CuentasContables2 Then
                ChangeTracker.OriginalValues.Remove("CuentasContables2")
            Else
                ChangeTracker.RecordOriginalValue("CuentasContables2", previousValue)
            End If
            If CuentasContables2 IsNot Nothing AndAlso Not CuentasContables2.ChangeTracker.ChangeTrackingEnabled Then
                CuentasContables2.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            Usu_Id = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
