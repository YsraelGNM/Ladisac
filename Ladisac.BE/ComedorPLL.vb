'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Conceptos))>
<KnownType(GetType(PlanillasComedorHoras))>
<KnownType(GetType(Planillas))>
<KnownType(GetType(DetalleComedorPLL))>
<KnownType(GetType(Personas))>
Partial Public Class ComedorPLL
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared com_Numero As string = "com_Numero"
				public shared com_Fecha As string = "com_Fecha"
				public shared per_idResponsable As string = "per_idResponsable"
				public shared per_IdComedor As string = "per_IdComedor"
				public shared com_Observaciones As string = "com_Observaciones"
				public shared pla_SeriePlaniRef As string = "pla_SeriePlaniRef"
				public shared pla_NumeroRef As string = "pla_NumeroRef"
				public shared tdo_IdRef As string = "tdo_IdRef"
				public shared Usu_Id As string = "Usu_Id"
				public shared com_FecGrab As string = "com_FecGrab"
				public shared tic_TipoConcep_Id As string = "tic_TipoConcep_Id"
				public shared con_Conceptos_Id As string = "con_Conceptos_Id"
		    End Structure
	



    <DataMember()>
    Public Property com_Numero() As String
        Get
            Return _com_Numero
        End Get
        Set(ByVal value As String)
            If Not Equals(_com_Numero, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'com_Numero' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _com_Numero = value
                OnPropertyChanged("com_Numero")
            End If
        End Set
    End Property

    Private _com_Numero As String

    <DataMember()>
    Public Property com_Fecha() As Date
        Get
            Return _com_Fecha
        End Get
        Set(ByVal value As Date)
            If Not Equals(_com_Fecha, value) Then
                _com_Fecha = value
                OnPropertyChanged("com_Fecha")
            End If
        End Set
    End Property

    Private _com_Fecha As Date

    <DataMember()>
    Public Property per_idResponsable() As String
        Get
            Return _per_idResponsable
        End Get
        Set(ByVal value As String)
            If Not Equals(_per_idResponsable, value) Then
                ChangeTracker.RecordOriginalValue("per_idResponsable", _per_idResponsable)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _per_idResponsable = value
                OnPropertyChanged("per_idResponsable")
            End If
        End Set
    End Property

    Private _per_idResponsable As String

    <DataMember()>
    Public Property per_IdComedor() As String
        Get
            Return _per_IdComedor
        End Get
        Set(ByVal value As String)
            If Not Equals(_per_IdComedor, value) Then
                ChangeTracker.RecordOriginalValue("per_IdComedor", _per_IdComedor)
                If Not IsDeserializing Then
                    If Personas1 IsNot Nothing AndAlso Not Equals(Personas1.PER_ID, value) Then
                        Personas1 = Nothing
                    End If
                End If
                _per_IdComedor = value
                OnPropertyChanged("per_IdComedor")
            End If
        End Set
    End Property

    Private _per_IdComedor As String

    <DataMember()>
    Public Property com_Observaciones() As String
        Get
            Return _com_Observaciones
        End Get
        Set(ByVal value As String)
            If Not Equals(_com_Observaciones, value) Then
                _com_Observaciones = value
                OnPropertyChanged("com_Observaciones")
            End If
        End Set
    End Property

    Private _com_Observaciones As String

    <DataMember()>
    Public Property pla_SeriePlaniRef() As String
        Get
            Return _pla_SeriePlaniRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_pla_SeriePlaniRef, value) Then
                ChangeTracker.RecordOriginalValue("pla_SeriePlaniRef", _pla_SeriePlaniRef)
                If Not IsDeserializing Then
                    If Planillas IsNot Nothing AndAlso Not Equals(Planillas.pla_SeriePlani, value) Then
                        Dim previousValue As Planillas = _planillas
                        _planillas = Nothing
                        FixupPlanillas(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("Planillas")
                    End If
                End If
                _pla_SeriePlaniRef = value
                OnPropertyChanged("pla_SeriePlaniRef")
            End If
        End Set
    End Property

    Private _pla_SeriePlaniRef As String

    <DataMember()>
    Public Property pla_NumeroRef() As String
        Get
            Return _pla_NumeroRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_pla_NumeroRef, value) Then
                ChangeTracker.RecordOriginalValue("pla_NumeroRef", _pla_NumeroRef)
                If Not IsDeserializing Then
                    If Planillas IsNot Nothing AndAlso Not Equals(Planillas.pla_Numero, value) Then
                        Dim previousValue As Planillas = _planillas
                        _planillas = Nothing
                        FixupPlanillas(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("Planillas")
                    End If
                End If
                _pla_NumeroRef = value
                OnPropertyChanged("pla_NumeroRef")
            End If
        End Set
    End Property

    Private _pla_NumeroRef As String

    <DataMember()>
    Public Property tdo_IdRef() As String
        Get
            Return _tdo_IdRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_tdo_IdRef, value) Then
                ChangeTracker.RecordOriginalValue("tdo_IdRef", _tdo_IdRef)
                If Not IsDeserializing Then
                    If Planillas IsNot Nothing AndAlso Not Equals(Planillas.tdo_Id, value) Then
                        Dim previousValue As Planillas = _planillas
                        _planillas = Nothing
                        FixupPlanillas(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("Planillas")
                    End If
                End If
                _tdo_IdRef = value
                OnPropertyChanged("tdo_IdRef")
            End If
        End Set
    End Property

    Private _tdo_IdRef As String

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property com_FecGrab() As Nullable(Of Date)
        Get
            Return _com_FecGrab
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_com_FecGrab, value) Then
                _com_FecGrab = value
                OnPropertyChanged("com_FecGrab")
            End If
        End Set
    End Property

    Private _com_FecGrab As Nullable(Of Date)

    <DataMember()>
    Public Property tic_TipoConcep_Id() As String
        Get
            Return _tic_TipoConcep_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_tic_TipoConcep_Id, value) Then
                ChangeTracker.RecordOriginalValue("tic_TipoConcep_Id", _tic_TipoConcep_Id)
                If Not IsDeserializing Then
                    If Conceptos IsNot Nothing AndAlso Not Equals(Conceptos.tic_TipoConcep_Id, value) Then
                        Dim previousValue As Conceptos = _conceptos
                        _conceptos = Nothing
                        FixupConceptos(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("Conceptos")
                    End If
                End If
                _tic_TipoConcep_Id = value
                OnPropertyChanged("tic_TipoConcep_Id")
            End If
        End Set
    End Property

    Private _tic_TipoConcep_Id As String

    <DataMember()>
    Public Property con_Conceptos_Id() As String
        Get
            Return _con_Conceptos_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_con_Conceptos_Id, value) Then
                ChangeTracker.RecordOriginalValue("con_Conceptos_Id", _con_Conceptos_Id)
                If Not IsDeserializing Then
                    If Conceptos IsNot Nothing AndAlso Not Equals(Conceptos.con_Conceptos_Id, value) Then
                        Dim previousValue As Conceptos = _conceptos
                        _conceptos = Nothing
                        FixupConceptos(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("Conceptos")
                    End If
                End If
                _con_Conceptos_Id = value
                OnPropertyChanged("con_Conceptos_Id")
            End If
        End Set
    End Property

    Private _con_Conceptos_Id As String

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property Conceptos() As Conceptos
        Get
            Return _conceptos
        End Get
        Set(ByVal value As Conceptos)
            If _conceptos IsNot value Then
                Dim previousValue As Conceptos = _conceptos
                _conceptos = value
                FixupConceptos(previousValue)
                OnNavigationPropertyChanged("Conceptos")
            End If
        End Set
    End Property

    Private _conceptos As Conceptos


    <DataMember()>
    Public Property PlanillasComedorHoras() As TrackableCollection(Of PlanillasComedorHoras)
        Get
            If _planillasComedorHoras Is Nothing Then
                _planillasComedorHoras = New TrackableCollection(Of PlanillasComedorHoras)
                AddHandler _planillasComedorHoras.CollectionChanged, AddressOf FixupPlanillasComedorHoras
            End If
            Return _planillasComedorHoras
        End Get
        Set(ByVal value As TrackableCollection(Of PlanillasComedorHoras))
            If Not Object.ReferenceEquals(_planillasComedorHoras, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _planillasComedorHoras IsNot Nothing Then
                    RemoveHandler _planillasComedorHoras.CollectionChanged, AddressOf FixupPlanillasComedorHoras
                End If
                _planillasComedorHoras = value
                If _planillasComedorHoras IsNot Nothing Then
                    AddHandler _planillasComedorHoras.CollectionChanged, AddressOf FixupPlanillasComedorHoras
                End If
                OnNavigationPropertyChanged("PlanillasComedorHoras")
            End If
        End Set
    End Property

    Private _planillasComedorHoras As TrackableCollection(Of PlanillasComedorHoras)

    <DataMember()>
    Public Property Planillas() As Planillas
        Get
            Return _planillas
        End Get
        Set(ByVal value As Planillas)
            If _planillas IsNot value Then
                Dim previousValue As Planillas = _planillas
                _planillas = value
                FixupPlanillas(previousValue)
                OnNavigationPropertyChanged("Planillas")
            End If
        End Set
    End Property

    Private _planillas As Planillas


    <DataMember()>
    Public Property DetalleComedorPLL() As TrackableCollection(Of DetalleComedorPLL)
        Get
            If _detalleComedorPLL Is Nothing Then
                _detalleComedorPLL = New TrackableCollection(Of DetalleComedorPLL)
                AddHandler _detalleComedorPLL.CollectionChanged, AddressOf FixupDetalleComedorPLL
            End If
            Return _detalleComedorPLL
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleComedorPLL))
            If Not Object.ReferenceEquals(_detalleComedorPLL, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleComedorPLL IsNot Nothing Then
                    RemoveHandler _detalleComedorPLL.CollectionChanged, AddressOf FixupDetalleComedorPLL
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As DetalleComedorPLL In _detalleComedorPLL
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detalleComedorPLL = value
                If _detalleComedorPLL IsNot Nothing Then
                    AddHandler _detalleComedorPLL.CollectionChanged, AddressOf FixupDetalleComedorPLL
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As DetalleComedorPLL In _detalleComedorPLL
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetalleComedorPLL")
            End If
        End Set
    End Property

    Private _detalleComedorPLL As TrackableCollection(Of DetalleComedorPLL)

    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property Personas1() As Personas
        Get
            Return _personas1
        End Get
        Set(ByVal value As Personas)
            If _personas1 IsNot value Then
                Dim previousValue As Personas = _personas1
                _personas1 = value
                FixupPersonas1(previousValue)
                OnNavigationPropertyChanged("Personas1")
            End If
        End Set
    End Property

    Private _personas1 As Personas


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Conceptos = Nothing
        PlanillasComedorHoras.Clear()
        Planillas = Nothing
        DetalleComedorPLL.Clear()
        Personas = Nothing
        Personas1 = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupConceptos(ByVal previousValue As Conceptos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ComedorPLL.Contains(Me) Then
            previousValue.ComedorPLL.Remove(Me)
        End If

        If Conceptos IsNot Nothing Then
            If Not Conceptos.ComedorPLL.Contains(Me) Then
                Conceptos.ComedorPLL.Add(Me)
            End If

            con_Conceptos_Id = Conceptos.con_Conceptos_Id
            tic_TipoConcep_Id = Conceptos.tic_TipoConcep_Id
        ElseIf Not skipKeys Then
            con_Conceptos_Id = Nothing
            tic_TipoConcep_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Conceptos") AndAlso
                ChangeTracker.OriginalValues("Conceptos") Is Conceptos Then
                ChangeTracker.OriginalValues.Remove("Conceptos")
            Else
                ChangeTracker.RecordOriginalValue("Conceptos", previousValue)
            End If
            If Conceptos IsNot Nothing AndAlso Not Conceptos.ChangeTracker.ChangeTrackingEnabled Then
                Conceptos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPlanillas(ByVal previousValue As Planillas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ComedorPLL.Contains(Me) Then
            previousValue.ComedorPLL.Remove(Me)
        End If

        If Planillas IsNot Nothing Then
            If Not Planillas.ComedorPLL.Contains(Me) Then
                Planillas.ComedorPLL.Add(Me)
            End If

            pla_SeriePlaniRef = Planillas.pla_SeriePlani
            pla_NumeroRef = Planillas.pla_Numero
            tdo_IdRef = Planillas.tdo_Id
        ElseIf Not skipKeys Then
            pla_SeriePlaniRef = Nothing
            pla_NumeroRef = Nothing
            tdo_IdRef = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Planillas") AndAlso
                ChangeTracker.OriginalValues("Planillas") Is Planillas Then
                ChangeTracker.OriginalValues.Remove("Planillas")
            Else
                ChangeTracker.RecordOriginalValue("Planillas", previousValue)
            End If
            If Planillas IsNot Nothing AndAlso Not Planillas.ChangeTracker.ChangeTrackingEnabled Then
                Planillas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ComedorPLL.Contains(Me) Then
            previousValue.ComedorPLL.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.ComedorPLL.Contains(Me) Then
                Personas.ComedorPLL.Add(Me)
            End If

            per_idResponsable = Personas.PER_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas1(ByVal previousValue As Personas)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ComedorPLL1.Contains(Me) Then
            previousValue.ComedorPLL1.Remove(Me)
        End If

        If Personas1 IsNot Nothing Then
            If Not Personas1.ComedorPLL1.Contains(Me) Then
                Personas1.ComedorPLL1.Add(Me)
            End If

            per_IdComedor = Personas1.PER_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas1") AndAlso
                ChangeTracker.OriginalValues("Personas1") Is Personas1 Then
                ChangeTracker.OriginalValues.Remove("Personas1")
            Else
                ChangeTracker.RecordOriginalValue("Personas1", previousValue)
            End If
            If Personas1 IsNot Nothing AndAlso Not Personas1.ChangeTracker.ChangeTrackingEnabled Then
                Personas1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPlanillasComedorHoras(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As PlanillasComedorHoras In e.NewItems
                item.ComedorPLL = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("PlanillasComedorHoras", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As PlanillasComedorHoras In e.OldItems
                If ReferenceEquals(item.ComedorPLL, Me) Then
                    item.ComedorPLL = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("PlanillasComedorHoras", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupDetalleComedorPLL(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleComedorPLL In e.NewItems
                item.com_Numero = com_Numero
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleComedorPLL", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleComedorPLL In e.OldItems
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleComedorPLL", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

#End Region
End Class
