'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(ClaseCuenta))>
<KnownType(GetType(DetalleTipoDocumentos))>
<KnownType(GetType(Moneda))>
<KnownType(GetType(CuentasContables))>
<KnownType(GetType(CentroCostos))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(Personas))>
<KnownType(GetType(CtaCte))>
Partial Public Class DetalleAsientosManuales
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared lib_Id As string = "lib_Id"
				public shared prd_Periodo_id As string = "prd_Periodo_id"
				public shared asm_NumeroVoucher As string = "asm_NumeroVoucher"
				public shared dam_Item As string = "dam_Item"
				public shared cls_Id As string = "cls_Id"
				public shared cuc_Id As string = "cuc_Id"
				public shared mon_Id As string = "mon_Id"
				public shared dam_ImporteCargoMN As string = "dam_ImporteCargoMN"
				public shared dam_ImporteAbonoMN As string = "dam_ImporteAbonoMN"
				public shared dam_ImporteCargoME As string = "dam_ImporteCargoME"
				public shared dam_ImporteAbonoME As string = "dam_ImporteAbonoME"
				public shared cco_Id As string = "cco_Id"
				public shared tdo_IdRef As string = "tdo_IdRef"
				public shared dtd_IdRef As string = "dtd_IdRef"
				public shared dam_SerieRef As string = "dam_SerieRef"
				public shared dam_NumeroRef As string = "dam_NumeroRef"
				public shared dam_ItemRef As string = "dam_ItemRef"
				public shared per_Id As string = "per_Id"
				public shared dam_Glosa As string = "dam_Glosa"
				public shared cct_Id As string = "cct_Id"
				public shared Usu_Id As string = "Usu_Id"
				public shared dam_FecGrab As string = "dam_FecGrab"
				public shared tdo_IdDoc As string = "tdo_IdDoc"
				public shared dtd_IdDoc As string = "dtd_IdDoc"
				public shared dam_SerieDoc As string = "dam_SerieDoc"
				public shared dam_NumeroDoc As string = "dam_NumeroDoc"
				public shared dam_ItemDoc As string = "dam_ItemDoc"
				public shared dam_SerieRefSunat As string = "dam_SerieRefSunat"
				public shared dam_SerieDocSunat As string = "dam_SerieDocSunat"
		    End Structure
	



    <DataMember()>
    Public Property lib_Id() As String
        Get
            Return _lib_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_lib_Id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'lib_Id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _lib_Id = value
                OnPropertyChanged("lib_Id")
            End If
        End Set
    End Property

    Private _lib_Id As String

    <DataMember()>
    Public Property prd_Periodo_id() As String
        Get
            Return _prd_Periodo_id
        End Get
        Set(ByVal value As String)
            If Not Equals(_prd_Periodo_id, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'prd_Periodo_id' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _prd_Periodo_id = value
                OnPropertyChanged("prd_Periodo_id")
            End If
        End Set
    End Property

    Private _prd_Periodo_id As String

    <DataMember()>
    Public Property asm_NumeroVoucher() As String
        Get
            Return _asm_NumeroVoucher
        End Get
        Set(ByVal value As String)
            If Not Equals(_asm_NumeroVoucher, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'asm_NumeroVoucher' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _asm_NumeroVoucher = value
                OnPropertyChanged("asm_NumeroVoucher")
            End If
        End Set
    End Property

    Private _asm_NumeroVoucher As String

    <DataMember()>
    Public Property dam_Item() As String
        Get
            Return _dam_Item
        End Get
        Set(ByVal value As String)
            If Not Equals(_dam_Item, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'dam_Item' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _dam_Item = value
                OnPropertyChanged("dam_Item")
            End If
        End Set
    End Property

    Private _dam_Item As String

    <DataMember()>
    Public Property cls_Id() As String
        Get
            Return _cls_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_cls_Id, value) Then
                ChangeTracker.RecordOriginalValue("cls_Id", _cls_Id)
                If Not IsDeserializing Then
                    If ClaseCuenta IsNot Nothing AndAlso Not Equals(ClaseCuenta.cls_Id, value) Then
                        ClaseCuenta = Nothing
                    End If
                End If
                _cls_Id = value
                OnPropertyChanged("cls_Id")
            End If
        End Set
    End Property

    Private _cls_Id As String

    <DataMember()>
    Public Property cuc_Id() As String
        Get
            Return _cuc_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_cuc_Id, value) Then
                ChangeTracker.RecordOriginalValue("cuc_Id", _cuc_Id)
                If Not IsDeserializing Then
                    If CuentasContables IsNot Nothing AndAlso Not Equals(CuentasContables.CUC_ID, value) Then
                        CuentasContables = Nothing
                    End If
                End If
                _cuc_Id = value
                OnPropertyChanged("cuc_Id")
            End If
        End Set
    End Property

    Private _cuc_Id As String

    <DataMember()>
    Public Property mon_Id() As String
        Get
            Return _mon_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_mon_Id, value) Then
                ChangeTracker.RecordOriginalValue("mon_Id", _mon_Id)
                If Not IsDeserializing Then
                    If Moneda IsNot Nothing AndAlso Not Equals(Moneda.MON_ID, value) Then
                        Moneda = Nothing
                    End If
                End If
                _mon_Id = value
                OnPropertyChanged("mon_Id")
            End If
        End Set
    End Property

    Private _mon_Id As String

    <DataMember()>
    Public Property dam_ImporteCargoMN() As Nullable(Of Decimal)
        Get
            Return _dam_ImporteCargoMN
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dam_ImporteCargoMN, value) Then
                _dam_ImporteCargoMN = value
                OnPropertyChanged("dam_ImporteCargoMN")
            End If
        End Set
    End Property

    Private _dam_ImporteCargoMN As Nullable(Of Decimal)

    <DataMember()>
    Public Property dam_ImporteAbonoMN() As Nullable(Of Decimal)
        Get
            Return _dam_ImporteAbonoMN
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dam_ImporteAbonoMN, value) Then
                _dam_ImporteAbonoMN = value
                OnPropertyChanged("dam_ImporteAbonoMN")
            End If
        End Set
    End Property

    Private _dam_ImporteAbonoMN As Nullable(Of Decimal)

    <DataMember()>
    Public Property dam_ImporteCargoME() As Nullable(Of Decimal)
        Get
            Return _dam_ImporteCargoME
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dam_ImporteCargoME, value) Then
                _dam_ImporteCargoME = value
                OnPropertyChanged("dam_ImporteCargoME")
            End If
        End Set
    End Property

    Private _dam_ImporteCargoME As Nullable(Of Decimal)

    <DataMember()>
    Public Property dam_ImporteAbonoME() As Nullable(Of Decimal)
        Get
            Return _dam_ImporteAbonoME
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_dam_ImporteAbonoME, value) Then
                _dam_ImporteAbonoME = value
                OnPropertyChanged("dam_ImporteAbonoME")
            End If
        End Set
    End Property

    Private _dam_ImporteAbonoME As Nullable(Of Decimal)

    <DataMember()>
    Public Property cco_Id() As String
        Get
            Return _cco_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_cco_Id, value) Then
                ChangeTracker.RecordOriginalValue("cco_Id", _cco_Id)
                If Not IsDeserializing Then
                    If CentroCostos IsNot Nothing AndAlso Not Equals(CentroCostos.CCO_ID, value) Then
                        CentroCostos = Nothing
                    End If
                End If
                _cco_Id = value
                OnPropertyChanged("cco_Id")
            End If
        End Set
    End Property

    Private _cco_Id As String

    <DataMember()>
    Public Property tdo_IdRef() As String
        Get
            Return _tdo_IdRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_tdo_IdRef, value) Then
                _tdo_IdRef = value
                OnPropertyChanged("tdo_IdRef")
            End If
        End Set
    End Property

    Private _tdo_IdRef As String

    <DataMember()>
    Public Property dtd_IdRef() As String
        Get
            Return _dtd_IdRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_dtd_IdRef, value) Then
                ChangeTracker.RecordOriginalValue("dtd_IdRef", _dtd_IdRef)
                If Not IsDeserializing Then
                    If DetalleTipoDocumentos IsNot Nothing AndAlso Not Equals(DetalleTipoDocumentos.DTD_ID, value) Then
                        DetalleTipoDocumentos = Nothing
                    End If
                End If
                _dtd_IdRef = value
                OnPropertyChanged("dtd_IdRef")
            End If
        End Set
    End Property

    Private _dtd_IdRef As String

    <DataMember()>
    Public Property dam_SerieRef() As String
        Get
            Return _dam_SerieRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_dam_SerieRef, value) Then
                _dam_SerieRef = value
                OnPropertyChanged("dam_SerieRef")
            End If
        End Set
    End Property

    Private _dam_SerieRef As String

    <DataMember()>
    Public Property dam_NumeroRef() As String
        Get
            Return _dam_NumeroRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_dam_NumeroRef, value) Then
                _dam_NumeroRef = value
                OnPropertyChanged("dam_NumeroRef")
            End If
        End Set
    End Property

    Private _dam_NumeroRef As String

    <DataMember()>
    Public Property dam_ItemRef() As String
        Get
            Return _dam_ItemRef
        End Get
        Set(ByVal value As String)
            If Not Equals(_dam_ItemRef, value) Then
                _dam_ItemRef = value
                OnPropertyChanged("dam_ItemRef")
            End If
        End Set
    End Property

    Private _dam_ItemRef As String

    <DataMember()>
    Public Property per_Id() As String
        Get
            Return _per_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_per_Id, value) Then
                ChangeTracker.RecordOriginalValue("per_Id", _per_Id)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _per_Id = value
                OnPropertyChanged("per_Id")
            End If
        End Set
    End Property

    Private _per_Id As String

    <DataMember()>
    Public Property dam_Glosa() As String
        Get
            Return _dam_Glosa
        End Get
        Set(ByVal value As String)
            If Not Equals(_dam_Glosa, value) Then
                _dam_Glosa = value
                OnPropertyChanged("dam_Glosa")
            End If
        End Set
    End Property

    Private _dam_Glosa As String

    <DataMember()>
    Public Property cct_Id() As String
        Get
            Return _cct_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_cct_Id, value) Then
                ChangeTracker.RecordOriginalValue("cct_Id", _cct_Id)
                If Not IsDeserializing Then
                    If CtaCte IsNot Nothing AndAlso Not Equals(CtaCte.CCT_ID, value) Then
                        CtaCte = Nothing
                    End If
                End If
                _cct_Id = value
                OnPropertyChanged("cct_Id")
            End If
        End Set
    End Property

    Private _cct_Id As String

    <DataMember()>
    Public Property Usu_Id() As String
        Get
            Return _usu_Id
        End Get
        Set(ByVal value As String)
            If Not Equals(_usu_Id, value) Then
                ChangeTracker.RecordOriginalValue("Usu_Id", _usu_Id)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _usu_Id = value
                OnPropertyChanged("Usu_Id")
            End If
        End Set
    End Property

    Private _usu_Id As String

    <DataMember()>
    Public Property dam_FecGrab() As Nullable(Of Date)
        Get
            Return _dam_FecGrab
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_dam_FecGrab, value) Then
                _dam_FecGrab = value
                OnPropertyChanged("dam_FecGrab")
            End If
        End Set
    End Property

    Private _dam_FecGrab As Nullable(Of Date)

    <DataMember()>
    Public Property tdo_IdDoc() As String
        Get
            Return _tdo_IdDoc
        End Get
        Set(ByVal value As String)
            If Not Equals(_tdo_IdDoc, value) Then
                _tdo_IdDoc = value
                OnPropertyChanged("tdo_IdDoc")
            End If
        End Set
    End Property

    Private _tdo_IdDoc As String

    <DataMember()>
    Public Property dtd_IdDoc() As String
        Get
            Return _dtd_IdDoc
        End Get
        Set(ByVal value As String)
            If Not Equals(_dtd_IdDoc, value) Then
                ChangeTracker.RecordOriginalValue("dtd_IdDoc", _dtd_IdDoc)
                If Not IsDeserializing Then
                    If DetalleTipoDocumentos1 IsNot Nothing AndAlso Not Equals(DetalleTipoDocumentos1.DTD_ID, value) Then
                        DetalleTipoDocumentos1 = Nothing
                    End If
                End If
                _dtd_IdDoc = value
                OnPropertyChanged("dtd_IdDoc")
            End If
        End Set
    End Property

    Private _dtd_IdDoc As String

    <DataMember()>
    Public Property dam_SerieDoc() As String
        Get
            Return _dam_SerieDoc
        End Get
        Set(ByVal value As String)
            If Not Equals(_dam_SerieDoc, value) Then
                _dam_SerieDoc = value
                OnPropertyChanged("dam_SerieDoc")
            End If
        End Set
    End Property

    Private _dam_SerieDoc As String

    <DataMember()>
    Public Property dam_NumeroDoc() As String
        Get
            Return _dam_NumeroDoc
        End Get
        Set(ByVal value As String)
            If Not Equals(_dam_NumeroDoc, value) Then
                _dam_NumeroDoc = value
                OnPropertyChanged("dam_NumeroDoc")
            End If
        End Set
    End Property

    Private _dam_NumeroDoc As String

    <DataMember()>
    Public Property dam_ItemDoc() As String
        Get
            Return _dam_ItemDoc
        End Get
        Set(ByVal value As String)
            If Not Equals(_dam_ItemDoc, value) Then
                _dam_ItemDoc = value
                OnPropertyChanged("dam_ItemDoc")
            End If
        End Set
    End Property

    Private _dam_ItemDoc As String

    <DataMember()>
    Public Property dam_SerieRefSunat() As String
        Get
            Return _dam_SerieRefSunat
        End Get
        Set(ByVal value As String)
            If Not Equals(_dam_SerieRefSunat, value) Then
                _dam_SerieRefSunat = value
                OnPropertyChanged("dam_SerieRefSunat")
            End If
        End Set
    End Property

    Private _dam_SerieRefSunat As String

    <DataMember()>
    Public Property dam_SerieDocSunat() As String
        Get
            Return _dam_SerieDocSunat
        End Get
        Set(ByVal value As String)
            If Not Equals(_dam_SerieDocSunat, value) Then
                _dam_SerieDocSunat = value
                OnPropertyChanged("dam_SerieDocSunat")
            End If
        End Set
    End Property

    Private _dam_SerieDocSunat As String

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property ClaseCuenta() As ClaseCuenta
        Get
            Return _claseCuenta
        End Get
        Set(ByVal value As ClaseCuenta)
            If _claseCuenta IsNot value Then
                Dim previousValue As ClaseCuenta = _claseCuenta
                _claseCuenta = value
                FixupClaseCuenta(previousValue)
                OnNavigationPropertyChanged("ClaseCuenta")
            End If
        End Set
    End Property

    Private _claseCuenta As ClaseCuenta


    <DataMember()>
    Public Property DetalleTipoDocumentos() As DetalleTipoDocumentos
        Get
            Return _detalleTipoDocumentos
        End Get
        Set(ByVal value As DetalleTipoDocumentos)
            If _detalleTipoDocumentos IsNot value Then
                Dim previousValue As DetalleTipoDocumentos = _detalleTipoDocumentos
                _detalleTipoDocumentos = value
                FixupDetalleTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("DetalleTipoDocumentos")
            End If
        End Set
    End Property

    Private _detalleTipoDocumentos As DetalleTipoDocumentos


    <DataMember()>
    Public Property Moneda() As Moneda
        Get
            Return _moneda
        End Get
        Set(ByVal value As Moneda)
            If _moneda IsNot value Then
                Dim previousValue As Moneda = _moneda
                _moneda = value
                FixupMoneda(previousValue)
                OnNavigationPropertyChanged("Moneda")
            End If
        End Set
    End Property

    Private _moneda As Moneda


    <DataMember()>
    Public Property CuentasContables() As CuentasContables
        Get
            Return _cuentasContables
        End Get
        Set(ByVal value As CuentasContables)
            If _cuentasContables IsNot value Then
                Dim previousValue As CuentasContables = _cuentasContables
                _cuentasContables = value
                FixupCuentasContables(previousValue)
                OnNavigationPropertyChanged("CuentasContables")
            End If
        End Set
    End Property

    Private _cuentasContables As CuentasContables


    <DataMember()>
    Public Property CentroCostos() As CentroCostos
        Get
            Return _centroCostos
        End Get
        Set(ByVal value As CentroCostos)
            If _centroCostos IsNot value Then
                Dim previousValue As CentroCostos = _centroCostos
                _centroCostos = value
                FixupCentroCostos(previousValue)
                OnNavigationPropertyChanged("CentroCostos")
            End If
        End Set
    End Property

    Private _centroCostos As CentroCostos


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property CtaCte() As CtaCte
        Get
            Return _ctaCte
        End Get
        Set(ByVal value As CtaCte)
            If _ctaCte IsNot value Then
                Dim previousValue As CtaCte = _ctaCte
                _ctaCte = value
                FixupCtaCte(previousValue)
                OnNavigationPropertyChanged("CtaCte")
            End If
        End Set
    End Property

    Private _ctaCte As CtaCte


    <DataMember()>
    Public Property DetalleTipoDocumentos1() As DetalleTipoDocumentos
        Get
            Return _detalleTipoDocumentos1
        End Get
        Set(ByVal value As DetalleTipoDocumentos)
            If _detalleTipoDocumentos1 IsNot value Then
                Dim previousValue As DetalleTipoDocumentos = _detalleTipoDocumentos1
                _detalleTipoDocumentos1 = value
                FixupDetalleTipoDocumentos1(previousValue)
                OnNavigationPropertyChanged("DetalleTipoDocumentos1")
            End If
        End Set
    End Property

    Private _detalleTipoDocumentos1 As DetalleTipoDocumentos


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociaci칩n que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesar치 notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        ClaseCuenta = Nothing
        DetalleTipoDocumentos = Nothing
        Moneda = Nothing
        CuentasContables = Nothing
        CentroCostos = Nothing
        Usuarios = Nothing
        Personas = Nothing
        CtaCte = Nothing
        DetalleTipoDocumentos1 = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupClaseCuenta(ByVal previousValue As ClaseCuenta, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If ClaseCuenta IsNot Nothing Then
            cls_Id = ClaseCuenta.cls_Id
        ElseIf Not skipKeys Then
            cls_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("ClaseCuenta") AndAlso
                ChangeTracker.OriginalValues("ClaseCuenta") Is ClaseCuenta Then
                ChangeTracker.OriginalValues.Remove("ClaseCuenta")
            Else
                ChangeTracker.RecordOriginalValue("ClaseCuenta", previousValue)
            End If
            If ClaseCuenta IsNot Nothing AndAlso Not ClaseCuenta.ChangeTracker.ChangeTrackingEnabled Then
                ClaseCuenta.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleTipoDocumentos(ByVal previousValue As DetalleTipoDocumentos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If DetalleTipoDocumentos IsNot Nothing Then
            dtd_IdRef = DetalleTipoDocumentos.DTD_ID
        ElseIf Not skipKeys Then
            dtd_IdRef = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("DetalleTipoDocumentos") Is DetalleTipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("DetalleTipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTipoDocumentos", previousValue)
            End If
            If DetalleTipoDocumentos IsNot Nothing AndAlso Not DetalleTipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupMoneda(ByVal previousValue As Moneda, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Moneda IsNot Nothing Then
            mon_Id = Moneda.MON_ID
        ElseIf Not skipKeys Then
            mon_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Moneda") AndAlso
                ChangeTracker.OriginalValues("Moneda") Is Moneda Then
                ChangeTracker.OriginalValues.Remove("Moneda")
            Else
                ChangeTracker.RecordOriginalValue("Moneda", previousValue)
            End If
            If Moneda IsNot Nothing AndAlso Not Moneda.ChangeTracker.ChangeTrackingEnabled Then
                Moneda.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCuentasContables(ByVal previousValue As CuentasContables, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleAsientosManuales.Contains(Me) Then
            previousValue.DetalleAsientosManuales.Remove(Me)
        End If

        If CuentasContables IsNot Nothing Then
            If Not CuentasContables.DetalleAsientosManuales.Contains(Me) Then
                CuentasContables.DetalleAsientosManuales.Add(Me)
            End If

            cuc_Id = CuentasContables.CUC_ID
        ElseIf Not skipKeys Then
            cuc_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CuentasContables") AndAlso
                ChangeTracker.OriginalValues("CuentasContables") Is CuentasContables Then
                ChangeTracker.OriginalValues.Remove("CuentasContables")
            Else
                ChangeTracker.RecordOriginalValue("CuentasContables", previousValue)
            End If
            If CuentasContables IsNot Nothing AndAlso Not CuentasContables.ChangeTracker.ChangeTrackingEnabled Then
                CuentasContables.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCentroCostos(ByVal previousValue As CentroCostos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If CentroCostos IsNot Nothing Then
            cco_Id = CentroCostos.CCO_ID
        ElseIf Not skipKeys Then
            cco_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CentroCostos") AndAlso
                ChangeTracker.OriginalValues("CentroCostos") Is CentroCostos Then
                ChangeTracker.OriginalValues.Remove("CentroCostos")
            Else
                ChangeTracker.RecordOriginalValue("CentroCostos", previousValue)
            End If
            If CentroCostos IsNot Nothing AndAlso Not CentroCostos.ChangeTracker.ChangeTrackingEnabled Then
                CentroCostos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If Usuarios IsNot Nothing Then
            Usu_Id = Usuarios.USU_ID
        ElseIf Not skipKeys Then
            Usu_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleAsientosManuales.Contains(Me) Then
            previousValue.DetalleAsientosManuales.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.DetalleAsientosManuales.Contains(Me) Then
                Personas.DetalleAsientosManuales.Add(Me)
            End If

            per_Id = Personas.PER_ID
        ElseIf Not skipKeys Then
            per_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCtaCte(ByVal previousValue As CtaCte, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleAsientosManuales.Contains(Me) Then
            previousValue.DetalleAsientosManuales.Remove(Me)
        End If

        If CtaCte IsNot Nothing Then
            If Not CtaCte.DetalleAsientosManuales.Contains(Me) Then
                CtaCte.DetalleAsientosManuales.Add(Me)
            End If

            cct_Id = CtaCte.CCT_ID
        ElseIf Not skipKeys Then
            cct_Id = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CtaCte") AndAlso
                ChangeTracker.OriginalValues("CtaCte") Is CtaCte Then
                ChangeTracker.OriginalValues.Remove("CtaCte")
            Else
                ChangeTracker.RecordOriginalValue("CtaCte", previousValue)
            End If
            If CtaCte IsNot Nothing AndAlso Not CtaCte.ChangeTracker.ChangeTrackingEnabled Then
                CtaCte.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleTipoDocumentos1(ByVal previousValue As DetalleTipoDocumentos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.DetalleAsientosManuales1.Contains(Me) Then
            previousValue.DetalleAsientosManuales1.Remove(Me)
        End If

        If DetalleTipoDocumentos1 IsNot Nothing Then
            If Not DetalleTipoDocumentos1.DetalleAsientosManuales1.Contains(Me) Then
                DetalleTipoDocumentos1.DetalleAsientosManuales1.Add(Me)
            End If

            dtd_IdDoc = DetalleTipoDocumentos1.DTD_ID
        ElseIf Not skipKeys Then
            dtd_IdDoc = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTipoDocumentos1") AndAlso
                ChangeTracker.OriginalValues("DetalleTipoDocumentos1") Is DetalleTipoDocumentos1 Then
                ChangeTracker.OriginalValues.Remove("DetalleTipoDocumentos1")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTipoDocumentos1", previousValue)
            End If
            If DetalleTipoDocumentos1 IsNot Nothing AndAlso Not DetalleTipoDocumentos1.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTipoDocumentos1.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
