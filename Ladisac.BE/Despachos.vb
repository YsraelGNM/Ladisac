'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(DetalleDespachos))>
<KnownType(GetType(Almacen))>
<KnownType(GetType(CtaCte))>
<KnownType(GetType(DireccionesPersonas))>
<KnownType(GetType(DetalleTipoDocumentos))>
<KnownType(GetType(FletesTransporte))>
<KnownType(GetType(Moneda))>
<KnownType(GetType(Personas))>
<KnownType(GetType(Placas))>
<KnownType(GetType(PuntoVenta))>
<KnownType(GetType(TipoDocumentos))>
<KnownType(GetType(TipoDocPersonas))>
<KnownType(GetType(Usuarios))>
<KnownType(GetType(DespachoSalida))>
<KnownType(GetType(KardexLote))>
Partial Public Class Despachos
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared TDO_ID As string = "TDO_ID"
				public shared DTD_ID As string = "DTD_ID"
				public shared CCT_ID As string = "CCT_ID"
				public shared DES_FEC_EMI As string = "DES_FEC_EMI"
				public shared DES_FEC_TRA As string = "DES_FEC_TRA"
				public shared PVE_ID As string = "PVE_ID"
				public shared ALM_ID As string = "ALM_ID"
				public shared ALM_ID_LLEGADA As string = "ALM_ID_LLEGADA"
				public shared DES_SERIE As string = "DES_SERIE"
				public shared DES_NUMERO As string = "DES_NUMERO"
				public shared TDO_ID_DOC As string = "TDO_ID_DOC"
				public shared DTD_ID_DOC As string = "DTD_ID_DOC"
				public shared DES_SERIE_DOC As string = "DES_SERIE_DOC"
				public shared DES_NUMERO_DOC As string = "DES_NUMERO_DOC"
				public shared PER_ID_REC As string = "PER_ID_REC"
				public shared TDP_ID_REC As string = "TDP_ID_REC"
				public shared DIR_ID_ENT_REC As string = "DIR_ID_ENT_REC"
				public shared DIR_ID_ENT As string = "DIR_ID_ENT"
				public shared PLA_ID As string = "PLA_ID"
				public shared FLE_ID As string = "FLE_ID"
				public shared MON_ID As string = "MON_ID"
				public shared DES_MONTO_FLETE As string = "DES_MONTO_FLETE"
				public shared DES_CONTRAVALOR As string = "DES_CONTRAVALOR"
				public shared DES_OBSERVACIONES As string = "DES_OBSERVACIONES"
				public shared USU_ID As string = "USU_ID"
				public shared DES_FEC_GRAB As string = "DES_FEC_GRAB"
				public shared DES_ESTADO As string = "DES_ESTADO"
				public shared DES_FEC_PRO_CRO As string = "DES_FEC_PRO_CRO"
				public shared DES_FEC_CAR_DES As string = "DES_FEC_CAR_DES"
				public shared DES_FEC_SAL_PLA As string = "DES_FEC_SAL_PLA"
				public shared DES_TIPO_GUIA As string = "DES_TIPO_GUIA"
				public shared PER_ID_AUTORIZADO As string = "PER_ID_AUTORIZADO"
		    End Structure
	



    <DataMember()>
    Public Property TDO_ID() As String
        Get
            Return _tDO_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'TDO_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If TipoDocumentos IsNot Nothing AndAlso Not Equals(TipoDocumentos.TDO_ID, value) Then
                        TipoDocumentos = Nothing
                    End If
                End If
                _tDO_ID = value
                OnPropertyChanged("TDO_ID")
            End If
        End Set
    End Property

    Private _tDO_ID As String

    <DataMember()>
    Public Property DTD_ID() As String
        Get
            Return _dTD_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DTD_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                If Not IsDeserializing Then
                    If DetalleTipoDocumentos IsNot Nothing AndAlso Not Equals(DetalleTipoDocumentos.DTD_ID, value) Then
                        DetalleTipoDocumentos = Nothing
                    End If
                End If
                _dTD_ID = value
                OnPropertyChanged("DTD_ID")
            End If
        End Set
    End Property

    Private _dTD_ID As String

    <DataMember()>
    Public Property CCT_ID() As String
        Get
            Return _cCT_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_cCT_ID, value) Then
                ChangeTracker.RecordOriginalValue("CCT_ID", _cCT_ID)
                If Not IsDeserializing Then
                    If CtaCte IsNot Nothing AndAlso Not Equals(CtaCte.CCT_ID, value) Then
                        CtaCte = Nothing
                    End If
                End If
                _cCT_ID = value
                OnPropertyChanged("CCT_ID")
            End If
        End Set
    End Property

    Private _cCT_ID As String

    <DataMember()>
    Public Property DES_FEC_EMI() As Date
        Get
            Return _dES_FEC_EMI
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dES_FEC_EMI, value) Then
                _dES_FEC_EMI = value
                OnPropertyChanged("DES_FEC_EMI")
            End If
        End Set
    End Property

    Private _dES_FEC_EMI As Date

    <DataMember()>
    Public Property DES_FEC_TRA() As Date
        Get
            Return _dES_FEC_TRA
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dES_FEC_TRA, value) Then
                _dES_FEC_TRA = value
                OnPropertyChanged("DES_FEC_TRA")
            End If
        End Set
    End Property

    Private _dES_FEC_TRA As Date

    <DataMember()>
    Public Property PVE_ID() As String
        Get
            Return _pVE_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_pVE_ID, value) Then
                ChangeTracker.RecordOriginalValue("PVE_ID", _pVE_ID)
                If Not IsDeserializing Then
                    If PuntoVenta IsNot Nothing AndAlso Not Equals(PuntoVenta.PVE_ID, value) Then
                        PuntoVenta = Nothing
                    End If
                End If
                _pVE_ID = value
                OnPropertyChanged("PVE_ID")
            End If
        End Set
    End Property

    Private _pVE_ID As String

    <DataMember()>
    Public Property ALM_ID() As Integer
        Get
            Return _aLM_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_aLM_ID, value) Then
                ChangeTracker.RecordOriginalValue("ALM_ID", _aLM_ID)
                If Not IsDeserializing Then
                    If Almacen IsNot Nothing AndAlso Not Equals(Almacen.ALM_ID, value) Then
                        Almacen = Nothing
                    End If
                End If
                _aLM_ID = value
                OnPropertyChanged("ALM_ID")
            End If
        End Set
    End Property

    Private _aLM_ID As Integer

    <DataMember()>
    Public Property ALM_ID_LLEGADA() As Nullable(Of Integer)
        Get
            Return _aLM_ID_LLEGADA
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_aLM_ID_LLEGADA, value) Then
                _aLM_ID_LLEGADA = value
                OnPropertyChanged("ALM_ID_LLEGADA")
            End If
        End Set
    End Property

    Private _aLM_ID_LLEGADA As Nullable(Of Integer)

    <DataMember()>
    Public Property DES_SERIE() As String
        Get
            Return _dES_SERIE
        End Get
        Set(ByVal value As String)
            If Not Equals(_dES_SERIE, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DES_SERIE' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _dES_SERIE = value
                OnPropertyChanged("DES_SERIE")
            End If
        End Set
    End Property

    Private _dES_SERIE As String

    <DataMember()>
    Public Property DES_NUMERO() As String
        Get
            Return _dES_NUMERO
        End Get
        Set(ByVal value As String)
            If Not Equals(_dES_NUMERO, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'DES_NUMERO' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _dES_NUMERO = value
                OnPropertyChanged("DES_NUMERO")
            End If
        End Set
    End Property

    Private _dES_NUMERO As String

    <DataMember()>
    Public Property TDO_ID_DOC() As String
        Get
            Return _tDO_ID_DOC
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID_DOC, value) Then
                ChangeTracker.RecordOriginalValue("TDO_ID_DOC", _tDO_ID_DOC)
                If Not IsDeserializing Then
                    If TipoDocumentos1 IsNot Nothing AndAlso Not Equals(TipoDocumentos1.TDO_ID, value) Then
                        TipoDocumentos1 = Nothing
                    End If
                End If
                _tDO_ID_DOC = value
                OnPropertyChanged("TDO_ID_DOC")
            End If
        End Set
    End Property

    Private _tDO_ID_DOC As String

    <DataMember()>
    Public Property DTD_ID_DOC() As String
        Get
            Return _dTD_ID_DOC
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID_DOC, value) Then
                ChangeTracker.RecordOriginalValue("DTD_ID_DOC", _dTD_ID_DOC)
                If Not IsDeserializing Then
                    If DetalleTipoDocumentos1 IsNot Nothing AndAlso Not Equals(DetalleTipoDocumentos1.DTD_ID, value) Then
                        DetalleTipoDocumentos1 = Nothing
                    End If
                End If
                _dTD_ID_DOC = value
                OnPropertyChanged("DTD_ID_DOC")
            End If
        End Set
    End Property

    Private _dTD_ID_DOC As String

    <DataMember()>
    Public Property DES_SERIE_DOC() As String
        Get
            Return _dES_SERIE_DOC
        End Get
        Set(ByVal value As String)
            If Not Equals(_dES_SERIE_DOC, value) Then
                _dES_SERIE_DOC = value
                OnPropertyChanged("DES_SERIE_DOC")
            End If
        End Set
    End Property

    Private _dES_SERIE_DOC As String

    <DataMember()>
    Public Property DES_NUMERO_DOC() As String
        Get
            Return _dES_NUMERO_DOC
        End Get
        Set(ByVal value As String)
            If Not Equals(_dES_NUMERO_DOC, value) Then
                _dES_NUMERO_DOC = value
                OnPropertyChanged("DES_NUMERO_DOC")
            End If
        End Set
    End Property

    Private _dES_NUMERO_DOC As String

    <DataMember()>
    Public Property PER_ID_REC() As String
        Get
            Return _pER_ID_REC
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_REC, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_REC", _pER_ID_REC)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID_REC = value
                OnPropertyChanged("PER_ID_REC")
            End If
        End Set
    End Property

    Private _pER_ID_REC As String

    <DataMember()>
    Public Property TDP_ID_REC() As String
        Get
            Return _tDP_ID_REC
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDP_ID_REC, value) Then
                ChangeTracker.RecordOriginalValue("TDP_ID_REC", _tDP_ID_REC)
                If Not IsDeserializing Then
                    If TipoDocPersonas IsNot Nothing AndAlso Not Equals(TipoDocPersonas.TDP_ID, value) Then
                        TipoDocPersonas = Nothing
                    End If
                End If
                _tDP_ID_REC = value
                OnPropertyChanged("TDP_ID_REC")
            End If
        End Set
    End Property

    Private _tDP_ID_REC As String

    <DataMember()>
    Public Property DIR_ID_ENT_REC() As String
        Get
            Return _dIR_ID_ENT_REC
        End Get
        Set(ByVal value As String)
            If Not Equals(_dIR_ID_ENT_REC, value) Then
                ChangeTracker.RecordOriginalValue("DIR_ID_ENT_REC", _dIR_ID_ENT_REC)
                If Not IsDeserializing Then
                    If DireccionesPersonas1 IsNot Nothing AndAlso Not Equals(DireccionesPersonas1.DIR_ID, value) Then
                        DireccionesPersonas1 = Nothing
                    End If
                End If
                _dIR_ID_ENT_REC = value
                OnPropertyChanged("DIR_ID_ENT_REC")
            End If
        End Set
    End Property

    Private _dIR_ID_ENT_REC As String

    <DataMember()>
    Public Property DIR_ID_ENT() As String
        Get
            Return _dIR_ID_ENT
        End Get
        Set(ByVal value As String)
            If Not Equals(_dIR_ID_ENT, value) Then
                ChangeTracker.RecordOriginalValue("DIR_ID_ENT", _dIR_ID_ENT)
                If Not IsDeserializing Then
                    If DireccionesPersonas IsNot Nothing AndAlso Not Equals(DireccionesPersonas.DIR_ID, value) Then
                        DireccionesPersonas = Nothing
                    End If
                End If
                _dIR_ID_ENT = value
                OnPropertyChanged("DIR_ID_ENT")
            End If
        End Set
    End Property

    Private _dIR_ID_ENT As String

    <DataMember()>
    Public Property PLA_ID() As String
        Get
            Return _pLA_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_pLA_ID, value) Then
                ChangeTracker.RecordOriginalValue("PLA_ID", _pLA_ID)
                If Not IsDeserializing Then
                    If Placas IsNot Nothing AndAlso Not Equals(Placas.PLA_ID, value) Then
                        Placas = Nothing
                    End If
                End If
                _pLA_ID = value
                OnPropertyChanged("PLA_ID")
            End If
        End Set
    End Property

    Private _pLA_ID As String

    <DataMember()>
    Public Property FLE_ID() As String
        Get
            Return _fLE_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_fLE_ID, value) Then
                ChangeTracker.RecordOriginalValue("FLE_ID", _fLE_ID)
                If Not IsDeserializing Then
                    If FletesTransporte IsNot Nothing AndAlso Not Equals(FletesTransporte.FLE_ID, value) Then
                        FletesTransporte = Nothing
                    End If
                End If
                _fLE_ID = value
                OnPropertyChanged("FLE_ID")
            End If
        End Set
    End Property

    Private _fLE_ID As String

    <DataMember()>
    Public Property MON_ID() As String
        Get
            Return _mON_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_mON_ID, value) Then
                ChangeTracker.RecordOriginalValue("MON_ID", _mON_ID)
                If Not IsDeserializing Then
                    If Moneda IsNot Nothing AndAlso Not Equals(Moneda.MON_ID, value) Then
                        Moneda = Nothing
                    End If
                End If
                _mON_ID = value
                OnPropertyChanged("MON_ID")
            End If
        End Set
    End Property

    Private _mON_ID As String

    <DataMember()>
    Public Property DES_MONTO_FLETE() As Decimal
        Get
            Return _dES_MONTO_FLETE
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dES_MONTO_FLETE, value) Then
                _dES_MONTO_FLETE = value
                OnPropertyChanged("DES_MONTO_FLETE")
            End If
        End Set
    End Property

    Private _dES_MONTO_FLETE As Decimal

    <DataMember()>
    Public Property DES_CONTRAVALOR() As Decimal
        Get
            Return _dES_CONTRAVALOR
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_dES_CONTRAVALOR, value) Then
                _dES_CONTRAVALOR = value
                OnPropertyChanged("DES_CONTRAVALOR")
            End If
        End Set
    End Property

    Private _dES_CONTRAVALOR As Decimal

    <DataMember()>
    Public Property DES_OBSERVACIONES() As String
        Get
            Return _dES_OBSERVACIONES
        End Get
        Set(ByVal value As String)
            If Not Equals(_dES_OBSERVACIONES, value) Then
                _dES_OBSERVACIONES = value
                OnPropertyChanged("DES_OBSERVACIONES")
            End If
        End Set
    End Property

    Private _dES_OBSERVACIONES As String

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                ChangeTracker.RecordOriginalValue("USU_ID", _uSU_ID)
                If Not IsDeserializing Then
                    If Usuarios IsNot Nothing AndAlso Not Equals(Usuarios.USU_ID, value) Then
                        Usuarios = Nothing
                    End If
                End If
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property DES_FEC_GRAB() As Date
        Get
            Return _dES_FEC_GRAB
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dES_FEC_GRAB, value) Then
                _dES_FEC_GRAB = value
                OnPropertyChanged("DES_FEC_GRAB")
            End If
        End Set
    End Property

    Private _dES_FEC_GRAB As Date

    <DataMember()>
    Public Property DES_ESTADO() As Short
        Get
            Return _dES_ESTADO
        End Get
        Set(ByVal value As Short)
            If Not Equals(_dES_ESTADO, value) Then
                _dES_ESTADO = value
                OnPropertyChanged("DES_ESTADO")
            End If
        End Set
    End Property

    Private _dES_ESTADO As Short

    <DataMember()>
    Public Property DES_FEC_PRO_CRO() As Nullable(Of Date)
        Get
            Return _dES_FEC_PRO_CRO
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_dES_FEC_PRO_CRO, value) Then
                _dES_FEC_PRO_CRO = value
                OnPropertyChanged("DES_FEC_PRO_CRO")
            End If
        End Set
    End Property

    Private _dES_FEC_PRO_CRO As Nullable(Of Date)

    <DataMember()>
    Public Property DES_FEC_CAR_DES() As Nullable(Of Date)
        Get
            Return _dES_FEC_CAR_DES
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_dES_FEC_CAR_DES, value) Then
                _dES_FEC_CAR_DES = value
                OnPropertyChanged("DES_FEC_CAR_DES")
            End If
        End Set
    End Property

    Private _dES_FEC_CAR_DES As Nullable(Of Date)

    <DataMember()>
    Public Property DES_FEC_SAL_PLA() As Nullable(Of Date)
        Get
            Return _dES_FEC_SAL_PLA
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_dES_FEC_SAL_PLA, value) Then
                _dES_FEC_SAL_PLA = value
                OnPropertyChanged("DES_FEC_SAL_PLA")
            End If
        End Set
    End Property

    Private _dES_FEC_SAL_PLA As Nullable(Of Date)

    <DataMember()>
    Public Property DES_TIPO_GUIA() As Short
        Get
            Return _dES_TIPO_GUIA
        End Get
        Set(ByVal value As Short)
            If Not Equals(_dES_TIPO_GUIA, value) Then
                _dES_TIPO_GUIA = value
                OnPropertyChanged("DES_TIPO_GUIA")
            End If
        End Set
    End Property

    Private _dES_TIPO_GUIA As Short

    <DataMember()>
    Public Property PER_ID_AUTORIZADO() As String
        Get
            Return _pER_ID_AUTORIZADO
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_AUTORIZADO, value) Then
                _pER_ID_AUTORIZADO = value
                OnPropertyChanged("PER_ID_AUTORIZADO")
            End If
        End Set
    End Property

    Private _pER_ID_AUTORIZADO As String

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property DetalleDespachos() As TrackableCollection(Of DetalleDespachos)
        Get
            If _detalleDespachos Is Nothing Then
                _detalleDespachos = New TrackableCollection(Of DetalleDespachos)
                AddHandler _detalleDespachos.CollectionChanged, AddressOf FixupDetalleDespachos
            End If
            Return _detalleDespachos
        End Get
        Set(ByVal value As TrackableCollection(Of DetalleDespachos))
            If Not Object.ReferenceEquals(_detalleDespachos, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _detalleDespachos IsNot Nothing Then
                    RemoveHandler _detalleDespachos.CollectionChanged, AddressOf FixupDetalleDespachos
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Quitar el controlador de eventos de la eliminaci칩n en cascada para aquellas entidades de la colecci칩n actual.
                    For Each item As DetalleDespachos In _detalleDespachos
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _detalleDespachos = value
                If _detalleDespachos IsNot Nothing Then
                    AddHandler _detalleDespachos.CollectionChanged, AddressOf FixupDetalleDespachos
                    ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                    ' Agrega el controlador de eventos de eliminaci칩n en cascada para aquellas entidades que ya se encuentran en la nueva colecci칩n.
                    For Each item As DetalleDespachos In _detalleDespachos
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("DetalleDespachos")
            End If
        End Set
    End Property

    Private _detalleDespachos As TrackableCollection(Of DetalleDespachos)

    <DataMember()>
    Public Property Almacen() As Almacen
        Get
            Return _almacen
        End Get
        Set(ByVal value As Almacen)
            If _almacen IsNot value Then
                Dim previousValue As Almacen = _almacen
                _almacen = value
                FixupAlmacen(previousValue)
                OnNavigationPropertyChanged("Almacen")
            End If
        End Set
    End Property

    Private _almacen As Almacen


    <DataMember()>
    Public Property CtaCte() As CtaCte
        Get
            Return _ctaCte
        End Get
        Set(ByVal value As CtaCte)
            If _ctaCte IsNot value Then
                Dim previousValue As CtaCte = _ctaCte
                _ctaCte = value
                FixupCtaCte(previousValue)
                OnNavigationPropertyChanged("CtaCte")
            End If
        End Set
    End Property

    Private _ctaCte As CtaCte


    <DataMember()>
    Public Property DireccionesPersonas() As DireccionesPersonas
        Get
            Return _direccionesPersonas
        End Get
        Set(ByVal value As DireccionesPersonas)
            If _direccionesPersonas IsNot value Then
                Dim previousValue As DireccionesPersonas = _direccionesPersonas
                _direccionesPersonas = value
                FixupDireccionesPersonas(previousValue)
                OnNavigationPropertyChanged("DireccionesPersonas")
            End If
        End Set
    End Property

    Private _direccionesPersonas As DireccionesPersonas


    <DataMember()>
    Public Property DireccionesPersonas1() As DireccionesPersonas
        Get
            Return _direccionesPersonas1
        End Get
        Set(ByVal value As DireccionesPersonas)
            If _direccionesPersonas1 IsNot value Then
                Dim previousValue As DireccionesPersonas = _direccionesPersonas1
                _direccionesPersonas1 = value
                FixupDireccionesPersonas1(previousValue)
                OnNavigationPropertyChanged("DireccionesPersonas1")
            End If
        End Set
    End Property

    Private _direccionesPersonas1 As DireccionesPersonas


    <DataMember()>
    Public Property DetalleTipoDocumentos() As DetalleTipoDocumentos
        Get
            Return _detalleTipoDocumentos
        End Get
        Set(ByVal value As DetalleTipoDocumentos)
            If _detalleTipoDocumentos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(DTD_ID, value.DTD_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As DetalleTipoDocumentos = _detalleTipoDocumentos
                _detalleTipoDocumentos = value
                FixupDetalleTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("DetalleTipoDocumentos")
            End If
        End Set
    End Property

    Private _detalleTipoDocumentos As DetalleTipoDocumentos


    <DataMember()>
    Public Property DetalleTipoDocumentos1() As DetalleTipoDocumentos
        Get
            Return _detalleTipoDocumentos1
        End Get
        Set(ByVal value As DetalleTipoDocumentos)
            If _detalleTipoDocumentos1 IsNot value Then
                Dim previousValue As DetalleTipoDocumentos = _detalleTipoDocumentos1
                _detalleTipoDocumentos1 = value
                FixupDetalleTipoDocumentos1(previousValue)
                OnNavigationPropertyChanged("DetalleTipoDocumentos1")
            End If
        End Set
    End Property

    Private _detalleTipoDocumentos1 As DetalleTipoDocumentos


    <DataMember()>
    Public Property FletesTransporte() As FletesTransporte
        Get
            Return _fletesTransporte
        End Get
        Set(ByVal value As FletesTransporte)
            If _fletesTransporte IsNot value Then
                Dim previousValue As FletesTransporte = _fletesTransporte
                _fletesTransporte = value
                FixupFletesTransporte(previousValue)
                OnNavigationPropertyChanged("FletesTransporte")
            End If
        End Set
    End Property

    Private _fletesTransporte As FletesTransporte


    <DataMember()>
    Public Property Moneda() As Moneda
        Get
            Return _moneda
        End Get
        Set(ByVal value As Moneda)
            If _moneda IsNot value Then
                Dim previousValue As Moneda = _moneda
                _moneda = value
                FixupMoneda(previousValue)
                OnNavigationPropertyChanged("Moneda")
            End If
        End Set
    End Property

    Private _moneda As Moneda


    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property Placas() As Placas
        Get
            Return _placas
        End Get
        Set(ByVal value As Placas)
            If _placas IsNot value Then
                Dim previousValue As Placas = _placas
                _placas = value
                FixupPlacas(previousValue)
                OnNavigationPropertyChanged("Placas")
            End If
        End Set
    End Property

    Private _placas As Placas


    <DataMember()>
    Public Property PuntoVenta() As PuntoVenta
        Get
            Return _puntoVenta
        End Get
        Set(ByVal value As PuntoVenta)
            If _puntoVenta IsNot value Then
                Dim previousValue As PuntoVenta = _puntoVenta
                _puntoVenta = value
                FixupPuntoVenta(previousValue)
                OnNavigationPropertyChanged("PuntoVenta")
            End If
        End Set
    End Property

    Private _puntoVenta As PuntoVenta


    <DataMember()>
    Public Property TipoDocumentos() As TipoDocumentos
        Get
            Return _tipoDocumentos
        End Get
        Set(ByVal value As TipoDocumentos)
            If _tipoDocumentos IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' Este es el extremo dependiente de una relaci칩n de identificaci칩n por lo que el extremo principal no se puede cambiar si ya est치 establecido;
                    ' de lo contrario, solo se puede establecer en una entidad con una clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                    If Not Equals(TDO_ID, value.TDO_ID) Then
                        Throw New InvalidOperationException("El extremo principal de una relaci칩n de identificaci칩n solo se puede modificar cuando el extremo dependiente se encuentra en el estado agregado.")
                    End If
                End If
                Dim previousValue As TipoDocumentos = _tipoDocumentos
                _tipoDocumentos = value
                FixupTipoDocumentos(previousValue)
                OnNavigationPropertyChanged("TipoDocumentos")
            End If
        End Set
    End Property

    Private _tipoDocumentos As TipoDocumentos


    <DataMember()>
    Public Property TipoDocumentos1() As TipoDocumentos
        Get
            Return _tipoDocumentos1
        End Get
        Set(ByVal value As TipoDocumentos)
            If _tipoDocumentos1 IsNot value Then
                Dim previousValue As TipoDocumentos = _tipoDocumentos1
                _tipoDocumentos1 = value
                FixupTipoDocumentos1(previousValue)
                OnNavigationPropertyChanged("TipoDocumentos1")
            End If
        End Set
    End Property

    Private _tipoDocumentos1 As TipoDocumentos


    <DataMember()>
    Public Property TipoDocPersonas() As TipoDocPersonas
        Get
            Return _tipoDocPersonas
        End Get
        Set(ByVal value As TipoDocPersonas)
            If _tipoDocPersonas IsNot value Then
                Dim previousValue As TipoDocPersonas = _tipoDocPersonas
                _tipoDocPersonas = value
                FixupTipoDocPersonas(previousValue)
                OnNavigationPropertyChanged("TipoDocPersonas")
            End If
        End Set
    End Property

    Private _tipoDocPersonas As TipoDocPersonas


    <DataMember()>
    Public Property Usuarios() As Usuarios
        Get
            Return _usuarios
        End Get
        Set(ByVal value As Usuarios)
            If _usuarios IsNot value Then
                Dim previousValue As Usuarios = _usuarios
                _usuarios = value
                FixupUsuarios(previousValue)
                OnNavigationPropertyChanged("Usuarios")
            End If
        End Set
    End Property

    Private _usuarios As Usuarios


    <DataMember()>
    Public Property DespachoSalida() As TrackableCollection(Of DespachoSalida)
        Get
            If _despachoSalida Is Nothing Then
                _despachoSalida = New TrackableCollection(Of DespachoSalida)
                AddHandler _despachoSalida.CollectionChanged, AddressOf FixupDespachoSalida
            End If
            Return _despachoSalida
        End Get
        Set(ByVal value As TrackableCollection(Of DespachoSalida))
            If Not Object.ReferenceEquals(_despachoSalida, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _despachoSalida IsNot Nothing Then
                    RemoveHandler _despachoSalida.CollectionChanged, AddressOf FixupDespachoSalida
                End If
                _despachoSalida = value
                If _despachoSalida IsNot Nothing Then
                    AddHandler _despachoSalida.CollectionChanged, AddressOf FixupDespachoSalida
                End If
                OnNavigationPropertyChanged("DespachoSalida")
            End If
        End Set
    End Property

    Private _despachoSalida As TrackableCollection(Of DespachoSalida)

    <DataMember()>
    Public Property KardexLote() As TrackableCollection(Of KardexLote)
        Get
            If _kardexLote Is Nothing Then
                _kardexLote = New TrackableCollection(Of KardexLote)
                AddHandler _kardexLote.CollectionChanged, AddressOf FixupKardexLote
            End If
            Return _kardexLote
        End Get
        Set(ByVal value As TrackableCollection(Of KardexLote))
            If Not Object.ReferenceEquals(_kardexLote, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _kardexLote IsNot Nothing Then
                    RemoveHandler _kardexLote.CollectionChanged, AddressOf FixupKardexLote
                End If
                _kardexLote = value
                If _kardexLote IsNot Nothing Then
                    AddHandler _kardexLote.CollectionChanged, AddressOf FixupKardexLote
                End If
                OnNavigationPropertyChanged("KardexLote")
            End If
        End Set
    End Property

    Private _kardexLote As TrackableCollection(Of KardexLote)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' Este tipo de entidad es el extremo dependiente en al menos una asociaci칩n que realiza eliminaciones en cascada.
    ' Este controlador de eventos procesar치 notificaciones que tienen lugar cuando se elimina el extremo principal.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        DetalleDespachos.Clear()
        Almacen = Nothing
        CtaCte = Nothing
        DireccionesPersonas = Nothing
        DireccionesPersonas1 = Nothing
        DetalleTipoDocumentos = Nothing
        DetalleTipoDocumentos1 = Nothing
        FletesTransporte = Nothing
        Moneda = Nothing
        Personas = Nothing
        Placas = Nothing
        PuntoVenta = Nothing
        TipoDocumentos = Nothing
        TipoDocumentos1 = Nothing
        TipoDocPersonas = Nothing
        Usuarios = Nothing
        DespachoSalida.Clear()
        KardexLote.Clear()
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupAlmacen(ByVal previousValue As Almacen)
        If IsDeserializing Then
            Return
        End If

        If Almacen IsNot Nothing Then
            ALM_ID = Almacen.ALM_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Almacen") AndAlso
                ChangeTracker.OriginalValues("Almacen") Is Almacen Then
                ChangeTracker.OriginalValues.Remove("Almacen")
            Else
                ChangeTracker.RecordOriginalValue("Almacen", previousValue)
            End If
            If Almacen IsNot Nothing AndAlso Not Almacen.ChangeTracker.ChangeTrackingEnabled Then
                Almacen.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCtaCte(ByVal previousValue As CtaCte)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Despachos.Contains(Me) Then
            previousValue.Despachos.Remove(Me)
        End If

        If CtaCte IsNot Nothing Then
            If Not CtaCte.Despachos.Contains(Me) Then
                CtaCte.Despachos.Add(Me)
            End If

            CCT_ID = CtaCte.CCT_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("CtaCte") AndAlso
                ChangeTracker.OriginalValues("CtaCte") Is CtaCte Then
                ChangeTracker.OriginalValues.Remove("CtaCte")
            Else
                ChangeTracker.RecordOriginalValue("CtaCte", previousValue)
            End If
            If CtaCte IsNot Nothing AndAlso Not CtaCte.ChangeTracker.ChangeTrackingEnabled Then
                CtaCte.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDireccionesPersonas(ByVal previousValue As DireccionesPersonas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Despachos.Contains(Me) Then
            previousValue.Despachos.Remove(Me)
        End If

        If DireccionesPersonas IsNot Nothing Then
            If Not DireccionesPersonas.Despachos.Contains(Me) Then
                DireccionesPersonas.Despachos.Add(Me)
            End If

            DIR_ID_ENT = DireccionesPersonas.DIR_ID
        ElseIf Not skipKeys Then
            DIR_ID_ENT = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DireccionesPersonas") AndAlso
                ChangeTracker.OriginalValues("DireccionesPersonas") Is DireccionesPersonas Then
                ChangeTracker.OriginalValues.Remove("DireccionesPersonas")
            Else
                ChangeTracker.RecordOriginalValue("DireccionesPersonas", previousValue)
            End If
            If DireccionesPersonas IsNot Nothing AndAlso Not DireccionesPersonas.ChangeTracker.ChangeTrackingEnabled Then
                DireccionesPersonas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDireccionesPersonas1(ByVal previousValue As DireccionesPersonas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Despachos1.Contains(Me) Then
            previousValue.Despachos1.Remove(Me)
        End If

        If DireccionesPersonas1 IsNot Nothing Then
            If Not DireccionesPersonas1.Despachos1.Contains(Me) Then
                DireccionesPersonas1.Despachos1.Add(Me)
            End If

            DIR_ID_ENT_REC = DireccionesPersonas1.DIR_ID
        ElseIf Not skipKeys Then
            DIR_ID_ENT_REC = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DireccionesPersonas1") AndAlso
                ChangeTracker.OriginalValues("DireccionesPersonas1") Is DireccionesPersonas1 Then
                ChangeTracker.OriginalValues.Remove("DireccionesPersonas1")
            Else
                ChangeTracker.RecordOriginalValue("DireccionesPersonas1", previousValue)
            End If
            If DireccionesPersonas1 IsNot Nothing AndAlso Not DireccionesPersonas1.ChangeTracker.ChangeTrackingEnabled Then
                DireccionesPersonas1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleTipoDocumentos(ByVal previousValue As DetalleTipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Despachos.Contains(Me) Then
            previousValue.Despachos.Remove(Me)
        End If

        If DetalleTipoDocumentos IsNot Nothing Then
            If Not DetalleTipoDocumentos.Despachos.Contains(Me) Then
                DetalleTipoDocumentos.Despachos.Add(Me)
            End If

            DTD_ID = DetalleTipoDocumentos.DTD_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("DetalleTipoDocumentos") Is DetalleTipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("DetalleTipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTipoDocumentos", previousValue)
            End If
            If DetalleTipoDocumentos IsNot Nothing AndAlso Not DetalleTipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleTipoDocumentos1(ByVal previousValue As DetalleTipoDocumentos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Despachos1.Contains(Me) Then
            previousValue.Despachos1.Remove(Me)
        End If

        If DetalleTipoDocumentos1 IsNot Nothing Then
            If Not DetalleTipoDocumentos1.Despachos1.Contains(Me) Then
                DetalleTipoDocumentos1.Despachos1.Add(Me)
            End If

            DTD_ID_DOC = DetalleTipoDocumentos1.DTD_ID
        ElseIf Not skipKeys Then
            DTD_ID_DOC = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("DetalleTipoDocumentos1") AndAlso
                ChangeTracker.OriginalValues("DetalleTipoDocumentos1") Is DetalleTipoDocumentos1 Then
                ChangeTracker.OriginalValues.Remove("DetalleTipoDocumentos1")
            Else
                ChangeTracker.RecordOriginalValue("DetalleTipoDocumentos1", previousValue)
            End If
            If DetalleTipoDocumentos1 IsNot Nothing AndAlso Not DetalleTipoDocumentos1.ChangeTracker.ChangeTrackingEnabled Then
                DetalleTipoDocumentos1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupFletesTransporte(ByVal previousValue As FletesTransporte, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Despachos.Contains(Me) Then
            previousValue.Despachos.Remove(Me)
        End If

        If FletesTransporte IsNot Nothing Then
            If Not FletesTransporte.Despachos.Contains(Me) Then
                FletesTransporte.Despachos.Add(Me)
            End If

            FLE_ID = FletesTransporte.FLE_ID
        ElseIf Not skipKeys Then
            FLE_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("FletesTransporte") AndAlso
                ChangeTracker.OriginalValues("FletesTransporte") Is FletesTransporte Then
                ChangeTracker.OriginalValues.Remove("FletesTransporte")
            Else
                ChangeTracker.RecordOriginalValue("FletesTransporte", previousValue)
            End If
            If FletesTransporte IsNot Nothing AndAlso Not FletesTransporte.ChangeTracker.ChangeTrackingEnabled Then
                FletesTransporte.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupMoneda(ByVal previousValue As Moneda, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Despachos.Contains(Me) Then
            previousValue.Despachos.Remove(Me)
        End If

        If Moneda IsNot Nothing Then
            If Not Moneda.Despachos.Contains(Me) Then
                Moneda.Despachos.Add(Me)
            End If

            MON_ID = Moneda.MON_ID
        ElseIf Not skipKeys Then
            MON_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Moneda") AndAlso
                ChangeTracker.OriginalValues("Moneda") Is Moneda Then
                ChangeTracker.OriginalValues.Remove("Moneda")
            Else
                ChangeTracker.RecordOriginalValue("Moneda", previousValue)
            End If
            If Moneda IsNot Nothing AndAlso Not Moneda.ChangeTracker.ChangeTrackingEnabled Then
                Moneda.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Despachos.Contains(Me) Then
            previousValue.Despachos.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.Despachos.Contains(Me) Then
                Personas.Despachos.Add(Me)
            End If

            PER_ID_REC = Personas.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_REC = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPlacas(ByVal previousValue As Placas)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Despachos.Contains(Me) Then
            previousValue.Despachos.Remove(Me)
        End If

        If Placas IsNot Nothing Then
            If Not Placas.Despachos.Contains(Me) Then
                Placas.Despachos.Add(Me)
            End If

            PLA_ID = Placas.PLA_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Placas") AndAlso
                ChangeTracker.OriginalValues("Placas") Is Placas Then
                ChangeTracker.OriginalValues.Remove("Placas")
            Else
                ChangeTracker.RecordOriginalValue("Placas", previousValue)
            End If
            If Placas IsNot Nothing AndAlso Not Placas.ChangeTracker.ChangeTrackingEnabled Then
                Placas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPuntoVenta(ByVal previousValue As PuntoVenta)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Despachos.Contains(Me) Then
            previousValue.Despachos.Remove(Me)
        End If

        If PuntoVenta IsNot Nothing Then
            If Not PuntoVenta.Despachos.Contains(Me) Then
                PuntoVenta.Despachos.Add(Me)
            End If

            PVE_ID = PuntoVenta.PVE_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("PuntoVenta") AndAlso
                ChangeTracker.OriginalValues("PuntoVenta") Is PuntoVenta Then
                ChangeTracker.OriginalValues.Remove("PuntoVenta")
            Else
                ChangeTracker.RecordOriginalValue("PuntoVenta", previousValue)
            End If
            If PuntoVenta IsNot Nothing AndAlso Not PuntoVenta.ChangeTracker.ChangeTrackingEnabled Then
                PuntoVenta.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoDocumentos(ByVal previousValue As TipoDocumentos)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Despachos.Contains(Me) Then
            previousValue.Despachos.Remove(Me)
        End If

        If TipoDocumentos IsNot Nothing Then
            If Not TipoDocumentos.Despachos.Contains(Me) Then
                TipoDocumentos.Despachos.Add(Me)
            End If

            TDO_ID = TipoDocumentos.TDO_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoDocumentos") AndAlso
                ChangeTracker.OriginalValues("TipoDocumentos") Is TipoDocumentos Then
                ChangeTracker.OriginalValues.Remove("TipoDocumentos")
            Else
                ChangeTracker.RecordOriginalValue("TipoDocumentos", previousValue)
            End If
            If TipoDocumentos IsNot Nothing AndAlso Not TipoDocumentos.ChangeTracker.ChangeTrackingEnabled Then
                TipoDocumentos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoDocumentos1(ByVal previousValue As TipoDocumentos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Despachos1.Contains(Me) Then
            previousValue.Despachos1.Remove(Me)
        End If

        If TipoDocumentos1 IsNot Nothing Then
            If Not TipoDocumentos1.Despachos1.Contains(Me) Then
                TipoDocumentos1.Despachos1.Add(Me)
            End If

            TDO_ID_DOC = TipoDocumentos1.TDO_ID
        ElseIf Not skipKeys Then
            TDO_ID_DOC = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoDocumentos1") AndAlso
                ChangeTracker.OriginalValues("TipoDocumentos1") Is TipoDocumentos1 Then
                ChangeTracker.OriginalValues.Remove("TipoDocumentos1")
            Else
                ChangeTracker.RecordOriginalValue("TipoDocumentos1", previousValue)
            End If
            If TipoDocumentos1 IsNot Nothing AndAlso Not TipoDocumentos1.ChangeTracker.ChangeTrackingEnabled Then
                TipoDocumentos1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupTipoDocPersonas(ByVal previousValue As TipoDocPersonas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Despachos.Contains(Me) Then
            previousValue.Despachos.Remove(Me)
        End If

        If TipoDocPersonas IsNot Nothing Then
            If Not TipoDocPersonas.Despachos.Contains(Me) Then
                TipoDocPersonas.Despachos.Add(Me)
            End If

            TDP_ID_REC = TipoDocPersonas.TDP_ID
        ElseIf Not skipKeys Then
            TDP_ID_REC = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("TipoDocPersonas") AndAlso
                ChangeTracker.OriginalValues("TipoDocPersonas") Is TipoDocPersonas Then
                ChangeTracker.OriginalValues.Remove("TipoDocPersonas")
            Else
                ChangeTracker.RecordOriginalValue("TipoDocPersonas", previousValue)
            End If
            If TipoDocPersonas IsNot Nothing AndAlso Not TipoDocPersonas.ChangeTracker.ChangeTrackingEnabled Then
                TipoDocPersonas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUsuarios(ByVal previousValue As Usuarios)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.Despachos.Contains(Me) Then
            previousValue.Despachos.Remove(Me)
        End If

        If Usuarios IsNot Nothing Then
            If Not Usuarios.Despachos.Contains(Me) Then
                Usuarios.Despachos.Add(Me)
            End If

            USU_ID = Usuarios.USU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Usuarios") AndAlso
                ChangeTracker.OriginalValues("Usuarios") Is Usuarios Then
                ChangeTracker.OriginalValues.Remove("Usuarios")
            Else
                ChangeTracker.RecordOriginalValue("Usuarios", previousValue)
            End If
            If Usuarios IsNot Nothing AndAlso Not Usuarios.ChangeTracker.ChangeTrackingEnabled Then
                Usuarios.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDetalleDespachos(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DetalleDespachos In e.NewItems
                item.Despachos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DetalleDespachos", item)
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DetalleDespachos In e.OldItems
                If ReferenceEquals(item.Despachos, Me) Then
                    item.Despachos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DetalleDespachos", item)
                    ' Eliminar el extremo dependiente de esta asociaci칩n de identificaci칩n. Si el estado actual es agregado,
                    ' permite que la relaci칩n se modifique sin eliminar el elemento dependiente.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' Este es el extremo principal en una asociaci칩n que realiza eliminaciones en cascada.
                ' Quitar el extremo dependiente anterior de la escucha de eventos.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupDespachoSalida(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As DespachoSalida In e.NewItems
                item.Despachos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("DespachoSalida", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As DespachoSalida In e.OldItems
                If ReferenceEquals(item.Despachos, Me) Then
                    item.Despachos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("DespachoSalida", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupKardexLote(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As KardexLote In e.NewItems
                item.Despachos = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("KardexLote", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As KardexLote In e.OldItems
                If ReferenceEquals(item.Despachos, Me) Then
                    item.Despachos = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("KardexLote", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
