'------------------------------------------------------------------------------
' <auto-generated>
'     Este código se generó a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
'     el código se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(SalidaCombustible))>
<KnownType(GetType(Personas))>
<KnownType(GetType(Entidad))>
<KnownType(GetType(UbicacionTrabajo))>
<KnownType(GetType(RegistroEquipoDetalle))>
<KnownType(GetType(Produccion))>
Partial Public Class RegistroEquipo
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared REQ_ID As string = "REQ_ID"
				public shared SCO_ID As string = "SCO_ID"
				public shared REQ_FECHA As string = "REQ_FECHA"
				public shared PER_ID_OPERADOR As string = "PER_ID_OPERADOR"
				public shared ENO_ID As string = "ENO_ID"
				public shared UTR_ID As string = "UTR_ID"
				public shared REQ_TURNO As string = "REQ_TURNO"
				public shared USU_ID As string = "USU_ID"
				public shared REQ_FEC_GRAB As string = "REQ_FEC_GRAB"
				public shared REQ_ESTADO As string = "REQ_ESTADO"
				public shared PRO_ID As string = "PRO_ID"
				public shared UNT_ID As string = "UNT_ID"
				public shared PER_ID_EMPRESA As string = "PER_ID_EMPRESA"
		    End Structure
	



    <DataMember()>
    Public Property REQ_ID() As Integer
        Get
            Return _rEQ_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_rEQ_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'REQ_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _rEQ_ID = value
                OnPropertyChanged("REQ_ID")
            End If
        End Set
    End Property

    Private _rEQ_ID As Integer

    <DataMember()>
    Public Property SCO_ID() As Nullable(Of Integer)
        Get
            Return _sCO_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_sCO_ID, value) Then
                ChangeTracker.RecordOriginalValue("SCO_ID", _sCO_ID)
                If Not IsDeserializing Then
                    If SalidaCombustible IsNot Nothing AndAlso Not Equals(SalidaCombustible.SCO_ID, value) Then
                        SalidaCombustible = Nothing
                    End If
                End If
                _sCO_ID = value
                OnPropertyChanged("SCO_ID")
            End If
        End Set
    End Property

    Private _sCO_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property REQ_FECHA() As Nullable(Of Date)
        Get
            Return _rEQ_FECHA
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_rEQ_FECHA, value) Then
                _rEQ_FECHA = value
                OnPropertyChanged("REQ_FECHA")
            End If
        End Set
    End Property

    Private _rEQ_FECHA As Nullable(Of Date)

    <DataMember()>
    Public Property PER_ID_OPERADOR() As String
        Get
            Return _pER_ID_OPERADOR
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_OPERADOR, value) Then
                ChangeTracker.RecordOriginalValue("PER_ID_OPERADOR", _pER_ID_OPERADOR)
                If Not IsDeserializing Then
                    If Personas IsNot Nothing AndAlso Not Equals(Personas.PER_ID, value) Then
                        Personas = Nothing
                    End If
                End If
                _pER_ID_OPERADOR = value
                OnPropertyChanged("PER_ID_OPERADOR")
            End If
        End Set
    End Property

    Private _pER_ID_OPERADOR As String

    <DataMember()>
    Public Property ENO_ID() As Nullable(Of Integer)
        Get
            Return _eNO_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_eNO_ID, value) Then
                ChangeTracker.RecordOriginalValue("ENO_ID", _eNO_ID)
                If Not IsDeserializing Then
                    If Entidad IsNot Nothing AndAlso Not Equals(Entidad.ENO_ID, value) Then
                        Entidad = Nothing
                    End If
                End If
                _eNO_ID = value
                OnPropertyChanged("ENO_ID")
            End If
        End Set
    End Property

    Private _eNO_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property UTR_ID() As Nullable(Of Integer)
        Get
            Return _uTR_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_uTR_ID, value) Then
                ChangeTracker.RecordOriginalValue("UTR_ID", _uTR_ID)
                If Not IsDeserializing Then
                    If UbicacionTrabajo IsNot Nothing AndAlso Not Equals(UbicacionTrabajo.UTR_ID, value) Then
                        UbicacionTrabajo = Nothing
                    End If
                End If
                _uTR_ID = value
                OnPropertyChanged("UTR_ID")
            End If
        End Set
    End Property

    Private _uTR_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property REQ_TURNO() As Nullable(Of Integer)
        Get
            Return _rEQ_TURNO
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_rEQ_TURNO, value) Then
                _rEQ_TURNO = value
                OnPropertyChanged("REQ_TURNO")
            End If
        End Set
    End Property

    Private _rEQ_TURNO As Nullable(Of Integer)

    <DataMember()>
    Public Property USU_ID() As String
        Get
            Return _uSU_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uSU_ID, value) Then
                _uSU_ID = value
                OnPropertyChanged("USU_ID")
            End If
        End Set
    End Property

    Private _uSU_ID As String

    <DataMember()>
    Public Property REQ_FEC_GRAB() As Nullable(Of Date)
        Get
            Return _rEQ_FEC_GRAB
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_rEQ_FEC_GRAB, value) Then
                _rEQ_FEC_GRAB = value
                OnPropertyChanged("REQ_FEC_GRAB")
            End If
        End Set
    End Property

    Private _rEQ_FEC_GRAB As Nullable(Of Date)

    <DataMember()>
    Public Property REQ_ESTADO() As Nullable(Of Boolean)
        Get
            Return _rEQ_ESTADO
        End Get
        Set(ByVal value As Nullable(Of Boolean))
            If Not Equals(_rEQ_ESTADO, value) Then
                _rEQ_ESTADO = value
                OnPropertyChanged("REQ_ESTADO")
            End If
        End Set
    End Property

    Private _rEQ_ESTADO As Nullable(Of Boolean)

    <DataMember()>
    Public Property PRO_ID() As Nullable(Of Integer)
        Get
            Return _pRO_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_pRO_ID, value) Then
                ChangeTracker.RecordOriginalValue("PRO_ID", _pRO_ID)
                If Not IsDeserializing Then
                    If Produccion IsNot Nothing AndAlso Not Equals(Produccion.PRO_ID, value) Then
                        Produccion = Nothing
                    End If
                End If
                _pRO_ID = value
                OnPropertyChanged("PRO_ID")
            End If
        End Set
    End Property

    Private _pRO_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property UNT_ID() As String
        Get
            Return _uNT_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_uNT_ID, value) Then
                _uNT_ID = value
                OnPropertyChanged("UNT_ID")
            End If
        End Set
    End Property

    Private _uNT_ID As String

    <DataMember()>
    Public Property PER_ID_EMPRESA() As String
        Get
            Return _pER_ID_EMPRESA
        End Get
        Set(ByVal value As String)
            If Not Equals(_pER_ID_EMPRESA, value) Then
                _pER_ID_EMPRESA = value
                OnPropertyChanged("PER_ID_EMPRESA")
            End If
        End Set
    End Property

    Private _pER_ID_EMPRESA As String

#End Region
#Region "Propiedades de navegación"

    <DataMember()>
    Public Property SalidaCombustible() As SalidaCombustible
        Get
            Return _salidaCombustible
        End Get
        Set(ByVal value As SalidaCombustible)
            If _salidaCombustible IsNot value Then
                Dim previousValue As SalidaCombustible = _salidaCombustible
                _salidaCombustible = value
                FixupSalidaCombustible(previousValue)
                OnNavigationPropertyChanged("SalidaCombustible")
            End If
        End Set
    End Property

    Private _salidaCombustible As SalidaCombustible


    <DataMember()>
    Public Property Personas() As Personas
        Get
            Return _personas
        End Get
        Set(ByVal value As Personas)
            If _personas IsNot value Then
                Dim previousValue As Personas = _personas
                _personas = value
                FixupPersonas(previousValue)
                OnNavigationPropertyChanged("Personas")
            End If
        End Set
    End Property

    Private _personas As Personas


    <DataMember()>
    Public Property Entidad() As Entidad
        Get
            Return _entidad
        End Get
        Set(ByVal value As Entidad)
            If _entidad IsNot value Then
                Dim previousValue As Entidad = _entidad
                _entidad = value
                FixupEntidad(previousValue)
                OnNavigationPropertyChanged("Entidad")
            End If
        End Set
    End Property

    Private _entidad As Entidad


    <DataMember()>
    Public Property UbicacionTrabajo() As UbicacionTrabajo
        Get
            Return _ubicacionTrabajo
        End Get
        Set(ByVal value As UbicacionTrabajo)
            If _ubicacionTrabajo IsNot value Then
                Dim previousValue As UbicacionTrabajo = _ubicacionTrabajo
                _ubicacionTrabajo = value
                FixupUbicacionTrabajo(previousValue)
                OnNavigationPropertyChanged("UbicacionTrabajo")
            End If
        End Set
    End Property

    Private _ubicacionTrabajo As UbicacionTrabajo


    <DataMember()>
    Public Property RegistroEquipoDetalle() As TrackableCollection(Of RegistroEquipoDetalle)
        Get
            If _registroEquipoDetalle Is Nothing Then
                _registroEquipoDetalle = New TrackableCollection(Of RegistroEquipoDetalle)
                AddHandler _registroEquipoDetalle.CollectionChanged, AddressOf FixupRegistroEquipoDetalle
            End If
            Return _registroEquipoDetalle
        End Get
        Set(ByVal value As TrackableCollection(Of RegistroEquipoDetalle))
            If Not Object.ReferenceEquals(_registroEquipoDetalle, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking")
                End If
                If _registroEquipoDetalle IsNot Nothing Then
                    RemoveHandler _registroEquipoDetalle.CollectionChanged, AddressOf FixupRegistroEquipoDetalle
                End If
                _registroEquipoDetalle = value
                If _registroEquipoDetalle IsNot Nothing Then
                    AddHandler _registroEquipoDetalle.CollectionChanged, AddressOf FixupRegistroEquipoDetalle
                End If
                OnNavigationPropertyChanged("RegistroEquipoDetalle")
            End If
        End Set
    End Property

    Private _registroEquipoDetalle As TrackableCollection(Of RegistroEquipoDetalle)

    <DataMember()>
    Public Property Produccion() As Produccion
        Get
            Return _produccion
        End Get
        Set(ByVal value As Produccion)
            If _produccion IsNot value Then
                Dim previousValue As Produccion = _produccion
                _produccion = value
                FixupProduccion(previousValue)
                OnNavigationPropertyChanged("Produccion")
            End If
        End Set
    End Property

    Private _produccion As Produccion


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        SalidaCombustible = Nothing
        Personas = Nothing
        Entidad = Nothing
        UbicacionTrabajo = Nothing
        RegistroEquipoDetalle.Clear()
        Produccion = Nothing
    End Sub

#End Region
#Region "Corrección de asociación"

    Private Sub FixupSalidaCombustible(ByVal previousValue As SalidaCombustible, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.RegistroEquipo.Contains(Me) Then
            previousValue.RegistroEquipo.Remove(Me)
        End If

        If SalidaCombustible IsNot Nothing Then
            If Not SalidaCombustible.RegistroEquipo.Contains(Me) Then
                SalidaCombustible.RegistroEquipo.Add(Me)
            End If

            SCO_ID = SalidaCombustible.SCO_ID
        ElseIf Not skipKeys Then
            SCO_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("SalidaCombustible") AndAlso
                ChangeTracker.OriginalValues("SalidaCombustible") Is SalidaCombustible Then
                ChangeTracker.OriginalValues.Remove("SalidaCombustible")
            Else
                ChangeTracker.RecordOriginalValue("SalidaCombustible", previousValue)
            End If
            If SalidaCombustible IsNot Nothing AndAlso Not SalidaCombustible.ChangeTracker.ChangeTrackingEnabled Then
                SalidaCombustible.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupPersonas(ByVal previousValue As Personas, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.RegistroEquipo.Contains(Me) Then
            previousValue.RegistroEquipo.Remove(Me)
        End If

        If Personas IsNot Nothing Then
            If Not Personas.RegistroEquipo.Contains(Me) Then
                Personas.RegistroEquipo.Add(Me)
            End If

            PER_ID_OPERADOR = Personas.PER_ID
        ElseIf Not skipKeys Then
            PER_ID_OPERADOR = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Personas") AndAlso
                ChangeTracker.OriginalValues("Personas") Is Personas Then
                ChangeTracker.OriginalValues.Remove("Personas")
            Else
                ChangeTracker.RecordOriginalValue("Personas", previousValue)
            End If
            If Personas IsNot Nothing AndAlso Not Personas.ChangeTracker.ChangeTrackingEnabled Then
                Personas.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupEntidad(ByVal previousValue As Entidad, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.RegistroEquipo.Contains(Me) Then
            previousValue.RegistroEquipo.Remove(Me)
        End If

        If Entidad IsNot Nothing Then
            If Not Entidad.RegistroEquipo.Contains(Me) Then
                Entidad.RegistroEquipo.Add(Me)
            End If

            ENO_ID = Entidad.ENO_ID
        ElseIf Not skipKeys Then
            ENO_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Entidad") AndAlso
                ChangeTracker.OriginalValues("Entidad") Is Entidad Then
                ChangeTracker.OriginalValues.Remove("Entidad")
            Else
                ChangeTracker.RecordOriginalValue("Entidad", previousValue)
            End If
            If Entidad IsNot Nothing AndAlso Not Entidad.ChangeTracker.ChangeTrackingEnabled Then
                Entidad.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupUbicacionTrabajo(ByVal previousValue As UbicacionTrabajo, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.RegistroEquipo.Contains(Me) Then
            previousValue.RegistroEquipo.Remove(Me)
        End If

        If UbicacionTrabajo IsNot Nothing Then
            If Not UbicacionTrabajo.RegistroEquipo.Contains(Me) Then
                UbicacionTrabajo.RegistroEquipo.Add(Me)
            End If

            UTR_ID = UbicacionTrabajo.UTR_ID
        ElseIf Not skipKeys Then
            UTR_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("UbicacionTrabajo") AndAlso
                ChangeTracker.OriginalValues("UbicacionTrabajo") Is UbicacionTrabajo Then
                ChangeTracker.OriginalValues.Remove("UbicacionTrabajo")
            Else
                ChangeTracker.RecordOriginalValue("UbicacionTrabajo", previousValue)
            End If
            If UbicacionTrabajo IsNot Nothing AndAlso Not UbicacionTrabajo.ChangeTracker.ChangeTrackingEnabled Then
                UbicacionTrabajo.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupProduccion(ByVal previousValue As Produccion, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.RegistroEquipo.Contains(Me) Then
            previousValue.RegistroEquipo.Remove(Me)
        End If

        If Produccion IsNot Nothing Then
            If Not Produccion.RegistroEquipo.Contains(Me) Then
                Produccion.RegistroEquipo.Add(Me)
            End If

            PRO_ID = Produccion.PRO_ID
        ElseIf Not skipKeys Then
            PRO_ID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Produccion") AndAlso
                ChangeTracker.OriginalValues("Produccion") Is Produccion Then
                ChangeTracker.OriginalValues.Remove("Produccion")
            Else
                ChangeTracker.RecordOriginalValue("Produccion", previousValue)
            End If
            If Produccion IsNot Nothing AndAlso Not Produccion.ChangeTracker.ChangeTrackingEnabled Then
                Produccion.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupRegistroEquipoDetalle(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As RegistroEquipoDetalle In e.NewItems
                item.RegistroEquipo = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("RegistroEquipoDetalle", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As RegistroEquipoDetalle In e.OldItems
                If ReferenceEquals(item.RegistroEquipo, Me) Then
                    item.RegistroEquipo = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("RegistroEquipoDetalle", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
