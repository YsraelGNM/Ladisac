'------------------------------------------------------------------------------
' <auto-generated>
'     Este c칩digo se gener칩 a partir de una plantilla.
'
'     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
'     el c칩digo se vuelve a generar.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(ControlDescargaRuma))>
<KnownType(GetType(Despachos))>
<KnownType(GetType(Produccion))>
Partial Public Class KardexLote
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Propiedades primitivas"


	<DataContract()> Partial Public Structure PropertyNames
				public shared KAL_ID As string = "KAL_ID"
				public shared ART_ID As string = "ART_ID"
				public shared ALM_ID As string = "ALM_ID"
				public shared DMD_ID As string = "DMD_ID"
				public shared DRU_ID As string = "DRU_ID"
				public shared TDO_ID As string = "TDO_ID"
				public shared DTD_ID As string = "DTD_ID"
				public shared DES_SERIE As string = "DES_SERIE"
				public shared DES_NUMERO As string = "DES_NUMERO"
				public shared PRO_ID As string = "PRO_ID"
				public shared KAL_FECHA As string = "KAL_FECHA"
				public shared KAL_INGRESO As string = "KAL_INGRESO"
				public shared KAL_SALIDA As string = "KAL_SALIDA"
				public shared KAL_SALDO As string = "KAL_SALDO"
				public shared KAL_INGRESO_VAL As string = "KAL_INGRESO_VAL"
				public shared KAL_SALIDA_VAL As string = "KAL_SALIDA_VAL"
				public shared KAL_SALDO_VAL As string = "KAL_SALDO_VAL"
				public shared KAL_COSTO_PROMEDIO As string = "KAL_COSTO_PROMEDIO"
		    End Structure
	



    <DataMember()>
    Public Property KAL_ID() As Integer
        Get
            Return _kAL_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_kAL_ID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("La propiedad 'KAL_ID' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.")
                End If
                _kAL_ID = value
                OnPropertyChanged("KAL_ID")
            End If
        End Set
    End Property

    Private _kAL_ID As Integer

    <DataMember()>
    Public Property ART_ID() As String
        Get
            Return _aRT_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_aRT_ID, value) Then
                _aRT_ID = value
                OnPropertyChanged("ART_ID")
            End If
        End Set
    End Property

    Private _aRT_ID As String

    <DataMember()>
    Public Property ALM_ID() As Integer
        Get
            Return _aLM_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_aLM_ID, value) Then
                _aLM_ID = value
                OnPropertyChanged("ALM_ID")
            End If
        End Set
    End Property

    Private _aLM_ID As Integer

    <DataMember()>
    Public Property DMD_ID() As Nullable(Of Integer)
        Get
            Return _dMD_ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_dMD_ID, value) Then
                _dMD_ID = value
                OnPropertyChanged("DMD_ID")
            End If
        End Set
    End Property

    Private _dMD_ID As Nullable(Of Integer)

    <DataMember()>
    Public Property DRU_ID() As Integer
        Get
            Return _dRU_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_dRU_ID, value) Then
                ChangeTracker.RecordOriginalValue("DRU_ID", _dRU_ID)
                If Not IsDeserializing Then
                    If ControlDescargaRuma IsNot Nothing AndAlso Not Equals(ControlDescargaRuma.DRU_ID, value) Then
                        ControlDescargaRuma = Nothing
                    End If
                End If
                _dRU_ID = value
                OnPropertyChanged("DRU_ID")
            End If
        End Set
    End Property

    Private _dRU_ID As Integer

    <DataMember()>
    Public Property TDO_ID() As String
        Get
            Return _tDO_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_tDO_ID, value) Then
                ChangeTracker.RecordOriginalValue("TDO_ID", _tDO_ID)
                If Not IsDeserializing Then
                    If Despachos IsNot Nothing AndAlso Not Equals(Despachos.TDO_ID, value) Then
                        Dim previousValue As Despachos = _despachos
                        _despachos = Nothing
                        FixupDespachos(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("Despachos")
                    End If
                End If
                _tDO_ID = value
                OnPropertyChanged("TDO_ID")
            End If
        End Set
    End Property

    Private _tDO_ID As String

    <DataMember()>
    Public Property DTD_ID() As String
        Get
            Return _dTD_ID
        End Get
        Set(ByVal value As String)
            If Not Equals(_dTD_ID, value) Then
                ChangeTracker.RecordOriginalValue("DTD_ID", _dTD_ID)
                If Not IsDeserializing Then
                    If Despachos IsNot Nothing AndAlso Not Equals(Despachos.DTD_ID, value) Then
                        Dim previousValue As Despachos = _despachos
                        _despachos = Nothing
                        FixupDespachos(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("Despachos")
                    End If
                End If
                _dTD_ID = value
                OnPropertyChanged("DTD_ID")
            End If
        End Set
    End Property

    Private _dTD_ID As String

    <DataMember()>
    Public Property DES_SERIE() As String
        Get
            Return _dES_SERIE
        End Get
        Set(ByVal value As String)
            If Not Equals(_dES_SERIE, value) Then
                ChangeTracker.RecordOriginalValue("DES_SERIE", _dES_SERIE)
                If Not IsDeserializing Then
                    If Despachos IsNot Nothing AndAlso Not Equals(Despachos.DES_SERIE, value) Then
                        Dim previousValue As Despachos = _despachos
                        _despachos = Nothing
                        FixupDespachos(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("Despachos")
                    End If
                End If
                _dES_SERIE = value
                OnPropertyChanged("DES_SERIE")
            End If
        End Set
    End Property

    Private _dES_SERIE As String

    <DataMember()>
    Public Property DES_NUMERO() As String
        Get
            Return _dES_NUMERO
        End Get
        Set(ByVal value As String)
            If Not Equals(_dES_NUMERO, value) Then
                ChangeTracker.RecordOriginalValue("DES_NUMERO", _dES_NUMERO)
                If Not IsDeserializing Then
                    If Despachos IsNot Nothing AndAlso Not Equals(Despachos.DES_NUMERO, value) Then
                        Dim previousValue As Despachos = _despachos
                        _despachos = Nothing
                        FixupDespachos(previousValue, skipKeys:=True)
                        OnNavigationPropertyChanged("Despachos")
                    End If
                End If
                _dES_NUMERO = value
                OnPropertyChanged("DES_NUMERO")
            End If
        End Set
    End Property

    Private _dES_NUMERO As String

    <DataMember()>
    Public Property PRO_ID() As Integer
        Get
            Return _pRO_ID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_pRO_ID, value) Then
                ChangeTracker.RecordOriginalValue("PRO_ID", _pRO_ID)
                If Not IsDeserializing Then
                    If Produccion IsNot Nothing AndAlso Not Equals(Produccion.PRO_ID, value) Then
                        Produccion = Nothing
                    End If
                End If
                _pRO_ID = value
                OnPropertyChanged("PRO_ID")
            End If
        End Set
    End Property

    Private _pRO_ID As Integer

    <DataMember()>
    Public Property KAL_FECHA() As Date
        Get
            Return _kAL_FECHA
        End Get
        Set(ByVal value As Date)
            If Not Equals(_kAL_FECHA, value) Then
                _kAL_FECHA = value
                OnPropertyChanged("KAL_FECHA")
            End If
        End Set
    End Property

    Private _kAL_FECHA As Date

    <DataMember()>
    Public Property KAL_INGRESO() As Decimal
        Get
            Return _kAL_INGRESO
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_kAL_INGRESO, value) Then
                _kAL_INGRESO = value
                OnPropertyChanged("KAL_INGRESO")
            End If
        End Set
    End Property

    Private _kAL_INGRESO As Decimal

    <DataMember()>
    Public Property KAL_SALIDA() As Decimal
        Get
            Return _kAL_SALIDA
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_kAL_SALIDA, value) Then
                _kAL_SALIDA = value
                OnPropertyChanged("KAL_SALIDA")
            End If
        End Set
    End Property

    Private _kAL_SALIDA As Decimal

    <DataMember()>
    Public Property KAL_SALDO() As Decimal
        Get
            Return _kAL_SALDO
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_kAL_SALDO, value) Then
                _kAL_SALDO = value
                OnPropertyChanged("KAL_SALDO")
            End If
        End Set
    End Property

    Private _kAL_SALDO As Decimal

    <DataMember()>
    Public Property KAL_INGRESO_VAL() As Decimal
        Get
            Return _kAL_INGRESO_VAL
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_kAL_INGRESO_VAL, value) Then
                _kAL_INGRESO_VAL = value
                OnPropertyChanged("KAL_INGRESO_VAL")
            End If
        End Set
    End Property

    Private _kAL_INGRESO_VAL As Decimal

    <DataMember()>
    Public Property KAL_SALIDA_VAL() As Decimal
        Get
            Return _kAL_SALIDA_VAL
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_kAL_SALIDA_VAL, value) Then
                _kAL_SALIDA_VAL = value
                OnPropertyChanged("KAL_SALIDA_VAL")
            End If
        End Set
    End Property

    Private _kAL_SALIDA_VAL As Decimal

    <DataMember()>
    Public Property KAL_SALDO_VAL() As Nullable(Of Decimal)
        Get
            Return _kAL_SALDO_VAL
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_kAL_SALDO_VAL, value) Then
                _kAL_SALDO_VAL = value
                OnPropertyChanged("KAL_SALDO_VAL")
            End If
        End Set
    End Property

    Private _kAL_SALDO_VAL As Nullable(Of Decimal)

    <DataMember()>
    Public Property KAL_COSTO_PROMEDIO() As Nullable(Of Decimal)
        Get
            Return _kAL_COSTO_PROMEDIO
        End Get
        Set(ByVal value As Nullable(Of Decimal))
            If Not Equals(_kAL_COSTO_PROMEDIO, value) Then
                _kAL_COSTO_PROMEDIO = value
                OnPropertyChanged("KAL_COSTO_PROMEDIO")
            End If
        End Set
    End Property

    Private _kAL_COSTO_PROMEDIO As Nullable(Of Decimal)

#End Region
#Region "Propiedades de navegaci칩n"

    <DataMember()>
    Public Property ControlDescargaRuma() As ControlDescargaRuma
        Get
            Return _controlDescargaRuma
        End Get
        Set(ByVal value As ControlDescargaRuma)
            If _controlDescargaRuma IsNot value Then
                Dim previousValue As ControlDescargaRuma = _controlDescargaRuma
                _controlDescargaRuma = value
                FixupControlDescargaRuma(previousValue)
                OnNavigationPropertyChanged("ControlDescargaRuma")
            End If
        End Set
    End Property

    Private _controlDescargaRuma As ControlDescargaRuma


    <DataMember()>
    Public Property Despachos() As Despachos
        Get
            Return _despachos
        End Get
        Set(ByVal value As Despachos)
            If _despachos IsNot value Then
                Dim previousValue As Despachos = _despachos
                _despachos = value
                FixupDespachos(previousValue)
                OnNavigationPropertyChanged("Despachos")
            End If
        End Set
    End Property

    Private _despachos As Despachos


    <DataMember()>
    Public Property Produccion() As Produccion
        Get
            Return _produccion
        End Get
        Set(ByVal value As Produccion)
            If _produccion IsNot value Then
                Dim previousValue As Produccion = _produccion
                _produccion = value
                FixupProduccion(previousValue)
                OnNavigationPropertyChanged("Produccion")
            End If
        End Set
    End Property

    Private _produccion As Produccion


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        ControlDescargaRuma = Nothing
        Despachos = Nothing
        Produccion = Nothing
    End Sub

#End Region
#Region "Correcci칩n de asociaci칩n"

    Private Sub FixupControlDescargaRuma(ByVal previousValue As ControlDescargaRuma)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.KardexLote.Contains(Me) Then
            previousValue.KardexLote.Remove(Me)
        End If

        If ControlDescargaRuma IsNot Nothing Then
            If Not ControlDescargaRuma.KardexLote.Contains(Me) Then
                ControlDescargaRuma.KardexLote.Add(Me)
            End If

            DRU_ID = ControlDescargaRuma.DRU_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("ControlDescargaRuma") AndAlso
                ChangeTracker.OriginalValues("ControlDescargaRuma") Is ControlDescargaRuma Then
                ChangeTracker.OriginalValues.Remove("ControlDescargaRuma")
            Else
                ChangeTracker.RecordOriginalValue("ControlDescargaRuma", previousValue)
            End If
            If ControlDescargaRuma IsNot Nothing AndAlso Not ControlDescargaRuma.ChangeTracker.ChangeTrackingEnabled Then
                ControlDescargaRuma.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupDespachos(ByVal previousValue As Despachos, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.KardexLote.Contains(Me) Then
            previousValue.KardexLote.Remove(Me)
        End If

        If Despachos IsNot Nothing Then
            If Not Despachos.KardexLote.Contains(Me) Then
                Despachos.KardexLote.Add(Me)
            End If

            TDO_ID = Despachos.TDO_ID
            DTD_ID = Despachos.DTD_ID
            DES_SERIE = Despachos.DES_SERIE
            DES_NUMERO = Despachos.DES_NUMERO
        ElseIf Not skipKeys Then
            TDO_ID = Nothing
            DTD_ID = Nothing
            DES_SERIE = Nothing
            DES_NUMERO = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Despachos") AndAlso
                ChangeTracker.OriginalValues("Despachos") Is Despachos Then
                ChangeTracker.OriginalValues.Remove("Despachos")
            Else
                ChangeTracker.RecordOriginalValue("Despachos", previousValue)
            End If
            If Despachos IsNot Nothing AndAlso Not Despachos.ChangeTracker.ChangeTrackingEnabled Then
                Despachos.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupProduccion(ByVal previousValue As Produccion)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.KardexLote.Contains(Me) Then
            previousValue.KardexLote.Remove(Me)
        End If

        If Produccion IsNot Nothing Then
            If Not Produccion.KardexLote.Contains(Me) Then
                Produccion.KardexLote.Add(Me)
            End If

            PRO_ID = Produccion.PRO_ID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Produccion") AndAlso
                ChangeTracker.OriginalValues("Produccion") Is Produccion Then
                ChangeTracker.OriginalValues.Remove("Produccion")
            Else
                ChangeTracker.RecordOriginalValue("Produccion", previousValue)
            End If
            If Produccion IsNot Nothing AndAlso Not Produccion.ChangeTracker.ChangeTrackingEnabled Then
                Produccion.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
